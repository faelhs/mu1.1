; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\EventManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gEventManager@@3VCEventManager@@A		; gEventManager
_BSS	SEGMENT
?gEventManager@@3VCEventManager@@A DB 078H DUP (?)	; gEventManager
_BSS	ENDS
PUBLIC	??_C@_0BP@JHEOPDJG@?$FL?$CFs?$FN?5Aguarde?0?5voc?j?5sera?5movido?$AA@ ; `string'
PUBLIC	??_C@_0CA@GFOBJAPD@?$FL?$CFs?$FN?5Voc?j?5j?a?5esta?5neste?5evento?4?$AA@ ; `string'
PUBLIC	??_C@_0BM@HJHKFKLD@?$FL?$CFs?$FN?5Nenhum?5evento?5iniciado?$AA@ ; `string'
PUBLIC	?CommandEnter@CEventManager@@QAEXH@Z		; CEventManager::CommandEnter
EXTRN	?MsgUser@@YAXHHPADZZ:PROC			; MsgUser
EXTRN	?IsCheck@CCommands@@QAE_NPAUOBJECTSTRUCT@@H@Z:PROC ; CCommands::IsCheck
EXTRN	?gCommands@@3VCCommands@@A:BYTE			; gCommands
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
;	COMDAT ??_C@_0BP@JHEOPDJG@?$FL?$CFs?$FN?5Aguarde?0?5voc?j?5sera?5movido?$AA@
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\eventmanager.cpp
CONST	SEGMENT
??_C@_0BP@JHEOPDJG@?$FL?$CFs?$FN?5Aguarde?0?5voc?j?5sera?5movido?$AA@ DB '['
	DB	'%s] Aguarde, voc', 0eaH, ' sera movido', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GFOBJAPD@?$FL?$CFs?$FN?5Voc?j?5j?a?5esta?5neste?5evento?4?$AA@
CONST	SEGMENT
??_C@_0CA@GFOBJAPD@?$FL?$CFs?$FN?5Voc?j?5j?a?5esta?5neste?5evento?4?$AA@ DB '['
	DB	'%s] Voc', 0eaH, ' j', 0e1H, ' esta neste evento.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HJHKFKLD@?$FL?$CFs?$FN?5Nenhum?5evento?5iniciado?$AA@
CONST	SEGMENT
??_C@_0BM@HJHKFKLD@?$FL?$CFs?$FN?5Nenhum?5evento?5iniciado?$AA@ DB '[%s] '
	DB	'Nenhum evento iniciado', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CommandEnter@CEventManager@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?CommandEnter@CEventManager@@QAEXH@Z PROC		; CEventManager::CommandEnter, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 30   : 	if(gCommands.IsCheck(&gObj[aIndex], COMMAND_EVENT) == false)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00007	56		 push	 esi
  00008	8b f3		 mov	 esi, ebx
  0000a	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  00010	57		 push	 edi
  00011	6a 0c		 push	 12			; 0000000cH
  00013	8d 86 00 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi]
  00019	8b f9		 mov	 edi, ecx
  0001b	50		 push	 eax
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gCommands@@3VCCommands@@A ; gCommands
  00021	e8 00 00 00 00	 call	 ?IsCheck@CCommands@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CCommands::IsCheck
  00026	84 c0		 test	 al, al
  00028	74 63		 je	 SHORT $LN4@CommandEnt

; 31   : 	{
; 32   : 		return;
; 33   : 	}
; 34   : 	// ---
; 35   : 	if(!this->m_Data.bEventOn)

  0002a	80 7f 75 00	 cmp	 BYTE PTR [edi+117], 0
  0002e	75 1e		 jne	 SHORT $LN2@CommandEnt

; 36   : 	{
; 37   : 		MsgUser(aIndex, 1, "[%s] Nenhum evento iniciado", gObj[aIndex].Name);

  00030	8d 8e 6f 00 00
	00		 lea	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+111]
  00036	51		 push	 ecx
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HJHKFKLD@?$FL?$CFs?$FN?5Nenhum?5evento?5iniciado?$AA@

; 44   : 		return;
; 45   : 	}
; 46   : 	// ---
; 47   : 	this->m_Data.bMove = true;
; 48   : 	// --- 
; 49   : 	MsgUser(aIndex, 1, "[%s] Aguarde, você sera movido", gObj[aIndex].Name);

  0003c	6a 01		 push	 1
  0003e	53		 push	 ebx
  0003f	e8 00 00 00 00	 call	 ?MsgUser@@YAXHHPADZZ	; MsgUser
  00044	83 c4 10	 add	 esp, 16			; 00000010H
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 50   : }

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN2@CommandEnt:

; 38   : 		return;
; 39   : 	}
; 40   : 	// ---
; 41   : 	if(this->m_Data.bMove != false)

  0004e	80 7f 74 00	 cmp	 BYTE PTR [edi+116], 0
  00052	74 1e		 je	 SHORT $LN1@CommandEnt

; 42   : 	{
; 43   : 		MsgUser(aIndex, 1, "[%s] Você já esta neste evento.", gObj[aIndex].Name);

  00054	8d 96 6f 00 00
	00		 lea	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+111]
  0005a	52		 push	 edx
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GFOBJAPD@?$FL?$CFs?$FN?5Voc?j?5j?a?5esta?5neste?5evento?4?$AA@

; 44   : 		return;
; 45   : 	}
; 46   : 	// ---
; 47   : 	this->m_Data.bMove = true;
; 48   : 	// --- 
; 49   : 	MsgUser(aIndex, 1, "[%s] Aguarde, você sera movido", gObj[aIndex].Name);

  00060	6a 01		 push	 1
  00062	53		 push	 ebx
  00063	e8 00 00 00 00	 call	 ?MsgUser@@YAXHHPADZZ	; MsgUser
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx

; 50   : }

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
$LN1@CommandEnt:

; 44   : 		return;
; 45   : 	}
; 46   : 	// ---
; 47   : 	this->m_Data.bMove = true;
; 48   : 	// --- 
; 49   : 	MsgUser(aIndex, 1, "[%s] Aguarde, você sera movido", gObj[aIndex].Name);

  00072	8d 86 6f 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+111]
  00078	50		 push	 eax
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JHEOPDJG@?$FL?$CFs?$FN?5Aguarde?0?5voc?j?5sera?5movido?$AA@
  0007e	6a 01		 push	 1
  00080	53		 push	 ebx
  00081	c6 47 74 01	 mov	 BYTE PTR [edi+116], 1
  00085	e8 00 00 00 00	 call	 ?MsgUser@@YAXHHPADZZ	; MsgUser
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@CommandEnt:
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx

; 50   : }

  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?CommandEnter@CEventManager@@QAEXH@Z ENDP		; CEventManager::CommandEnter
_TEXT	ENDS
PUBLIC	??_C@_0BK@JEHGMOFA@?$FLSistema?$FN?5Move?5?$CFs?5fechou?$CB?$AA@ ; `string'
PUBLIC	??_C@_0CB@OHJEAJBA@?$FLSistema?$FN?5Move?5?$CFs?5fecha?5em?5?$CFd?5?$CFs@ ; `string'
PUBLIC	??_C@_08FBGPKGN@Segundo?4?$AA@			; `string'
PUBLIC	??_C@_09FMGFLPNA@Segundos?4?$AA@		; `string'
PUBLIC	?TimeTick@CEventManager@@SAXPAX@Z		; CEventManager::TimeTick
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?MsgAllUser@@YAXHPADZZ:PROC			; MsgAllUser
EXTRN	__imp__Sleep@4:PROC
;	COMDAT ??_C@_0BK@JEHGMOFA@?$FLSistema?$FN?5Move?5?$CFs?5fechou?$CB?$AA@
CONST	SEGMENT
??_C@_0BK@JEHGMOFA@?$FLSistema?$FN?5Move?5?$CFs?5fechou?$CB?$AA@ DB '[Sis'
	DB	'tema] Move %s fechou!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OHJEAJBA@?$FLSistema?$FN?5Move?5?$CFs?5fecha?5em?5?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_0CB@OHJEAJBA@?$FLSistema?$FN?5Move?5?$CFs?5fecha?5em?5?$CFd?5?$CFs@ DB '['
	DB	'Sistema] Move %s fecha em %d %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBGPKGN@Segundo?4?$AA@
CONST	SEGMENT
??_C@_08FBGPKGN@Segundo?4?$AA@ DB 'Segundo.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FMGFLPNA@Segundos?4?$AA@
CONST	SEGMENT
??_C@_09FMGFLPNA@Segundos?4?$AA@ DB 'Segundos.', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?TimeTick@CEventManager@@SAXPAX@Z
_TEXT	SEGMENT
_lpParam$ = 8						; size = 4
?TimeTick@CEventManager@@SAXPAX@Z PROC			; CEventManager::TimeTick, COMDAT

; 53   : {

  00000	56		 push	 esi

; 54   : 	int Delay = gEventManager.m_Data.iTime;

  00001	8b 35 70 00 00
	00		 mov	 esi, DWORD PTR ?gEventManager@@3VCEventManager@@A+112
  00007	57		 push	 edi

; 55   : 	// ---
; 56   : 	while(Delay > 1)

  00008	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__Sleep@4
  0000e	83 fe 01	 cmp	 esi, 1
  00011	7e 32		 jle	 SHORT $LN5@TimeTick
$LL6@TimeTick:

; 57   : 	{
; 58   : 		Sleep(1 * 1000);

  00013	68 e8 03 00 00	 push	 1000			; 000003e8H
  00018	ff d7		 call	 edi

; 59   : 		Delay--;

  0001a	4e		 dec	 esi

; 60   : 		MsgAllUser(0, "[Sistema] Move %s fecha em %d %s", gEventManager.m_Data.szEnter, Delay, (Delay > 1) ? "Segundos." : "Segundo.");

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09FMGFLPNA@Segundos?4?$AA@
  00020	83 fe 01	 cmp	 esi, 1
  00023	7f 05		 jg	 SHORT $LN10@TimeTick
  00025	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08FBGPKGN@Segundo?4?$AA@
$LN10@TimeTick:
  0002a	50		 push	 eax
  0002b	56		 push	 esi
  0002c	68 32 00 00 00	 push	 OFFSET ?gEventManager@@3VCEventManager@@A+50
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OHJEAJBA@?$FLSistema?$FN?5Move?5?$CFs?5fecha?5em?5?$CFd?5?$CFs@
  00036	6a 00		 push	 0
  00038	e8 00 00 00 00	 call	 ?MsgAllUser@@YAXHPADZZ	; MsgAllUser
  0003d	83 c4 14	 add	 esp, 20			; 00000014H
  00040	83 fe 01	 cmp	 esi, 1
  00043	7f ce		 jg	 SHORT $LL6@TimeTick
$LN5@TimeTick:

; 61   : 	}
; 62   : 	// ---
; 63   : 	Sleep(1 * 1000);

  00045	68 e8 03 00 00	 push	 1000			; 000003e8H
  0004a	ff d7		 call	 edi

; 64   : 	// ---
; 65   : 	MsgAllUser(0, "[Sistema] Move %s fechou!", gEventManager.m_Data.szEnter);

  0004c	68 32 00 00 00	 push	 OFFSET ?gEventManager@@3VCEventManager@@A+50
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JEHGMOFA@?$FLSistema?$FN?5Move?5?$CFs?5fechou?$CB?$AA@
  00056	6a 00		 push	 0
  00058	e8 00 00 00 00	 call	 ?MsgAllUser@@YAXHPADZZ	; MsgAllUser
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : 	// ---
; 67   : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00060	be 00 19 00 00	 mov	 esi, 6400		; 00001900H
$LL4@TimeTick:

; 68   : 	{
; 69   : 		if(gEventManager.m_Data.bMove == true)

  00065	80 3d 74 00 00
	00 01		 cmp	 BYTE PTR ?gEventManager@@3VCEventManager@@A+116, 1
  0006c	75 1d		 jne	 SHORT $LN3@TimeTick

; 70   : 		{
; 71   : 			gObjTeleport(i, gEventManager.m_Data.iMap, gEventManager.m_Data.iCordX, gEventManager.m_Data.iCordY);

  0006e	a1 6c 00 00 00	 mov	 eax, DWORD PTR ?gEventManager@@3VCEventManager@@A+108
  00073	8b 0d 68 00 00
	00		 mov	 ecx, DWORD PTR ?gEventManager@@3VCEventManager@@A+104
  00079	8b 15 64 00 00
	00		 mov	 edx, DWORD PTR ?gEventManager@@3VCEventManager@@A+100
  0007f	50		 push	 eax
  00080	51		 push	 ecx
  00081	52		 push	 edx
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  00088	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@TimeTick:

; 66   : 	// ---
; 67   : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  0008b	46		 inc	 esi
  0008c	81 fe e8 1c 00
	00		 cmp	 esi, 7400		; 00001ce8H
  00092	7c d1		 jl	 SHORT $LL4@TimeTick

; 72   : 		}
; 73   : 	}
; 74   : 	// ---
; 75   : 	gEventManager.m_Data.bEventOn = false;

  00094	5f		 pop	 edi
  00095	66 c7 05 74 00
	00 00 00 00	 mov	 WORD PTR ?gEventManager@@3VCEventManager@@A+116, 0
  0009e	5e		 pop	 esi

; 76   : 	gEventManager.m_Data.bMove = false;
; 77   : }

  0009f	c3		 ret	 0
?TimeTick@CEventManager@@SAXPAX@Z ENDP			; CEventManager::TimeTick
_TEXT	ENDS
PUBLIC	??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BO@FLJMONEI@Uso?3?5?1event?5?$DMtime?$DO?$DMmap?$DO?$DMx?$DO?$DMy?$DO?$AA@ ; `string'
PUBLIC	?CommandInit@CEventManager@@QAEXHPAD@Z		; CEventManager::CommandInit
EXTRN	__beginthread:PROC
EXTRN	_sscanf:PROC
;	COMDAT ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FLJMONEI@Uso?3?5?1event?5?$DMtime?$DO?$DMmap?$DO?$DMx?$DO?$DMy?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@FLJMONEI@Uso?3?5?1event?5?$DMtime?$DO?$DMmap?$DO?$DMx?$DO?$DMy?$DO?$AA@ DB 'U'
	DB	'so: /event <time><map><x><y>', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CommandInit@CEventManager@@QAEXHPAD@Z
_TEXT	SEGMENT
_iCordY$ = -8						; size = 4
_iTime$ = -4						; size = 4
_iCordX$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_iMap$ = 12						; size = 4
_szMsg$ = 12						; size = 4
?CommandInit@CEventManager@@QAEXHPAD@Z PROC		; CEventManager::CommandInit, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi

; 8    : 	int iMap, iCordX, iCordY, iTime = 0;
; 9    : 	// ---
; 10   : 	if(strlen(szMsg) <= 3)

  00008	8b 7d 0c	 mov	 edi, DWORD PTR _szMsg$[ebp]
  0000b	8b c7		 mov	 eax, edi
  0000d	8b f1		 mov	 esi, ecx
  0000f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iTime$[ebp], 0
  00016	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL4@CommandIni:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL4@CommandIni
  00027	2b c2		 sub	 eax, edx
  00029	83 f8 03	 cmp	 eax, 3
  0002c	77 1b		 ja	 SHORT $LN1@CommandIni

; 11   : 	{
; 12   : 		MsgUser(aIndex, 1, "Uso: /event <time><map><x><y>");

  0002e	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FLJMONEI@Uso?3?5?1event?5?$DMtime?$DO?$DMmap?$DO?$DMx?$DO?$DMy?$DO?$AA@
  00036	6a 01		 push	 1
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?MsgUser@@YAXHHPADZZ	; MsgUser
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi

; 26   : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN1@CommandIni:

; 13   : 		return;
; 14   : 	}
; 15   : 	// ---
; 16   : 	sscanf(szMsg, "%d %d %d %d", &iTime, &iMap, &iCordX, &iCordY);

  00049	8d 4d f8	 lea	 ecx, DWORD PTR _iCordY$[ebp]
  0004c	51		 push	 ecx
  0004d	8d 55 08	 lea	 edx, DWORD PTR _iCordX$[ebp]
  00050	52		 push	 edx
  00051	8d 45 0c	 lea	 eax, DWORD PTR _iMap$[ebp]
  00054	50		 push	 eax
  00055	8d 4d fc	 lea	 ecx, DWORD PTR _iTime$[ebp]
  00058	51		 push	 ecx
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 _sscanf

; 17   : 	// ---
; 18   : 	this->m_Data.iTime = iTime;

  00064	8b 55 fc	 mov	 edx, DWORD PTR _iTime$[ebp]

; 19   : 	this->m_Data.iMap = iMap;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _iMap$[ebp]

; 20   : 	this->m_Data.iCordX = iCordX;

  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _iCordX$[ebp]

; 21   : 	this->m_Data.iCordY = iCordY;
; 22   : 	// ---
; 23   : 	this->m_Data.bEventOn = true;
; 24   : 	// ---
; 25   : 	_beginthread(this->TimeTick, NULL, NULL);

  0006d	6a 00		 push	 0
  0006f	89 56 70	 mov	 DWORD PTR [esi+112], edx
  00072	8b 55 f8	 mov	 edx, DWORD PTR _iCordY$[ebp]
  00075	6a 00		 push	 0
  00077	68 00 00 00 00	 push	 OFFSET ?TimeTick@CEventManager@@SAXPAX@Z ; CEventManager::TimeTick
  0007c	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0007f	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  00082	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  00085	c6 46 75 01	 mov	 BYTE PTR [esi+117], 1
  00089	e8 00 00 00 00	 call	 __beginthread
  0008e	83 c4 24	 add	 esp, 36			; 00000024H
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi

; 26   : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
?CommandInit@CEventManager@@QAEXHPAD@Z ENDP		; CEventManager::CommandInit
_TEXT	ENDS
END
