; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\zzzmathlib.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__real@3fe0000000000000
PUBLIC	?Q_rint@@YAMM@Z					; Q_rint
EXTRN	__fltused:DWORD
EXTRN	_floor:PROC
;	COMDAT __real@3fe0000000000000
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\zzzmathlib.cpp
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Q_rint@@YAMM@Z
_TEXT	SEGMENT
tv70 = 8						; size = 4
_in$ = 8						; size = 4
?Q_rint@@YAMM@Z PROC					; Q_rint, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	return floor(in + 0.5);

  00003	d9 45 08	 fld	 DWORD PTR _in$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  0000f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00012	e8 00 00 00 00	 call	 _floor
  00017	d9 5d 08	 fstp	 DWORD PTR tv70[ebp]
  0001a	83 c4 08	 add	 esp, 8
  0001d	d9 45 08	 fld	 DWORD PTR tv70[ebp]

; 46   : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?Q_rint@@YAMM@Z ENDP					; Q_rint
_TEXT	ENDS
PUBLIC	?VectorMA@@YAXQAMM00@Z				; VectorMA
; Function compile flags: /Ogtp
;	COMDAT ?VectorMA@@YAXQAMM00@Z
_TEXT	SEGMENT
_va$ = 8						; size = 4
_scale$ = 12						; size = 4
_vb$ = 16						; size = 4
_vc$ = 20						; size = 4
?VectorMA@@YAXQAMM00@Z PROC				; VectorMA, COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 50   : 	vc[0] = va[0] + scale*vb[0];

  00003	8b 45 10	 mov	 eax, DWORD PTR _vb$[ebp]
  00006	d9 00		 fld	 DWORD PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _va$[ebp]
  0000b	d9 45 0c	 fld	 DWORD PTR _scale$[ebp]
  0000e	8b 55 14	 mov	 edx, DWORD PTR _vc$[ebp]
  00011	d9 c0		 fld	 ST(0)
  00013	de ca		 fmulp	 ST(2), ST(0)
  00015	d9 01		 fld	 DWORD PTR [ecx]
  00017	de c2		 faddp	 ST(2), ST(0)
  00019	d9 c9		 fxch	 ST(1)
  0001b	d9 1a		 fstp	 DWORD PTR [edx]

; 51   : 	vc[1] = va[1] + scale*vb[1];

  0001d	d9 40 04	 fld	 DWORD PTR [eax+4]
  00020	d8 c9		 fmul	 ST(0), ST(1)
  00022	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  00025	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 52   : 	vc[2] = va[2] + scale*vb[2];

  00028	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0002b	d8 41 08	 fadd	 DWORD PTR [ecx+8]
  0002e	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 53   : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?VectorMA@@YAXQAMM00@Z ENDP				; VectorMA
_TEXT	ENDS
PUBLIC	?CrossProduct@@YAXQAM00@Z			; CrossProduct
; Function compile flags: /Ogtp
;	COMDAT ?CrossProduct@@YAXQAM00@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_cross$ = 16						; size = 4
?CrossProduct@@YAXQAM00@Z PROC				; CrossProduct, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	cross[0] = v1[1]*v2[2] - v1[2]*v2[1];

  00003	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00009	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000c	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0000f	8b 55 10	 mov	 edx, DWORD PTR _cross$[ebp]
  00012	d9 40 08	 fld	 DWORD PTR [eax+8]
  00015	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00018	de e9		 fsubp	 ST(1), ST(0)
  0001a	d9 1a		 fstp	 DWORD PTR [edx]

; 58   : 	cross[1] = v1[2]*v2[0] - v1[0]*v2[2];

  0001c	d9 40 08	 fld	 DWORD PTR [eax+8]
  0001f	d8 09		 fmul	 DWORD PTR [ecx]
  00021	d9 00		 fld	 DWORD PTR [eax]
  00023	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00026	de e9		 fsubp	 ST(1), ST(0)
  00028	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 59   : 	cross[2] = v1[0]*v2[1] - v1[1]*v2[0];

  0002b	d9 00		 fld	 DWORD PTR [eax]
  0002d	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00030	d9 01		 fld	 DWORD PTR [ecx]
  00032	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00035	de e9		 fsubp	 ST(1), ST(0)
  00037	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 60   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?CrossProduct@@YAXQAM00@Z ENDP				; CrossProduct
_TEXT	ENDS
PUBLIC	?_DotProduct@@YAMQAM0@Z				; _DotProduct
; Function compile flags: /Ogtp
;	COMDAT ?_DotProduct@@YAMQAM0@Z
_TEXT	SEGMENT
tv156 = 8						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?_DotProduct@@YAMQAM0@Z PROC				; _DotProduct, COMDAT

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : 	return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];

  00003	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00009	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000c	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0000f	d9 00		 fld	 DWORD PTR [eax]
  00011	d8 09		 fmul	 DWORD PTR [ecx]
  00013	de c1		 faddp	 ST(1), ST(0)
  00015	d9 40 08	 fld	 DWORD PTR [eax+8]
  00018	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0001b	de c1		 faddp	 ST(1), ST(0)
  0001d	d9 5d 08	 fstp	 DWORD PTR tv156[ebp]
  00020	d9 45 08	 fld	 DWORD PTR tv156[ebp]

; 65   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?_DotProduct@@YAMQAM0@Z ENDP				; _DotProduct
_TEXT	ENDS
PUBLIC	?_VectorSubtract@@YAXQAM00@Z			; _VectorSubtract
; Function compile flags: /Ogtp
;	COMDAT ?_VectorSubtract@@YAXQAM00@Z
_TEXT	SEGMENT
_va$ = 8						; size = 4
_vb$ = 12						; size = 4
_out$ = 16						; size = 4
?_VectorSubtract@@YAXQAM00@Z PROC			; _VectorSubtract, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   : 	out[0] = va[0]-vb[0];

  00003	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  00006	d9 00		 fld	 DWORD PTR [eax]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  0000b	d8 21		 fsub	 DWORD PTR [ecx]
  0000d	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00010	d9 1a		 fstp	 DWORD PTR [edx]

; 70   : 	out[1] = va[1]-vb[1];

  00012	d9 40 04	 fld	 DWORD PTR [eax+4]
  00015	d8 61 04	 fsub	 DWORD PTR [ecx+4]
  00018	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 71   : 	out[2] = va[2]-vb[2];

  0001b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0001e	d8 61 08	 fsub	 DWORD PTR [ecx+8]
  00021	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 72   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?_VectorSubtract@@YAXQAM00@Z ENDP			; _VectorSubtract
_TEXT	ENDS
PUBLIC	?_VectorAdd@@YAXQAM00@Z				; _VectorAdd
; Function compile flags: /Ogtp
;	COMDAT ?_VectorAdd@@YAXQAM00@Z
_TEXT	SEGMENT
_va$ = 8						; size = 4
_vb$ = 12						; size = 4
_out$ = 16						; size = 4
?_VectorAdd@@YAXQAM00@Z PROC				; _VectorAdd, COMDAT

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   : 	out[0] = va[0]+vb[0];

  00003	8b 45 08	 mov	 eax, DWORD PTR _va$[ebp]
  00006	d9 00		 fld	 DWORD PTR [eax]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  0000b	d8 01		 fadd	 DWORD PTR [ecx]
  0000d	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00010	d9 1a		 fstp	 DWORD PTR [edx]

; 77   : 	out[1] = va[1]+vb[1];

  00012	d9 40 04	 fld	 DWORD PTR [eax+4]
  00015	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  00018	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 78   : 	out[2] = va[2]+vb[2];

  0001b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0001e	d8 41 08	 fadd	 DWORD PTR [ecx+8]
  00021	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 79   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?_VectorAdd@@YAXQAM00@Z ENDP				; _VectorAdd
_TEXT	ENDS
PUBLIC	?_VectorCopy@@YAXQAM0@Z				; _VectorCopy
; Function compile flags: /Ogtp
;	COMDAT ?_VectorCopy@@YAXQAM0@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
?_VectorCopy@@YAXQAM0@Z PROC				; _VectorCopy, COMDAT

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 83   : 	out[0] = in[0];

  00003	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00006	d9 00		 fld	 DWORD PTR [eax]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  0000b	d9 19		 fstp	 DWORD PTR [ecx]

; 84   : 	out[1] = in[1];

  0000d	d9 40 04	 fld	 DWORD PTR [eax+4]
  00010	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 85   : 	out[2] = in[2];

  00013	d9 40 08	 fld	 DWORD PTR [eax+8]
  00016	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 86   : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_VectorCopy@@YAXQAM0@Z ENDP				; _VectorCopy
_TEXT	ENDS
PUBLIC	?VectorScale@@YAXQAMM0@Z			; VectorScale
; Function compile flags: /Ogtp
;	COMDAT ?VectorScale@@YAXQAMM0@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_scale$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorScale@@YAXQAMM0@Z PROC				; VectorScale, COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   : 	out[0] = v[0] * scale;

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00006	d9 00		 fld	 DWORD PTR [eax]
  00008	8b 4d 10	 mov	 ecx, DWORD PTR _out$[ebp]
  0000b	d9 45 0c	 fld	 DWORD PTR _scale$[ebp]
  0000e	d9 c0		 fld	 ST(0)
  00010	de ca		 fmulp	 ST(2), ST(0)
  00012	d9 c9		 fxch	 ST(1)
  00014	d9 19		 fstp	 DWORD PTR [ecx]

; 92   : 	out[1] = v[1] * scale;

  00016	d9 40 04	 fld	 DWORD PTR [eax+4]
  00019	d8 c9		 fmul	 ST(0), ST(1)
  0001b	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 93   : 	out[2] = v[2] * scale;

  0001e	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00021	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 94   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?VectorScale@@YAXQAMM0@Z ENDP				; VectorScale
_TEXT	ENDS
PUBLIC	?VectorInverse@@YAXQAM@Z			; VectorInverse
; Function compile flags: /Ogtp
;	COMDAT ?VectorInverse@@YAXQAM@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?VectorInverse@@YAXQAM@Z PROC				; VectorInverse, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : 	v[0] = -v[0];

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00006	d9 00		 fld	 DWORD PTR [eax]
  00008	d9 e0		 fchs
  0000a	d9 18		 fstp	 DWORD PTR [eax]

; 122  : 	v[1] = -v[1];

  0000c	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000f	d9 e0		 fchs
  00011	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 123  : 	v[2] = -v[2];

  00014	d9 40 08	 fld	 DWORD PTR [eax+8]
  00017	d9 e0		 fchs
  00019	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 124  : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?VectorInverse@@YAXQAM@Z ENDP				; VectorInverse
_TEXT	ENDS
PUBLIC	__real@c7c34f80
PUBLIC	__real@47c34f80
PUBLIC	?ClearBounds@@YAXQAM0@Z				; ClearBounds
;	COMDAT __real@c7c34f80
CONST	SEGMENT
__real@c7c34f80 DD 0c7c34f80r			; -99999
CONST	ENDS
;	COMDAT __real@47c34f80
CONST	SEGMENT
__real@47c34f80 DD 047c34f80r			; 99999
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ClearBounds@@YAXQAM0@Z
_TEXT	SEGMENT
_mins$ = 8						; size = 4
_maxs$ = 12						; size = 4
?ClearBounds@@YAXQAM0@Z PROC				; ClearBounds, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	mins[0] = mins[1] = mins[2] = 99999;

  00003	8b 45 08	 mov	 eax, DWORD PTR _mins$[ebp]
  00006	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@47c34f80
  0000c	d9 50 08	 fst	 DWORD PTR [eax+8]
  0000f	d9 50 04	 fst	 DWORD PTR [eax+4]
  00012	d9 18		 fstp	 DWORD PTR [eax]

; 129  : 	maxs[0] = maxs[1] = maxs[2] = -99999;

  00014	8b 45 0c	 mov	 eax, DWORD PTR _maxs$[ebp]
  00017	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@c7c34f80
  0001d	d9 50 08	 fst	 DWORD PTR [eax+8]
  00020	d9 50 04	 fst	 DWORD PTR [eax+4]
  00023	d9 18		 fstp	 DWORD PTR [eax]

; 130  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?ClearBounds@@YAXQAM0@Z ENDP				; ClearBounds
_TEXT	ENDS
PUBLIC	?AddPointToBounds@@YAXQAM00@Z			; AddPointToBounds
; Function compile flags: /Ogtp
;	COMDAT ?AddPointToBounds@@YAXQAM00@Z
_TEXT	SEGMENT
_val$ = -4						; size = 4
_v$ = 8							; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
?AddPointToBounds@@YAXQAM00@Z PROC			; AddPointToBounds, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 142  : 		if (val < mins[i])

  00004	8b 4d 0c	 mov	 ecx, DWORD PTR _mins$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0000b	d9 06		 fld	 DWORD PTR [esi]
  0000d	d9 5d fc	 fstp	 DWORD PTR _val$[ebp]
  00010	d9 45 fc	 fld	 DWORD PTR _val$[ebp]
  00013	d9 01		 fld	 DWORD PTR [ecx]
  00015	d8 d9		 fcomp	 ST(1)
  00017	df e0		 fnstsw	 ax
  00019	f6 c4 41	 test	 ah, 65			; 00000041H
  0001c	75 02		 jne	 SHORT $LN2@AddPointTo

; 143  : 			mins[i] = val;

  0001e	d9 11		 fst	 DWORD PTR [ecx]
$LN2@AddPointTo:

; 144  : 		if (val > maxs[i])

  00020	8b 55 10	 mov	 edx, DWORD PTR _maxs$[ebp]
  00023	d9 02		 fld	 DWORD PTR [edx]
  00025	d8 d9		 fcomp	 ST(1)
  00027	df e0		 fnstsw	 ax
  00029	f6 c4 05	 test	 ah, 5
  0002c	7a 04		 jp	 SHORT $LN24@AddPointTo

; 145  : 			maxs[i] = val;

  0002e	d9 1a		 fstp	 DWORD PTR [edx]
  00030	eb 02		 jmp	 SHORT $LN4@AddPointTo
$LN24@AddPointTo:
  00032	dd d8		 fstp	 ST(0)
$LN4@AddPointTo:

; 136  : 	int		i;
; 137  : 	vec_t	val;
; 138  : 
; 139  : 	for (i=0 ; i<3 ; i++)
; 140  : 	{
; 141  : 		val = v[i];

  00034	d9 46 04	 fld	 DWORD PTR [esi+4]
  00037	d9 5d fc	 fstp	 DWORD PTR _val$[ebp]

; 142  : 		if (val < mins[i])

  0003a	d9 45 fc	 fld	 DWORD PTR _val$[ebp]
  0003d	d9 41 04	 fld	 DWORD PTR [ecx+4]
  00040	d8 d9		 fcomp	 ST(1)
  00042	df e0		 fnstsw	 ax
  00044	f6 c4 41	 test	 ah, 65			; 00000041H
  00047	75 03		 jne	 SHORT $LN15@AddPointTo

; 143  : 			mins[i] = val;

  00049	d9 51 04	 fst	 DWORD PTR [ecx+4]
$LN15@AddPointTo:

; 144  : 		if (val > maxs[i])

  0004c	d9 42 04	 fld	 DWORD PTR [edx+4]
  0004f	d8 d9		 fcomp	 ST(1)
  00051	df e0		 fnstsw	 ax
  00053	f6 c4 05	 test	 ah, 5
  00056	7a 05		 jp	 SHORT $LN30@AddPointTo

; 145  : 			maxs[i] = val;

  00058	d9 5a 04	 fstp	 DWORD PTR [edx+4]
  0005b	eb 02		 jmp	 SHORT $LN16@AddPointTo
$LN30@AddPointTo:
  0005d	dd d8		 fstp	 ST(0)
$LN16@AddPointTo:

; 136  : 	int		i;
; 137  : 	vec_t	val;
; 138  : 
; 139  : 	for (i=0 ; i<3 ; i++)
; 140  : 	{
; 141  : 		val = v[i];

  0005f	d9 46 08	 fld	 DWORD PTR [esi+8]
  00062	5e		 pop	 esi
  00063	d9 5d fc	 fstp	 DWORD PTR _val$[ebp]

; 142  : 		if (val < mins[i])

  00066	d9 45 fc	 fld	 DWORD PTR _val$[ebp]
  00069	d9 41 08	 fld	 DWORD PTR [ecx+8]
  0006c	d8 d9		 fcomp	 ST(1)
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 41	 test	 ah, 65			; 00000041H
  00073	75 03		 jne	 SHORT $LN18@AddPointTo

; 143  : 			mins[i] = val;

  00075	d9 51 08	 fst	 DWORD PTR [ecx+8]
$LN18@AddPointTo:

; 144  : 		if (val > maxs[i])

  00078	d9 42 08	 fld	 DWORD PTR [edx+8]
  0007b	d8 d9		 fcomp	 ST(1)
  0007d	df e0		 fnstsw	 ax
  0007f	f6 c4 05	 test	 ah, 5
  00082	7a 07		 jp	 SHORT $LN36@AddPointTo

; 145  : 			maxs[i] = val;

  00084	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 146  : 	}
; 147  : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
$LN36@AddPointTo:

; 144  : 		if (val > maxs[i])

  0008b	dd d8		 fstp	 ST(0)

; 146  : 	}
; 147  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?AddPointToBounds@@YAXQAM00@Z ENDP			; AddPointToBounds
_TEXT	ENDS
PUBLIC	?R_ConcatTransforms@@YAXQBM0QAM@Z		; R_ConcatTransforms
; Function compile flags: /Ogtp
;	COMDAT ?R_ConcatTransforms@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?R_ConcatTransforms@@YAXQBM0QAM@Z PROC			; R_ConcatTransforms, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 255  : 	out[0*4+0] = in1[0*4+0] * in2[0*4+0] + in1[0*4+1] * in2[1*4+0] + in1[0*4+2] * in2[2*4+0];

  00003	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00009	d9 00		 fld	 DWORD PTR [eax]
  0000b	d8 09		 fmul	 DWORD PTR [ecx]
  0000d	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00010	d9 40 04	 fld	 DWORD PTR [eax+4]
  00013	d8 49 10	 fmul	 DWORD PTR [ecx+16]
  00016	de c1		 faddp	 ST(1), ST(0)
  00018	d9 41 20	 fld	 DWORD PTR [ecx+32]
  0001b	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d9 1a		 fstp	 DWORD PTR [edx]

; 256  : 	out[0*4+1] = in1[0*4+0] * in2[0*4+1] + in1[0*4+1] * in2[1*4+1] + in1[0*4+2] * in2[2*4+1];

  00022	d9 41 14	 fld	 DWORD PTR [ecx+20]
  00025	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00028	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0002b	d8 08		 fmul	 DWORD PTR [eax]
  0002d	de c1		 faddp	 ST(1), ST(0)
  0002f	d9 40 08	 fld	 DWORD PTR [eax+8]
  00032	d8 49 24	 fmul	 DWORD PTR [ecx+36]
  00035	de c1		 faddp	 ST(1), ST(0)
  00037	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 257  : 	out[0*4+2] = in1[0*4+0] * in2[0*4+2] + in1[0*4+1] * in2[1*4+2] + in1[0*4+2] * in2[2*4+2];

  0003a	d9 41 18	 fld	 DWORD PTR [ecx+24]
  0003d	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00040	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00043	d8 08		 fmul	 DWORD PTR [eax]
  00045	de c1		 faddp	 ST(1), ST(0)
  00047	d9 40 08	 fld	 DWORD PTR [eax+8]
  0004a	d8 49 28	 fmul	 DWORD PTR [ecx+40]
  0004d	de c1		 faddp	 ST(1), ST(0)
  0004f	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 258  : 	out[0*4+3] = in1[0*4+0] * in2[0*4+3] + in1[0*4+1] * in2[1*4+3] + in1[0*4+2] * in2[2*4+3] + in1[0*4+3];

  00052	d9 41 1c	 fld	 DWORD PTR [ecx+28]
  00055	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00058	d9 41 0c	 fld	 DWORD PTR [ecx+12]
  0005b	d8 08		 fmul	 DWORD PTR [eax]
  0005d	de c1		 faddp	 ST(1), ST(0)
  0005f	d9 40 08	 fld	 DWORD PTR [eax+8]
  00062	d8 49 2c	 fmul	 DWORD PTR [ecx+44]
  00065	de c1		 faddp	 ST(1), ST(0)
  00067	d8 40 0c	 fadd	 DWORD PTR [eax+12]
  0006a	d9 5a 0c	 fstp	 DWORD PTR [edx+12]

; 259  : 	out[1*4+0] = in1[1*4+0] * in2[0*4+0] + in1[1*4+1] * in2[1*4+0] + in1[1*4+2] * in2[2*4+0];

  0006d	d9 40 14	 fld	 DWORD PTR [eax+20]
  00070	d8 49 10	 fmul	 DWORD PTR [ecx+16]
  00073	d9 40 10	 fld	 DWORD PTR [eax+16]
  00076	d8 09		 fmul	 DWORD PTR [ecx]
  00078	de c1		 faddp	 ST(1), ST(0)
  0007a	d9 40 18	 fld	 DWORD PTR [eax+24]
  0007d	d8 49 20	 fmul	 DWORD PTR [ecx+32]
  00080	de c1		 faddp	 ST(1), ST(0)
  00082	d9 5a 10	 fstp	 DWORD PTR [edx+16]

; 260  : 	out[1*4+1] = in1[1*4+0] * in2[0*4+1] + in1[1*4+1] * in2[1*4+1] + in1[1*4+2] * in2[2*4+1];

  00085	d9 40 10	 fld	 DWORD PTR [eax+16]
  00088	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0008b	d9 40 14	 fld	 DWORD PTR [eax+20]
  0008e	d8 49 14	 fmul	 DWORD PTR [ecx+20]
  00091	de c1		 faddp	 ST(1), ST(0)
  00093	d9 40 18	 fld	 DWORD PTR [eax+24]
  00096	d8 49 24	 fmul	 DWORD PTR [ecx+36]
  00099	de c1		 faddp	 ST(1), ST(0)
  0009b	d9 5a 14	 fstp	 DWORD PTR [edx+20]

; 261  : 	out[1*4+2] = in1[1*4+0] * in2[0*4+2] + in1[1*4+1] * in2[1*4+2] + in1[1*4+2] * in2[2*4+2];

  0009e	d9 40 10	 fld	 DWORD PTR [eax+16]
  000a1	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  000a4	d9 40 14	 fld	 DWORD PTR [eax+20]
  000a7	d8 49 18	 fmul	 DWORD PTR [ecx+24]
  000aa	de c1		 faddp	 ST(1), ST(0)
  000ac	d9 40 18	 fld	 DWORD PTR [eax+24]
  000af	d8 49 28	 fmul	 DWORD PTR [ecx+40]
  000b2	de c1		 faddp	 ST(1), ST(0)
  000b4	d9 5a 18	 fstp	 DWORD PTR [edx+24]

; 262  : 	out[1*4+3] = in1[1*4+0] * in2[0*4+3] + in1[1*4+1] * in2[1*4+3] + in1[1*4+2] * in2[2*4+3] + in1[1*4+3];

  000b7	d9 40 10	 fld	 DWORD PTR [eax+16]
  000ba	d8 49 0c	 fmul	 DWORD PTR [ecx+12]
  000bd	d9 40 14	 fld	 DWORD PTR [eax+20]
  000c0	d8 49 1c	 fmul	 DWORD PTR [ecx+28]
  000c3	de c1		 faddp	 ST(1), ST(0)
  000c5	d9 40 18	 fld	 DWORD PTR [eax+24]
  000c8	d8 49 2c	 fmul	 DWORD PTR [ecx+44]
  000cb	de c1		 faddp	 ST(1), ST(0)
  000cd	d8 40 1c	 fadd	 DWORD PTR [eax+28]
  000d0	d9 5a 1c	 fstp	 DWORD PTR [edx+28]

; 263  : 	out[2*4+0] = in1[2*4+0] * in2[0*4+0] + in1[2*4+1] * in2[1*4+0] + in1[2*4+2] * in2[2*4+0];

  000d3	d9 40 24	 fld	 DWORD PTR [eax+36]
  000d6	d8 49 10	 fmul	 DWORD PTR [ecx+16]
  000d9	d9 01		 fld	 DWORD PTR [ecx]
  000db	d8 48 20	 fmul	 DWORD PTR [eax+32]
  000de	de c1		 faddp	 ST(1), ST(0)
  000e0	d9 40 28	 fld	 DWORD PTR [eax+40]
  000e3	d8 49 20	 fmul	 DWORD PTR [ecx+32]
  000e6	de c1		 faddp	 ST(1), ST(0)
  000e8	d9 5a 20	 fstp	 DWORD PTR [edx+32]

; 264  : 	out[2*4+1] = in1[2*4+0] * in2[0*4+1] + in1[2*4+1] * in2[1*4+1] + in1[2*4+2] * in2[2*4+1];

  000eb	d9 41 04	 fld	 DWORD PTR [ecx+4]
  000ee	d8 48 20	 fmul	 DWORD PTR [eax+32]
  000f1	d9 40 24	 fld	 DWORD PTR [eax+36]
  000f4	d8 49 14	 fmul	 DWORD PTR [ecx+20]
  000f7	de c1		 faddp	 ST(1), ST(0)
  000f9	d9 40 28	 fld	 DWORD PTR [eax+40]
  000fc	d8 49 24	 fmul	 DWORD PTR [ecx+36]
  000ff	de c1		 faddp	 ST(1), ST(0)
  00101	d9 5a 24	 fstp	 DWORD PTR [edx+36]

; 265  : 	out[2*4+2] = in1[2*4+0] * in2[0*4+2] + in1[2*4+1] * in2[1*4+2] + in1[2*4+2] * in2[2*4+2];

  00104	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00107	d8 48 20	 fmul	 DWORD PTR [eax+32]
  0010a	d9 40 24	 fld	 DWORD PTR [eax+36]
  0010d	d8 49 18	 fmul	 DWORD PTR [ecx+24]
  00110	de c1		 faddp	 ST(1), ST(0)
  00112	d9 40 28	 fld	 DWORD PTR [eax+40]
  00115	d8 49 28	 fmul	 DWORD PTR [ecx+40]
  00118	de c1		 faddp	 ST(1), ST(0)
  0011a	d9 5a 28	 fstp	 DWORD PTR [edx+40]

; 266  : 	out[2*4+3] = in1[2*4+0] * in2[0*4+3] + in1[2*4+1] * in2[1*4+3] + in1[2*4+2] * in2[2*4+3] + in1[2*4+3];

  0011d	d9 41 0c	 fld	 DWORD PTR [ecx+12]
  00120	d8 48 20	 fmul	 DWORD PTR [eax+32]
  00123	d9 40 24	 fld	 DWORD PTR [eax+36]
  00126	d8 49 1c	 fmul	 DWORD PTR [ecx+28]
  00129	de c1		 faddp	 ST(1), ST(0)
  0012b	d9 40 28	 fld	 DWORD PTR [eax+40]
  0012e	d8 49 2c	 fmul	 DWORD PTR [ecx+44]
  00131	de c1		 faddp	 ST(1), ST(0)
  00133	d8 40 2c	 fadd	 DWORD PTR [eax+44]
  00136	d9 5a 2c	 fstp	 DWORD PTR [edx+44]

; 267  : }

  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?R_ConcatTransforms@@YAXQBM0QAM@Z ENDP			; R_ConcatTransforms
_TEXT	ENDS
PUBLIC	?VectorRotate@@YAXQBM0QAM@Z			; VectorRotate
; Function compile flags: /Ogtp
;	COMDAT ?VectorRotate@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorRotate@@YAXQBM0QAM@Z PROC			; VectorRotate, COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 	out[0*4+0] = in1[0*4+0] * in2[0*4+0] + in1[0*4+1] * in2[0*4+1] + in1[0*4+2] * in2[0*4+2];

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00009	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0000c	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0000f	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00012	d9 00		 fld	 DWORD PTR [eax]
  00014	d8 09		 fmul	 DWORD PTR [ecx]
  00016	de c1		 faddp	 ST(1), ST(0)
  00018	d9 41 08	 fld	 DWORD PTR [ecx+8]
  0001b	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d9 1a		 fstp	 DWORD PTR [edx]

; 272  : 	out[0*4+1] = in1[0*4+0] * in2[0*4+4] + in1[0*4+1] * in2[0*4+5] + in1[0*4+2] * in2[0*4+6];

  00022	d9 41 10	 fld	 DWORD PTR [ecx+16]
  00025	d8 08		 fmul	 DWORD PTR [eax]
  00027	d9 41 14	 fld	 DWORD PTR [ecx+20]
  0002a	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0002d	de c1		 faddp	 ST(1), ST(0)
  0002f	d9 41 18	 fld	 DWORD PTR [ecx+24]
  00032	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00035	de c1		 faddp	 ST(1), ST(0)
  00037	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 273  : 	out[0*4+2] = in1[0*4+0] * in2[0*4+8] + in1[0*4+1] * in2[0*4+9] + in1[0*4+2] * in2[0*4+10];

  0003a	d9 41 20	 fld	 DWORD PTR [ecx+32]
  0003d	d8 08		 fmul	 DWORD PTR [eax]
  0003f	d9 41 24	 fld	 DWORD PTR [ecx+36]
  00042	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00045	de c1		 faddp	 ST(1), ST(0)
  00047	d9 41 28	 fld	 DWORD PTR [ecx+40]
  0004a	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0004d	de c1		 faddp	 ST(1), ST(0)
  0004f	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 274  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?VectorRotate@@YAXQBM0QAM@Z ENDP			; VectorRotate
_TEXT	ENDS
PUBLIC	?VectorIRotate@@YAXQBM0QAM@Z			; VectorIRotate
; Function compile flags: /Ogtp
;	COMDAT ?VectorIRotate@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorIRotate@@YAXQBM0QAM@Z PROC			; VectorIRotate, COMDAT

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 279  : 	out[0*4+0] = in1[0*4+0] * in2[0*4+0] + in1[0*4+1] * in2[0*4+4] + in1[0*4+2] * in2[0*4+8];

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _in1$[ebp]
  00009	d9 41 10	 fld	 DWORD PTR [ecx+16]
  0000c	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0000f	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00012	d9 00		 fld	 DWORD PTR [eax]
  00014	d8 09		 fmul	 DWORD PTR [ecx]
  00016	de c1		 faddp	 ST(1), ST(0)
  00018	d9 41 20	 fld	 DWORD PTR [ecx+32]
  0001b	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d9 1a		 fstp	 DWORD PTR [edx]

; 280  : 	out[0*4+1] = in1[0*4+0] * in2[0*4+1] + in1[0*4+1] * in2[0*4+5] + in1[0*4+2] * in2[0*4+9];

  00022	d9 41 04	 fld	 DWORD PTR [ecx+4]
  00025	d8 08		 fmul	 DWORD PTR [eax]
  00027	d9 41 14	 fld	 DWORD PTR [ecx+20]
  0002a	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0002d	de c1		 faddp	 ST(1), ST(0)
  0002f	d9 41 24	 fld	 DWORD PTR [ecx+36]
  00032	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00035	de c1		 faddp	 ST(1), ST(0)
  00037	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 281  : 	out[0*4+2] = in1[0*4+0] * in2[0*4+2] + in1[0*4+1] * in2[0*4+6] + in1[0*4+2] * in2[0*4+10];

  0003a	d9 41 08	 fld	 DWORD PTR [ecx+8]
  0003d	d8 08		 fmul	 DWORD PTR [eax]
  0003f	d9 41 18	 fld	 DWORD PTR [ecx+24]
  00042	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00045	de c1		 faddp	 ST(1), ST(0)
  00047	d9 41 28	 fld	 DWORD PTR [ecx+40]
  0004a	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0004d	de c1		 faddp	 ST(1), ST(0)
  0004f	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 282  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?VectorIRotate@@YAXQBM0QAM@Z ENDP			; VectorIRotate
_TEXT	ENDS
PUBLIC	?VectorTranslate@@YAXQBM0QAM@Z			; VectorTranslate
; Function compile flags: /Ogtp
;	COMDAT ?VectorTranslate@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorTranslate@@YAXQBM0QAM@Z PROC			; VectorTranslate, COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 	out[0*4+0] = in1[0*4+0] + in2[0*4+3];

  00003	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00006	d9 40 0c	 fld	 DWORD PTR [eax+12]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  0000c	d8 01		 fadd	 DWORD PTR [ecx]
  0000e	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00011	d9 1a		 fstp	 DWORD PTR [edx]

; 289  : 	out[0*4+1] = in1[0*4+1] + in2[1*4+3];

  00013	d9 40 1c	 fld	 DWORD PTR [eax+28]
  00016	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  00019	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 290  : 	out[0*4+2] = in1[0*4+2] + in2[2*4+3];

  0001c	d9 40 2c	 fld	 DWORD PTR [eax+44]
  0001f	d8 41 08	 fadd	 DWORD PTR [ecx+8]
  00022	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 291  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?VectorTranslate@@YAXQBM0QAM@Z ENDP			; VectorTranslate
_TEXT	ENDS
PUBLIC	?VectorTransform@@YAXQBM0QAM@Z			; VectorTransform
; Function compile flags: /Ogtp
;	COMDAT ?VectorTransform@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorTransform@@YAXQBM0QAM@Z PROC			; VectorTransform, COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 297  : 	out[0*4+0] = in1[0*4+0] * in2[0*4+0] + in1[0*4+1] * in2[0*4+1] + in1[0*4+2] * in2[0*4+2] + in2[0*4+3];

  00003	8b 45 0c	 mov	 eax, DWORD PTR _in2$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00009	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000c	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0000f	8b 55 10	 mov	 edx, DWORD PTR _out$[ebp]
  00012	d9 01		 fld	 DWORD PTR [ecx]
  00014	d8 08		 fmul	 DWORD PTR [eax]
  00016	de c1		 faddp	 ST(1), ST(0)
  00018	d9 40 08	 fld	 DWORD PTR [eax+8]
  0001b	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0001e	de c1		 faddp	 ST(1), ST(0)
  00020	d8 40 0c	 fadd	 DWORD PTR [eax+12]
  00023	d9 1a		 fstp	 DWORD PTR [edx]

; 298  : 	out[0*4+1] = in1[0*4+0] * in2[1*4+0] + in1[0*4+1] * in2[1*4+1] + in1[0*4+2] * in2[1*4+2] + in2[1*4+3];

  00025	d9 40 10	 fld	 DWORD PTR [eax+16]
  00028	d8 09		 fmul	 DWORD PTR [ecx]
  0002a	d9 40 14	 fld	 DWORD PTR [eax+20]
  0002d	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00030	de c1		 faddp	 ST(1), ST(0)
  00032	d9 40 18	 fld	 DWORD PTR [eax+24]
  00035	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00038	de c1		 faddp	 ST(1), ST(0)
  0003a	d8 40 1c	 fadd	 DWORD PTR [eax+28]
  0003d	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 299  : 	out[0*4+2] = in1[0*4+0] * in2[2*4+0] + in1[0*4+1] * in2[2*4+1] + in1[0*4+2] * in2[2*4+2] + in2[2*4+3];

  00040	d9 40 20	 fld	 DWORD PTR [eax+32]
  00043	d8 09		 fmul	 DWORD PTR [ecx]
  00045	d9 40 24	 fld	 DWORD PTR [eax+36]
  00048	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0004b	de c1		 faddp	 ST(1), ST(0)
  0004d	d9 40 28	 fld	 DWORD PTR [eax+40]
  00050	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00053	de c1		 faddp	 ST(1), ST(0)
  00055	d8 40 2c	 fadd	 DWORD PTR [eax+44]
  00058	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 300  : }

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?VectorTransform@@YAXQBM0QAM@Z ENDP			; VectorTransform
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	?QuaternionMatrix@@YAXPBMPAY03M@Z		; QuaternionMatrix
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?QuaternionMatrix@@YAXPBMPAY03M@Z
_TEXT	SEGMENT
_quaternion$ = 8					; size = 4
_matrix$ = 12						; size = 4
?QuaternionMatrix@@YAXPBMPAY03M@Z PROC			; QuaternionMatrix, COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 	matrix[0][0]	= 1.0 - ( quaternion[1] * 2 * quaternion[1] ) - ( quaternion[2] * 2 * quaternion[2] );

  00003	8b 45 08	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00006	d9 40 04	 fld	 DWORD PTR [eax+4]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _matrix$[ebp]
  0000c	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4000000000000000
  00012	dc c9		 fmul	 ST(1), ST(0)
  00014	d9 40 04	 fld	 DWORD PTR [eax+4]
  00017	de ca		 fmulp	 ST(2), ST(0)
  00019	d9 e8		 fld1
  0001b	d9 c0		 fld	 ST(0)
  0001d	de e3		 fsubrp	 ST(3), ST(0)
  0001f	d9 40 08	 fld	 DWORD PTR [eax+8]
  00022	d8 ca		 fmul	 ST(0), ST(2)
  00024	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00027	de eb		 fsubp	 ST(3), ST(0)
  00029	d9 ca		 fxch	 ST(2)
  0002b	d9 19		 fstp	 DWORD PTR [ecx]

; 335  : 	matrix[1][0]	=       ( quaternion[0] * 2 * quaternion[1] ) + ( quaternion[3] * 2 * quaternion[2] );

  0002d	d9 40 0c	 fld	 DWORD PTR [eax+12]
  00030	d8 c9		 fmul	 ST(0), ST(1)
  00032	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00035	d9 00		 fld	 DWORD PTR [eax]
  00037	d8 ca		 fmul	 ST(0), ST(2)
  00039	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0003c	de c1		 faddp	 ST(1), ST(0)
  0003e	d9 59 10	 fstp	 DWORD PTR [ecx+16]

; 336  : 	matrix[2][0]	=       ( quaternion[0] * 2 * quaternion[2] ) - ( quaternion[3] * 2 * quaternion[1] );

  00041	d9 00		 fld	 DWORD PTR [eax]
  00043	d8 c9		 fmul	 ST(0), ST(1)
  00045	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00048	d9 40 0c	 fld	 DWORD PTR [eax+12]
  0004b	d8 ca		 fmul	 ST(0), ST(2)
  0004d	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00050	de e9		 fsubp	 ST(1), ST(0)
  00052	d9 59 20	 fstp	 DWORD PTR [ecx+32]

; 337  : 
; 338  : 	matrix[0][1]	=       ( quaternion[0] * 2 * quaternion[1] ) - ( quaternion[3] * 2 * quaternion[2] );

  00055	d9 00		 fld	 DWORD PTR [eax]
  00057	d8 c9		 fmul	 ST(0), ST(1)
  00059	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0005c	d9 40 0c	 fld	 DWORD PTR [eax+12]
  0005f	d8 ca		 fmul	 ST(0), ST(2)
  00061	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00064	de e9		 fsubp	 ST(1), ST(0)
  00066	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 339  : 	matrix[1][1]	= 1.0 - ( quaternion[0] * 2 * quaternion[0] ) - ( quaternion[2] * 2 * quaternion[2] );

  00069	d9 00		 fld	 DWORD PTR [eax]
  0006b	d8 c9		 fmul	 ST(0), ST(1)
  0006d	d8 08		 fmul	 DWORD PTR [eax]
  0006f	d8 ea		 fsubr	 ST(0), ST(2)
  00071	d9 40 08	 fld	 DWORD PTR [eax+8]
  00074	d8 ca		 fmul	 ST(0), ST(2)
  00076	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00079	de e9		 fsubp	 ST(1), ST(0)
  0007b	d9 59 14	 fstp	 DWORD PTR [ecx+20]

; 340  : 	matrix[2][1]	=       ( quaternion[1] * 2 * quaternion[2] ) + ( quaternion[3] * 2 * quaternion[0] );

  0007e	d9 40 04	 fld	 DWORD PTR [eax+4]
  00081	d8 c9		 fmul	 ST(0), ST(1)
  00083	d8 48 08	 fmul	 DWORD PTR [eax+8]
  00086	d9 40 0c	 fld	 DWORD PTR [eax+12]
  00089	d8 ca		 fmul	 ST(0), ST(2)
  0008b	d8 08		 fmul	 DWORD PTR [eax]
  0008d	de c1		 faddp	 ST(1), ST(0)
  0008f	d9 59 24	 fstp	 DWORD PTR [ecx+36]

; 341  : 
; 342  : 	matrix[0][2]	=       ( quaternion[0] * 2 * quaternion[2] ) + ( quaternion[3] * 2 * quaternion[1] );

  00092	d9 40 0c	 fld	 DWORD PTR [eax+12]
  00095	d8 c9		 fmul	 ST(0), ST(1)
  00097	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0009a	d9 00		 fld	 DWORD PTR [eax]
  0009c	d8 ca		 fmul	 ST(0), ST(2)
  0009e	d8 48 08	 fmul	 DWORD PTR [eax+8]
  000a1	de c1		 faddp	 ST(1), ST(0)
  000a3	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 343  : 	matrix[1][2]	=       ( quaternion[1] * 2 * quaternion[2] ) - ( quaternion[3] * 2 * quaternion[0] );

  000a6	d9 40 04	 fld	 DWORD PTR [eax+4]
  000a9	d8 c9		 fmul	 ST(0), ST(1)
  000ab	d8 48 08	 fmul	 DWORD PTR [eax+8]
  000ae	d9 40 0c	 fld	 DWORD PTR [eax+12]
  000b1	d8 ca		 fmul	 ST(0), ST(2)
  000b3	d8 08		 fmul	 DWORD PTR [eax]
  000b5	de e9		 fsubp	 ST(1), ST(0)
  000b7	d9 59 18	 fstp	 DWORD PTR [ecx+24]

; 344  : 	matrix[2][2]	= 1.0 - ( quaternion[0] * 2 * quaternion[0] ) - ( quaternion[1] * 2 * quaternion[1] );

  000ba	d9 00		 fld	 DWORD PTR [eax]
  000bc	d8 c9		 fmul	 ST(0), ST(1)
  000be	d8 08		 fmul	 DWORD PTR [eax]
  000c0	de ea		 fsubp	 ST(2), ST(0)
  000c2	d8 48 04	 fmul	 DWORD PTR [eax+4]
  000c5	d8 48 04	 fmul	 DWORD PTR [eax+4]
  000c8	de e9		 fsubp	 ST(1), ST(0)
  000ca	d9 59 28	 fstp	 DWORD PTR [ecx+40]

; 345  : }

  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
?QuaternionMatrix@@YAXPBMPAY03M@Z ENDP			; QuaternionMatrix
_TEXT	ENDS
PUBLIC	_fabsf
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv129 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 395  :         {return ((float)fabs((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	_acosf
EXTRN	__CIacos:PROC
; Function compile flags: /Ogtp
;	COMDAT _acosf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIacos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
PUBLIC	_cosf
EXTRN	__CIcos:PROC
; Function compile flags: /Ogtp
;	COMDAT _cosf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIcos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
EXTRN	__CIsin:PROC
; Function compile flags: /Ogtp
;	COMDAT _sinf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsin
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsqrt
  0000b	d9 5d 08	 fstp	 DWORD PTR tv69[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv69[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?acos@@YAMM@Z					; acos
; Function compile flags: /Ogtp
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 502  :         {return (acosf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIacos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
PUBLIC	?cos@@YAMM@Z					; cos
; Function compile flags: /Ogtp
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 512  :         {return (cosf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIcos
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
PUBLIC	?fabs@@YAMM@Z					; fabs
; Function compile flags: /Ogtp
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
tv131 = 8						; size = 4
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 518  :         {return (fabsf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv131[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv131[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
PUBLIC	?sin@@YAMM@Z					; sin
; Function compile flags: /Ogtp
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 538  :         {return (sinf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsin
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
; Function compile flags: /Ogtp
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	e8 00 00 00 00	 call	 __CIsqrt
  0000b	d9 5d 08	 fstp	 DWORD PTR tv73[ebp]
  0000e	d9 45 08	 fld	 DWORD PTR tv73[ebp]
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	?VectorLength@@YAMQAM@Z				; VectorLength
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\zzzmathlib.cpp
CONST	ENDS
;	COMDAT ?VectorLength@@YAMQAM@Z
_TEXT	SEGMENT
tv330 = -4						; size = 4
tv326 = -4						; size = 4
tv316 = -4						; size = 4
_length$ = -4						; size = 4
_v$ = 8							; size = 4
?VectorLength@@YAMQAM@Z PROC				; VectorLength, COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00007	d9 00		 fld	 DWORD PTR [eax]

; 21   : 	int		i;
; 22   : 	float	length;
; 23   : 	
; 24   : 	length = 0.0f;
; 25   : 	for (i=0 ; i< 3 ; i++)
; 26   : 		length += v[i]*v[i];

  00009	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000c	d9 40 08	 fld	 DWORD PTR [eax+8]
  0000f	d9 c2		 fld	 ST(2)
  00011	de cb		 fmulp	 ST(3), ST(0)
  00013	d9 ca		 fxch	 ST(2)
  00015	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  0001b	d9 5d fc	 fstp	 DWORD PTR tv330[ebp]
  0001e	d9 c0		 fld	 ST(0)
  00020	de c9		 fmulp	 ST(1), ST(0)
  00022	d8 45 fc	 fadd	 DWORD PTR tv330[ebp]
  00025	d9 5d fc	 fstp	 DWORD PTR tv326[ebp]
  00028	d9 c0		 fld	 ST(0)
  0002a	de c9		 fmulp	 ST(1), ST(0)
  0002c	d8 45 fc	 fadd	 DWORD PTR tv326[ebp]
  0002f	d9 5d fc	 fstp	 DWORD PTR _length$[ebp]

; 27   : 	length = sqrtf (length);
; 28   : 
; 29   : 	return length;

  00032	d9 45 fc	 fld	 DWORD PTR _length$[ebp]
  00035	e8 00 00 00 00	 call	 __CIsqrt
  0003a	d9 5d fc	 fstp	 DWORD PTR tv316[ebp]
  0003d	d9 45 fc	 fld	 DWORD PTR tv316[ebp]

; 30   : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?VectorLength@@YAMQAM@Z ENDP				; VectorLength
_TEXT	ENDS
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	?VectorCompare@@YAHQAM0@Z			; VectorCompare
;	COMDAT __real@3f50624dd2f1a9fc
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\zzzmathlib.cpp
CONST	ENDS
;	COMDAT ?VectorCompare@@YAHQAM0@Z
_TEXT	SEGMENT
tv281 = -4						; size = 4
tv274 = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?VectorCompare@@YAHQAM0@Z PROC				; VectorCompare, COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 34   : 	int		i;
; 35   : 	
; 36   : 	for (i=0 ; i<3 ; i++)

  00004	8b 55 0c	 mov	 edx, DWORD PTR _v2$[ebp]
  00007	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3f50624dd2f1a9fc
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR _v1$[ebp]
  00011	33 c9		 xor	 ecx, ecx
  00013	2b f2		 sub	 esi, edx
$LN4@VectorComp:

; 37   : 		if (fabs(v1[i]-v2[i]) > EQUAL_EPSILON)

  00015	d9 04 16	 fld	 DWORD PTR [esi+edx]
  00018	d8 22		 fsub	 DWORD PTR [edx]
  0001a	d9 5d fc	 fstp	 DWORD PTR tv281[ebp]
  0001d	d9 45 fc	 fld	 DWORD PTR tv281[ebp]
  00020	d9 e1		 fabs
  00022	d9 5d fc	 fstp	 DWORD PTR tv274[ebp]
  00025	d9 45 fc	 fld	 DWORD PTR tv274[ebp]
  00028	d8 d9		 fcomp	 ST(1)
  0002a	df e0		 fnstsw	 ax
  0002c	f6 c4 41	 test	 ah, 65			; 00000041H
  0002f	74 15		 je	 SHORT $LN16@VectorComp

; 34   : 	int		i;
; 35   : 	
; 36   : 	for (i=0 ; i<3 ; i++)

  00031	41		 inc	 ecx
  00032	83 c2 04	 add	 edx, 4
  00035	83 f9 03	 cmp	 ecx, 3
  00038	7c db		 jl	 SHORT $LN4@VectorComp
  0003a	dd d8		 fstp	 ST(0)

; 39   : 			
; 40   : 	return true;

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi

; 41   : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN16@VectorComp:

; 37   : 		if (fabs(v1[i]-v2[i]) > EQUAL_EPSILON)

  00046	dd d8		 fstp	 ST(0)

; 38   : 			return false;

  00048	33 c0		 xor	 eax, eax
  0004a	5e		 pop	 esi

; 41   : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?VectorCompare@@YAHQAM0@Z ENDP				; VectorCompare
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?VectorNormalize@@YAMQAM@Z			; VectorNormalize
;	COMDAT __real@00000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\zzzmathlib.cpp
CONST	ENDS
;	COMDAT ?VectorNormalize@@YAMQAM@Z
_TEXT	SEGMENT
tv470 = 8						; size = 4
tv466 = 8						; size = 4
tv457 = 8						; size = 4
_length$ = 8						; size = 4
_v$ = 8							; size = 4
?VectorNormalize@@YAMQAM@Z PROC				; VectorNormalize, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00007	d9 06		 fld	 DWORD PTR [esi]

; 99   : 	int		i;
; 100  : 	float	length;
; 101  : 	
; 102  : 	if ( fabs(v[1]-0.0002159560000) < 0.0001 )
; 103  : 	{
; 104  : 		i=1;
; 105  : 	}
; 106  : 	length=0;
; 107  : 	for (i=0 ; i< 3 ; i++)
; 108  : 		length += v[i]*v[i];

  00009	d9 46 04	 fld	 DWORD PTR [esi+4]
  0000c	d9 46 08	 fld	 DWORD PTR [esi+8]
  0000f	d9 c2		 fld	 ST(2)
  00011	de cb		 fmulp	 ST(3), ST(0)
  00013	d9 ca		 fxch	 ST(2)
  00015	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@0000000000000000
  0001b	d9 5d 08	 fstp	 DWORD PTR tv470[ebp]
  0001e	d9 c0		 fld	 ST(0)
  00020	de c9		 fmulp	 ST(1), ST(0)
  00022	d8 45 08	 fadd	 DWORD PTR tv470[ebp]
  00025	d9 5d 08	 fstp	 DWORD PTR tv466[ebp]
  00028	d9 c0		 fld	 ST(0)
  0002a	de c9		 fmulp	 ST(1), ST(0)
  0002c	d8 45 08	 fadd	 DWORD PTR tv466[ebp]
  0002f	d9 5d 08	 fstp	 DWORD PTR _length$[ebp]

; 109  : 	length = sqrtf (length);

  00032	d9 45 08	 fld	 DWORD PTR _length$[ebp]
  00035	e8 00 00 00 00	 call	 __CIsqrt
  0003a	d9 5d 08	 fstp	 DWORD PTR tv457[ebp]
  0003d	d9 45 08	 fld	 DWORD PTR tv457[ebp]
  00040	d9 5d 08	 fstp	 DWORD PTR _length$[ebp]

; 110  : 	if (length == 0)

  00043	d9 45 08	 fld	 DWORD PTR _length$[ebp]
  00046	d9 c0		 fld	 ST(0)
  00048	d9 ee		 fldz
  0004a	d9 c0		 fld	 ST(0)
  0004c	dd ea		 fucomp	 ST(2)
  0004e	df e0		 fnstsw	 ax
  00050	dd d9		 fstp	 ST(1)
  00052	f6 c4 44	 test	 ah, 68			; 00000044H
  00055	7a 05		 jp	 SHORT $LN26@VectorNorm
  00057	dd d9		 fstp	 ST(1)
  00059	5e		 pop	 esi

; 115  : 
; 116  : 	return length;
; 117  : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN26@VectorNorm:

; 110  : 	if (length == 0)

  0005c	dd d8		 fstp	 ST(0)

; 111  : 		return (vec_t)0;
; 112  : 		
; 113  : 	for (i=0 ; i< 3 ; i++)
; 114  : 		v[i] /= length;	

  0005e	d9 06		 fld	 DWORD PTR [esi]
  00060	d8 f1		 fdiv	 ST(0), ST(1)
  00062	d9 1e		 fstp	 DWORD PTR [esi]
  00064	d9 46 04	 fld	 DWORD PTR [esi+4]
  00067	d8 f1		 fdiv	 ST(0), ST(1)
  00069	d9 5e 04	 fstp	 DWORD PTR [esi+4]
  0006c	d9 46 08	 fld	 DWORD PTR [esi+8]
  0006f	d8 f1		 fdiv	 ST(0), ST(1)
  00071	d9 5e 08	 fstp	 DWORD PTR [esi+8]
  00074	5e		 pop	 esi

; 115  : 
; 116  : 	return length;
; 117  : }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?VectorNormalize@@YAMQAM@Z ENDP				; VectorNormalize
_TEXT	ENDS
PUBLIC	__real@3f91df46a0000000
PUBLIC	?AngleMatrix@@YAXPBMPAY03M@Z			; AngleMatrix
;	COMDAT __real@3f91df46a0000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@3f91df46a0000000 DQ 03f91df46a0000000r	; 0.0174533
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\zzzmathlib.cpp
CONST	ENDS
;	COMDAT ?AngleMatrix@@YAXPBMPAY03M@Z
_TEXT	SEGMENT
tv347 = -24						; size = 8
tv329 = -24						; size = 8
_sy$ = -20						; size = 4
_cy$ = -16						; size = 4
_cp$ = -12						; size = 4
tv309 = -8						; size = 4
_sr$ = -8						; size = 4
tv340 = -4						; size = 4
tv324 = -4						; size = 4
_sp$ = -4						; size = 4
tv333 = 8						; size = 4
tv317 = 8						; size = 4
tv302 = 8						; size = 4
_cr$ = 8						; size = 4
_angle$ = 8						; size = 4
_angles$ = 8						; size = 4
_matrix$ = 12						; size = 4
?AngleMatrix@@YAXPBMPAY03M@Z PROC			; AngleMatrix, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 195  : 	float		angle;
; 196  : 	float		sr, sp, sy, cr, cp, cy;
; 197  : 	
; 198  : 	angle = angles[ROLL] *	0.0174532925199432955f;		//0.0174532821447436905f;

  00007	8b 75 08	 mov	 esi, DWORD PTR _angles$[ebp]
  0000a	d9 46 08	 fld	 DWORD PTR [esi+8]
  0000d	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  00013	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 199  : 	sy = sin(angle);

  00016	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00019	e8 00 00 00 00	 call	 __CIsin
  0001e	d9 5d fc	 fstp	 DWORD PTR tv340[ebp]
  00021	d9 45 fc	 fld	 DWORD PTR tv340[ebp]
  00024	d9 5d ec	 fstp	 DWORD PTR _sy$[ebp]

; 200  : 	cy = cos(angle);

  00027	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  0002a	e8 00 00 00 00	 call	 __CIcos
  0002f	d9 5d 08	 fstp	 DWORD PTR tv333[ebp]
  00032	d9 45 08	 fld	 DWORD PTR tv333[ebp]
  00035	d9 5d f0	 fstp	 DWORD PTR _cy$[ebp]

; 201  : 	angle = angles[YAW] *   0.0174532925199432955f;

  00038	d9 46 04	 fld	 DWORD PTR [esi+4]
  0003b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  00041	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 202  : 	sp = sin(angle);   //ST=0.0174532923847436905

  00044	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00047	e8 00 00 00 00	 call	 __CIsin
  0004c	d9 5d fc	 fstp	 DWORD PTR tv324[ebp]
  0004f	d9 45 fc	 fld	 DWORD PTR tv324[ebp]
  00052	d9 5d fc	 fstp	 DWORD PTR _sp$[ebp]

; 203  : 	cp = cos(angle);

  00055	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00058	e8 00 00 00 00	 call	 __CIcos
  0005d	d9 5d 08	 fstp	 DWORD PTR tv317[ebp]
  00060	d9 45 08	 fld	 DWORD PTR tv317[ebp]
  00063	d9 5d f4	 fstp	 DWORD PTR _cp$[ebp]

; 204  : 	angle = angles[PITCH] * 0.0174532925199432955f;		//0.0174532821247436905f;

  00066	d9 06		 fld	 DWORD PTR [esi]
  00068	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  0006e	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 205  : 	sr = sin(angle);

  00071	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00074	e8 00 00 00 00	 call	 __CIsin
  00079	d9 5d f8	 fstp	 DWORD PTR tv309[ebp]
  0007c	d9 45 f8	 fld	 DWORD PTR tv309[ebp]
  0007f	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 206  : 	cr = cos(angle);

  00082	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00085	e8 00 00 00 00	 call	 __CIcos
  0008a	d9 5d 08	 fstp	 DWORD PTR tv302[ebp]
  0008d	d9 45 08	 fld	 DWORD PTR tv302[ebp]

; 207  : 
; 208  : 	// matrix = (YAW * PITCH) * ROLL
; 209  : 	matrix[0][0] = cp*cy;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00093	d9 5d 08	 fstp	 DWORD PTR _cr$[ebp]
  00096	d9 45 f4	 fld	 DWORD PTR _cp$[ebp]
  00099	d9 c0		 fld	 ST(0)
  0009b	d9 45 f0	 fld	 DWORD PTR _cy$[ebp]
  0009e	d9 c0		 fld	 ST(0)
  000a0	de ca		 fmulp	 ST(2), ST(0)
  000a2	d9 c9		 fxch	 ST(1)
  000a4	d9 18		 fstp	 DWORD PTR [eax]

; 210  : 	matrix[1][0] = cp*sy;

  000a6	d9 c1		 fld	 ST(1)
  000a8	d9 45 ec	 fld	 DWORD PTR _sy$[ebp]
  000ab	d9 c0		 fld	 ST(0)
  000ad	de ca		 fmulp	 ST(2), ST(0)
  000af	d9 c9		 fxch	 ST(1)
  000b1	d9 58 10	 fstp	 DWORD PTR [eax+16]

; 211  : 	matrix[2][0] = -sp;

  000b4	d9 45 fc	 fld	 DWORD PTR _sp$[ebp]
  000b7	d9 c0		 fld	 ST(0)
  000b9	d9 e0		 fchs
  000bb	d9 58 20	 fstp	 DWORD PTR [eax+32]

; 212  : 	matrix[0][1] = sr*sp*cy+cr*-sy;

  000be	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  000c1	d9 c0		 fld	 ST(0)
  000c3	de ca		 fmulp	 ST(2), ST(0)
  000c5	d9 c9		 fxch	 ST(1)
  000c7	dd 55 e8	 fst	 QWORD PTR tv329[ebp]
  000ca	d8 cb		 fmul	 ST(0), ST(3)
  000cc	d9 45 08	 fld	 DWORD PTR _cr$[ebp]
  000cf	d9 c0		 fld	 ST(0)
  000d1	d8 cc		 fmul	 ST(0), ST(4)
  000d3	de ea		 fsubp	 ST(2), ST(0)
  000d5	d9 c9		 fxch	 ST(1)
  000d7	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 213  : 	matrix[1][1] = sr*sp*sy+cr*cy;

  000da	d9 c0		 fld	 ST(0)
  000dc	d8 cc		 fmul	 ST(0), ST(4)
  000de	d9 c3		 fld	 ST(3)
  000e0	dc 4d e8	 fmul	 QWORD PTR tv329[ebp]
  000e3	de c1		 faddp	 ST(1), ST(0)
  000e5	d9 58 14	 fstp	 DWORD PTR [eax+20]

; 214  : 	matrix[2][1] = sr*cp;

  000e8	d9 c1		 fld	 ST(1)
  000ea	d8 cd		 fmul	 ST(0), ST(5)
  000ec	d9 58 24	 fstp	 DWORD PTR [eax+36]

; 215  : 	matrix[0][2] = (cr*sp*cy+-sr*-sy);

  000ef	d9 c0		 fld	 ST(0)
  000f1	d8 4d fc	 fmul	 DWORD PTR _sp$[ebp]
  000f4	5e		 pop	 esi
  000f5	dd 55 e8	 fst	 QWORD PTR tv347[ebp]
  000f8	d8 cc		 fmul	 ST(0), ST(4)
  000fa	d9 c3		 fld	 ST(3)
  000fc	d9 e0		 fchs
  000fe	d8 cb		 fmul	 ST(0), ST(3)
  00100	de e9		 fsubp	 ST(1), ST(0)
  00102	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 216  : 	matrix[1][2] = (cr*sp*sy+-sr*cy);

  00105	d9 ca		 fxch	 ST(2)
  00107	dc 4d e8	 fmul	 QWORD PTR tv347[ebp]
  0010a	d9 c9		 fxch	 ST(1)
  0010c	de cb		 fmulp	 ST(3), ST(0)
  0010e	de e2		 fsubrp	 ST(2), ST(0)
  00110	d9 c9		 fxch	 ST(1)
  00112	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 217  : 	matrix[2][2] = cr*cp;

  00115	de c9		 fmulp	 ST(1), ST(0)
  00117	d9 58 28	 fstp	 DWORD PTR [eax+40]

; 218  : 	matrix[0][3] = 0.0;

  0011a	d9 ee		 fldz
  0011c	d9 50 0c	 fst	 DWORD PTR [eax+12]

; 219  : 	matrix[1][3] = 0.0;

  0011f	d9 50 1c	 fst	 DWORD PTR [eax+28]

; 220  : 	matrix[2][3] = 0.0;

  00122	d9 58 2c	 fstp	 DWORD PTR [eax+44]

; 221  : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
?AngleMatrix@@YAXPBMPAY03M@Z ENDP			; AngleMatrix
_TEXT	ENDS
PUBLIC	?AngleIMatrix@@YAXQBMQAY03M@Z			; AngleIMatrix
; Function compile flags: /Ogtp
;	COMDAT ?AngleIMatrix@@YAXQBMQAY03M@Z
_TEXT	SEGMENT
tv347 = -24						; size = 8
tv329 = -24						; size = 8
_sy$ = -20						; size = 4
_cy$ = -16						; size = 4
_cp$ = -12						; size = 4
tv309 = -8						; size = 4
_sr$ = -8						; size = 4
tv340 = -4						; size = 4
tv324 = -4						; size = 4
_sp$ = -4						; size = 4
tv333 = 8						; size = 4
tv317 = 8						; size = 4
tv302 = 8						; size = 4
_cr$ = 8						; size = 4
_angle$ = 8						; size = 4
_angles$ = 8						; size = 4
_matrix$ = 12						; size = 4
?AngleIMatrix@@YAXQBMQAY03M@Z PROC			; AngleIMatrix, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 225  : 	float angle;
; 226  : 	float sr, sp, sy, cr, cp, cy;
; 227  : 	
; 228  : 	angle = angles[ROLL] * (float)(0.0174532925199432955f);

  00007	8b 75 08	 mov	 esi, DWORD PTR _angles$[ebp]
  0000a	d9 46 08	 fld	 DWORD PTR [esi+8]
  0000d	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  00013	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 229  : 	sy = sin(angle);

  00016	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00019	e8 00 00 00 00	 call	 __CIsin
  0001e	d9 5d fc	 fstp	 DWORD PTR tv340[ebp]
  00021	d9 45 fc	 fld	 DWORD PTR tv340[ebp]
  00024	d9 5d ec	 fstp	 DWORD PTR _sy$[ebp]

; 230  : 	cy = cos(angle);

  00027	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  0002a	e8 00 00 00 00	 call	 __CIcos
  0002f	d9 5d 08	 fstp	 DWORD PTR tv333[ebp]
  00032	d9 45 08	 fld	 DWORD PTR tv333[ebp]
  00035	d9 5d f0	 fstp	 DWORD PTR _cy$[ebp]

; 231  : 	angle = angles[YAW] * (float)(0.0174532925199432955f);

  00038	d9 46 04	 fld	 DWORD PTR [esi+4]
  0003b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  00041	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 232  : 	sp = sin(angle);

  00044	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00047	e8 00 00 00 00	 call	 __CIsin
  0004c	d9 5d fc	 fstp	 DWORD PTR tv324[ebp]
  0004f	d9 45 fc	 fld	 DWORD PTR tv324[ebp]
  00052	d9 5d fc	 fstp	 DWORD PTR _sp$[ebp]

; 233  : 	cp = cos(angle);

  00055	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00058	e8 00 00 00 00	 call	 __CIcos
  0005d	d9 5d 08	 fstp	 DWORD PTR tv317[ebp]
  00060	d9 45 08	 fld	 DWORD PTR tv317[ebp]
  00063	d9 5d f4	 fstp	 DWORD PTR _cp$[ebp]

; 234  : 	angle = angles[PITCH] * (float)(0.0174532925199432955f);	// M_PI*2 /360

  00066	d9 06		 fld	 DWORD PTR [esi]
  00068	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a0000000
  0006e	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 235  : 	sr = sin(angle);

  00071	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00074	e8 00 00 00 00	 call	 __CIsin
  00079	d9 5d f8	 fstp	 DWORD PTR tv309[ebp]
  0007c	d9 45 f8	 fld	 DWORD PTR tv309[ebp]
  0007f	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 236  : 	cr = cos(angle);

  00082	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00085	e8 00 00 00 00	 call	 __CIcos
  0008a	d9 5d 08	 fstp	 DWORD PTR tv302[ebp]
  0008d	d9 45 08	 fld	 DWORD PTR tv302[ebp]

; 237  : 
; 238  : 	// matrix = (YAW * PITCH) * ROLL
; 239  : 	matrix[0][0] = cp*cy;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00093	d9 5d 08	 fstp	 DWORD PTR _cr$[ebp]
  00096	d9 45 f4	 fld	 DWORD PTR _cp$[ebp]
  00099	d9 c0		 fld	 ST(0)
  0009b	d9 45 f0	 fld	 DWORD PTR _cy$[ebp]
  0009e	d9 c0		 fld	 ST(0)
  000a0	de ca		 fmulp	 ST(2), ST(0)
  000a2	d9 c9		 fxch	 ST(1)
  000a4	d9 18		 fstp	 DWORD PTR [eax]

; 240  : 	matrix[0][1] = cp*sy;

  000a6	d9 c1		 fld	 ST(1)
  000a8	d9 45 ec	 fld	 DWORD PTR _sy$[ebp]
  000ab	d9 c0		 fld	 ST(0)
  000ad	de ca		 fmulp	 ST(2), ST(0)
  000af	d9 c9		 fxch	 ST(1)
  000b1	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 241  : 	matrix[0][2] = -sp;

  000b4	d9 45 fc	 fld	 DWORD PTR _sp$[ebp]
  000b7	d9 c0		 fld	 ST(0)
  000b9	d9 e0		 fchs
  000bb	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 242  : 	matrix[1][0] = sr*sp*cy+cr*-sy;

  000be	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  000c1	d9 c0		 fld	 ST(0)
  000c3	de ca		 fmulp	 ST(2), ST(0)
  000c5	d9 c9		 fxch	 ST(1)
  000c7	dd 55 e8	 fst	 QWORD PTR tv329[ebp]
  000ca	d8 cb		 fmul	 ST(0), ST(3)
  000cc	d9 45 08	 fld	 DWORD PTR _cr$[ebp]
  000cf	d9 c0		 fld	 ST(0)
  000d1	d8 cc		 fmul	 ST(0), ST(4)
  000d3	de ea		 fsubp	 ST(2), ST(0)
  000d5	d9 c9		 fxch	 ST(1)
  000d7	d9 58 10	 fstp	 DWORD PTR [eax+16]

; 243  : 	matrix[1][1] = sr*sp*sy+cr*cy;

  000da	d9 c0		 fld	 ST(0)
  000dc	d8 cc		 fmul	 ST(0), ST(4)
  000de	d9 c3		 fld	 ST(3)
  000e0	dc 4d e8	 fmul	 QWORD PTR tv329[ebp]
  000e3	de c1		 faddp	 ST(1), ST(0)
  000e5	d9 58 14	 fstp	 DWORD PTR [eax+20]

; 244  : 	matrix[1][2] = sr*cp;

  000e8	d9 c1		 fld	 ST(1)
  000ea	d8 cd		 fmul	 ST(0), ST(5)
  000ec	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 245  : 	matrix[2][0] = (cr*sp*cy+-sr*-sy);

  000ef	d9 c0		 fld	 ST(0)
  000f1	d8 4d fc	 fmul	 DWORD PTR _sp$[ebp]
  000f4	5e		 pop	 esi
  000f5	dd 55 e8	 fst	 QWORD PTR tv347[ebp]
  000f8	d8 cc		 fmul	 ST(0), ST(4)
  000fa	d9 c3		 fld	 ST(3)
  000fc	d9 e0		 fchs
  000fe	d8 cb		 fmul	 ST(0), ST(3)
  00100	de e9		 fsubp	 ST(1), ST(0)
  00102	d9 58 20	 fstp	 DWORD PTR [eax+32]

; 246  : 	matrix[2][1] = (cr*sp*sy+-sr*cy);

  00105	d9 ca		 fxch	 ST(2)
  00107	dc 4d e8	 fmul	 QWORD PTR tv347[ebp]
  0010a	d9 c9		 fxch	 ST(1)
  0010c	de cb		 fmulp	 ST(3), ST(0)
  0010e	de e2		 fsubrp	 ST(2), ST(0)
  00110	d9 c9		 fxch	 ST(1)
  00112	d9 58 24	 fstp	 DWORD PTR [eax+36]

; 247  : 	matrix[2][2] = cr*cp;

  00115	de c9		 fmulp	 ST(1), ST(0)
  00117	d9 58 28	 fstp	 DWORD PTR [eax+40]

; 248  : 	matrix[0][3] = 0.0;

  0011a	d9 ee		 fldz
  0011c	d9 50 0c	 fst	 DWORD PTR [eax+12]

; 249  : 	matrix[1][3] = 0.0;

  0011f	d9 50 1c	 fst	 DWORD PTR [eax+28]

; 250  : 	matrix[2][3] = 0.0;

  00122	d9 58 2c	 fstp	 DWORD PTR [eax+44]

; 251  : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
?AngleIMatrix@@YAXQBMQAY03M@Z ENDP			; AngleIMatrix
_TEXT	ENDS
PUBLIC	?AngleQuaternion@@YAXQBMPAM@Z			; AngleQuaternion
; Function compile flags: /Ogtp
;	COMDAT ?AngleQuaternion@@YAXQBMPAM@Z
_TEXT	SEGMENT
_sy$ = -20						; size = 4
_cy$ = -16						; size = 4
_cp$ = -12						; size = 4
tv72 = -8						; size = 4
_sr$ = -8						; size = 4
tv282 = -4						; size = 4
tv267 = -4						; size = 4
_sp$ = -4						; size = 4
tv275 = 8						; size = 4
tv260 = 8						; size = 4
tv177 = 8						; size = 4
_cr$ = 8						; size = 4
_angle$ = 8						; size = 4
_angles$ = 8						; size = 4
_quaternion$ = 12					; size = 4
?AngleQuaternion@@YAXQBMPAM@Z PROC			; AngleQuaternion, COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 309  : 	float angle;
; 310  : 	float sr, sp, sy, cr, cp, cy;
; 311  : 
; 312  : 	angle	= angles[2] * 0.5;

  00007	8b 75 08	 mov	 esi, DWORD PTR _angles$[ebp]
  0000a	d9 46 08	 fld	 DWORD PTR [esi+8]
  0000d	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  00013	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 313  : 	sy	= (float)sin(angle);

  00016	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00019	e8 00 00 00 00	 call	 __CIsin
  0001e	d9 5d fc	 fstp	 DWORD PTR tv282[ebp]
  00021	d9 45 fc	 fld	 DWORD PTR tv282[ebp]
  00024	d9 5d ec	 fstp	 DWORD PTR _sy$[ebp]

; 314  : 	cy	= (float)cos(angle);

  00027	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  0002a	e8 00 00 00 00	 call	 __CIcos
  0002f	d9 5d 08	 fstp	 DWORD PTR tv275[ebp]
  00032	d9 45 08	 fld	 DWORD PTR tv275[ebp]
  00035	d9 5d f0	 fstp	 DWORD PTR _cy$[ebp]

; 315  : 
; 316  : 	angle			= angles[1] * 0.5;

  00038	d9 46 04	 fld	 DWORD PTR [esi+4]
  0003b	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  00041	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 317  : 	sp	= (float)sin(angle);

  00044	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00047	e8 00 00 00 00	 call	 __CIsin
  0004c	d9 5d fc	 fstp	 DWORD PTR tv267[ebp]
  0004f	d9 45 fc	 fld	 DWORD PTR tv267[ebp]
  00052	d9 5d fc	 fstp	 DWORD PTR _sp$[ebp]

; 318  : 	cp	= (float)cos(angle);

  00055	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00058	e8 00 00 00 00	 call	 __CIcos
  0005d	d9 5d 08	 fstp	 DWORD PTR tv260[ebp]
  00060	d9 45 08	 fld	 DWORD PTR tv260[ebp]
  00063	d9 5d f4	 fstp	 DWORD PTR _cp$[ebp]

; 319  : 
; 320  : 	angle			= angles[0] * 0.5;

  00066	d9 06		 fld	 DWORD PTR [esi]
  00068	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  0006e	d9 5d 08	 fstp	 DWORD PTR _angle$[ebp]

; 321  : 	sr	= (float)sin(angle);

  00071	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00074	e8 00 00 00 00	 call	 __CIsin
  00079	d9 5d f8	 fstp	 DWORD PTR tv72[ebp]
  0007c	d9 45 f8	 fld	 DWORD PTR tv72[ebp]
  0007f	d9 5d f8	 fstp	 DWORD PTR _sr$[ebp]

; 322  : 	cr	= (float)cos(angle);

  00082	d9 45 08	 fld	 DWORD PTR _angle$[ebp]
  00085	e8 00 00 00 00	 call	 __CIcos
  0008a	d9 5d 08	 fstp	 DWORD PTR tv177[ebp]
  0008d	d9 45 08	 fld	 DWORD PTR tv177[ebp]

; 323  : 
; 324  : 	quaternion[0]	= sr * cp * cy - cr * sp * sy;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _quaternion$[ebp]
  00093	d9 5d 08	 fstp	 DWORD PTR _cr$[ebp]
  00096	5e		 pop	 esi
  00097	d9 45 f8	 fld	 DWORD PTR _sr$[ebp]
  0009a	d9 c0		 fld	 ST(0)
  0009c	d9 45 f4	 fld	 DWORD PTR _cp$[ebp]
  0009f	d9 c0		 fld	 ST(0)
  000a1	de ca		 fmulp	 ST(2), ST(0)
  000a3	d9 45 08	 fld	 DWORD PTR _cr$[ebp]
  000a6	d8 4d fc	 fmul	 DWORD PTR _sp$[ebp]
  000a9	d9 45 f0	 fld	 DWORD PTR _cy$[ebp]
  000ac	d9 c0		 fld	 ST(0)
  000ae	d8 cc		 fmul	 ST(0), ST(4)
  000b0	d9 45 ec	 fld	 DWORD PTR _sy$[ebp]
  000b3	d9 c0		 fld	 ST(0)
  000b5	d8 cc		 fmul	 ST(0), ST(4)
  000b7	de ea		 fsubp	 ST(2), ST(0)
  000b9	d9 c9		 fxch	 ST(1)
  000bb	d9 18		 fstp	 DWORD PTR [eax]

; 325  : 	quaternion[1]	= cr * sp * cy + sr * cp * sy;

  000bd	d9 c1		 fld	 ST(1)
  000bf	de cb		 fmulp	 ST(3), ST(0)
  000c1	d9 c0		 fld	 ST(0)
  000c3	de cd		 fmulp	 ST(5), ST(0)
  000c5	d9 ca		 fxch	 ST(2)
  000c7	de c4		 faddp	 ST(4), ST(0)
  000c9	d9 cb		 fxch	 ST(3)
  000cb	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 326  : 	quaternion[2]	= cr * cp * sy - sr * sp * cy;

  000ce	d9 45 08	 fld	 DWORD PTR _cr$[ebp]
  000d1	de ca		 fmulp	 ST(2), ST(0)
  000d3	d9 45 fc	 fld	 DWORD PTR _sp$[ebp]
  000d6	de cc		 fmulp	 ST(4), ST(0)
  000d8	d9 c0		 fld	 ST(0)
  000da	d8 ca		 fmul	 ST(0), ST(2)
  000dc	d9 c3		 fld	 ST(3)
  000de	d8 cd		 fmul	 ST(0), ST(5)
  000e0	de e9		 fsubp	 ST(1), ST(0)
  000e2	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 327  : 	quaternion[3]	= cr * cp * cy + sr * sp * sy;

  000e5	de cb		 fmulp	 ST(3), ST(0)
  000e7	de c9		 fmulp	 ST(1), ST(0)
  000e9	de c1		 faddp	 ST(1), ST(0)
  000eb	d9 58 0c	 fstp	 DWORD PTR [eax+12]

; 328  : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
?AngleQuaternion@@YAXQBMPAM@Z ENDP			; AngleQuaternion
_TEXT	ENDS
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@bff0000000000000
PUBLIC	?QuaternionSlerp@@YAXPBMPAMM1@Z			; QuaternionSlerp
;	COMDAT __real@400921fb54442d18
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\zzzmathlib.cpp
CONST	ENDS
;	COMDAT ?QuaternionSlerp@@YAXPBMPAMM1@Z
_TEXT	SEGMENT
_sinom$ = -4						; size = 4
tv1730 = 8						; size = 4
tv1726 = 8						; size = 4
tv1721 = 8						; size = 4
tv1706 = 8						; size = 4
tv1702 = 8						; size = 4
tv1698 = 8						; size = 4
tv1669 = 8						; size = 4
tv1662 = 8						; size = 4
tv1657 = 8						; size = 4
tv1651 = 8						; size = 4
_sclp$ = 8						; size = 4
_cosom$ = 8						; size = 4
_b$ = 8							; size = 4
_p$ = 8							; size = 4
tv1646 = 12						; size = 4
tv1639 = 12						; size = 4
_sclq$ = 12						; size = 4
_omega$ = 12						; size = 4
_a$ = 12						; size = 4
_q$ = 12						; size = 4
_t$ = 16						; size = 4
_qt$ = 20						; size = 4
?QuaternionSlerp@@YAXPBMPAMM1@Z PROC			; QuaternionSlerp, COMDAT

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR _p$[ebp]
  00008	d9 06		 fld	 DWORD PTR [esi]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _q$[ebp]
  0000e	d8 27		 fsub	 DWORD PTR [edi]
  00010	d9 46 04	 fld	 DWORD PTR [esi+4]
  00013	d8 67 04	 fsub	 DWORD PTR [edi+4]
  00016	d9 46 08	 fld	 DWORD PTR [esi+8]
  00019	d8 67 08	 fsub	 DWORD PTR [edi+8]
  0001c	d9 46 0c	 fld	 DWORD PTR [esi+12]
  0001f	d8 67 0c	 fsub	 DWORD PTR [edi+12]

; 354  : 	int i;
; 355  : 	float omega;
; 356  : 	float cosom;
; 357  : 	float sinom;
; 358  : 	float sclp;
; 359  : 	float sclq;
; 360  : 	float a=0;
; 361  : 	float b=0;
; 362  : 
; 363  : 	for ( i=0;i<4;i++)
; 364  : 	{
; 365  : 		a += ( p[i] - q[i] ) * ( p[i] - q[i] );

  00022	d9 c3		 fld	 ST(3)
  00024	de cc		 fmulp	 ST(4), ST(0)
  00026	d9 ee		 fldz
  00028	dc c4		 fadd	 ST(4), ST(0)
  0002a	d9 cc		 fxch	 ST(4)
  0002c	d9 5d 08	 fstp	 DWORD PTR tv1730[ebp]
  0002f	d9 45 08	 fld	 DWORD PTR tv1730[ebp]
  00032	d9 c3		 fld	 ST(3)
  00034	de cc		 fmulp	 ST(4), ST(0)
  00036	de c3		 faddp	 ST(3), ST(0)
  00038	d9 ca		 fxch	 ST(2)
  0003a	d9 5d 08	 fstp	 DWORD PTR tv1726[ebp]
  0003d	d9 c0		 fld	 ST(0)
  0003f	de c9		 fmulp	 ST(1), ST(0)
  00041	d8 45 08	 fadd	 DWORD PTR tv1726[ebp]
  00044	d9 5d 08	 fstp	 DWORD PTR tv1721[ebp]
  00047	d9 c0		 fld	 ST(0)
  00049	de c9		 fmulp	 ST(1), ST(0)
  0004b	d8 45 08	 fadd	 DWORD PTR tv1721[ebp]
  0004e	d9 5d 0c	 fstp	 DWORD PTR _a$[ebp]
  00051	d9 06		 fld	 DWORD PTR [esi]
  00053	d8 07		 fadd	 DWORD PTR [edi]
  00055	d9 46 04	 fld	 DWORD PTR [esi+4]
  00058	d8 47 04	 fadd	 DWORD PTR [edi+4]
  0005b	d9 46 08	 fld	 DWORD PTR [esi+8]
  0005e	d8 47 08	 fadd	 DWORD PTR [edi+8]
  00061	d9 46 0c	 fld	 DWORD PTR [esi+12]
  00064	d8 47 0c	 fadd	 DWORD PTR [edi+12]

; 366  : 		b += ( p[i] + q[i] ) * ( p[i] + q[i] );

  00067	d9 c3		 fld	 ST(3)
  00069	de cc		 fmulp	 ST(4), ST(0)
  0006b	d9 cb		 fxch	 ST(3)
  0006d	de c4		 faddp	 ST(4), ST(0)
  0006f	d9 cb		 fxch	 ST(3)
  00071	d9 5d 08	 fstp	 DWORD PTR tv1706[ebp]
  00074	d9 c0		 fld	 ST(0)
  00076	de c9		 fmulp	 ST(1), ST(0)
  00078	d8 45 08	 fadd	 DWORD PTR tv1706[ebp]
  0007b	d9 5d 08	 fstp	 DWORD PTR tv1702[ebp]
  0007e	d9 45 08	 fld	 DWORD PTR tv1702[ebp]
  00081	d9 c2		 fld	 ST(2)
  00083	de cb		 fmulp	 ST(3), ST(0)
  00085	de c2		 faddp	 ST(2), ST(0)
  00087	d9 c9		 fxch	 ST(1)
  00089	d9 5d 08	 fstp	 DWORD PTR tv1698[ebp]
  0008c	d9 c0		 fld	 ST(0)
  0008e	de c9		 fmulp	 ST(1), ST(0)
  00090	d8 45 08	 fadd	 DWORD PTR tv1698[ebp]
  00093	d9 5d 08	 fstp	 DWORD PTR _b$[ebp]

; 367  : 	}
; 368  : 
; 369  : 	if ( a > b )

  00096	d9 45 0c	 fld	 DWORD PTR _a$[ebp]
  00099	d9 45 08	 fld	 DWORD PTR _b$[ebp]
  0009c	de d9		 fcompp
  0009e	df e0		 fnstsw	 ax
  000a0	f6 c4 05	 test	 ah, 5
  000a3	7a 1e		 jp	 SHORT $LN49@Quaternion

; 370  : 	{
; 371  : 		for ( i=0;i<4;i++)
; 372  : 		{
; 373  : 			q[i] = -q[i];

  000a5	d9 07		 fld	 DWORD PTR [edi]
  000a7	d9 e0		 fchs
  000a9	d9 1f		 fstp	 DWORD PTR [edi]
  000ab	d9 47 04	 fld	 DWORD PTR [edi+4]
  000ae	d9 e0		 fchs
  000b0	d9 5f 04	 fstp	 DWORD PTR [edi+4]
  000b3	d9 47 08	 fld	 DWORD PTR [edi+8]
  000b6	d9 e0		 fchs
  000b8	d9 5f 08	 fstp	 DWORD PTR [edi+8]
  000bb	d9 47 0c	 fld	 DWORD PTR [edi+12]
  000be	d9 e0		 fchs
  000c0	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
$LN49@Quaternion:

; 374  : 		}
; 375  : 	}
; 376  : 
; 377  : 	cosom = p[0] * q[0] + p[1] * q[1] + p[2] * q[2] + p[3] * q[3];

  000c3	d9 46 04	 fld	 DWORD PTR [esi+4]
  000c6	d8 4f 04	 fmul	 DWORD PTR [edi+4]
  000c9	d9 06		 fld	 DWORD PTR [esi]
  000cb	d8 0f		 fmul	 DWORD PTR [edi]
  000cd	de c1		 faddp	 ST(1), ST(0)
  000cf	d9 46 08	 fld	 DWORD PTR [esi+8]
  000d2	d8 4f 08	 fmul	 DWORD PTR [edi+8]
  000d5	de c1		 faddp	 ST(1), ST(0)
  000d7	d9 46 0c	 fld	 DWORD PTR [esi+12]
  000da	d8 4f 0c	 fmul	 DWORD PTR [edi+12]
  000dd	de c1		 faddp	 ST(1), ST(0)
  000df	d9 5d 08	 fstp	 DWORD PTR _cosom$[ebp]

; 378  : 
; 379  : 	if ( ( (double)1 + cosom) > 1 )

  000e2	d9 45 08	 fld	 DWORD PTR _cosom$[ebp]
  000e5	d9 c0		 fld	 ST(0)
  000e7	d9 e8		 fld1
  000e9	dc c1		 fadd	 ST(1), ST(0)
  000eb	d8 d1		 fcom	 ST(1)
  000ed	df e0		 fnstsw	 ax
  000ef	dd d9		 fstp	 ST(1)
  000f1	f6 c4 05	 test	 ah, 5
  000f4	0f 8a cc 00 00
	00		 jp	 $LN64@Quaternion

; 380  : 	{
; 381  : 		if ( (1 - cosom ) > -1 )

  000fa	d9 c1		 fld	 ST(1)
  000fc	d8 e9		 fsubr	 ST(0), ST(1)
  000fe	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@bff0000000000000
  00104	df e0		 fnstsw	 ax
  00106	f6 c4 41	 test	 ah, 65			; 00000041H
  00109	75 5e		 jne	 SHORT $LN67@Quaternion
  0010b	dd d8		 fstp	 ST(0)

; 382  : 		{
; 383  : 			omega = acos(cosom);

  0010d	e8 00 00 00 00	 call	 __CIacos
  00112	d9 5d 08	 fstp	 DWORD PTR tv1669[ebp]
  00115	d9 45 08	 fld	 DWORD PTR tv1669[ebp]
  00118	d9 5d 0c	 fstp	 DWORD PTR _omega$[ebp]

; 384  : 			sinom = sin(omega);

  0011b	d9 45 0c	 fld	 DWORD PTR _omega$[ebp]
  0011e	e8 00 00 00 00	 call	 __CIsin
  00123	d9 5d 08	 fstp	 DWORD PTR tv1662[ebp]
  00126	d9 45 08	 fld	 DWORD PTR tv1662[ebp]
  00129	d9 5d fc	 fstp	 DWORD PTR _sinom$[ebp]

; 385  : 			sclp = sin((1 - t) * omega) / sinom;

  0012c	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  0012f	d9 e8		 fld1
  00131	de e1		 fsubrp	 ST(1), ST(0)
  00133	d8 4d 0c	 fmul	 DWORD PTR _omega$[ebp]
  00136	d9 5d 08	 fstp	 DWORD PTR tv1657[ebp]
  00139	d9 45 08	 fld	 DWORD PTR tv1657[ebp]
  0013c	e8 00 00 00 00	 call	 __CIsin
  00141	d9 5d 08	 fstp	 DWORD PTR tv1651[ebp]
  00144	d9 45 08	 fld	 DWORD PTR tv1651[ebp]
  00147	d8 75 fc	 fdiv	 DWORD PTR _sinom$[ebp]
  0014a	d9 5d 08	 fstp	 DWORD PTR _sclp$[ebp]

; 386  : 			sclq = sin(t * omega) / sinom;

  0014d	d9 45 0c	 fld	 DWORD PTR _omega$[ebp]
  00150	d8 4d 10	 fmul	 DWORD PTR _t$[ebp]
  00153	d9 5d 0c	 fstp	 DWORD PTR tv1646[ebp]
  00156	d9 45 0c	 fld	 DWORD PTR tv1646[ebp]
  00159	e8 00 00 00 00	 call	 __CIsin
  0015e	d9 5d 0c	 fstp	 DWORD PTR tv1639[ebp]
  00161	d9 45 0c	 fld	 DWORD PTR tv1639[ebp]
  00164	d8 75 fc	 fdiv	 DWORD PTR _sinom$[ebp]

; 387  : 		}
; 388  : 		else

  00167	eb 0e		 jmp	 SHORT $LN69@Quaternion
$LN67@Quaternion:

; 380  : 	{
; 381  : 		if ( (1 - cosom ) > -1 )

  00169	dd d9		 fstp	 ST(1)

; 389  : 		{
; 390  : 			sclp = 1 - t;

  0016b	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  0016e	d9 c0		 fld	 ST(0)
  00170	de ea		 fsubp	 ST(2), ST(0)
  00172	d9 c9		 fxch	 ST(1)
  00174	d9 5d 08	 fstp	 DWORD PTR _sclp$[ebp]
$LN69@Quaternion:

; 391  : 			sclq = t;

  00177	d9 5d 0c	 fstp	 DWORD PTR _sclq$[ebp]

; 392  : 		}
; 393  : 
; 394  : 		for ( i=0;i<4;i++)
; 395  : 		{
; 396  : 			qt[i] = sclp * p[i] + sclq * q[i];

  0017a	8b 45 14	 mov	 eax, DWORD PTR _qt$[ebp]
  0017d	d9 06		 fld	 DWORD PTR [esi]
  0017f	d9 45 08	 fld	 DWORD PTR _sclp$[ebp]
  00182	d9 c0		 fld	 ST(0)
  00184	de ca		 fmulp	 ST(2), ST(0)
  00186	d9 07		 fld	 DWORD PTR [edi]
  00188	d9 45 0c	 fld	 DWORD PTR _sclq$[ebp]
  0018b	d9 c0		 fld	 ST(0)
  0018d	de ca		 fmulp	 ST(2), ST(0)
  0018f	d9 cb		 fxch	 ST(3)
  00191	de c1		 faddp	 ST(1), ST(0)
  00193	d9 18		 fstp	 DWORD PTR [eax]
  00195	d9 47 04	 fld	 DWORD PTR [edi+4]
  00198	d8 ca		 fmul	 ST(0), ST(2)
  0019a	d9 46 04	 fld	 DWORD PTR [esi+4]
  0019d	d8 ca		 fmul	 ST(0), ST(2)
  0019f	de c1		 faddp	 ST(1), ST(0)
  001a1	d9 58 04	 fstp	 DWORD PTR [eax+4]
  001a4	d9 47 08	 fld	 DWORD PTR [edi+8]
  001a7	d8 ca		 fmul	 ST(0), ST(2)
  001a9	d9 46 08	 fld	 DWORD PTR [esi+8]
  001ac	d8 ca		 fmul	 ST(0), ST(2)
  001ae	de c1		 faddp	 ST(1), ST(0)
  001b0	d9 58 08	 fstp	 DWORD PTR [eax+8]
  001b3	d9 47 0c	 fld	 DWORD PTR [edi+12]
  001b6	5f		 pop	 edi
  001b7	de ca		 fmulp	 ST(2), ST(0)
  001b9	d8 4e 0c	 fmul	 DWORD PTR [esi+12]
  001bc	5e		 pop	 esi
  001bd	de c1		 faddp	 ST(1), ST(0)
  001bf	d9 58 0c	 fstp	 DWORD PTR [eax+12]

; 411  : 		}
; 412  : 	}
; 413  : 
; 414  : 
; 415  : }

  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c3		 ret	 0
$LN64@Quaternion:

; 378  : 
; 379  : 	if ( ( (double)1 + cosom) > 1 )

  001c6	dd d9		 fstp	 ST(1)
  001c8	53		 push	 ebx

; 397  : 		}
; 398  : 	}
; 399  : 	else
; 400  : 	{
; 401  : 		qt[0] = -p[1];

  001c9	d9 46 04	 fld	 DWORD PTR [esi+4]
  001cc	8b 5d 14	 mov	 ebx, DWORD PTR _qt$[ebp]
  001cf	d9 e0		 fchs
  001d1	d9 1b		 fstp	 DWORD PTR [ebx]

; 402  : 		qt[1] = p[0];

  001d3	d9 06		 fld	 DWORD PTR [esi]
  001d5	d9 5b 04	 fstp	 DWORD PTR [ebx+4]

; 403  : 		qt[2] = -p[3];

  001d8	d9 46 0c	 fld	 DWORD PTR [esi+12]
  001db	d9 e0		 fchs
  001dd	d9 5b 08	 fstp	 DWORD PTR [ebx+8]

; 404  : 		qt[3] = p[2];

  001e0	d9 46 08	 fld	 DWORD PTR [esi+8]
  001e3	d9 5b 0c	 fstp	 DWORD PTR [ebx+12]

; 405  : 		sclp = sin(( 1 - t ) * 0.5 * M_PI);

  001e6	d8 65 10	 fsub	 DWORD PTR _t$[ebp]
  001e9	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  001ef	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@400921fb54442d18
  001f5	e8 00 00 00 00	 call	 __CIsin
  001fa	d9 5d 08	 fstp	 DWORD PTR _sclp$[ebp]

; 406  : 		sclq = sin( t * 0.5 * M_PI );

  001fd	d9 45 10	 fld	 DWORD PTR _t$[ebp]
  00200	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  00206	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@400921fb54442d18
  0020c	e8 00 00 00 00	 call	 __CIsin
  00211	d9 5d 0c	 fstp	 DWORD PTR _sclq$[ebp]

; 407  : 
; 408  : 		for ( i=0;i<3;i++)
; 409  : 		{
; 410  : 			qt[i] = sclp * p[i] + sclq * q[i];

  00214	d9 06		 fld	 DWORD PTR [esi]
  00216	d9 45 08	 fld	 DWORD PTR _sclp$[ebp]
  00219	d9 c0		 fld	 ST(0)
  0021b	de ca		 fmulp	 ST(2), ST(0)
  0021d	d9 07		 fld	 DWORD PTR [edi]
  0021f	d9 45 0c	 fld	 DWORD PTR _sclq$[ebp]
  00222	d9 c0		 fld	 ST(0)
  00224	de ca		 fmulp	 ST(2), ST(0)
  00226	d9 cb		 fxch	 ST(3)
  00228	de c1		 faddp	 ST(1), ST(0)
  0022a	d9 1b		 fstp	 DWORD PTR [ebx]
  0022c	d9 47 04	 fld	 DWORD PTR [edi+4]
  0022f	d8 ca		 fmul	 ST(0), ST(2)
  00231	d9 46 04	 fld	 DWORD PTR [esi+4]
  00234	d8 ca		 fmul	 ST(0), ST(2)
  00236	de c1		 faddp	 ST(1), ST(0)
  00238	d9 5b 04	 fstp	 DWORD PTR [ebx+4]
  0023b	d9 47 08	 fld	 DWORD PTR [edi+8]
  0023e	de ca		 fmulp	 ST(2), ST(0)
  00240	d8 4e 08	 fmul	 DWORD PTR [esi+8]
  00243	de c1		 faddp	 ST(1), ST(0)
  00245	d9 5b 08	 fstp	 DWORD PTR [ebx+8]
  00248	5b		 pop	 ebx
  00249	5f		 pop	 edi
  0024a	5e		 pop	 esi

; 411  : 		}
; 412  : 	}
; 413  : 
; 414  : 
; 415  : }

  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
?QuaternionSlerp@@YAXPBMPAMM1@Z ENDP			; QuaternionSlerp
_TEXT	ENDS
PUBLIC	?FaceNormalize@@YAXPAM000@Z			; FaceNormalize
; Function compile flags: /Ogtp
;	COMDAT ?FaceNormalize@@YAXPAM000@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v3$ = 16						; size = 4
_Normal$ = 20						; size = 4
?FaceNormalize@@YAXPAM000@Z PROC			; FaceNormalize, COMDAT

; 421  : 	float nx = ( v2[1] - v1[1] ) * ( v3[2] - v1[2] ) - ( v3[1] - v1[1] ) * ( v2[2] - v1[2] );
; 422  : 	float ny = ( v2[1] - v1[1] ) * ( v3[2] - v1[2] ) - ( v3[1] - v1[1] ) * ( v2[2] - v1[2] );
; 423  : 	float nz = ( v2[1] - v1[1] ) * ( v3[2] - v1[2] ) - ( v3[1] - v1[1] ) * ( v2[2] - v1[2] );
; 424  : 	double dot = sqrt( nx * nx + ny * ny + nz * nz );
; 425  : }

  00000	c3		 ret	 0
?FaceNormalize@@YAXPAM000@Z ENDP			; FaceNormalize
_TEXT	ENDS
END
