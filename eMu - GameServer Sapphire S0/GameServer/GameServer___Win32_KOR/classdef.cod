; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\classdef.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7classdef@@6B@				; classdef::`vftable'
PUBLIC	??1classdef@@UAE@XZ				; classdef::~classdef
PUBLIC	??_R4classdef@@6B@				; classdef::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVclassdef@@@8				; classdef `RTTI Type Descriptor'
PUBLIC	??_R3classdef@@8				; classdef::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2classdef@@8				; classdef::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@classdef@@8			; classdef::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Eclassdef@@UAEPAXI@Z:PROC			; classdef::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@classdef@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\classdef.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@classdef@@8 DD FLAT:??_R0?AVclassdef@@@8	; classdef::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3classdef@@8
rdata$r	ENDS
;	COMDAT ??_R2classdef@@8
rdata$r	SEGMENT
??_R2classdef@@8 DD FLAT:??_R1A@?0A@EA@classdef@@8	; classdef::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3classdef@@8
rdata$r	SEGMENT
??_R3classdef@@8 DD 00H					; classdef::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2classdef@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVclassdef@@@8
_DATA	SEGMENT
??_R0?AVclassdef@@@8 DD FLAT:??_7type_info@@6B@		; classdef `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVclassdef@@', 00H
_DATA	ENDS
;	COMDAT ??_R4classdef@@6B@
rdata$r	SEGMENT
??_R4classdef@@6B@ DD 00H				; classdef::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVclassdef@@@8
	DD	FLAT:??_R3classdef@@8
rdata$r	ENDS
;	COMDAT ??_7classdef@@6B@
CONST	SEGMENT
??_7classdef@@6B@ DD FLAT:??_R4classdef@@6B@		; classdef::`vftable'
	DD	FLAT:??_Eclassdef@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1classdef@@UAE@XZ
_TEXT	SEGMENT
??1classdef@@UAE@XZ PROC				; classdef::~classdef, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7classdef@@6B@

; 21   : 	return;
; 22   : }

  00006	c3		 ret	 0
??1classdef@@UAE@XZ ENDP				; classdef::~classdef
_TEXT	ENDS
PUBLIC	?SetEquipment@classdef@@QAEXH@Z			; classdef::SetEquipment
EXTRN	?Convert@CItem@@QAEXHEEEEEEE@Z:PROC		; CItem::Convert
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
; Function compile flags: /Ogtp
;	COMDAT ?SetEquipment@classdef@@QAEXH@Z
_TEXT	SEGMENT
tv64 = -12						; size = 4
_this$ = -8						; size = 4
_right_type$ = -4					; size = 4
_Class$ = 8						; size = 4
?SetEquipment@classdef@@QAEXH@Z PROC			; classdef::SetEquipment, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 70   : 	int def_type=0;

  00008	8b 75 08	 mov	 esi, DWORD PTR _Class$[ebp]
  0000b	69 f6 60 09 00
	00		 imul	 esi, 2400		; 00000960H
  00011	57		 push	 edi
  00012	33 ff		 xor	 edi, edi
  00014	03 f1		 add	 esi, ecx
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	int right_type=0;

  00019	89 7d fc	 mov	 DWORD PTR _right_type$[ebp], edi
  0001c	8d 5e 30	 lea	 ebx, DWORD PTR [esi+48]
  0001f	c7 45 f4 0d 00
	00 00		 mov	 DWORD PTR tv64[ebp], 13	; 0000000dH
$LL16@SetEquipme:

; 72   : 	int n;
; 73   : 
; 74   : 	for (n=0;n<MAX_PLAYER_EQUIPMENT+1;n++)
; 75   : 	{
; 76   : 		this->DefClass[Class].Equipment[n].Clear();

  00026	8b cb		 mov	 ecx, ebx
  00028	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
  0002d	81 c3 a8 00 00
	00		 add	 ebx, 168		; 000000a8H
  00033	ff 4d f4	 dec	 DWORD PTR tv64[ebp]
  00036	75 ee		 jne	 SHORT $LL16@SetEquipme

; 77   : 	}
; 78   : 
; 79   : 	switch (Class)

  00038	8b 5d 08	 mov	 ebx, DWORD PTR _Class$[ebp]
  0003b	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0003e	83 f8 03	 cmp	 eax, 3
  00041	77 40		 ja	 SHORT $LN21@SetEquipme
  00043	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN26@SetEquipme[eax*4]
$LN11@SetEquipme:

; 80   : 	{
; 81   : 		case CLASS_KNIGHT:
; 82   : 			def_type = ItemGetNumberMake(1, 0);

  0004a	6a 00		 push	 0
  0004c	6a 01		 push	 1
  0004e	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00053	83 c4 08	 add	 esp, 8
  00056	8b f8		 mov	 edi, eax

; 83   : 			break;

  00058	eb 29		 jmp	 SHORT $LN21@SetEquipme
$LN10@SetEquipme:

; 84   : 
; 85   : 		case CLASS_ELF:
; 86   : 			def_type = ItemGetNumberMake(4, 0);

  0005a	6a 00		 push	 0
  0005c	6a 04		 push	 4
  0005e	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake

; 87   : 			right_type = ItemGetNumberMake(4, 15);

  00063	6a 0f		 push	 15			; 0000000fH
  00065	6a 04		 push	 4

; 88   : 			break;

  00067	eb 0d		 jmp	 SHORT $LN24@SetEquipme
$LN8@SetEquipme:

; 89   : 
; 90   : 		case CLASS_DARKLORD:
; 91   : 			def_type = ItemGetNumberMake(6, 0);
; 92   : 			right_type = ItemGetNumberMake(0, 1);
; 93   : 			break;
; 94   : 
; 95   : 		case CLASS_MAGUMSA:
; 96   : 			def_type = ItemGetNumberMake(6, 0);

  00069	6a 00		 push	 0
  0006b	6a 06		 push	 6
  0006d	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake

; 97   : 			right_type = ItemGetNumberMake(0, 1);

  00072	6a 01		 push	 1
  00074	6a 00		 push	 0
$LN24@SetEquipme:
  00076	8b f8		 mov	 edi, eax
  00078	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	89 45 fc	 mov	 DWORD PTR _right_type$[ebp], eax
$LN21@SetEquipme:

; 98   : 			break;
; 99   : 	}
; 100  : 
; 101  : 	if ( Class != 0 )

  00083	85 db		 test	 ebx, ebx
  00085	0f 84 9f 00 00
	00		 je	 $LN22@SetEquipme

; 102  : 	{
; 103  : 		if ( Class == CLASS_DARKLORD )

  0008b	83 fb 04	 cmp	 ebx, 4
  0008e	75 48		 jne	 SHORT $LN6@SetEquipme

; 104  : 		{
; 105  : 			this->DefClass[Class].Equipment[0].m_Level = 0;

  00090	8b 5d f8	 mov	 ebx, DWORD PTR _this$[ebp]

; 106  : 			this->DefClass[Class].Equipment[1].m_Level = 0;
; 107  : 			this->DefClass[Class].Equipment[0].Convert(right_type, 0,0,0,0,0,0,CURRENT_DB_VERSION);

  00093	8b 45 fc	 mov	 eax, DWORD PTR _right_type$[ebp]
  00096	33 d2		 xor	 edx, edx
  00098	6a 03		 push	 3
  0009a	52		 push	 edx
  0009b	52		 push	 edx
  0009c	52		 push	 edx
  0009d	52		 push	 edx
  0009e	52		 push	 edx
  0009f	33 c9		 xor	 ecx, ecx
  000a1	52		 push	 edx
  000a2	66 89 8b b8 25
	00 00		 mov	 WORD PTR [ebx+9656], cx
  000a9	50		 push	 eax
  000aa	8d 8b b0 25 00
	00		 lea	 ecx, DWORD PTR [ebx+9648]
  000b0	66 89 93 60 26
	00 00		 mov	 WORD PTR [ebx+9824], dx
  000b7	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEE@Z ; CItem::Convert

; 108  : 			this->DefClass[Class].Equipment[1].Convert(def_type, 0,0,0,0,0,0,CURRENT_DB_VERSION);

  000bc	6a 03		 push	 3
  000be	6a 00		 push	 0
  000c0	6a 00		 push	 0
  000c2	6a 00		 push	 0
  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	6a 00		 push	 0
  000ca	57		 push	 edi
  000cb	8d 8b 58 26 00
	00		 lea	 ecx, DWORD PTR [ebx+9816]
  000d1	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEE@Z ; CItem::Convert
  000d6	eb 55		 jmp	 SHORT $LN2@SetEquipme
$LN6@SetEquipme:

; 109  : 		}
; 110  : 		else if ( Class == CLASS_ELF || Class == CLASS_MAGUMSA )

  000d8	83 fb 02	 cmp	 ebx, 2
  000db	74 10		 je	 SHORT $LN23@SetEquipme
  000dd	83 fb 03	 cmp	 ebx, 3
  000e0	74 0b		 je	 SHORT $LN23@SetEquipme

; 116  : 		}
; 117  : 		else
; 118  : 		{
; 119  : 			this->DefClass[Class].Equipment[0].m_Level = 0;

  000e2	33 c9		 xor	 ecx, ecx
  000e4	66 89 4e 38	 mov	 WORD PTR [esi+56], cx

; 120  : 			this->DefClass[Class].Equipment[0].Convert(def_type, 0,0,0,0,0,0,CURRENT_DB_VERSION);

  000e8	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  000eb	eb 29		 jmp	 SHORT $LN25@SetEquipme
$LN23@SetEquipme:

; 111  : 		{
; 112  : 			this->DefClass[Class].Equipment[0].m_Level = 0;
; 113  : 			this->DefClass[Class].Equipment[1].m_Level = 0;
; 114  : 			this->DefClass[Class].Equipment[0].Convert(right_type, 0,0,0,0,0,0,CURRENT_DB_VERSION);

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _right_type$[ebp]
  000f0	33 c0		 xor	 eax, eax
  000f2	6a 03		 push	 3
  000f4	50		 push	 eax
  000f5	50		 push	 eax
  000f6	50		 push	 eax
  000f7	50		 push	 eax
  000f8	50		 push	 eax
  000f9	50		 push	 eax
  000fa	33 d2		 xor	 edx, edx
  000fc	51		 push	 ecx
  000fd	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00100	66 89 56 38	 mov	 WORD PTR [esi+56], dx
  00104	66 89 86 e0 00
	00 00		 mov	 WORD PTR [esi+224], ax
  0010b	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEE@Z ; CItem::Convert

; 115  : 			this->DefClass[Class].Equipment[1].Convert(def_type, 0,0,0,0,0,0,CURRENT_DB_VERSION);

  00110	8d 8e d8 00 00
	00		 lea	 ecx, DWORD PTR [esi+216]
$LN25@SetEquipme:
  00116	6a 03		 push	 3
  00118	6a 00		 push	 0
  0011a	6a 00		 push	 0
  0011c	6a 00		 push	 0
  0011e	6a 00		 push	 0
  00120	6a 00		 push	 0
  00122	6a 00		 push	 0
  00124	57		 push	 edi
  00125	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEE@Z ; CItem::Convert
$LN22@SetEquipme:
  0012a	8b 5d f8	 mov	 ebx, DWORD PTR _this$[ebp]
$LN2@SetEquipme:

; 121  : 		}
; 122  : 	}
; 123  : 
; 124  : 	if ( this->m_BabubBanJiCreate == TRUE )

  0012d	83 bb e4 2e 00
	00 01		 cmp	 DWORD PTR [ebx+12004], 1
  00134	75 64		 jne	 SHORT $LN1@SetEquipme

; 125  : 	{
; 126  : 		def_type = ItemGetNumberMake(13, 20);

  00136	6a 14		 push	 20			; 00000014H
  00138	6a 0d		 push	 13			; 0000000dH
  0013a	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0013f	83 c4 08	 add	 esp, 8

; 127  : 		this->DefClass[Class].Equipment[12].m_Level = 1;
; 128  : 		this->DefClass[Class].Equipment[12].Convert(def_type, 0,0,0,0,0,0,CURRENT_DB_VERSION);

  00142	6a 03		 push	 3
  00144	6a 00		 push	 0
  00146	6a 00		 push	 0
  00148	6a 00		 push	 0
  0014a	6a 00		 push	 0
  0014c	6a 00		 push	 0
  0014e	6a 00		 push	 0
  00150	ba 01 00 00 00	 mov	 edx, 1
  00155	50		 push	 eax
  00156	8d 8e 10 08 00
	00		 lea	 ecx, DWORD PTR [esi+2064]
  0015c	66 89 96 18 08
	00 00		 mov	 WORD PTR [esi+2072], dx
  00163	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEE@Z ; CItem::Convert

; 129  : 		
; 130  : 		def_type = ItemGetNumberMake(13, 20);

  00168	6a 14		 push	 20			; 00000014H
  0016a	6a 0d		 push	 13			; 0000000dH
  0016c	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00171	83 c4 08	 add	 esp, 8

; 131  : 		this->DefClass[Class].Equipment[13].m_Level = 2;
; 132  : 		this->DefClass[Class].Equipment[13].Convert(def_type, 0,0,0,0,0,0,CURRENT_DB_VERSION);

  00174	6a 03		 push	 3
  00176	6a 00		 push	 0
  00178	6a 00		 push	 0
  0017a	6a 00		 push	 0
  0017c	6a 00		 push	 0
  0017e	6a 00		 push	 0
  00180	b9 02 00 00 00	 mov	 ecx, 2
  00185	6a 00		 push	 0
  00187	66 89 8e c0 08
	00 00		 mov	 WORD PTR [esi+2240], cx
  0018e	50		 push	 eax
  0018f	8d 8e b8 08 00
	00		 lea	 ecx, DWORD PTR [esi+2232]
  00195	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEE@Z ; CItem::Convert
$LN1@SetEquipme:
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi
  0019c	5b		 pop	 ebx

; 133  : 	}
; 134  : 
; 135  : }

  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c2 04 00	 ret	 4
  001a3	90		 npad	 1
$LN26@SetEquipme:
  001a4	00 00 00 00	 DD	 $LN11@SetEquipme
  001a8	00 00 00 00	 DD	 $LN10@SetEquipme
  001ac	00 00 00 00	 DD	 $LN8@SetEquipme
  001b0	00 00 00 00	 DD	 $LN8@SetEquipme
?SetEquipment@classdef@@QAEXH@Z ENDP			; classdef::SetEquipment
_TEXT	ENDS
PUBLIC	?GetDefPoint@classdef@@QAEHH@Z			; classdef::GetDefPoint
; Function compile flags: /Ogtp
;	COMDAT ?GetDefPoint@classdef@@QAEHH@Z
_TEXT	SEGMENT
_char_class$ = 8					; size = 4
?GetDefPoint@classdef@@QAEHH@Z PROC			; classdef::GetDefPoint, COMDAT
; _this$ = ecx

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 139  : 	if ( char_class < 0 || char_class > MAX_TYPE_PLAYER-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _char_class$[ebp]
  00006	83 f8 04	 cmp	 eax, 4
  00009	77 2c		 ja	 SHORT $LN1@GetDefPoin

; 142  : 	}
; 143  : 
; 144  : 	return this->DefClass[char_class].Strength + this->DefClass[char_class].Dexterity + this->DefClass[char_class].Vitality + this->DefClass[char_class].Energy + this->DefClass[char_class].Leadership;

  0000b	69 c0 60 09 00
	00		 imul	 eax, 2400		; 00000960H
  00011	0f b7 54 01 0e	 movzx	 edx, WORD PTR [ecx+eax+14]
  00016	03 c8		 add	 ecx, eax
  00018	0f b7 81 60 09
	00 00		 movzx	 eax, WORD PTR [ecx+2400]
  0001f	03 c2		 add	 eax, edx
  00021	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00025	03 c2		 add	 eax, edx
  00027	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  0002b	0f b7 49 08	 movzx	 ecx, WORD PTR [ecx+8]
  0002f	03 c2		 add	 eax, edx
  00031	03 c1		 add	 eax, ecx

; 145  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN1@GetDefPoin:

; 140  : 	{
; 141  : 		return 0;

  00037	33 c0		 xor	 eax, eax

; 145  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?GetDefPoint@classdef@@QAEHH@Z ENDP			; classdef::GetDefPoint
_TEXT	ENDS
PUBLIC	?SetMabubBanjiOption@classdef@@QAEXH@Z		; classdef::SetMabubBanjiOption
; Function compile flags: /Ogtp
;	COMDAT ?SetMabubBanjiOption@classdef@@QAEXH@Z
_TEXT	SEGMENT
_Flag$ = 8						; size = 4
?SetMabubBanjiOption@classdef@@QAEXH@Z PROC		; classdef::SetMabubBanjiOption, COMDAT
; _this$ = ecx

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 151  : 	this->m_BabubBanJiCreate=Flag;

  00003	8b 45 08	 mov	 eax, DWORD PTR _Flag$[ebp]
  00006	89 81 e4 2e 00
	00		 mov	 DWORD PTR [ecx+12004], eax

; 152  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetMabubBanjiOption@classdef@@QAEXH@Z ENDP		; classdef::SetMabubBanjiOption
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_Gclassdef@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gclassdef@@UAEPAXI@Z PROC				; classdef::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1classdef@@UAE@XZ	; classdef::~classdef
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_Gclassdef@@UAEPAXI@Z ENDP				; classdef::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0DEFAULTCLASSTYPE@@QAE@XZ			; DEFAULTCLASSTYPE::DEFAULTCLASSTYPE
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
; Function compile flags: /Ogtp
;	COMDAT ??0DEFAULTCLASSTYPE@@QAE@XZ
_TEXT	SEGMENT
??0DEFAULTCLASSTYPE@@QAE@XZ PROC			; DEFAULTCLASSTYPE::DEFAULTCLASSTYPE, COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	8d 73 2c	 lea	 esi, DWORD PTR [ebx+44]
  00008	bf 0d 00 00 00	 mov	 edi, 13			; 0000000dH
  0000d	8d 49 00	 npad	 3
$LL4@DEFAULTCLA:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  00017	81 c6 a8 00 00
	00		 add	 esi, 168		; 000000a8H
  0001d	4f		 dec	 edi
  0001e	79 f0		 jns	 SHORT $LL4@DEFAULTCLA
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	8b c3		 mov	 eax, ebx
  00024	5b		 pop	 ebx
  00025	c3		 ret	 0
??0DEFAULTCLASSTYPE@@QAE@XZ ENDP			; DEFAULTCLASSTYPE::DEFAULTCLASSTYPE
_TEXT	ENDS
PUBLIC	?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z	; classdef::SetCharacter
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
;	COMDAT ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z
_TEXT	SEGMENT
_Class$ = 8						; size = 4
_Str$ = 12						; size = 4
_Dex$ = 16						; size = 4
_Vit$ = 20						; size = 4
_Energy$ = 24						; size = 4
_Life$ = 28						; size = 4
_Mana$ = 32						; size = 4
_LevelLife$ = 36					; size = 4
_LevelMana$ = 40					; size = 4
_VitalityToLife$ = 44					; size = 4
_EnergyToMana$ = 48					; size = 4
_Leadership$ = 52					; size = 4
?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z PROC		; classdef::SetCharacter, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	this->DefClass[Class].Experience = 0;

  00003	8b 55 08	 mov	 edx, DWORD PTR _Class$[ebp]

; 46   : 
; 47   : 	this->DefClass[Class].Strength = Str;
; 48   : 	this->DefClass[Class].Dexterity = Dex;
; 49   : 	this->DefClass[Class].Vitality = Vit;
; 50   : 	this->DefClass[Class].Energy = Energy;
; 51   : 
; 52   : 	this->DefClass[Class].Life = Life;

  00006	d9 45 1c	 fld	 DWORD PTR _Life$[ebp]
  00009	8b c2		 mov	 eax, edx
  0000b	69 c0 60 09 00
	00		 imul	 eax, 2400		; 00000960H
  00011	d9 54 08 14	 fst	 DWORD PTR [eax+ecx+20]

; 53   : 	this->DefClass[Class].MaxLife = Life;

  00015	d9 5c 08 18	 fstp	 DWORD PTR [eax+ecx+24]

; 54   : 	this->DefClass[Class].LevelLife = LevelLife;

  00019	d9 45 24	 fld	 DWORD PTR _LevelLife$[ebp]
  0001c	d9 5c 08 10	 fstp	 DWORD PTR [eax+ecx+16]

; 55   : 	this->DefClass[Class].Mana = Mana;

  00020	d9 45 20	 fld	 DWORD PTR _Mana$[ebp]
  00023	d9 54 08 20	 fst	 DWORD PTR [eax+ecx+32]

; 56   : 	this->DefClass[Class].MaxMana = Mana;

  00027	d9 5c 08 24	 fstp	 DWORD PTR [eax+ecx+36]

; 57   : 	this->DefClass[Class].LevelMana = LevelMana;

  0002b	d9 45 28	 fld	 DWORD PTR _LevelMana$[ebp]
  0002e	03 c1		 add	 eax, ecx
  00030	56		 push	 esi
  00031	66 8b 75 0c	 mov	 si, WORD PTR _Str$[ebp]
  00035	66 89 70 08	 mov	 WORD PTR [eax+8], si
  00039	d9 58 1c	 fstp	 DWORD PTR [eax+28]
  0003c	66 8b 75 10	 mov	 si, WORD PTR _Dex$[ebp]

; 58   : 
; 59   : 	this->DefClass[Class].VitalityToLife = VitalityToLife;

  00040	d9 45 2c	 fld	 DWORD PTR _VitalityToLife$[ebp]
  00043	66 89 70 0a	 mov	 WORD PTR [eax+10], si
  00047	d9 58 28	 fstp	 DWORD PTR [eax+40]
  0004a	66 8b 75 14	 mov	 si, WORD PTR _Vit$[ebp]

; 60   : 	this->DefClass[Class].EnergyToMana = EnergyToMana;

  0004e	d9 45 30	 fld	 DWORD PTR _EnergyToMana$[ebp]
  00051	66 89 70 0c	 mov	 WORD PTR [eax+12], si
  00055	d9 58 2c	 fstp	 DWORD PTR [eax+44]
  00058	66 8b 75 18	 mov	 si, WORD PTR _Energy$[ebp]
  0005c	66 89 70 0e	 mov	 WORD PTR [eax+14], si

; 61   : 
; 62   : 	this->DefClass[Class].Leadership = Leadership;

  00060	66 8b 75 34	 mov	 si, WORD PTR _Leadership$[ebp]

; 63   : 
; 64   : 	this->SetEquipment(Class);

  00064	52		 push	 edx
  00065	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0006c	66 89 b0 60 09
	00 00		 mov	 WORD PTR [eax+2400], si
  00073	e8 00 00 00 00	 call	 ?SetEquipment@classdef@@QAEXH@Z ; classdef::SetEquipment
  00078	5e		 pop	 esi

; 65   : }

  00079	5d		 pop	 ebp
  0007a	c2 30 00	 ret	 48			; 00000030H
?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ENDP		; classdef::SetCharacter
_TEXT	ENDS
PUBLIC	??0classdef@@QAE@XZ				; classdef::classdef
; Function compile flags: /Ogtp
;	COMDAT ??0classdef@@QAE@XZ
_TEXT	SEGMENT
??0classdef@@QAE@XZ PROC				; classdef::classdef, COMDAT
; _this$ = ecx

; 15   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7classdef@@6B@
  0000b	bf 04 00 00 00	 mov	 edi, 4
  00010	8d 73 30	 lea	 esi, DWORD PTR [ebx+48]
$LL4@classdef:
  00013	68 00 00 00 00	 push	 OFFSET ??0CItem@@QAE@XZ	; CItem::CItem
  00018	6a 0e		 push	 14			; 0000000eH
  0001a	68 a8 00 00 00	 push	 168			; 000000a8H
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  00025	81 c6 60 09 00
	00		 add	 esi, 2400		; 00000960H
  0002b	4f		 dec	 edi
  0002c	79 e5		 jns	 SHORT $LL4@classdef

; 16   : 	this->m_BabubBanJiCreate = FALSE;

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c7 83 e4 2e 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+12004], 0

; 17   : }

  0003a	8b c3		 mov	 eax, ebx
  0003c	5b		 pop	 ebx
  0003d	c3		 ret	 0
??0classdef@@QAE@XZ ENDP				; classdef::classdef
_TEXT	ENDS
PUBLIC	__real@42b40000
PUBLIC	__real@42200000
PUBLIC	__real@42a00000
PUBLIC	__real@41f00000
PUBLIC	__real@3fc00000
PUBLIC	__real@42dc0000
PUBLIC	__real@41a00000
PUBLIC	__real@3f000000
PUBLIC	__real@40400000
PUBLIC	__real@42700000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	?Init@classdef@@QAEXXZ				; classdef::Init
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@42dc0000
CONST	SEGMENT
__real@42dc0000 DD 042dc0000r			; 110
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Init@classdef@@QAEXXZ
_TEXT	SEGMENT
?Init@classdef@@QAEXXZ PROC				; classdef::Init, COMDAT
; _this$ = ecx

; 27   : 	// Dark Wizard
; 28   : 	this->SetCharacter( 0, 18, 18, 15, 30, 60.0, 60.0, 1.0, 2.0, 2.0, 2.0, 0);

  00000	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00006	56		 push	 esi
  00007	6a 00		 push	 0
  00009	83 ec 18	 sub	 esp, 24			; 00000018H
  0000c	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  00010	8b f1		 mov	 esi, ecx
  00012	d9 54 24 10	 fst	 DWORD PTR [esp+16]
  00016	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  0001a	d9 e8		 fld1
  0001c	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00020	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42700000
  00026	d9 54 24 04	 fst	 DWORD PTR [esp+4]
  0002a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0002d	6a 1e		 push	 30			; 0000001eH
  0002f	6a 0f		 push	 15			; 0000000fH
  00031	6a 12		 push	 18			; 00000012H
  00033	6a 12		 push	 18			; 00000012H
  00035	6a 00		 push	 0
  00037	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 29   : 
; 30   : 	// Dark Knight
; 31   : 	this->SetCharacter( 1, 28, 20, 25, 10, 110.0, 20.0, 2.0, 0.5, 3.0, 1.0, 0);

  0003c	d9 e8		 fld1
  0003e	6a 00		 push	 0
  00040	83 ec 18	 sub	 esp, 24			; 00000018H
  00043	d9 5c 24 14	 fstp	 DWORD PTR [esp+20]
  00047	8b ce		 mov	 ecx, esi
  00049	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40400000
  0004f	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  00053	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f000000
  00059	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  0005d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00063	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00067	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41a00000
  0006d	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00071	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42dc0000
  00077	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007a	6a 0a		 push	 10			; 0000000aH
  0007c	6a 19		 push	 25			; 00000019H
  0007e	6a 14		 push	 20			; 00000014H
  00080	6a 1c		 push	 28			; 0000001cH
  00082	6a 01		 push	 1
  00084	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 32   : 
; 33   : 	// Elf
; 34   : 	this->SetCharacter( 2, 22, 25, 20, 15, 80.0, 30.0, 1.0, 1.5, 2.0, 1.5, 0);

  00089	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  0008f	6a 00		 push	 0
  00091	83 ec 18	 sub	 esp, 24			; 00000018H
  00094	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  00098	8b ce		 mov	 ecx, esi
  0009a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  000a0	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  000a4	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  000a8	d9 e8		 fld1
  000aa	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  000ae	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@41f00000
  000b4	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  000b8	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42a00000
  000be	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c1	6a 0f		 push	 15			; 0000000fH
  000c3	6a 14		 push	 20			; 00000014H
  000c5	6a 19		 push	 25			; 00000019H
  000c7	6a 16		 push	 22			; 00000016H
  000c9	6a 02		 push	 2
  000cb	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 35   : 
; 36   : 	// Magic Gladiator
; 37   : 	this->SetCharacter( 3, 26, 26, 26, 26, 110.0, 60.0, 1.0, 1.0, 2.0, 2.0, 0);

  000d0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  000d6	6a 00		 push	 0
  000d8	83 ec 18	 sub	 esp, 24			; 00000018H
  000db	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  000df	8b ce		 mov	 ecx, esi
  000e1	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  000e5	d9 e8		 fld1
  000e7	d9 54 24 0c	 fst	 DWORD PTR [esp+12]
  000eb	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  000ef	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42700000
  000f5	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  000f9	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42dc0000
  000ff	d9 1c 24	 fstp	 DWORD PTR [esp]
  00102	6a 1a		 push	 26			; 0000001aH
  00104	6a 1a		 push	 26			; 0000001aH
  00106	6a 1a		 push	 26			; 0000001aH
  00108	6a 1a		 push	 26			; 0000001aH
  0010a	6a 03		 push	 3
  0010c	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter

; 38   : 
; 39   : 	// Dark Lord
; 40   : 	this->SetCharacter( 4, 26, 20, 20, 15, 90.0, 40.0, 1.5, 1.0, 2.0, 1.5, 25);

  00111	6a 19		 push	 25			; 00000019H
  00113	83 ec 18	 sub	 esp, 24			; 00000018H
  00116	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3fc00000
  0011c	8b ce		 mov	 ecx, esi
  0011e	d9 54 24 14	 fst	 DWORD PTR [esp+20]
  00122	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00128	d9 5c 24 10	 fstp	 DWORD PTR [esp+16]
  0012c	d9 e8		 fld1
  0012e	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00132	d9 5c 24 08	 fstp	 DWORD PTR [esp+8]
  00136	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42200000
  0013c	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00140	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42b40000
  00146	d9 1c 24	 fstp	 DWORD PTR [esp]
  00149	6a 0f		 push	 15			; 0000000fH
  0014b	6a 14		 push	 20			; 00000014H
  0014d	6a 14		 push	 20			; 00000014H
  0014f	6a 1a		 push	 26			; 0000001aH
  00151	6a 04		 push	 4
  00153	e8 00 00 00 00	 call	 ?SetCharacter@classdef@@QAEXHHHHHMMMMMMH@Z ; classdef::SetCharacter
  00158	5e		 pop	 esi

; 41   : }

  00159	c3		 ret	 0
?Init@classdef@@QAEXXZ ENDP				; classdef::Init
_TEXT	ENDS
END
