; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\MapClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
_DATA	ENDS
PUBLIC	?MapNumberCheck@@YAHH@Z				; MapNumberCheck
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\mapclass.cpp
;	COMDAT ?MapNumberCheck@@YAHH@Z
_TEXT	SEGMENT
_map$ = 8						; size = 4
?MapNumberCheck@@YAHH@Z PROC				; MapNumberCheck, COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 	if ( map < 0 || map > MAX_NUMBER_MAP-1 )

  00003	b8 27 00 00 00	 mov	 eax, 39			; 00000027H
  00008	3b 45 08	 cmp	 eax, DWORD PTR _map$[ebp]
  0000b	1b c0		 sbb	 eax, eax
  0000d	40		 inc	 eax

; 47   : 	{
; 48   : 		return FALSE;
; 49   : 	}
; 50   : 	return TRUE;
; 51   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?MapNumberCheck@@YAHH@Z ENDP				; MapNumberCheck
_TEXT	ENDS
PUBLIC	?GetWeather@MapClass@@QAEEXZ			; MapClass::GetWeather
; Function compile flags: /Ogtp
;	COMDAT ?GetWeather@MapClass@@QAEEXZ
_TEXT	SEGMENT
?GetWeather@MapClass@@QAEEXZ PROC			; MapClass::GetWeather, COMDAT
; _this$ = ecx

; 190  : 	BYTE weather = this->m_Weather *16;

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]
  00003	c0 e0 04	 shl	 al, 4

; 191  : 	weather |= this->m_WeatherVariation ;

  00006	0a 41 05	 or	 al, BYTE PTR [ecx+5]

; 192  : 	return weather;
; 193  : }

  00009	c3		 ret	 0
?GetWeather@MapClass@@QAEEXZ ENDP			; MapClass::GetWeather
_TEXT	ENDS
PUBLIC	?SetWeather@MapClass@@QAEXEE@Z			; MapClass::SetWeather
EXTRN	?CGWeatherSend@@YAXHE@Z:PROC			; CGWeatherSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
; Function compile flags: /Ogtp
;	COMDAT ?SetWeather@MapClass@@QAEXEE@Z
_TEXT	SEGMENT
_weather$ = 8						; size = 1
_a_weather$ = 8						; size = 1
_a_variation$ = 12					; size = 1
?SetWeather@MapClass@@QAEXEE@Z PROC			; MapClass::SetWeather, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 	LPOBJ lpObj;
; 198  : 	BYTE weather;
; 199  : 	int n;
; 200  : 
; 201  : 	this->m_Weather = a_weather;

  00003	8a 45 08	 mov	 al, BYTE PTR _a_weather$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 202  : 	this->m_WeatherVariation = a_variation;

  00009	8a 4d 0c	 mov	 cl, BYTE PTR _a_variation$[ebp]
  0000c	88 43 04	 mov	 BYTE PTR [ebx+4], al
  0000f	56		 push	 esi

; 203  : 	weather = this->m_Weather * 16;	// like << 4

  00010	c0 e0 04	 shl	 al, 4

; 204  : 	weather |= this->m_WeatherVariation;

  00013	0a c1		 or	 al, cl
  00015	57		 push	 edi
  00016	88 4b 05	 mov	 BYTE PTR [ebx+5], cl
  00019	88 45 08	 mov	 BYTE PTR _weather$[ebp], al

; 205  : 	
; 206  : 	for (int n=OBJ_STARTUSERINDEX ; n<OBJMAX ; n++ )

  0001c	bf 00 19 00 00	 mov	 edi, 6400		; 00001900H
  00021	be 62 c4 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046498
$LL4@SetWeather:

; 207  : 	{
; 208  : 		lpObj = &gObj[n];
; 209  : 
; 210  : 		if ( lpObj->Connected > PLAYER_CONNECTED && lpObj->Live != 0 && lpObj->MapNumber == this->thisMapNumber )

  00026	80 7e a2 01	 cmp	 BYTE PTR [esi-94], 1
  0002a	76 21		 jbe	 SHORT $LN3@SetWeather
  0002c	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0002f	74 1c		 je	 SHORT $LN3@SetWeather
  00031	0f b6 86 a7 00
	00 00		 movzx	 eax, BYTE PTR [esi+167]
  00038	3b 83 04 07 05
	00		 cmp	 eax, DWORD PTR [ebx+329476]
  0003e	75 0d		 jne	 SHORT $LN3@SetWeather

; 211  : 		{
; 212  : 			CGWeatherSend(n, weather);

  00040	8b 4d 08	 mov	 ecx, DWORD PTR _weather$[ebp]
  00043	51		 push	 ecx
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ?CGWeatherSend@@YAXHE@Z	; CGWeatherSend
  0004a	83 c4 08	 add	 esp, 8
$LN3@SetWeather:

; 205  : 	
; 206  : 	for (int n=OBJ_STARTUSERINDEX ; n<OBJMAX ; n++ )

  0004d	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  00053	47		 inc	 edi
  00054	81 fe 02 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522498
  0005a	7c ca		 jl	 SHORT $LL4@SetWeather
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx

; 213  : 		}
; 214  : 	}
; 215  : }

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?SetWeather@MapClass@@QAEXEE@Z ENDP			; MapClass::SetWeather
_TEXT	ENDS
PUBLIC	?WeatherVariationProcess@MapClass@@QAEXXZ	; MapClass::WeatherVariationProcess
EXTRN	_rand:PROC
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?WeatherVariationProcess@MapClass@@QAEXXZ
_TEXT	SEGMENT
_weather$ = -4						; size = 1
?WeatherVariationProcess@MapClass@@QAEXXZ PROC		; MapClass::WeatherVariationProcess, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 219  : 	LPOBJ lpObj;
; 220  : 	BYTE weather;
; 221  : 
; 222  : 	if ( (GetTickCount() - this->m_WeatherTimer) > this->m_NextWeatherTimer)

  00005	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	ff d6		 call	 esi
  00010	2b 47 08	 sub	 eax, DWORD PTR [edi+8]
  00013	3b 47 0c	 cmp	 eax, DWORD PTR [edi+12]
  00016	0f 86 82 00 00
	00		 jbe	 $LN2@WeatherVar

; 223  : 	{
; 224  : 		this->m_WeatherTimer = GetTickCount();

  0001c	53		 push	 ebx
  0001d	ff d6		 call	 esi
  0001f	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 225  : 		this->m_NextWeatherTimer = (rand()%10000) + 10000;

  00022	e8 00 00 00 00	 call	 _rand
  00027	99		 cdq
  00028	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0002d	f7 f9		 idiv	 ecx
  0002f	03 d1		 add	 edx, ecx
  00031	89 57 0c	 mov	 DWORD PTR [edi+12], edx

; 226  : 		this->m_WeatherVariation = rand()%10;

  00034	e8 00 00 00 00	 call	 _rand
  00039	99		 cdq
  0003a	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0003f	f7 f9		 idiv	 ecx
  00041	88 57 05	 mov	 BYTE PTR [edi+5], dl

; 227  : 		this->m_Weather = rand()%3;

  00044	e8 00 00 00 00	 call	 _rand
  00049	99		 cdq
  0004a	b9 03 00 00 00	 mov	 ecx, 3
  0004f	f7 f9		 idiv	 ecx

; 228  : 
; 229  : 		weather = this->m_Weather*16;
; 230  : 		weather |= this->m_WeatherVariation;
; 231  : 
; 232  : 		for (int n=OBJ_STARTUSERINDEX ; n<OBJMAX ; n++ )

  00051	bb 00 19 00 00	 mov	 ebx, 6400		; 00001900H
  00056	be 62 c4 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046498
  0005b	88 57 04	 mov	 BYTE PTR [edi+4], dl
  0005e	c0 e2 04	 shl	 dl, 4
  00061	0a 57 05	 or	 dl, BYTE PTR [edi+5]
  00064	88 55 fc	 mov	 BYTE PTR _weather$[ebp], dl
$LL4@WeatherVar:

; 233  : 		{
; 234  : 			lpObj = &gObj[n];
; 235  : 
; 236  : 			if ( lpObj->Connected > PLAYER_CONNECTED && lpObj->Live != 0 && lpObj->MapNumber == this->thisMapNumber )

  00067	80 7e a2 01	 cmp	 BYTE PTR [esi-94], 1
  0006b	76 21		 jbe	 SHORT $LN3@WeatherVar
  0006d	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00070	74 1c		 je	 SHORT $LN3@WeatherVar
  00072	0f b6 96 a7 00
	00 00		 movzx	 edx, BYTE PTR [esi+167]
  00079	3b 97 04 07 05
	00		 cmp	 edx, DWORD PTR [edi+329476]
  0007f	75 0d		 jne	 SHORT $LN3@WeatherVar

; 237  : 			{
; 238  : 				CGWeatherSend(n, weather);

  00081	8b 45 fc	 mov	 eax, DWORD PTR _weather$[ebp]
  00084	50		 push	 eax
  00085	53		 push	 ebx
  00086	e8 00 00 00 00	 call	 ?CGWeatherSend@@YAXHE@Z	; CGWeatherSend
  0008b	83 c4 08	 add	 esp, 8
$LN3@WeatherVar:

; 228  : 
; 229  : 		weather = this->m_Weather*16;
; 230  : 		weather |= this->m_WeatherVariation;
; 231  : 
; 232  : 		for (int n=OBJ_STARTUSERINDEX ; n<OBJMAX ; n++ )

  0008e	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  00094	43		 inc	 ebx
  00095	81 fe 02 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522498
  0009b	7c ca		 jl	 SHORT $LL4@WeatherVar
  0009d	5b		 pop	 ebx
$LN2@WeatherVar:
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi

; 239  : 			}
; 240  : 		}
; 241  : 	}
; 242  : }

  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?WeatherVariationProcess@MapClass@@QAEXXZ ENDP		; MapClass::WeatherVariationProcess
_TEXT	ENDS
PUBLIC	?SaveItemInfo@MapClass@@QAEXXZ			; MapClass::SaveItemInfo
; Function compile flags: /Ogtp
;	COMDAT ?SaveItemInfo@MapClass@@QAEXXZ
_TEXT	SEGMENT
?SaveItemInfo@MapClass@@QAEXXZ PROC			; MapClass::SaveItemInfo, COMDAT
; _this$ = ecx

; 246  : 	return;	// Here goes a Macro
; 247  : }

  00000	c3		 ret	 0
?SaveItemInfo@MapClass@@QAEXXZ ENDP			; MapClass::SaveItemInfo
_TEXT	ENDS
PUBLIC	?ItemInit@MapClass@@QAEXXZ			; MapClass::ItemInit
; Function compile flags: /Ogtp
;	COMDAT ?ItemInit@MapClass@@QAEXXZ
_TEXT	SEGMENT
?ItemInit@MapClass@@QAEXXZ PROC				; MapClass::ItemInit, COMDAT
; _this$ = ecx

; 251  : 	return; // Here goes a Macro
; 252  : }

  00000	c3		 ret	 0
?ItemInit@MapClass@@QAEXXZ ENDP				; MapClass::ItemInit
_TEXT	ENDS
PUBLIC	??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ItemGive@MapClass@@QAEHHH_N@Z			; MapClass::ItemGive
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	__imp__wsprintfA:PROC
EXTRN	?gLootingTime@@3HA:DWORD			; gLootingTime
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@
CONST	SEGMENT
??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@ DB 'MapClass.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ItemGive@MapClass@@QAEHHH_N@Z
_TEXT	SEGMENT
_szTemp$154018 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_item_num$ = 12						; size = 4
_bFailNotSend$ = 16					; size = 1
?ItemGive@MapClass@@QAEHHH_N@Z PROC			; MapClass::ItemGive, COMDAT
; _this$ = ecx

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _item_num$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0001a	8b d1		 mov	 edx, ecx

; 455  : 	if ( ((item_num<0)?FALSE:(item_num>MAX_MAPITEM-1)?FALSE:TRUE) == FALSE ) 

  0001c	85 c0		 test	 eax, eax
  0001e	78 0e		 js	 SHORT $LN33@ItemGive
  00020	33 c9		 xor	 ecx, ecx
  00022	3d 2b 01 00 00	 cmp	 eax, 299		; 0000012bH
  00027	0f 9e c1	 setle	 cl
  0002a	85 c9		 test	 ecx, ecx
  0002c	75 37		 jne	 SHORT $LN24@ItemGive
$LN33@ItemGive:

; 456  : 	{
; 457  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 206)), __FILE__, __LINE__);

  0002e	68 c9 01 00 00	 push	 457			; 000001c9H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@
  00038	68 ce 01 00 00	 push	 462			; 000001ceH
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00042	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00047	50		 push	 eax
  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0004f	83 c4 10	 add	 esp, 16			; 00000010H

; 458  : 		return FALSE;

  00052	33 c0		 xor	 eax, eax
  00054	5b		 pop	 ebx

; 550  : 	}
; 551  : 	else
; 552  : 	{
; 553  : 		this->m_cItem[item_num].m_State = 8;
; 554  : 		this->m_cItem[item_num].Give = true;
; 555  : 		this->m_cItem[item_num].live = false;
; 556  : 
; 557  : 		return TRUE;
; 558  : 	}
; 559  : }

  00055	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00058	33 cd		 xor	 ecx, ebp
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
$LN24@ItemGive:
  00065	57		 push	 edi

; 459  : 	}
; 460  : 
; 461  : 	if ( gObj[aIndex].MapNumber != this->thisMapNumber )

  00066	8b fb		 mov	 edi, ebx
  00068	69 ff 64 15 00
	00		 imul	 edi, 5476		; 00001564H
  0006e	0f b6 8f 09 01
	00 00		 movzx	 ecx, BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+265]
  00075	3b 8a 04 07 05
	00		 cmp	 ecx, DWORD PTR [edx+329476]
  0007b	74 40		 je	 SHORT $LN23@ItemGive

; 462  : 	{
; 463  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 207)), __FILE__, __LINE__, gObj[aIndex].MapNumber, gObj[aIndex].Name);

  0007d	8d 87 6f 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+111]
  00083	50		 push	 eax
  00084	51		 push	 ecx
  00085	68 cf 01 00 00	 push	 463			; 000001cfH
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@
  0008f	68 cf 01 00 00	 push	 463			; 000001cfH
  00094	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00099	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0009e	50		 push	 eax
  0009f	6a 00		 push	 0
  000a1	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000a6	83 c4 18	 add	 esp, 24			; 00000018H
  000a9	5f		 pop	 edi

; 464  : 		return FALSE;

  000aa	33 c0		 xor	 eax, eax
  000ac	5b		 pop	 ebx

; 550  : 	}
; 551  : 	else
; 552  : 	{
; 553  : 		this->m_cItem[item_num].m_State = 8;
; 554  : 		this->m_cItem[item_num].Give = true;
; 555  : 		this->m_cItem[item_num].live = false;
; 556  : 
; 557  : 		return TRUE;
; 558  : 	}
; 559  : }

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 0c 00	 ret	 12			; 0000000cH
$LN23@ItemGive:

; 465  : 	}
; 466  : 
; 467  : 	if ( this->m_cItem[item_num].IsItem() == FALSE )

  000bd	69 c0 48 04 00
	00		 imul	 eax, 1096		; 00000448H
  000c3	56		 push	 esi
  000c4	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]
  000c7	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000ca	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000cf	85 c0		 test	 eax, eax
  000d1	75 40		 jne	 SHORT $LN22@ItemGive

; 468  : 	{
; 469  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 208)), __FILE__, __LINE__,gObj[aIndex].Name);	// Apply Deathway Fix herw

  000d3	8d 8f 6f 00 00
	00		 lea	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+111]
  000d9	51		 push	 ecx
  000da	68 d5 01 00 00	 push	 469			; 000001d5H
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@
  000e4	68 d0 01 00 00	 push	 464			; 000001d0H
  000e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000ee	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000f3	50		 push	 eax
  000f4	6a 00		 push	 0
  000f6	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000fb	83 c4 14	 add	 esp, 20			; 00000014H
$LN18@ItemGive:

; 487  : 	{
; 488  : 		return FALSE;

  000fe	5e		 pop	 esi
  000ff	5f		 pop	 edi
  00100	33 c0		 xor	 eax, eax
  00102	5b		 pop	 ebx

; 550  : 	}
; 551  : 	else
; 552  : 	{
; 553  : 		this->m_cItem[item_num].m_State = 8;
; 554  : 		this->m_cItem[item_num].Give = true;
; 555  : 		this->m_cItem[item_num].live = false;
; 556  : 
; 557  : 		return TRUE;
; 558  : 	}
; 559  : }

  00103	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00106	33 cd		 xor	 ecx, ebp
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 0c 00	 ret	 12			; 0000000cH
$LN22@ItemGive:

; 470  : 		return FALSE;
; 471  : 	}
; 472  : 
; 473  : 	if ( this->m_cItem[item_num].Give == true )

  00113	80 be cf 00 00
	00 01		 cmp	 BYTE PTR [esi+207], 1

; 474  : 	{
; 475  : 		return FALSE;

  0011a	74 e2		 je	 SHORT $LN18@ItemGive

; 476  : 	}
; 477  : 
; 478  : 	if ( this->m_cItem[item_num].live == false )

  0011c	80 be ce 00 00
	00 00		 cmp	 BYTE PTR [esi+206], 0

; 479  : 	{
; 480  : 		return FALSE;

  00123	74 d9		 je	 SHORT $LN18@ItemGive

; 481  : 	}
; 482  : 
; 483  : 	int disx = this->m_cItem[item_num].px - gObj[aIndex].X;

  00125	0f bf 97 04 01
	00 00		 movsx	 edx, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+260]
  0012c	0f b6 86 cc 00
	00 00		 movzx	 eax, BYTE PTR [esi+204]

; 484  : 	int disy = this->m_cItem[item_num].py - gObj[aIndex].Y;

  00133	0f b6 8e cd 00
	00 00		 movzx	 ecx, BYTE PTR [esi+205]
  0013a	2b c2		 sub	 eax, edx
  0013c	0f bf 97 06 01
	00 00		 movsx	 edx, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+262]

; 485  : 
; 486  : 	if ( disx > 2 || disx < -2 )

  00143	83 c0 02	 add	 eax, 2
  00146	2b ca		 sub	 ecx, edx
  00148	83 f8 04	 cmp	 eax, 4
  0014b	77 b1		 ja	 SHORT $LN18@ItemGive

; 489  : 	}
; 490  : 
; 491  : 	if ( disy > 2 || disy < -2 )

  0014d	83 c1 02	 add	 ecx, 2
  00150	83 f9 04	 cmp	 ecx, 4
  00153	77 a9		 ja	 SHORT $LN18@ItemGive

; 492  : 	{
; 493  : 		return FALSE;
; 494  : 	}
; 495  : 
; 496  : 	int lootresult = 1;
; 497  : 
; 498  : 	if ( gLootingTime > 0 )

  00155	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLootingTime@@3HA, 0 ; gLootingTime
  0015c	0f 8e d7 00 00
	00		 jle	 $LN3@ItemGive

; 499  : 	{
; 500  : 		if ( this->m_cItem[item_num].m_UserIndex != -1 )

  00162	83 be d8 00 00
	00 ff		 cmp	 DWORD PTR [esi+216], -1
  00169	0f 84 ca 00 00
	00		 je	 $LN3@ItemGive

; 501  : 		{
; 502  : 			if ( GetTickCount() < this->m_cItem[item_num].m_LootTime )

  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00175	3b 86 dc 00 00
	00		 cmp	 eax, DWORD PTR [esi+220]
  0017b	0f 83 b8 00 00
	00		 jae	 $LN3@ItemGive

; 503  : 			{
; 504  : 				if ( aIndex != this->m_cItem[item_num].m_UserIndex )

  00181	8b 86 d8 00 00
	00		 mov	 eax, DWORD PTR [esi+216]
  00187	3b d8		 cmp	 ebx, eax
  00189	0f 84 aa 00 00
	00		 je	 $LN3@ItemGive

; 505  : 				{
; 506  : 					lootresult = 0;
; 507  : 
; 508  : 					if ( this->m_cItem[item_num].m_QuestItem == false )

  0018f	80 be b5 00 00
	00 00		 cmp	 BYTE PTR [esi+181], 0
  00196	75 5c		 jne	 SHORT $LN34@ItemGive

; 509  : 					{
; 510  : 						if ( gObj[aIndex].PartyNumber >= 0 )

  00198	8b 8f a8 02 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+680]
  0019e	85 c9		 test	 ecx, ecx
  001a0	78 52		 js	 SHORT $LN34@ItemGive

; 511  : 						{
; 512  : 							if ( gObj[aIndex].PartyNumber == gObj[this->m_cItem[item_num].m_UserIndex].PartyNumber )

  001a2	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  001a8	3b 88 a8 02 00
	00		 cmp	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+680]
  001ae	75 44		 jne	 SHORT $LN34@ItemGive

; 513  : 							{
; 514  : 								if ( BC_MAP_RANGE(gObj[aIndex].MapNumber) != FALSE )

  001b0	0f b6 87 09 01
	00 00		 movzx	 eax, BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+265]
  001b7	3c 0b		 cmp	 al, 11			; 0000000bH
  001b9	72 7e		 jb	 SHORT $LN3@ItemGive
  001bb	b1 11		 mov	 cl, 17			; 00000011H
  001bd	3a c8		 cmp	 cl, al
  001bf	1b c0		 sbb	 eax, eax
  001c1	40		 inc	 eax
  001c2	74 75		 je	 SHORT $LN3@ItemGive

; 515  : 								{
; 516  : 									if ( this->m_cItem[item_num].m_Type == ITEMGET(12,15) ||( this->m_cItem[item_num].m_Type == ITEMGET(13,19) && ((this->m_cItem[item_num].m_Level < 0)?FALSE:(this->m_cItem[item_num].m_Level > 2)?FALSE:TRUE) != FALSE ) )

  001c4	0f b7 46 2a	 movzx	 eax, WORD PTR [esi+42]
  001c8	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  001cd	66 3b c2	 cmp	 ax, dx
  001d0	74 22		 je	 SHORT $LN34@ItemGive
  001d2	b9 13 1a 00 00	 mov	 ecx, 6675		; 00001a13H
  001d7	66 3b c1	 cmp	 ax, cx
  001da	75 5d		 jne	 SHORT $LN3@ItemGive
  001dc	0f b7 46 2c	 movzx	 eax, WORD PTR [esi+44]
  001e0	66 85 c0	 test	 ax, ax
  001e3	78 54		 js	 SHORT $LN3@ItemGive
  001e5	33 d2		 xor	 edx, edx
  001e7	66 83 f8 02	 cmp	 ax, 2
  001eb	0f 9e c2	 setle	 dl
  001ee	8b c2		 mov	 eax, edx
  001f0	85 c0		 test	 eax, eax

; 517  : 									{
; 518  : 										lootresult = 0;
; 519  : 									}
; 520  : 									else
; 521  : 									{
; 522  : 										lootresult = 1;

  001f2	74 45		 je	 SHORT $LN3@ItemGive
$LN34@ItemGive:

; 523  : 									}
; 524  : 								}
; 525  : 								else
; 526  : 								{
; 527  : 									lootresult = 1;
; 528  : 								}
; 529  : 							}
; 530  : 						}
; 531  : 					}
; 532  : 				}
; 533  : 			}
; 534  : 		}
; 535  : 	}
; 536  : 
; 537  : 
; 538  : 	if ( lootresult == 0 )
; 539  : 	{
; 540  : 		if ( bFailNotSend == false )

  001f4	80 7d 10 00	 cmp	 BYTE PTR _bFailNotSend$[ebp], 0
  001f8	0f 85 00 ff ff
	ff		 jne	 $LN18@ItemGive

; 541  : 		{
; 542  : 			char szTemp[256];
; 543  : 
; 544  : 			wsprintf(szTemp, lMsg.Get(MSGGET(4, 128)), gObj[aIndex].Name );

  001fe	8d 87 6f 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+111]
  00204	50		 push	 eax
  00205	68 80 04 00 00	 push	 1152			; 00000480H
  0020a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0020f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00214	50		 push	 eax
  00215	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$154018[ebp]
  0021b	51		 push	 ecx
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 545  : 			::GCServerMsgStringSend(szTemp, aIndex, 1);

  00222	6a 01		 push	 1
  00224	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$154018[ebp]
  0022a	53		 push	 ebx
  0022b	52		 push	 edx
  0022c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00231	83 c4 18	 add	 esp, 24			; 00000018H

; 546  : 			
; 547  : 		}
; 548  : 
; 549  : 		return FALSE;

  00234	e9 c5 fe ff ff	 jmp	 $LN18@ItemGive
$LN3@ItemGive:

; 550  : 	}
; 551  : 	else
; 552  : 	{
; 553  : 		this->m_cItem[item_num].m_State = 8;
; 554  : 		this->m_cItem[item_num].Give = true;
; 555  : 		this->m_cItem[item_num].live = false;
; 556  : 
; 557  : 		return TRUE;
; 558  : 	}
; 559  : }

  00239	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023c	c7 86 d0 00 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+208], 8
  00246	66 c7 86 ce 00
	00 00 00 01	 mov	 WORD PTR [esi+206], 256	; 00000100H
  0024f	5e		 pop	 esi
  00250	5f		 pop	 edi
  00251	33 cd		 xor	 ecx, ebp
  00253	b8 01 00 00 00	 mov	 eax, 1
  00258	5b		 pop	 ebx
  00259	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025e	8b e5		 mov	 esp, ebp
  00260	5d		 pop	 ebp
  00261	c2 0c 00	 ret	 12			; 0000000cH
?ItemGive@MapClass@@QAEHHH_N@Z ENDP			; MapClass::ItemGive
_TEXT	ENDS
PUBLIC	?StateSetDestroy@MapClass@@QAEXXZ		; MapClass::StateSetDestroy
EXTRN	?GetName@CItem@@QAEPADXZ:PROC			; CItem::GetName
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
; Function compile flags: /Ogtp
;	COMDAT ?StateSetDestroy@MapClass@@QAEXXZ
_TEXT	SEGMENT
_CurTime$ = -8						; size = 4
tv499 = -4						; size = 4
?StateSetDestroy@MapClass@@QAEXXZ PROC			; MapClass::StateSetDestroy, COMDAT
; _this$ = ecx

; 566  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx

; 567  : 	int CurTime = GetTickCount();

  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00011	89 45 f8	 mov	 DWORD PTR _CurTime$[ebp], eax
  00014	81 c6 cf 00 00
	00		 add	 esi, 207		; 000000cfH
  0001a	c7 45 fc 2c 01
	00 00		 mov	 DWORD PTR tv499[ebp], 300 ; 0000012cH
  00021	bb 08 00 00 00	 mov	 ebx, 8
  00026	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL10@StateSetDe:

; 570  : 	{
; 571  : 		if ( this->m_cItem[n].IsItem() != FALSE )

  00030	8d 8e 55 ff ff
	ff		 lea	 ecx, DWORD PTR [esi-171]
  00036	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003b	85 c0		 test	 eax, eax
  0003d	74 26		 je	 SHORT $LN4@StateSetDe

; 572  : 		{
; 573  : 			if ( this->m_cItem[n].m_State == 1 )

  0003f	8b 46 01	 mov	 eax, DWORD PTR [esi+1]
  00042	83 f8 01	 cmp	 eax, 1
  00045	75 09		 jne	 SHORT $LN6@StateSetDe

; 574  : 			{
; 575  : 				this->m_cItem[n].m_State = 2;

  00047	c7 46 01 02 00
	00 00		 mov	 DWORD PTR [esi+1], 2
  0004e	eb 15		 jmp	 SHORT $LN4@StateSetDe
$LN6@StateSetDe:

; 576  : 			}
; 577  : 			else if ( this->m_cItem[n].m_State == 8 )

  00050	3b c3		 cmp	 eax, ebx
  00052	75 11		 jne	 SHORT $LN4@StateSetDe

; 578  : 			{
; 579  : 				this->m_cItem[n].Clear();

  00054	8d 8e 55 ff ff
	ff		 lea	 ecx, DWORD PTR [esi-171]
  0005a	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 580  : 				this->m_cItem[n].live = 0;

  0005f	66 c7 46 ff 00
	01		 mov	 WORD PTR [esi-1], 256	; 00000100H
$LN4@StateSetDe:

; 581  : 				this->m_cItem[n].Give = 1;
; 582  : 			}
; 583  : 		}
; 584  : 
; 585  : 		if ( this->m_cItem[n].IsItem() != FALSE )

  00065	8d 8e 55 ff ff
	ff		 lea	 ecx, DWORD PTR [esi-171]
  0006b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00070	85 c0		 test	 eax, eax
  00072	74 52		 je	 SHORT $LN9@StateSetDe

; 586  : 		{
; 587  : 			if ( this->m_cItem[n].m_State != 8 )

  00074	39 5e 01	 cmp	 DWORD PTR [esi+1], ebx
  00077	74 4d		 je	 SHORT $LN9@StateSetDe

; 588  : 			{
; 589  : 				if ( CurTime > this->m_cItem[n].m_Time )

  00079	8b 45 f8	 mov	 eax, DWORD PTR _CurTime$[ebp]
  0007c	3b 46 05	 cmp	 eax, DWORD PTR [esi+5]
  0007f	76 45		 jbe	 SHORT $LN9@StateSetDe

; 590  : 				{
; 591  : 					LogAdd(LOG_BLACK, lMsg.Get(MSGGET(4, 76)), this->m_cItem[n].GetName(), this->m_cItem[n].m_Type, this->m_cItem[n].m_Level, this->m_cItem[n].m_Special[0] , this->m_cItem[n].m_Number);

  00081	8b 8e 55 ff ff
	ff		 mov	 ecx, DWORD PTR [esi-171]
  00087	0f b6 56 86	 movzx	 edx, BYTE PTR [esi-122]
  0008b	0f bf 86 5d ff
	ff ff		 movsx	 eax, WORD PTR [esi-163]
  00092	51		 push	 ecx
  00093	0f bf 8e 5b ff
	ff ff		 movsx	 ecx, WORD PTR [esi-165]
  0009a	52		 push	 edx
  0009b	50		 push	 eax
  0009c	51		 push	 ecx
  0009d	8d 8e 55 ff ff
	ff		 lea	 ecx, DWORD PTR [esi-171]
  000a3	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  000a8	50		 push	 eax
  000a9	68 4c 04 00 00	 push	 1100			; 0000044cH
  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000b3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000b8	50		 push	 eax
  000b9	6a 00		 push	 0
  000bb	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000c0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 592  : 					this->m_cItem[n].m_State = 8;

  000c3	89 5e 01	 mov	 DWORD PTR [esi+1], ebx
$LN9@StateSetDe:

; 568  : 
; 569  : 	for (int n=0;n<MAX_MAPITEM;n++)

  000c6	81 c6 48 04 00
	00		 add	 esi, 1096		; 00000448H
  000cc	ff 4d fc	 dec	 DWORD PTR tv499[ebp]
  000cf	0f 85 5b ff ff
	ff		 jne	 $LL10@StateSetDe
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 593  : 				}
; 594  : 			}
; 595  : 		}
; 596  : 	}
; 597  : }

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
?StateSetDestroy@MapClass@@QAEXXZ ENDP			; MapClass::StateSetDestroy
_TEXT	ENDS
PUBLIC	?GetAttr@MapClass@@QAEEHH@Z			; MapClass::GetAttr
; Function compile flags: /Ogtp
;	COMDAT ?GetAttr@MapClass@@QAEEHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetAttr@MapClass@@QAEEHH@Z PROC			; MapClass::GetAttr, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 	if ( x < 0 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	79 06		 jns	 SHORT $LN4@GetAttr
$LN9@GetAttr:

; 638  : 	{
; 639  : 		return 4;

  0000a	b0 04		 mov	 al, 4

; 658  : 
; 659  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN4@GetAttr:

; 640  : 	}
; 641  : 
; 642  : 	if ( y < 0 )

  00010	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00013	85 c0		 test	 eax, eax

; 643  : 	{
; 644  : 		return 4;

  00015	78 f3		 js	 SHORT $LN9@GetAttr

; 645  : 	}
; 646  : 
; 647  : 	if ( x > this->m_width -1 )

  00017	56		 push	 esi
  00018	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  0001b	4e		 dec	 esi
  0001c	3b d6		 cmp	 edx, esi

; 648  : 	{
; 649  : 		return 4;

  0001e	7f 08		 jg	 SHORT $LN8@GetAttr

; 650  : 	}
; 651  : 
; 652  : 	if ( y > this->m_height -1 )

  00020	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00023	4e		 dec	 esi
  00024	3b c6		 cmp	 eax, esi
  00026	7e 07		 jle	 SHORT $LN1@GetAttr
$LN8@GetAttr:

; 653  : 	{
; 654  : 		return 4;

  00028	b0 04		 mov	 al, 4
  0002a	5e		 pop	 esi

; 658  : 
; 659  : }

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
$LN1@GetAttr:

; 655  : 	}
; 656  : 
; 657  : 	return this->m_attrbuf[y*256 + x];

  0002f	c1 e0 08	 shl	 eax, 8
  00032	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00035	5e		 pop	 esi
  00036	8a 04 10	 mov	 al, BYTE PTR [eax+edx]

; 658  : 
; 659  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?GetAttr@MapClass@@QAEEHH@Z ENDP			; MapClass::GetAttr
_TEXT	ENDS
PUBLIC	?GetStandAttr@MapClass@@QAEHHH@Z		; MapClass::GetStandAttr
; Function compile flags: /Ogtp
;	COMDAT ?GetStandAttr@MapClass@@QAEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetStandAttr@MapClass@@QAEHHH@Z PROC			; MapClass::GetStandAttr, COMDAT
; _this$ = ecx

; 665  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 666  : 	if ( x > (this->m_width-1) )

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00006	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00009	48		 dec	 eax
  0000a	3b d0		 cmp	 edx, eax
  0000c	7e 06		 jle	 SHORT $LN5@GetStandAt
$LN8@GetStandAt:

; 667  : 	{
; 668  : 		return FALSE;

  0000e	33 c0		 xor	 eax, eax

; 689  : 	{
; 690  : 		return FALSE;
; 691  : 	}
; 692  : 
; 693  : 	return TRUE;
; 694  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
$LN5@GetStandAt:

; 669  : 	}
; 670  : 
; 671  : 	if ( y > (this->m_height-1) )

  00014	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00017	56		 push	 esi
  00018	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  0001b	4e		 dec	 esi
  0001c	3b c6		 cmp	 eax, esi
  0001e	5e		 pop	 esi

; 672  : 	{
; 673  : 		return FALSE;

  0001f	7f ed		 jg	 SHORT $LN8@GetStandAt

; 674  : 	}
; 675  : 
; 676  : 	BYTE attr = this->m_attrbuf[(y * 256 + x)];

  00021	c1 e0 08	 shl	 eax, 8
  00024	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00027	8a 04 10	 mov	 al, BYTE PTR [eax+edx]

; 677  : 
; 678  : 	if ( (attr&2) == 2 )

  0002a	a8 02		 test	 al, 2

; 679  : 	{
; 680  : 		return FALSE;

  0002c	75 e0		 jne	 SHORT $LN8@GetStandAt

; 681  : 	}
; 682  : 
; 683  : 	if ( (attr&4) == 4 )

  0002e	a8 04		 test	 al, 4

; 684  : 	{
; 685  : 		return FALSE;

  00030	75 dc		 jne	 SHORT $LN8@GetStandAt

; 686  : 	}
; 687  : 
; 688  : 	if ( (attr&8) == 8 )

  00032	24 08		 and	 al, 8
  00034	33 c9		 xor	 ecx, ecx
  00036	3c 08		 cmp	 al, 8
  00038	0f 95 c1	 setne	 cl
  0003b	8b c1		 mov	 eax, ecx

; 689  : 	{
; 690  : 		return FALSE;
; 691  : 	}
; 692  : 
; 693  : 	return TRUE;
; 694  : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?GetStandAttr@MapClass@@QAEHHH@Z ENDP			; MapClass::GetStandAttr
_TEXT	ENDS
PUBLIC	?SearchStandAttr@MapClass@@QAEXAAF0@Z		; MapClass::SearchStandAttr
; Function compile flags: /Ogtp
;	COMDAT ?SearchStandAttr@MapClass@@QAEXAAF0@Z
_TEXT	SEGMENT
tv165 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SearchStandAttr@MapClass@@QAEXAAF0@Z PROC		; MapClass::SearchStandAttr, COMDAT
; _this$ = ecx

; 702  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 703  : 	int scount = 10;
; 704  : 	int tx;
; 705  : 	int ty;
; 706  : 	int tindex;
; 707  : 	int subx = 1;
; 708  : 
; 709  : 	tx = x;

  00004	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00007	0f bf 00	 movsx	 eax, WORD PTR [eax]

; 710  : 	ty = y;

  0000a	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0000d	0f bf 12	 movsx	 edx, WORD PTR [edx]
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 711  : 	tindex = y * 256;
; 712  : 
; 713  : 	if ( (tx-10) < 0 )

  00012	8d 58 f6	 lea	 ebx, DWORD PTR [eax-10]
  00015	89 55 fc	 mov	 DWORD PTR tv165[ebp], edx

; 714  : 	{
; 715  : 		subx = 1;
; 716  : 	}
; 717  : 
; 718  : 	if ( (tx+10) > 255 )

  00018	8d 58 0a	 lea	 ebx, DWORD PTR [eax+10]
  0001b	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  00020	c1 e2 08	 shl	 edx, 8
  00023	57		 push	 edi
  00024	8d 7e f7	 lea	 edi, DWORD PTR [esi-9]
  00027	81 fb ff 00 00
	00		 cmp	 ebx, 255		; 000000ffH
  0002d	7e 03		 jle	 SHORT $LN13@SearchStan

; 719  : 	{
; 720  : 		subx = -1;

  0002f	83 cf ff	 or	 edi, -1
$LN13@SearchStan:

; 721  : 	}
; 722  : 
; 723  : 	while ( scount-- != 0 )

  00032	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00035	03 ca		 add	 ecx, edx
$LL3@SearchStan:
  00037	4e		 dec	 esi

; 724  : 	{
; 725  : 		if ( ((this->m_attrbuf[tindex + tx]&4)!= 4) && ((this->m_attrbuf[tindex + tx]&2)!= 2) && ((this->m_attrbuf[tindex + tx]&8)!= 8) )

  00038	f6 04 01 0e	 test	 BYTE PTR [ecx+eax], 14	; 0000000eH
  0003c	74 0f		 je	 SHORT $LN9@SearchStan

; 729  : 			break;
; 730  : 		}
; 731  : 
; 732  : 		tx += subx;

  0003e	03 c7		 add	 eax, edi
  00040	85 f6		 test	 esi, esi
  00042	75 f3		 jne	 SHORT $LL3@SearchStan
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 733  : 	}
; 734  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN9@SearchStan:

; 726  : 		{
; 727  : 			x = tx;

  0004d	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]

; 728  : 			y = ty;

  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00053	5f		 pop	 edi
  00054	66 89 02	 mov	 WORD PTR [edx], ax
  00057	66 8b 45 fc	 mov	 ax, WORD PTR tv165[ebp]
  0005b	5e		 pop	 esi
  0005c	66 89 01	 mov	 WORD PTR [ecx], ax
  0005f	5b		 pop	 ebx

; 733  : 	}
; 734  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
?SearchStandAttr@MapClass@@QAEXAAF0@Z ENDP		; MapClass::SearchStandAttr
_TEXT	ENDS
PUBLIC	?SetStandAttr@MapClass@@QAEXHH@Z		; MapClass::SetStandAttr
; Function compile flags: /Ogtp
;	COMDAT ?SetStandAttr@MapClass@@QAEXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetStandAttr@MapClass@@QAEXHH@Z PROC			; MapClass::SetStandAttr, COMDAT
; _this$ = ecx

; 740  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 741  : 	if ( x > this->m_width-1 )

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00006	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00009	48		 dec	 eax
  0000a	3b d0		 cmp	 edx, eax
  0000c	7f 17		 jg	 SHORT $LN3@SetStandAt

; 742  : 	{
; 743  : 		return;
; 744  : 	}
; 745  : 
; 746  : 	if ( y > this->m_height-1 )

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00011	56		 push	 esi
  00012	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00015	4e		 dec	 esi
  00016	3b c6		 cmp	 eax, esi
  00018	5e		 pop	 esi
  00019	7f 0a		 jg	 SHORT $LN3@SetStandAt

; 747  : 	{
; 748  : 		return;
; 749  : 	}
; 750  : 
; 751  : 	this->m_attrbuf[y*256+x] |= 2;

  0001b	c1 e0 08	 shl	 eax, 8
  0001e	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00021	80 0c 10 02	 or	 BYTE PTR [eax+edx], 2
$LN3@SetStandAt:

; 752  : }

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?SetStandAttr@MapClass@@QAEXHH@Z ENDP			; MapClass::SetStandAttr
_TEXT	ENDS
PUBLIC	?ClearStandAttr@MapClass@@QAEXHH@Z		; MapClass::ClearStandAttr
; Function compile flags: /Ogtp
;	COMDAT ?ClearStandAttr@MapClass@@QAEXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?ClearStandAttr@MapClass@@QAEXHH@Z PROC			; MapClass::ClearStandAttr, COMDAT
; _this$ = ecx

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 760  : 	if ( ((x<0)?FALSE:(x>(this->m_width-1))?FALSE:TRUE) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	78 42		 js	 SHORT $LN1@ClearStand
  0000b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000e	48		 dec	 eax
  0000f	33 d2		 xor	 edx, edx
  00011	3b f0		 cmp	 esi, eax
  00013	0f 9e c2	 setle	 dl
  00016	8b c2		 mov	 eax, edx
  00018	85 c0		 test	 eax, eax
  0001a	74 31		 je	 SHORT $LN1@ClearStand

; 761  : 	{
; 762  : 		return;
; 763  : 	}
; 764  : 
; 765  : 	if ( ((y<0)?FALSE:(y>(this->m_height-1))?FALSE:TRUE) == FALSE )

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0001f	85 c0		 test	 eax, eax
  00021	78 2a		 js	 SHORT $LN1@ClearStand
  00023	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00026	53		 push	 ebx
  00027	33 db		 xor	 ebx, ebx
  00029	4a		 dec	 edx
  0002a	3b c2		 cmp	 eax, edx
  0002c	0f 9e c3	 setle	 bl
  0002f	8b d3		 mov	 edx, ebx
  00031	5b		 pop	 ebx
  00032	85 d2		 test	 edx, edx
  00034	74 17		 je	 SHORT $LN1@ClearStand

; 766  : 	{
; 767  : 		return;
; 768  : 	}
; 769  : 
; 770  : 	if ( (this->m_attrbuf[y*256+x]&2)==2 )

  00036	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00039	c1 e0 08	 shl	 eax, 8
  0003c	03 d0		 add	 edx, eax
  0003e	f6 04 32 02	 test	 BYTE PTR [edx+esi], 2
  00042	74 09		 je	 SHORT $LN1@ClearStand

; 771  : 	{
; 772  : 		this->m_attrbuf[y*256+x] &= 0xFD;

  00044	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00047	03 c1		 add	 eax, ecx
  00049	80 24 30 fd	 and	 BYTE PTR [eax+esi], 253	; 000000fdH
$LN1@ClearStand:
  0004d	5e		 pop	 esi

; 773  : 	}
; 774  : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?ClearStandAttr@MapClass@@QAEXHH@Z ENDP			; MapClass::ClearStandAttr
_TEXT	ENDS
PUBLIC	?TERRAIN_INDEX_REPEAT@@YAHHH@Z			; TERRAIN_INDEX_REPEAT
; Function compile flags: /Ogtp
;	COMDAT ?TERRAIN_INDEX_REPEAT@@YAHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?TERRAIN_INDEX_REPEAT@@YAHHH@Z PROC			; TERRAIN_INDEX_REPEAT, COMDAT

; 900  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 901  : 	return (BYTE)y * 256 + (BYTE)x;

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _y$[ebp]
  00007	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x$[ebp]
  0000b	c1 e0 08	 shl	 eax, 8
  0000e	03 c1		 add	 eax, ecx

; 902  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?TERRAIN_INDEX_REPEAT@@YAHHH@Z ENDP			; TERRAIN_INDEX_REPEAT
_TEXT	ENDS
PUBLIC	?CheckWall2@MapClass@@QAEEHHHH@Z		; MapClass::CheckWall2
; Function compile flags: /Ogtp
;	COMDAT ?CheckWall2@MapClass@@QAEEHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_len2$ = 8						; size = 4
_sx1$ = 8						; size = 4
_start$ = 12						; size = 4
_sy1$ = 12						; size = 4
_d1$ = 16						; size = 4
_sx2$ = 16						; size = 4
_d2$ = 20						; size = 4
_sy2$ = 20						; size = 4
?CheckWall2@MapClass@@QAEEHHHH@Z PROC			; MapClass::CheckWall2, COMDAT
; _this$ = ecx

; 980  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 981  : 	int Index = TERRAIN_INDEX_REPEAT(sx1,sy1);

  00004	8b 55 0c	 mov	 edx, DWORD PTR _sy1$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR _sx1$[ebp]
  0000c	57		 push	 edi
  0000d	52		 push	 edx
  0000e	56		 push	 esi
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	e8 00 00 00 00	 call	 ?TERRAIN_INDEX_REPEAT@@YAHHH@Z ; TERRAIN_INDEX_REPEAT

; 982  : 	int nx1;
; 983  : 	int ny1;
; 984  : 	int d1;
; 985  : 	int d2;
; 986  : 	int len1;
; 987  : 	int len2;
; 988  : 	int px1 = sx2 - sx1;
; 989  : 	int py1 = sy2 - sy1;

  00017	8b 4d 14	 mov	 ecx, DWORD PTR _sy2$[ebp]
  0001a	8b d8		 mov	 ebx, eax
  0001c	8b 45 10	 mov	 eax, DWORD PTR _sx2$[ebp]
  0001f	83 c4 08	 add	 esp, 8
  00022	2b ca		 sub	 ecx, edx
  00024	2b c6		 sub	 eax, esi

; 990  : 
; 991  : 	if ( px1 < 0 )

  00026	79 07		 jns	 SHORT $LN14@CheckWall2

; 992  : 	{
; 993  : 		px1 = -px1;

  00028	f7 d8		 neg	 eax

; 994  : 		nx1 = -1;

  0002a	83 cf ff	 or	 edi, -1

; 995  : 	}
; 996  : 	else

  0002d	eb 05		 jmp	 SHORT $LN13@CheckWall2
$LN14@CheckWall2:

; 997  : 	{
; 998  : 		nx1 = 1;

  0002f	bf 01 00 00 00	 mov	 edi, 1
$LN13@CheckWall2:

; 999  : 	}
; 1000 : 
; 1001 : 	if ( py1 < 0 )

  00034	85 c9		 test	 ecx, ecx
  00036	79 09		 jns	 SHORT $LN12@CheckWall2

; 1002 : 	{
; 1003 : 		py1 = -py1;

  00038	f7 d9		 neg	 ecx

; 1004 : 		ny1 = -256;

  0003a	ba 00 ff ff ff	 mov	 edx, -256		; ffffff00H

; 1005 : 	}
; 1006 : 	else

  0003f	eb 05		 jmp	 SHORT $LN11@CheckWall2
$LN12@CheckWall2:

; 1007 : 	{
; 1008 : 		ny1 = 256;

  00041	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
$LN11@CheckWall2:

; 1009 : 	}
; 1010 : 
; 1011 : 	if ( px1 > py1 )

  00046	3b c1		 cmp	 eax, ecx
  00048	7e 0d		 jle	 SHORT $LN10@CheckWall2

; 1012 : 	{
; 1013 : 		len1 = px1;

  0004a	8b f0		 mov	 esi, eax

; 1014 : 		len2= py1;

  0004c	89 4d 08	 mov	 DWORD PTR _len2$[ebp], ecx

; 1015 : 		d1 = ny1;

  0004f	89 55 10	 mov	 DWORD PTR _d1$[ebp], edx

; 1016 : 		d2 = nx1;

  00052	89 7d 14	 mov	 DWORD PTR _d2$[ebp], edi

; 1017 : 	}
; 1018 : 	else

  00055	eb 0b		 jmp	 SHORT $LN9@CheckWall2
$LN10@CheckWall2:

; 1019 : 	{
; 1020 : 		len1 = py1;

  00057	8b f1		 mov	 esi, ecx

; 1021 : 		len2 = px1;

  00059	89 45 08	 mov	 DWORD PTR _len2$[ebp], eax

; 1022 : 		d1 = nx1;

  0005c	89 7d 10	 mov	 DWORD PTR _d1$[ebp], edi

; 1023 : 		d2 = ny1;

  0005f	89 55 14	 mov	 DWORD PTR _d2$[ebp], edx
$LN9@CheckWall2:

; 1024 : 	}
; 1025 : 
; 1026 : 	int start = 0;

  00062	33 c9		 xor	 ecx, ecx
  00064	89 4d 0c	 mov	 DWORD PTR _start$[ebp], ecx

; 1027 : 	BOOL error = FALSE;

  00067	33 ff		 xor	 edi, edi
  00069	8d a4 24 00 00
	00 00		 npad	 7
$LL8@CheckWall2:

; 1028 : 	int count = 0;
; 1029 : 	int Shadow = 0;
; 1030 : 
; 1031 : 	do
; 1032 : 	{
; 1033 : 		if ( start == 0 )

  00070	83 7d 0c 00	 cmp	 DWORD PTR _start$[ebp], 0
  00074	75 17		 jne	 SHORT $LN5@CheckWall2

; 1034 : 		{
; 1035 : 			if ( (this->m_attrbuf[Index]&2) == 2 )

  00076	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0007c	f6 04 13 02	 test	 BYTE PTR [ebx+edx], 2
  00080	74 12		 je	 SHORT $LN3@CheckWall2

; 1036 : 			{
; 1037 : 				return 2;

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	b0 02		 mov	 al, 2
  00086	5b		 pop	 ebx

; 1064 : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 10 00	 ret	 16			; 00000010H
$LN5@CheckWall2:

; 1038 : 			}
; 1039 : 		}
; 1040 : 		else
; 1041 : 		{
; 1042 : 			start = 1;

  0008d	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR _start$[ebp], 1
$LN3@CheckWall2:

; 1043 : 		}
; 1044 : 
; 1045 : 		if ( (this->m_attrbuf[Index]&4) == 4 )

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0009a	f6 04 13 04	 test	 BYTE PTR [ebx+edx], 4
  0009e	75 26		 jne	 SHORT $LN20@CheckWall2

; 1048 : 		}
; 1049 : 
; 1050 : 		error +=len2;

  000a0	03 7d 08	 add	 edi, DWORD PTR _len2$[ebp]

; 1051 : 
; 1052 : 		if ( error > (len1/2) )

  000a3	8b c6		 mov	 eax, esi
  000a5	99		 cdq
  000a6	2b c2		 sub	 eax, edx
  000a8	d1 f8		 sar	 eax, 1
  000aa	3b f8		 cmp	 edi, eax
  000ac	7e 05		 jle	 SHORT $LN1@CheckWall2

; 1053 : 		{
; 1054 : 			Index += d1;

  000ae	03 5d 10	 add	 ebx, DWORD PTR _d1$[ebp]

; 1055 : 			error -= len1;

  000b1	2b fe		 sub	 edi, esi
$LN1@CheckWall2:

; 1056 : 		}
; 1057 : 
; 1058 : 		Index += d2;

  000b3	03 5d 14	 add	 ebx, DWORD PTR _d2$[ebp]

; 1059 : 		count++;

  000b6	41		 inc	 ecx

; 1060 : 	}
; 1061 : 	while ( count <= len1 );

  000b7	3b ce		 cmp	 ecx, esi
  000b9	7e b5		 jle	 SHORT $LL8@CheckWall2

; 1062 : 	
; 1063 : 	return 1;

  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	b0 01		 mov	 al, 1
  000bf	5b		 pop	 ebx

; 1064 : }

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 10 00	 ret	 16			; 00000010H
$LN20@CheckWall2:
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi

; 1046 : 		{
; 1047 : 			return 4;

  000c8	b0 04		 mov	 al, 4
  000ca	5b		 pop	 ebx

; 1064 : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 10 00	 ret	 16			; 00000010H
?CheckWall2@MapClass@@QAEEHHHH@Z ENDP			; MapClass::CheckWall2
_TEXT	ENDS
PUBLIC	?GetDist@PATH@@AAEHHHHH@Z			; PATH::GetDist
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\zzzpath.h
;	COMDAT ?GetDist@PATH@@AAEHHHHH@Z
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?GetDist@PATH@@AAEHHHHH@Z PROC				; PATH::GetDist, COMDAT
; _this$ = ecx

; 49   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 50   : 		int distx = x2 - x1;

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _x2$[ebp]

; 51   : 		int disty = y2 - y1;

  00006	8b 45 14	 mov	 eax, DWORD PTR _y2$[ebp]
  00009	2b 4d 08	 sub	 ecx, DWORD PTR _x1$[ebp]
  0000c	2b 45 0c	 sub	 eax, DWORD PTR _y1$[ebp]

; 52   : 		return (distx * distx) + (disty * disty);

  0000f	0f af c9	 imul	 ecx, ecx
  00012	0f af c0	 imul	 eax, eax
  00015	03 c1		 add	 eax, ecx

; 53   : 	}	// line : 23

  00017	5d		 pop	 ebp
  00018	c2 10 00	 ret	 16			; 00000010H
?GetDist@PATH@@AAEHHHHH@Z ENDP				; PATH::GetDist
_TEXT	ENDS
PUBLIC	?VerifyThatOnPath@PATH@@AAEHHH@Z		; PATH::VerifyThatOnPath
; Function compile flags: /Ogtp
;	COMDAT ?VerifyThatOnPath@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?VerifyThatOnPath@PATH@@AAEHHH@Z PROC			; PATH::VerifyThatOnPath, COMDAT
; _this$ = ecx

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 57   : 		for ( int i = 0 ; i < this->NumPath ; i++ )

  00008	33 c0		 xor	 eax, eax
  0000a	57		 push	 edi
  0000b	85 d2		 test	 edx, edx
  0000d	7e 20		 jle	 SHORT $LN2@VerifyThat
  0000f	8b 75 0c	 mov	 esi, DWORD PTR _y$[ebp]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _x$[ebp]
$LL4@VerifyThat:

; 58   : 		{
; 59   : 			if ( x ==  this->PathX[i] && y == this->PathY[i] )

  00015	0f b6 5c 01 0c	 movzx	 ebx, BYTE PTR [ecx+eax+12]
  0001a	3b fb		 cmp	 edi, ebx
  0001c	75 0c		 jne	 SHORT $LN3@VerifyThat
  0001e	0f b6 9c 08 00
	02 00 00	 movzx	 ebx, BYTE PTR [eax+ecx+512]
  00026	3b f3		 cmp	 esi, ebx
  00028	74 08		 je	 SHORT $LN5@VerifyThat
$LN3@VerifyThat:

; 57   : 		for ( int i = 0 ; i < this->NumPath ; i++ )

  0002a	40		 inc	 eax
  0002b	3b c2		 cmp	 eax, edx
  0002d	7c e6		 jl	 SHORT $LL4@VerifyThat
$LN2@VerifyThat:

; 60   : 			{
; 61   : 				return i;
; 62   : 			}
; 63   : 		}
; 64   : 		return -1;

  0002f	83 c8 ff	 or	 eax, -1
$LN5@VerifyThat:
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx

; 65   : 	}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?VerifyThatOnPath@PATH@@AAEHHH@Z ENDP			; PATH::VerifyThatOnPath
_TEXT	ENDS
PUBLIC	?CanWeMoveForward@PATH@@AAEHHH@Z		; PATH::CanWeMoveForward
; Function compile flags: /Ogtp
;	COMDAT ?CanWeMoveForward@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?CanWeMoveForward@PATH@@AAEHHH@Z PROC			; PATH::CanWeMoveForward, COMDAT
; _this$ = ecx

; 68   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   : 		int which = x+ y * this->Width  ;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _y$[ebp]
  0000d	8b c2		 mov	 eax, edx
  0000f	0f af c7	 imul	 eax, edi
  00012	03 c6		 add	 eax, esi

; 70   : 		
; 71   : 		if ( x >= this->Width || x < 0 || y >= this->Height || y < 0 )

  00014	3b f2		 cmp	 esi, edx
  00016	7d 3a		 jge	 SHORT $LN3@CanWeMoveF
  00018	85 f6		 test	 esi, esi
  0001a	78 36		 js	 SHORT $LN3@CanWeMoveF
  0001c	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  0001f	7d 31		 jge	 SHORT $LN3@CanWeMoveF
  00021	85 ff		 test	 edi, edi
  00023	78 2d		 js	 SHORT $LN3@CanWeMoveF

; 74   : 		}
; 75   : 
; 76   : 		if ( this->Map[which] > 1 || this->HitMap[which] != 0 )

  00025	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  0002b	80 3c 10 01	 cmp	 BYTE PTR [eax+edx], 1
  0002f	77 17		 ja	 SHORT $LN1@CanWeMoveF
  00031	8b 91 40 04 00
	00		 mov	 edx, DWORD PTR [ecx+1088]
  00037	80 3c 10 00	 cmp	 BYTE PTR [eax+edx], 0
  0003b	75 0b		 jne	 SHORT $LN1@CanWeMoveF

; 79   : 			return false;
; 80   : 		}
; 81   : 		return TRUE;

  0003d	5f		 pop	 edi
  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	5e		 pop	 esi

; 82   : 	};	// line : 43

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN1@CanWeMoveF:

; 77   : 		{
; 78   : 			this->HitMap[which] = 1;

  00048	8b 89 40 04 00
	00		 mov	 ecx, DWORD PTR [ecx+1088]
  0004e	c6 04 08 01	 mov	 BYTE PTR [eax+ecx], 1
$LN3@CanWeMoveF:

; 72   : 		{
; 73   : 			return false;

  00052	5f		 pop	 edi
  00053	33 c0		 xor	 eax, eax
  00055	5e		 pop	 esi

; 82   : 	};	// line : 43

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?CanWeMoveForward@PATH@@AAEHHH@Z ENDP			; PATH::CanWeMoveForward
_TEXT	ENDS
PUBLIC	?CanWeMoveForward2@PATH@@AAEHHH@Z		; PATH::CanWeMoveForward2
; Function compile flags: /Ogtp
;	COMDAT ?CanWeMoveForward2@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?CanWeMoveForward2@PATH@@AAEHHH@Z PROC			; PATH::CanWeMoveForward2, COMDAT
; _this$ = ecx

; 85   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : 		int which = x +  y* this->Width ;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _y$[ebp]
  0000d	8b c2		 mov	 eax, edx
  0000f	0f af c7	 imul	 eax, edi
  00012	03 c6		 add	 eax, esi

; 87   : 		
; 88   : 		if ( x >= this->Width || x < 0 || y >= this->Height || y < 0 )

  00014	3b f2		 cmp	 esi, edx
  00016	7d 3a		 jge	 SHORT $LN3@CanWeMoveF@2
  00018	85 f6		 test	 esi, esi
  0001a	78 36		 js	 SHORT $LN3@CanWeMoveF@2
  0001c	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  0001f	7d 31		 jge	 SHORT $LN3@CanWeMoveF@2
  00021	85 ff		 test	 edi, edi
  00023	78 2d		 js	 SHORT $LN3@CanWeMoveF@2

; 91   : 		}
; 92   : 
; 93   : 		if ( this->Map[which] >= 1 || this->HitMap[which] != 0 )

  00025	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  0002b	80 3c 10 01	 cmp	 BYTE PTR [eax+edx], 1
  0002f	73 17		 jae	 SHORT $LN1@CanWeMoveF@2
  00031	8b 91 40 04 00
	00		 mov	 edx, DWORD PTR [ecx+1088]
  00037	80 3c 10 00	 cmp	 BYTE PTR [eax+edx], 0
  0003b	75 0b		 jne	 SHORT $LN1@CanWeMoveF@2

; 96   : 			return false;
; 97   : 		}
; 98   : 		return TRUE;

  0003d	5f		 pop	 edi
  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	5e		 pop	 esi

; 99   : 	};

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN1@CanWeMoveF@2:

; 94   : 		{
; 95   : 			this->HitMap[which] = 1;

  00048	8b 89 40 04 00
	00		 mov	 ecx, DWORD PTR [ecx+1088]
  0004e	c6 04 08 01	 mov	 BYTE PTR [eax+ecx], 1
$LN3@CanWeMoveF@2:

; 89   : 		{
; 90   : 			return false;

  00052	5f		 pop	 edi
  00053	33 c0		 xor	 eax, eax
  00055	5e		 pop	 esi

; 99   : 	};

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?CanWeMoveForward2@PATH@@AAEHHH@Z ENDP			; PATH::CanWeMoveForward2
_TEXT	ENDS
PUBLIC	?CanWeMoveForward3@PATH@@AAEHHH@Z		; PATH::CanWeMoveForward3
; Function compile flags: /Ogtp
;	COMDAT ?CanWeMoveForward3@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?CanWeMoveForward3@PATH@@AAEHHH@Z PROC			; PATH::CanWeMoveForward3, COMDAT
; _this$ = ecx

; 102  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 103  : 		int which = x +  y* this->Width ;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _y$[ebp]
  0000d	8b c2		 mov	 eax, edx
  0000f	0f af c7	 imul	 eax, edi
  00012	03 c6		 add	 eax, esi

; 104  : 		
; 105  : 		if ( x >= this->Width || x < 0 || y >= this->Height || y < 0 )

  00014	3b f2		 cmp	 esi, edx
  00016	7d 3a		 jge	 SHORT $LN3@CanWeMoveF@3
  00018	85 f6		 test	 esi, esi
  0001a	78 36		 js	 SHORT $LN3@CanWeMoveF@3
  0001c	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  0001f	7d 31		 jge	 SHORT $LN3@CanWeMoveF@3
  00021	85 ff		 test	 edi, edi
  00023	78 2d		 js	 SHORT $LN3@CanWeMoveF@3

; 108  : 		}
; 109  : 
; 110  : 		if ( this->Map[which] >= 1 || this->HitMap[which] != 0 )

  00025	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  0002b	80 3c 10 01	 cmp	 BYTE PTR [eax+edx], 1
  0002f	73 17		 jae	 SHORT $LN1@CanWeMoveF@3
  00031	8b 91 40 04 00
	00		 mov	 edx, DWORD PTR [ecx+1088]
  00037	80 3c 10 00	 cmp	 BYTE PTR [eax+edx], 0
  0003b	75 0b		 jne	 SHORT $LN1@CanWeMoveF@3

; 113  : 			return false;
; 114  : 		}
; 115  : 		return TRUE;

  0003d	5f		 pop	 edi
  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	5e		 pop	 esi

; 116  : 	};

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN1@CanWeMoveF@3:

; 111  : 		{
; 112  : 			this->HitMap[which] = 1;

  00048	8b 89 40 04 00
	00		 mov	 ecx, DWORD PTR [ecx+1088]
  0004e	c6 04 08 01	 mov	 BYTE PTR [eax+ecx], 1
$LN3@CanWeMoveF@3:

; 106  : 		{
; 107  : 			return false;

  00052	5f		 pop	 edi
  00053	33 c0		 xor	 eax, eax
  00055	5e		 pop	 esi

; 116  : 	};

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?CanWeMoveForward3@PATH@@AAEHHH@Z ENDP			; PATH::CanWeMoveForward3
_TEXT	ENDS
PUBLIC	?IsThisSpotOK@PATH@@AAEHHH@Z			; PATH::IsThisSpotOK
; Function compile flags: /Ogtp
;	COMDAT ?IsThisSpotOK@PATH@@AAEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?IsThisSpotOK@PATH@@AAEHHH@Z PROC			; PATH::IsThisSpotOK, COMDAT
; _this$ = ecx

; 122  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 123  : 		int pos;
; 124  : 
; 125  : 		pos = x+ y * this->Width ;
; 126  : 
; 127  : 		if ( x < 0 || x >= this->Width || y < 0 || y >= this->Width )	// Make Deathway fix here maybe

  00004	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	78 29		 js	 SHORT $LN2@IsThisSpot
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000d	3b f0		 cmp	 esi, eax
  0000f	7d 23		 jge	 SHORT $LN2@IsThisSpot
  00011	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00014	85 d2		 test	 edx, edx
  00016	78 1c		 js	 SHORT $LN2@IsThisSpot
  00018	3b d0		 cmp	 edx, eax
  0001a	7d 18		 jge	 SHORT $LN2@IsThisSpot

; 130  : 		}
; 131  : 		if ( this->HitMap[pos] != 0 )

  0001c	0f af c2	 imul	 eax, edx
  0001f	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00025	33 c9		 xor	 ecx, ecx
  00027	38 0c 30	 cmp	 BYTE PTR [eax+esi], cl
  0002a	5e		 pop	 esi
  0002b	0f 94 c1	 sete	 cl
  0002e	8b c1		 mov	 eax, ecx

; 132  : 		{
; 133  : 			return false;
; 134  : 		}
; 135  : 		return true;
; 136  : 	};	// line : 68

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN2@IsThisSpot:

; 128  : 		{
; 129  : 			return false;

  00034	33 c0		 xor	 eax, eax
  00036	5e		 pop	 esi

; 132  : 		{
; 133  : 			return false;
; 134  : 		}
; 135  : 		return true;
; 136  : 	};	// line : 68

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?IsThisSpotOK@PATH@@AAEHHH@Z ENDP			; PATH::IsThisSpotOK
_TEXT	ENDS
PUBLIC	?FindNextDir@PATH@@AAEHHHHHH_N0@Z		; PATH::FindNextDir
; Function compile flags: /Ogtp
;	COMDAT ?FindNextDir@PATH@@AAEHHHHHH_N0@Z
_TEXT	SEGMENT
tv1162 = -12						; size = 4
_endx$137283 = -12					; size = 4
_endx$137274 = -12					; size = 4
_endy$137284 = -8					; size = 4
_endy$137275 = -8					; size = 4
_endy$137266 = -8					; size = 4
_WhichDir$ = -4						; size = 4
_sx$ = 8						; size = 4
tv1077 = 12						; size = 4
$T154450 = 12						; size = 4
_dir2$137299 = 12					; size = 4
_dir$137295 = 12					; size = 4
_sy$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_dirstart$ = 24						; size = 4
tv761 = 28						; size = 4
tv678 = 28						; size = 4
_endx$137265 = 28					; size = 4
_i$ = 28						; size = 4
_First$ = 28						; size = 1
$T154488 = 32						; size = 4
$T154469 = 32						; size = 4
_ErrorCheck$ = 32					; size = 1
?FindNextDir@PATH@@AAEHHHHHH_N0@Z PROC			; PATH::FindNextDir, COMDAT
; _this$ = ecx

; 141  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 142  : 		int MinDist = 10000000;
; 143  : 		long ldir;
; 144  : 		int WhichDir = 0;
; 145  : 		int i;
; 146  : 
; 147  : 		if ( First != 0 )

  00006	80 7d 1c 00	 cmp	 BYTE PTR _First$[ebp], 0
  0000a	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	bb 80 96 98 00	 mov	 ebx, 10000000		; 00989680H
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0
  0001c	0f 84 15 02 00
	00		 je	 $LN27@FindNextDi

; 148  : 		{
; 149  : 			for ( i = 0 ; i<8 ; i++ )

  00022	bf 02 00 00 00	 mov	 edi, 2
  00027	89 7d f4	 mov	 DWORD PTR tv1162[ebp], edi
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL127@FindNextDi:

; 150  : 			{
; 151  : 				ldir = i % 8;
; 152  : 				int endx = sx + this->Dir[ldir*2];
; 153  : 				int endy = sy + this->Dir[ldir*2+1];
; 154  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00030	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00033	83 c7 fe	 add	 edi, -2			; fffffffeH
  00036	83 e7 07	 and	 edi, 7
  00039	8b 94 f9 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+edi*8+1012]
  00040	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00043	8b 84 f9 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edi*8+1016]
  0004a	03 45 0c	 add	 eax, DWORD PTR _sy$[ebp]
  0004d	2b f2		 sub	 esi, edx
  0004f	89 55 1c	 mov	 DWORD PTR _endx$137265[ebp], edx
  00052	0f af f6	 imul	 esi, esi
  00055	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  00058	2b d0		 sub	 edx, eax
  0005a	0f af d2	 imul	 edx, edx
  0005d	03 d6		 add	 edx, esi
  0005f	89 45 f8	 mov	 DWORD PTR _endy$137266[ebp], eax

; 155  : 
; 156  : 				if ( MinDist > dist )

  00062	3b da		 cmp	 ebx, edx
  00064	7e 2f		 jle	 SHORT $LN25@FindNextDi

; 157  : 				{
; 158  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00066	8b 75 1c	 mov	 esi, DWORD PTR _endx$137265[ebp]
  00069	85 f6		 test	 esi, esi
  0006b	78 28		 js	 SHORT $LN25@FindNextDi
  0006d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006f	3b f0		 cmp	 esi, eax
  00071	7d 22		 jge	 SHORT $LN25@FindNextDi
  00073	8b 75 f8	 mov	 esi, DWORD PTR _endy$137266[ebp]
  00076	85 f6		 test	 esi, esi
  00078	78 1b		 js	 SHORT $LN25@FindNextDi
  0007a	3b f0		 cmp	 esi, eax
  0007c	7d 17		 jge	 SHORT $LN25@FindNextDi
  0007e	0f af c6	 imul	 eax, esi
  00081	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00087	8b 75 1c	 mov	 esi, DWORD PTR _endx$137265[ebp]
  0008a	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  0008e	75 05		 jne	 SHORT $LN25@FindNextDi

; 159  : 					{
; 160  : 						MinDist = dist;

  00090	8b da		 mov	 ebx, edx

; 161  : 						WhichDir = ldir;

  00092	89 7d fc	 mov	 DWORD PTR _WhichDir$[ebp], edi
$LN25@FindNextDi:

; 150  : 			{
; 151  : 				ldir = i % 8;
; 152  : 				int endx = sx + this->Dir[ldir*2];
; 153  : 				int endy = sy + this->Dir[ldir*2+1];
; 154  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00095	8b 7d f4	 mov	 edi, DWORD PTR tv1162[ebp]
  00098	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  0009b	4f		 dec	 edi
  0009c	83 e7 07	 and	 edi, 7
  0009f	8b 94 f9 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+edi*8+1012]
  000a6	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  000a9	8b 84 f9 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edi*8+1016]
  000b0	03 45 0c	 add	 eax, DWORD PTR _sy$[ebp]
  000b3	2b f2		 sub	 esi, edx
  000b5	89 55 1c	 mov	 DWORD PTR _endx$137265[ebp], edx
  000b8	0f af f6	 imul	 esi, esi
  000bb	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  000be	2b d0		 sub	 edx, eax
  000c0	0f af d2	 imul	 edx, edx
  000c3	03 d6		 add	 edx, esi
  000c5	89 45 f8	 mov	 DWORD PTR _endy$137266[ebp], eax

; 155  : 
; 156  : 				if ( MinDist > dist )

  000c8	3b da		 cmp	 ebx, edx
  000ca	7e 2f		 jle	 SHORT $LN108@FindNextDi

; 157  : 				{
; 158  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  000cc	8b 75 1c	 mov	 esi, DWORD PTR _endx$137265[ebp]
  000cf	85 f6		 test	 esi, esi
  000d1	78 28		 js	 SHORT $LN108@FindNextDi
  000d3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d5	3b f0		 cmp	 esi, eax
  000d7	7d 22		 jge	 SHORT $LN108@FindNextDi
  000d9	8b 75 f8	 mov	 esi, DWORD PTR _endy$137266[ebp]
  000dc	85 f6		 test	 esi, esi
  000de	78 1b		 js	 SHORT $LN108@FindNextDi
  000e0	3b f0		 cmp	 esi, eax
  000e2	7d 17		 jge	 SHORT $LN108@FindNextDi
  000e4	0f af c6	 imul	 eax, esi
  000e7	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  000ed	8b 75 1c	 mov	 esi, DWORD PTR _endx$137265[ebp]
  000f0	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  000f4	75 05		 jne	 SHORT $LN108@FindNextDi

; 159  : 					{
; 160  : 						MinDist = dist;

  000f6	8b da		 mov	 ebx, edx

; 161  : 						WhichDir = ldir;

  000f8	89 7d fc	 mov	 DWORD PTR _WhichDir$[ebp], edi
$LN108@FindNextDi:

; 150  : 			{
; 151  : 				ldir = i % 8;
; 152  : 				int endx = sx + this->Dir[ldir*2];
; 153  : 				int endy = sy + this->Dir[ldir*2+1];
; 154  : 				int dist = this->GetDist(endx, endy, dx, dy);

  000fb	8b 7d f4	 mov	 edi, DWORD PTR tv1162[ebp]
  000fe	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00101	83 e7 07	 and	 edi, 7
  00104	8b 94 f9 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+edi*8+1012]
  0010b	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  0010e	8b 84 f9 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edi*8+1016]
  00115	03 45 0c	 add	 eax, DWORD PTR _sy$[ebp]
  00118	2b f2		 sub	 esi, edx
  0011a	89 55 1c	 mov	 DWORD PTR _endx$137265[ebp], edx
  0011d	0f af f6	 imul	 esi, esi
  00120	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  00123	2b d0		 sub	 edx, eax
  00125	0f af d2	 imul	 edx, edx
  00128	03 d6		 add	 edx, esi
  0012a	89 45 f8	 mov	 DWORD PTR _endy$137266[ebp], eax

; 155  : 
; 156  : 				if ( MinDist > dist )

  0012d	3b da		 cmp	 ebx, edx
  0012f	7e 2f		 jle	 SHORT $LN112@FindNextDi

; 157  : 				{
; 158  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00131	8b 75 1c	 mov	 esi, DWORD PTR _endx$137265[ebp]
  00134	85 f6		 test	 esi, esi
  00136	78 28		 js	 SHORT $LN112@FindNextDi
  00138	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013a	3b f0		 cmp	 esi, eax
  0013c	7d 22		 jge	 SHORT $LN112@FindNextDi
  0013e	8b 75 f8	 mov	 esi, DWORD PTR _endy$137266[ebp]
  00141	85 f6		 test	 esi, esi
  00143	78 1b		 js	 SHORT $LN112@FindNextDi
  00145	3b f0		 cmp	 esi, eax
  00147	7d 17		 jge	 SHORT $LN112@FindNextDi
  00149	0f af c6	 imul	 eax, esi
  0014c	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00152	8b 75 1c	 mov	 esi, DWORD PTR _endx$137265[ebp]
  00155	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  00159	75 05		 jne	 SHORT $LN112@FindNextDi

; 159  : 					{
; 160  : 						MinDist = dist;

  0015b	8b da		 mov	 ebx, edx

; 161  : 						WhichDir = ldir;

  0015d	89 7d fc	 mov	 DWORD PTR _WhichDir$[ebp], edi
$LN112@FindNextDi:

; 150  : 			{
; 151  : 				ldir = i % 8;
; 152  : 				int endx = sx + this->Dir[ldir*2];
; 153  : 				int endy = sy + this->Dir[ldir*2+1];
; 154  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00160	8b 7d f4	 mov	 edi, DWORD PTR tv1162[ebp]
  00163	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00166	47		 inc	 edi
  00167	83 e7 07	 and	 edi, 7
  0016a	8b 94 f9 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+edi*8+1012]
  00171	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00174	8b 84 f9 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edi*8+1016]
  0017b	03 45 0c	 add	 eax, DWORD PTR _sy$[ebp]
  0017e	2b f2		 sub	 esi, edx
  00180	89 55 1c	 mov	 DWORD PTR _endx$137265[ebp], edx
  00183	0f af f6	 imul	 esi, esi
  00186	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  00189	2b d0		 sub	 edx, eax
  0018b	0f af d2	 imul	 edx, edx
  0018e	03 d6		 add	 edx, esi
  00190	89 45 f8	 mov	 DWORD PTR _endy$137266[ebp], eax

; 155  : 
; 156  : 				if ( MinDist > dist )

  00193	3b da		 cmp	 ebx, edx
  00195	7e 2f		 jle	 SHORT $LN128@FindNextDi

; 157  : 				{
; 158  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00197	8b 75 1c	 mov	 esi, DWORD PTR _endx$137265[ebp]
  0019a	85 f6		 test	 esi, esi
  0019c	78 28		 js	 SHORT $LN128@FindNextDi
  0019e	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a0	3b f0		 cmp	 esi, eax
  001a2	7d 22		 jge	 SHORT $LN128@FindNextDi
  001a4	8b 75 f8	 mov	 esi, DWORD PTR _endy$137266[ebp]
  001a7	85 f6		 test	 esi, esi
  001a9	78 1b		 js	 SHORT $LN128@FindNextDi
  001ab	3b f0		 cmp	 esi, eax
  001ad	7d 17		 jge	 SHORT $LN128@FindNextDi
  001af	0f af c6	 imul	 eax, esi
  001b2	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  001b8	8b 75 1c	 mov	 esi, DWORD PTR _endx$137265[ebp]
  001bb	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  001bf	75 05		 jne	 SHORT $LN128@FindNextDi

; 159  : 					{
; 160  : 						MinDist = dist;

  001c1	8b da		 mov	 ebx, edx

; 161  : 						WhichDir = ldir;

  001c3	89 7d fc	 mov	 DWORD PTR _WhichDir$[ebp], edi
$LN128@FindNextDi:

; 148  : 		{
; 149  : 			for ( i = 0 ; i<8 ; i++ )

  001c6	8b 7d f4	 mov	 edi, DWORD PTR tv1162[ebp]
  001c9	83 c7 04	 add	 edi, 4
  001cc	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]
  001cf	89 7d f4	 mov	 DWORD PTR tv1162[ebp], edi
  001d2	83 f8 08	 cmp	 eax, 8
  001d5	0f 8c 55 fe ff
	ff		 jl	 $LL127@FindNextDi

; 162  : 					}
; 163  : 				}
; 164  : 			}
; 165  : 		}
; 166  : 		else

  001db	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  001de	8b 7d 08	 mov	 edi, DWORD PTR _sx$[ebp]
$LN142@FindNextDi:

; 186  : 			{
; 187  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  001e1	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
$LN12@FindNextDi:

; 200  : 						}
; 201  : 					}
; 202  : 				}
; 203  : 			}
; 204  : 		}
; 205  : 		int LastDist;
; 206  : 
; 207  : 		this->LastDir = dirstart;

  001e4	89 91 34 04 00
	00		 mov	 DWORD PTR [ecx+1076], edx

; 208  : 		LastDist = this->GetDist(sx, sy, sx + this->Dir[this->LastDir*2], sy + this->Dir[this->LastDir*2+1]);

  001ea	8b 84 d1 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+1016]
  001f1	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
  001f4	0f af c0	 imul	 eax, eax
  001f7	89 45 1c	 mov	 DWORD PTR tv678[ebp], eax
  001fa	8b 84 d1 f4 03
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+1012]
  00201	0f af c0	 imul	 eax, eax
  00204	89 45 0c	 mov	 DWORD PTR tv1077[ebp], eax
  00207	8b 45 1c	 mov	 eax, DWORD PTR tv678[ebp]
  0020a	03 45 0c	 add	 eax, DWORD PTR tv1077[ebp]

; 209  : 
; 210  : 		if ( ( LastDist > MinDist - 6 ) && ( LastDist < MinDist + 6 ) && ( MinDist >= 25 ) )

  0020d	8d 53 fa	 lea	 edx, DWORD PTR [ebx-6]
  00210	3b c2		 cmp	 eax, edx
  00212	0f 8e 5d 01 00
	00		 jle	 $LN143@FindNextDi
  00218	8d 53 06	 lea	 edx, DWORD PTR [ebx+6]
  0021b	3b c2		 cmp	 eax, edx
  0021d	0f 8d 52 01 00
	00		 jge	 $LN143@FindNextDi
  00223	83 fb 19	 cmp	 ebx, 25			; 00000019H
  00226	0f 8c 49 01 00
	00		 jl	 $LN143@FindNextDi

; 211  : 		{
; 212  : 			WhichDir = this->LastDir;

  0022c	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  0022f	89 45 fc	 mov	 DWORD PTR _WhichDir$[ebp], eax
  00232	e9 41 01 00 00	 jmp	 $LN9@FindNextDi
$LN27@FindNextDi:

; 167  : 		{
; 168  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  00237	8b 7d 08	 mov	 edi, DWORD PTR _sx$[ebp]
  0023a	8d 42 07	 lea	 eax, DWORD PTR [edx+7]
  0023d	8d 72 09	 lea	 esi, DWORD PTR [edx+9]
  00240	3b c6		 cmp	 eax, esi
  00242	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  00245	89 45 1c	 mov	 DWORD PTR _i$[ebp], eax
  00248	0f 8f 8e 00 00
	00		 jg	 $LN121@FindNextDi
  0024e	8b ff		 npad	 2
$LL20@FindNextDi:

; 169  : 			{
; 170  : 				ldir = i % 8;

  00250	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00255	79 05		 jns	 SHORT $LN145@FindNextDi
  00257	48		 dec	 eax
  00258	83 c8 f8	 or	 eax, -8			; fffffff8H
  0025b	40		 inc	 eax
$LN145@FindNextDi:

; 171  : 				int endx = sx + this->Dir[ldir*2];

  0025c	8b 94 c1 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+1012]
  00263	03 d7		 add	 edx, edi

; 172  : 				int endy = sy + this->Dir[ldir*2+1];

  00265	8b bc c1 f8 03
	00 00		 mov	 edi, DWORD PTR [ecx+eax*8+1016]
  0026c	03 fe		 add	 edi, esi

; 173  : 				int dist = this->GetDist(endx, endy, dx, dy);

  0026e	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00271	2b f2		 sub	 esi, edx
  00273	89 55 f4	 mov	 DWORD PTR _endx$137274[ebp], edx
  00276	0f af f6	 imul	 esi, esi
  00279	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  0027c	2b d7		 sub	 edx, edi
  0027e	0f af d2	 imul	 edx, edx
  00281	03 d6		 add	 edx, esi
  00283	89 7d f8	 mov	 DWORD PTR _endy$137275[ebp], edi

; 174  : 
; 175  : 				if ( MinDist > dist )

  00286	3b da		 cmp	 ebx, edx
  00288	7e 2f		 jle	 SHORT $LN19@FindNextDi

; 176  : 				{
; 177  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  0028a	8b 7d f4	 mov	 edi, DWORD PTR _endx$137274[ebp]
  0028d	85 ff		 test	 edi, edi
  0028f	78 28		 js	 SHORT $LN19@FindNextDi
  00291	8b 31		 mov	 esi, DWORD PTR [ecx]
  00293	3b fe		 cmp	 edi, esi
  00295	7d 22		 jge	 SHORT $LN19@FindNextDi
  00297	8b 7d f8	 mov	 edi, DWORD PTR _endy$137275[ebp]
  0029a	85 ff		 test	 edi, edi
  0029c	78 1b		 js	 SHORT $LN19@FindNextDi
  0029e	3b fe		 cmp	 edi, esi
  002a0	7d 17		 jge	 SHORT $LN19@FindNextDi
  002a2	0f af f7	 imul	 esi, edi
  002a5	03 b1 40 04 00
	00		 add	 esi, DWORD PTR [ecx+1088]
  002ab	8b 7d f4	 mov	 edi, DWORD PTR _endx$137274[ebp]
  002ae	80 3c 3e 00	 cmp	 BYTE PTR [esi+edi], 0
  002b2	75 05		 jne	 SHORT $LN19@FindNextDi

; 178  : 					{
; 179  : 						MinDist = dist;

  002b4	8b da		 mov	 ebx, edx

; 180  : 						WhichDir = ldir;

  002b6	89 45 fc	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN19@FindNextDi:

; 167  : 		{
; 168  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  002b9	8b 45 1c	 mov	 eax, DWORD PTR _i$[ebp]
  002bc	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]

; 181  : 					}
; 182  : 				}
; 183  : 			}
; 184  : 
; 185  : 			if ( MinDist == 10000000 )

  002bf	8b 7d 08	 mov	 edi, DWORD PTR _sx$[ebp]
  002c2	40		 inc	 eax
  002c3	8d 72 09	 lea	 esi, DWORD PTR [edx+9]
  002c6	3b c6		 cmp	 eax, esi
  002c8	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  002cb	89 45 1c	 mov	 DWORD PTR _i$[ebp], eax
  002ce	7e 80		 jle	 SHORT $LL20@FindNextDi
  002d0	81 fb 80 96 98
	00		 cmp	 ebx, 10000000		; 00989680H
  002d6	0f 85 08 ff ff
	ff		 jne	 $LN12@FindNextDi
$LN121@FindNextDi:

; 186  : 			{
; 187  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  002dc	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  002df	83 c2 06	 add	 edx, 6
  002e2	89 45 1c	 mov	 DWORD PTR _i$[ebp], eax
  002e5	3b c2		 cmp	 eax, edx
  002e7	0f 8f f4 fe ff
	ff		 jg	 $LN142@FindNextDi
  002ed	8d 49 00	 npad	 3
$LL14@FindNextDi:

; 188  : 				{
; 189  : 					ldir = i % 8;

  002f0	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  002f5	79 05		 jns	 SHORT $LN146@FindNextDi
  002f7	48		 dec	 eax
  002f8	83 c8 f8	 or	 eax, -8			; fffffff8H
  002fb	40		 inc	 eax
$LN146@FindNextDi:

; 190  : 					int endx = sx + this->Dir[ldir*2];

  002fc	8b 94 c1 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+1012]
  00303	03 d7		 add	 edx, edi

; 191  : 					int endy = sy + this->Dir[ldir*2+1];

  00305	8b bc c1 f8 03
	00 00		 mov	 edi, DWORD PTR [ecx+eax*8+1016]
  0030c	03 fe		 add	 edi, esi

; 192  : 					int dist = this->GetDist(endx, endy, dx, dy);

  0030e	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00311	2b f2		 sub	 esi, edx
  00313	89 55 f4	 mov	 DWORD PTR _endx$137283[ebp], edx
  00316	0f af f6	 imul	 esi, esi
  00319	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  0031c	2b d7		 sub	 edx, edi
  0031e	0f af d2	 imul	 edx, edx
  00321	03 d6		 add	 edx, esi
  00323	89 7d f8	 mov	 DWORD PTR _endy$137284[ebp], edi

; 193  : 
; 194  : 					if ( MinDist > dist )

  00326	3b da		 cmp	 ebx, edx
  00328	7e 2f		 jle	 SHORT $LN13@FindNextDi

; 195  : 					{
; 196  : 						if ( this->IsThisSpotOK(endx, endy) != FALSE )

  0032a	8b 7d f4	 mov	 edi, DWORD PTR _endx$137283[ebp]
  0032d	85 ff		 test	 edi, edi
  0032f	78 28		 js	 SHORT $LN13@FindNextDi
  00331	8b 31		 mov	 esi, DWORD PTR [ecx]
  00333	3b fe		 cmp	 edi, esi
  00335	7d 22		 jge	 SHORT $LN13@FindNextDi
  00337	8b 7d f8	 mov	 edi, DWORD PTR _endy$137284[ebp]
  0033a	85 ff		 test	 edi, edi
  0033c	78 1b		 js	 SHORT $LN13@FindNextDi
  0033e	3b fe		 cmp	 edi, esi
  00340	7d 17		 jge	 SHORT $LN13@FindNextDi
  00342	0f af f7	 imul	 esi, edi
  00345	03 b1 40 04 00
	00		 add	 esi, DWORD PTR [ecx+1088]
  0034b	8b 7d f4	 mov	 edi, DWORD PTR _endx$137283[ebp]
  0034e	80 3c 3e 00	 cmp	 BYTE PTR [esi+edi], 0
  00352	75 05		 jne	 SHORT $LN13@FindNextDi

; 197  : 						{
; 198  : 							MinDist = dist;

  00354	8b da		 mov	 ebx, edx

; 199  : 							WhichDir = ldir;

  00356	89 45 fc	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN13@FindNextDi:

; 186  : 			{
; 187  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  00359	8b 45 1c	 mov	 eax, DWORD PTR _i$[ebp]
  0035c	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
  0035f	8b 7d 08	 mov	 edi, DWORD PTR _sx$[ebp]
  00362	40		 inc	 eax
  00363	8d 72 06	 lea	 esi, DWORD PTR [edx+6]
  00366	3b c6		 cmp	 eax, esi
  00368	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  0036b	89 45 1c	 mov	 DWORD PTR _i$[ebp], eax
  0036e	7e 80		 jle	 SHORT $LL14@FindNextDi
  00370	e9 6f fe ff ff	 jmp	 $LN12@FindNextDi
$LN143@FindNextDi:

; 211  : 		{
; 212  : 			WhichDir = this->LastDir;

  00375	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
$LN9@FindNextDi:

; 213  : 		}
; 214  : 
; 215  : 		if ( MinDist == 10000000 )

  00378	81 fb 80 96 98
	00		 cmp	 ebx, 10000000		; 00989680H

; 216  : 		{
; 217  : 			return -1;

  0037e	0f 84 4b 01 00
	00		 je	 $LN149@FindNextDi

; 218  : 		}
; 219  : 		
; 220  : 		if ( this->CanWeMoveForward(sx+this->Dir[((WhichDir*2))], sy+this->Dir[((WhichDir*2))+1]) != FALSE )

  00384	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  0038b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038d	8b 84 c1 f4 03
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+1012]
  00394	03 de		 add	 ebx, esi
  00396	0f af d3	 imul	 edx, ebx
  00399	03 c7		 add	 eax, edi
  0039b	89 45 0c	 mov	 DWORD PTR $T154450[ebp], eax
  0039e	03 d0		 add	 edx, eax
  003a0	8b 01		 mov	 eax, DWORD PTR [ecx]
  003a2	39 45 0c	 cmp	 DWORD PTR $T154450[ebp], eax
  003a5	7d 35		 jge	 SHORT $LN144@FindNextDi
  003a7	83 7d 0c 00	 cmp	 DWORD PTR $T154450[ebp], 0
  003ab	7c 2f		 jl	 SHORT $LN144@FindNextDi
  003ad	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  003b0	7d 2a		 jge	 SHORT $LN144@FindNextDi
  003b2	85 db		 test	 ebx, ebx
  003b4	78 26		 js	 SHORT $LN144@FindNextDi
  003b6	8b 99 3c 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1084]
  003bc	80 3c 1a 01	 cmp	 BYTE PTR [edx+ebx], 1
  003c0	77 10		 ja	 SHORT $LN53@FindNextDi
  003c2	8b 99 40 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1088]
  003c8	80 3c 13 00	 cmp	 BYTE PTR [ebx+edx], 0
  003cc	0f 84 09 01 00
	00		 je	 $LN124@FindNextDi
$LN53@FindNextDi:
  003d2	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  003d8	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN144@FindNextDi:

; 231  : 		}
; 232  : 
; 233  : 		if ( ErrorCheck != 0 )

  003dc	80 7d 20 00	 cmp	 BYTE PTR _ErrorCheck$[ebp], 0
  003e0	0f 84 da 00 00
	00		 je	 $LN2@FindNextDi

; 234  : 		{
; 235  : 			int dir = WhichDir+7;

  003e6	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  003e9	83 c0 07	 add	 eax, 7

; 236  : 
; 237  : 			dir %= 8;

  003ec	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  003f1	79 05		 jns	 SHORT $LN147@FindNextDi
  003f3	48		 dec	 eax
  003f4	83 c8 f8	 or	 eax, -8			; fffffff8H
  003f7	40		 inc	 eax
$LN147@FindNextDi:

; 238  : 
; 239  : 			if (this->CanWeMoveForward(sx + this->Dir[dir*2], sy + this->Dir[dir*2+1]) != FALSE )

  003f8	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  003ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00401	03 de		 add	 ebx, esi
  00403	0f af d3	 imul	 edx, ebx
  00406	89 45 0c	 mov	 DWORD PTR _dir$137295[ebp], eax
  00409	8b 84 c1 f4 03
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+1012]
  00410	03 c7		 add	 eax, edi
  00412	89 45 20	 mov	 DWORD PTR $T154469[ebp], eax
  00415	03 d0		 add	 edx, eax
  00417	8b 01		 mov	 eax, DWORD PTR [ecx]
  00419	39 45 20	 cmp	 DWORD PTR $T154469[ebp], eax
  0041c	7d 35		 jge	 SHORT $LN4@FindNextDi
  0041e	83 7d 20 00	 cmp	 DWORD PTR $T154469[ebp], 0
  00422	7c 2f		 jl	 SHORT $LN4@FindNextDi
  00424	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  00427	7d 2a		 jge	 SHORT $LN4@FindNextDi
  00429	85 db		 test	 ebx, ebx
  0042b	78 26		 js	 SHORT $LN4@FindNextDi
  0042d	8b 99 3c 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1084]
  00433	80 3c 1a 01	 cmp	 BYTE PTR [edx+ebx], 1
  00437	77 10		 ja	 SHORT $LN65@FindNextDi
  00439	8b 99 40 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1088]
  0043f	80 3c 13 00	 cmp	 BYTE PTR [ebx+edx], 0
  00443	0f 84 e1 00 00
	00		 je	 $LN125@FindNextDi
$LN65@FindNextDi:
  00449	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  0044f	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN4@FindNextDi:

; 249  : 			}
; 250  : 
; 251  : 			int dir2 = WhichDir+9;

  00453	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00456	83 c0 09	 add	 eax, 9

; 252  : 			dir2 %= 8;

  00459	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0045e	79 05		 jns	 SHORT $LN148@FindNextDi
  00460	48		 dec	 eax
  00461	83 c8 f8	 or	 eax, -8			; fffffff8H
  00464	40		 inc	 eax
$LN148@FindNextDi:

; 253  : 			if (CanWeMoveForward(sx+this->Dir[dir2*2], sy+this->Dir[dir2*2+1]) != FALSE )

  00465	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  0046c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0046e	03 de		 add	 ebx, esi
  00470	0f af d3	 imul	 edx, ebx
  00473	89 45 0c	 mov	 DWORD PTR _dir2$137299[ebp], eax
  00476	8b 84 c1 f4 03
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+1012]
  0047d	03 c7		 add	 eax, edi
  0047f	89 45 20	 mov	 DWORD PTR $T154488[ebp], eax
  00482	03 d0		 add	 edx, eax
  00484	8b 01		 mov	 eax, DWORD PTR [ecx]
  00486	39 45 20	 cmp	 DWORD PTR $T154488[ebp], eax
  00489	7d 35		 jge	 SHORT $LN2@FindNextDi
  0048b	83 7d 20 00	 cmp	 DWORD PTR $T154488[ebp], 0
  0048f	7c 2f		 jl	 SHORT $LN2@FindNextDi
  00491	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  00494	7d 2a		 jge	 SHORT $LN2@FindNextDi
  00496	85 db		 test	 ebx, ebx
  00498	78 26		 js	 SHORT $LN2@FindNextDi
  0049a	8b 99 3c 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1084]
  004a0	80 3c 1a 01	 cmp	 BYTE PTR [edx+ebx], 1
  004a4	77 10		 ja	 SHORT $LN77@FindNextDi
  004a6	8b 99 40 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1088]
  004ac	80 3c 13 00	 cmp	 BYTE PTR [ebx+edx], 0
  004b0	0f 84 c3 00 00
	00		 je	 $LN126@FindNextDi
$LN77@FindNextDi:
  004b6	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  004bc	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN2@FindNextDi:

; 256  : 
; 257  : 				if ( path != -1 )
; 258  : 				{
; 259  : 					this->HitMap[sx + sy * this->Width] = 1;
; 260  : 					this->NumPath = path;
; 261  : 				}
; 262  : 				return dir2;
; 263  : 			}
; 264  : 		}
; 265  : 		
; 266  : 		this->HitMap[sx + sy*this->Width]=1;

  004c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  004c2	0f af d6	 imul	 edx, esi
  004c5	03 91 40 04 00
	00		 add	 edx, DWORD PTR [ecx+1088]
  004cb	c6 04 3a 01	 mov	 BYTE PTR [edx+edi], 1
$LN149@FindNextDi:

; 267  : 		return -1;

  004cf	5f		 pop	 edi
  004d0	5e		 pop	 esi
  004d1	83 c8 ff	 or	 eax, -1
  004d4	5b		 pop	 ebx

; 268  : 	};	// line : 155

  004d5	8b e5		 mov	 esp, ebp
  004d7	5d		 pop	 ebp
  004d8	c2 1c 00	 ret	 28			; 0000001cH
$LN124@FindNextDi:

; 221  : 		{
; 222  : 			int path = this->VerifyThatOnPath(sx, sy);

  004db	33 d2		 xor	 edx, edx
  004dd	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  004e0	7e 3c		 jle	 SHORT $LN6@FindNextDi
$LL62@FindNextDi:
  004e2	0f b6 5c 11 0c	 movzx	 ebx, BYTE PTR [ecx+edx+12]
  004e7	3b fb		 cmp	 edi, ebx
  004e9	75 0c		 jne	 SHORT $LN61@FindNextDi
  004eb	0f b6 9c 0a 00
	02 00 00	 movzx	 ebx, BYTE PTR [edx+ecx+512]
  004f3	3b f3		 cmp	 esi, ebx
  004f5	74 12		 je	 SHORT $LN63@FindNextDi
$LN61@FindNextDi:
  004f7	42		 inc	 edx
  004f8	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  004fb	7c e5		 jl	 SHORT $LL62@FindNextDi

; 228  : 			}
; 229  : 
; 230  : 			return WhichDir;

  004fd	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00500	5f		 pop	 edi
  00501	5e		 pop	 esi
  00502	5b		 pop	 ebx

; 268  : 	};	// line : 155

  00503	8b e5		 mov	 esp, ebp
  00505	5d		 pop	 ebp
  00506	c2 1c 00	 ret	 28			; 0000001cH

; 221  : 		{
; 222  : 			int path = this->VerifyThatOnPath(sx, sy);

$LN63@FindNextDi:

; 223  : 
; 224  : 			if ( path != -1 )

  00509	83 fa ff	 cmp	 edx, -1
  0050c	74 10		 je	 SHORT $LN6@FindNextDi

; 225  : 			{
; 226  : 				this->HitMap[sx + sy * this->Width ] = 1;

  0050e	0f af c6	 imul	 eax, esi
  00511	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00517	c6 04 38 01	 mov	 BYTE PTR [eax+edi], 1

; 227  : 				this->NumPath = path;

  0051b	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN6@FindNextDi:

; 228  : 			}
; 229  : 
; 230  : 			return WhichDir;

  0051e	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00521	5f		 pop	 edi
  00522	5e		 pop	 esi
  00523	5b		 pop	 ebx

; 268  : 	};	// line : 155

  00524	8b e5		 mov	 esp, ebp
  00526	5d		 pop	 ebp
  00527	c2 1c 00	 ret	 28			; 0000001cH
$LN125@FindNextDi:

; 240  : 			{
; 241  : 				int path = this->VerifyThatOnPath(sx, sy);

  0052a	33 d2		 xor	 edx, edx
  0052c	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  0052f	7e 3c		 jle	 SHORT $LN3@FindNextDi
$LL74@FindNextDi:
  00531	0f b6 5c 11 0c	 movzx	 ebx, BYTE PTR [ecx+edx+12]
  00536	3b fb		 cmp	 edi, ebx
  00538	75 0c		 jne	 SHORT $LN73@FindNextDi
  0053a	0f b6 9c 0a 00
	02 00 00	 movzx	 ebx, BYTE PTR [edx+ecx+512]
  00542	3b f3		 cmp	 esi, ebx
  00544	74 12		 je	 SHORT $LN75@FindNextDi
$LN73@FindNextDi:
  00546	42		 inc	 edx
  00547	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0054a	7c e5		 jl	 SHORT $LL74@FindNextDi

; 247  : 				}
; 248  : 				return dir;

  0054c	8b 45 0c	 mov	 eax, DWORD PTR _dir$137295[ebp]
  0054f	5f		 pop	 edi
  00550	5e		 pop	 esi
  00551	5b		 pop	 ebx

; 268  : 	};	// line : 155

  00552	8b e5		 mov	 esp, ebp
  00554	5d		 pop	 ebp
  00555	c2 1c 00	 ret	 28			; 0000001cH

; 240  : 			{
; 241  : 				int path = this->VerifyThatOnPath(sx, sy);

$LN75@FindNextDi:

; 242  : 
; 243  : 				if ( path != -1 )

  00558	83 fa ff	 cmp	 edx, -1
  0055b	74 10		 je	 SHORT $LN3@FindNextDi

; 244  : 				{
; 245  : 					this->HitMap[sx  + sy * this->Width] = 1;

  0055d	0f af c6	 imul	 eax, esi
  00560	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00566	c6 04 38 01	 mov	 BYTE PTR [eax+edi], 1

; 246  : 					this->NumPath = path;

  0056a	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN3@FindNextDi:

; 247  : 				}
; 248  : 				return dir;

  0056d	8b 45 0c	 mov	 eax, DWORD PTR _dir$137295[ebp]
  00570	5f		 pop	 edi
  00571	5e		 pop	 esi
  00572	5b		 pop	 ebx

; 268  : 	};	// line : 155

  00573	8b e5		 mov	 esp, ebp
  00575	5d		 pop	 ebp
  00576	c2 1c 00	 ret	 28			; 0000001cH
$LN126@FindNextDi:

; 254  : 			{
; 255  : 				int path = this->VerifyThatOnPath(sx, sy);

  00579	33 d2		 xor	 edx, edx
  0057b	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  0057e	7e ed		 jle	 SHORT $LN3@FindNextDi
$LL86@FindNextDi:
  00580	0f b6 5c 11 0c	 movzx	 ebx, BYTE PTR [ecx+edx+12]
  00585	3b fb		 cmp	 edi, ebx
  00587	75 0c		 jne	 SHORT $LN85@FindNextDi
  00589	0f b6 9c 0a 00
	02 00 00	 movzx	 ebx, BYTE PTR [edx+ecx+512]
  00591	3b f3		 cmp	 esi, ebx
  00593	74 c3		 je	 SHORT $LN75@FindNextDi
$LN85@FindNextDi:
  00595	42		 inc	 edx
  00596	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00599	7c e5		 jl	 SHORT $LL86@FindNextDi

; 247  : 				}
; 248  : 				return dir;

  0059b	8b 45 0c	 mov	 eax, DWORD PTR _dir$137295[ebp]
  0059e	5f		 pop	 edi
  0059f	5e		 pop	 esi
  005a0	5b		 pop	 ebx

; 268  : 	};	// line : 155

  005a1	8b e5		 mov	 esp, ebp
  005a3	5d		 pop	 ebp
  005a4	c2 1c 00	 ret	 28			; 0000001cH
?FindNextDir@PATH@@AAEHHHHHH_N0@Z ENDP			; PATH::FindNextDir
_TEXT	ENDS
PUBLIC	?FindNextDir2@PATH@@AAEHHHHHH_N0@Z		; PATH::FindNextDir2
; Function compile flags: /Ogtp
;	COMDAT ?FindNextDir2@PATH@@AAEHHHHHH_N0@Z
_TEXT	SEGMENT
tv1162 = -12						; size = 4
_endx$137331 = -12					; size = 4
_endx$137322 = -12					; size = 4
_endy$137332 = -8					; size = 4
_endy$137323 = -8					; size = 4
_endy$137314 = -8					; size = 4
_WhichDir$ = -4						; size = 4
_sx$ = 8						; size = 4
tv1077 = 12						; size = 4
$T154616 = 12						; size = 4
_dir2$137347 = 12					; size = 4
_dir$137343 = 12					; size = 4
_sy$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
_dirstart$ = 24						; size = 4
tv761 = 28						; size = 4
tv678 = 28						; size = 4
_endx$137313 = 28					; size = 4
_i$ = 28						; size = 4
_First$ = 28						; size = 1
$T154654 = 32						; size = 4
$T154635 = 32						; size = 4
_ErrorCheck$ = 32					; size = 1
?FindNextDir2@PATH@@AAEHHHHHH_N0@Z PROC			; PATH::FindNextDir2, COMDAT
; _this$ = ecx

; 271  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 272  : 		int MinDist = 10000000;
; 273  : 		long ldir;
; 274  : 		int WhichDir = 0;
; 275  : 		int i;
; 276  : 
; 277  : 		if ( First != 0 )

  00006	80 7d 1c 00	 cmp	 BYTE PTR _First$[ebp], 0
  0000a	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	bb 80 96 98 00	 mov	 ebx, 10000000		; 00989680H
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0
  0001c	0f 84 15 02 00
	00		 je	 $LN27@FindNextDi@2

; 278  : 		{
; 279  : 			for ( i = 0 ; i<8 ; i++ )

  00022	bf 02 00 00 00	 mov	 edi, 2
  00027	89 7d f4	 mov	 DWORD PTR tv1162[ebp], edi
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL127@FindNextDi@2:

; 280  : 			{
; 281  : 				ldir = i % 8 ;
; 282  : 				int endx = sx + this->Dir[ldir*2];
; 283  : 				int endy = sy + this->Dir[ldir*2+1];
; 284  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00030	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00033	83 c7 fe	 add	 edi, -2			; fffffffeH
  00036	83 e7 07	 and	 edi, 7
  00039	8b 94 f9 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+edi*8+1012]
  00040	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00043	8b 84 f9 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edi*8+1016]
  0004a	03 45 0c	 add	 eax, DWORD PTR _sy$[ebp]
  0004d	2b f2		 sub	 esi, edx
  0004f	89 55 1c	 mov	 DWORD PTR _endx$137313[ebp], edx
  00052	0f af f6	 imul	 esi, esi
  00055	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  00058	2b d0		 sub	 edx, eax
  0005a	0f af d2	 imul	 edx, edx
  0005d	03 d6		 add	 edx, esi
  0005f	89 45 f8	 mov	 DWORD PTR _endy$137314[ebp], eax

; 285  : 
; 286  : 				if ( MinDist > dist )

  00062	3b da		 cmp	 ebx, edx
  00064	7e 2f		 jle	 SHORT $LN25@FindNextDi@2

; 287  : 				{
; 288  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00066	8b 75 1c	 mov	 esi, DWORD PTR _endx$137313[ebp]
  00069	85 f6		 test	 esi, esi
  0006b	78 28		 js	 SHORT $LN25@FindNextDi@2
  0006d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006f	3b f0		 cmp	 esi, eax
  00071	7d 22		 jge	 SHORT $LN25@FindNextDi@2
  00073	8b 75 f8	 mov	 esi, DWORD PTR _endy$137314[ebp]
  00076	85 f6		 test	 esi, esi
  00078	78 1b		 js	 SHORT $LN25@FindNextDi@2
  0007a	3b f0		 cmp	 esi, eax
  0007c	7d 17		 jge	 SHORT $LN25@FindNextDi@2
  0007e	0f af c6	 imul	 eax, esi
  00081	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00087	8b 75 1c	 mov	 esi, DWORD PTR _endx$137313[ebp]
  0008a	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  0008e	75 05		 jne	 SHORT $LN25@FindNextDi@2

; 289  : 					{
; 290  : 						MinDist = dist;

  00090	8b da		 mov	 ebx, edx

; 291  : 						WhichDir = ldir;

  00092	89 7d fc	 mov	 DWORD PTR _WhichDir$[ebp], edi
$LN25@FindNextDi@2:

; 280  : 			{
; 281  : 				ldir = i % 8 ;
; 282  : 				int endx = sx + this->Dir[ldir*2];
; 283  : 				int endy = sy + this->Dir[ldir*2+1];
; 284  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00095	8b 7d f4	 mov	 edi, DWORD PTR tv1162[ebp]
  00098	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  0009b	4f		 dec	 edi
  0009c	83 e7 07	 and	 edi, 7
  0009f	8b 94 f9 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+edi*8+1012]
  000a6	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  000a9	8b 84 f9 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edi*8+1016]
  000b0	03 45 0c	 add	 eax, DWORD PTR _sy$[ebp]
  000b3	2b f2		 sub	 esi, edx
  000b5	89 55 1c	 mov	 DWORD PTR _endx$137313[ebp], edx
  000b8	0f af f6	 imul	 esi, esi
  000bb	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  000be	2b d0		 sub	 edx, eax
  000c0	0f af d2	 imul	 edx, edx
  000c3	03 d6		 add	 edx, esi
  000c5	89 45 f8	 mov	 DWORD PTR _endy$137314[ebp], eax

; 285  : 
; 286  : 				if ( MinDist > dist )

  000c8	3b da		 cmp	 ebx, edx
  000ca	7e 2f		 jle	 SHORT $LN108@FindNextDi@2

; 287  : 				{
; 288  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  000cc	8b 75 1c	 mov	 esi, DWORD PTR _endx$137313[ebp]
  000cf	85 f6		 test	 esi, esi
  000d1	78 28		 js	 SHORT $LN108@FindNextDi@2
  000d3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d5	3b f0		 cmp	 esi, eax
  000d7	7d 22		 jge	 SHORT $LN108@FindNextDi@2
  000d9	8b 75 f8	 mov	 esi, DWORD PTR _endy$137314[ebp]
  000dc	85 f6		 test	 esi, esi
  000de	78 1b		 js	 SHORT $LN108@FindNextDi@2
  000e0	3b f0		 cmp	 esi, eax
  000e2	7d 17		 jge	 SHORT $LN108@FindNextDi@2
  000e4	0f af c6	 imul	 eax, esi
  000e7	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  000ed	8b 75 1c	 mov	 esi, DWORD PTR _endx$137313[ebp]
  000f0	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  000f4	75 05		 jne	 SHORT $LN108@FindNextDi@2

; 289  : 					{
; 290  : 						MinDist = dist;

  000f6	8b da		 mov	 ebx, edx

; 291  : 						WhichDir = ldir;

  000f8	89 7d fc	 mov	 DWORD PTR _WhichDir$[ebp], edi
$LN108@FindNextDi@2:

; 280  : 			{
; 281  : 				ldir = i % 8 ;
; 282  : 				int endx = sx + this->Dir[ldir*2];
; 283  : 				int endy = sy + this->Dir[ldir*2+1];
; 284  : 				int dist = this->GetDist(endx, endy, dx, dy);

  000fb	8b 7d f4	 mov	 edi, DWORD PTR tv1162[ebp]
  000fe	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00101	83 e7 07	 and	 edi, 7
  00104	8b 94 f9 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+edi*8+1012]
  0010b	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  0010e	8b 84 f9 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edi*8+1016]
  00115	03 45 0c	 add	 eax, DWORD PTR _sy$[ebp]
  00118	2b f2		 sub	 esi, edx
  0011a	89 55 1c	 mov	 DWORD PTR _endx$137313[ebp], edx
  0011d	0f af f6	 imul	 esi, esi
  00120	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  00123	2b d0		 sub	 edx, eax
  00125	0f af d2	 imul	 edx, edx
  00128	03 d6		 add	 edx, esi
  0012a	89 45 f8	 mov	 DWORD PTR _endy$137314[ebp], eax

; 285  : 
; 286  : 				if ( MinDist > dist )

  0012d	3b da		 cmp	 ebx, edx
  0012f	7e 2f		 jle	 SHORT $LN112@FindNextDi@2

; 287  : 				{
; 288  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00131	8b 75 1c	 mov	 esi, DWORD PTR _endx$137313[ebp]
  00134	85 f6		 test	 esi, esi
  00136	78 28		 js	 SHORT $LN112@FindNextDi@2
  00138	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013a	3b f0		 cmp	 esi, eax
  0013c	7d 22		 jge	 SHORT $LN112@FindNextDi@2
  0013e	8b 75 f8	 mov	 esi, DWORD PTR _endy$137314[ebp]
  00141	85 f6		 test	 esi, esi
  00143	78 1b		 js	 SHORT $LN112@FindNextDi@2
  00145	3b f0		 cmp	 esi, eax
  00147	7d 17		 jge	 SHORT $LN112@FindNextDi@2
  00149	0f af c6	 imul	 eax, esi
  0014c	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00152	8b 75 1c	 mov	 esi, DWORD PTR _endx$137313[ebp]
  00155	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  00159	75 05		 jne	 SHORT $LN112@FindNextDi@2

; 289  : 					{
; 290  : 						MinDist = dist;

  0015b	8b da		 mov	 ebx, edx

; 291  : 						WhichDir = ldir;

  0015d	89 7d fc	 mov	 DWORD PTR _WhichDir$[ebp], edi
$LN112@FindNextDi@2:

; 280  : 			{
; 281  : 				ldir = i % 8 ;
; 282  : 				int endx = sx + this->Dir[ldir*2];
; 283  : 				int endy = sy + this->Dir[ldir*2+1];
; 284  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00160	8b 7d f4	 mov	 edi, DWORD PTR tv1162[ebp]
  00163	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00166	47		 inc	 edi
  00167	83 e7 07	 and	 edi, 7
  0016a	8b 94 f9 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+edi*8+1012]
  00171	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00174	8b 84 f9 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edi*8+1016]
  0017b	03 45 0c	 add	 eax, DWORD PTR _sy$[ebp]
  0017e	2b f2		 sub	 esi, edx
  00180	89 55 1c	 mov	 DWORD PTR _endx$137313[ebp], edx
  00183	0f af f6	 imul	 esi, esi
  00186	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  00189	2b d0		 sub	 edx, eax
  0018b	0f af d2	 imul	 edx, edx
  0018e	03 d6		 add	 edx, esi
  00190	89 45 f8	 mov	 DWORD PTR _endy$137314[ebp], eax

; 285  : 
; 286  : 				if ( MinDist > dist )

  00193	3b da		 cmp	 ebx, edx
  00195	7e 2f		 jle	 SHORT $LN128@FindNextDi@2

; 287  : 				{
; 288  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  00197	8b 75 1c	 mov	 esi, DWORD PTR _endx$137313[ebp]
  0019a	85 f6		 test	 esi, esi
  0019c	78 28		 js	 SHORT $LN128@FindNextDi@2
  0019e	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a0	3b f0		 cmp	 esi, eax
  001a2	7d 22		 jge	 SHORT $LN128@FindNextDi@2
  001a4	8b 75 f8	 mov	 esi, DWORD PTR _endy$137314[ebp]
  001a7	85 f6		 test	 esi, esi
  001a9	78 1b		 js	 SHORT $LN128@FindNextDi@2
  001ab	3b f0		 cmp	 esi, eax
  001ad	7d 17		 jge	 SHORT $LN128@FindNextDi@2
  001af	0f af c6	 imul	 eax, esi
  001b2	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  001b8	8b 75 1c	 mov	 esi, DWORD PTR _endx$137313[ebp]
  001bb	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  001bf	75 05		 jne	 SHORT $LN128@FindNextDi@2

; 289  : 					{
; 290  : 						MinDist = dist;

  001c1	8b da		 mov	 ebx, edx

; 291  : 						WhichDir = ldir;

  001c3	89 7d fc	 mov	 DWORD PTR _WhichDir$[ebp], edi
$LN128@FindNextDi@2:

; 278  : 		{
; 279  : 			for ( i = 0 ; i<8 ; i++ )

  001c6	8b 7d f4	 mov	 edi, DWORD PTR tv1162[ebp]
  001c9	83 c7 04	 add	 edi, 4
  001cc	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]
  001cf	89 7d f4	 mov	 DWORD PTR tv1162[ebp], edi
  001d2	83 f8 08	 cmp	 eax, 8
  001d5	0f 8c 55 fe ff
	ff		 jl	 $LL127@FindNextDi@2

; 292  : 					}
; 293  : 				}
; 294  : 			}
; 295  : 		}
; 296  : 		else

  001db	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  001de	8b 7d 08	 mov	 edi, DWORD PTR _sx$[ebp]
$LN142@FindNextDi@2:

; 316  : 			{
; 317  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  001e1	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
$LN12@FindNextDi@2:

; 330  : 						}
; 331  : 					}
; 332  : 				}
; 333  : 			}
; 334  : 		}
; 335  : 		int LastDist;
; 336  : 
; 337  : 		this->LastDir = dirstart;

  001e4	89 91 34 04 00
	00		 mov	 DWORD PTR [ecx+1076], edx

; 338  : 		LastDist = this->GetDist(sx, sy, sx + this->Dir[this->LastDir*2], sy + this->Dir[this->LastDir*2+1]);

  001ea	8b 84 d1 f8 03
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+1016]
  001f1	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
  001f4	0f af c0	 imul	 eax, eax
  001f7	89 45 1c	 mov	 DWORD PTR tv678[ebp], eax
  001fa	8b 84 d1 f4 03
	00 00		 mov	 eax, DWORD PTR [ecx+edx*8+1012]
  00201	0f af c0	 imul	 eax, eax
  00204	89 45 0c	 mov	 DWORD PTR tv1077[ebp], eax
  00207	8b 45 1c	 mov	 eax, DWORD PTR tv678[ebp]
  0020a	03 45 0c	 add	 eax, DWORD PTR tv1077[ebp]

; 339  : 
; 340  : 		if ( ( LastDist > MinDist - 6 ) && ( LastDist < MinDist + 6 ) && ( MinDist >= 25 ) )

  0020d	8d 53 fa	 lea	 edx, DWORD PTR [ebx-6]
  00210	3b c2		 cmp	 eax, edx
  00212	0f 8e 5d 01 00
	00		 jle	 $LN143@FindNextDi@2
  00218	8d 53 06	 lea	 edx, DWORD PTR [ebx+6]
  0021b	3b c2		 cmp	 eax, edx
  0021d	0f 8d 52 01 00
	00		 jge	 $LN143@FindNextDi@2
  00223	83 fb 19	 cmp	 ebx, 25			; 00000019H
  00226	0f 8c 49 01 00
	00		 jl	 $LN143@FindNextDi@2

; 341  : 		{
; 342  : 			WhichDir = this->LastDir;

  0022c	8b 45 18	 mov	 eax, DWORD PTR _dirstart$[ebp]
  0022f	89 45 fc	 mov	 DWORD PTR _WhichDir$[ebp], eax
  00232	e9 41 01 00 00	 jmp	 $LN9@FindNextDi@2
$LN27@FindNextDi@2:

; 297  : 		{
; 298  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  00237	8b 7d 08	 mov	 edi, DWORD PTR _sx$[ebp]
  0023a	8d 42 07	 lea	 eax, DWORD PTR [edx+7]
  0023d	8d 72 09	 lea	 esi, DWORD PTR [edx+9]
  00240	3b c6		 cmp	 eax, esi
  00242	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  00245	89 45 1c	 mov	 DWORD PTR _i$[ebp], eax
  00248	0f 8f 8e 00 00
	00		 jg	 $LN121@FindNextDi@2
  0024e	8b ff		 npad	 2
$LL20@FindNextDi@2:

; 299  : 			{
; 300  : 				ldir = i % 8;

  00250	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00255	79 05		 jns	 SHORT $LN145@FindNextDi@2
  00257	48		 dec	 eax
  00258	83 c8 f8	 or	 eax, -8			; fffffff8H
  0025b	40		 inc	 eax
$LN145@FindNextDi@2:

; 301  : 				int endx = sx + this->Dir[ldir*2];

  0025c	8b 94 c1 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+1012]
  00263	03 d7		 add	 edx, edi

; 302  : 				int endy = sy + this->Dir[ldir*2+1];

  00265	8b bc c1 f8 03
	00 00		 mov	 edi, DWORD PTR [ecx+eax*8+1016]
  0026c	03 fe		 add	 edi, esi

; 303  : 				int dist = this->GetDist(endx, endy, dx, dy);

  0026e	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00271	2b f2		 sub	 esi, edx
  00273	89 55 f4	 mov	 DWORD PTR _endx$137322[ebp], edx
  00276	0f af f6	 imul	 esi, esi
  00279	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  0027c	2b d7		 sub	 edx, edi
  0027e	0f af d2	 imul	 edx, edx
  00281	03 d6		 add	 edx, esi
  00283	89 7d f8	 mov	 DWORD PTR _endy$137323[ebp], edi

; 304  : 
; 305  : 				if ( MinDist > dist )

  00286	3b da		 cmp	 ebx, edx
  00288	7e 2f		 jle	 SHORT $LN19@FindNextDi@2

; 306  : 				{
; 307  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE )

  0028a	8b 7d f4	 mov	 edi, DWORD PTR _endx$137322[ebp]
  0028d	85 ff		 test	 edi, edi
  0028f	78 28		 js	 SHORT $LN19@FindNextDi@2
  00291	8b 31		 mov	 esi, DWORD PTR [ecx]
  00293	3b fe		 cmp	 edi, esi
  00295	7d 22		 jge	 SHORT $LN19@FindNextDi@2
  00297	8b 7d f8	 mov	 edi, DWORD PTR _endy$137323[ebp]
  0029a	85 ff		 test	 edi, edi
  0029c	78 1b		 js	 SHORT $LN19@FindNextDi@2
  0029e	3b fe		 cmp	 edi, esi
  002a0	7d 17		 jge	 SHORT $LN19@FindNextDi@2
  002a2	0f af f7	 imul	 esi, edi
  002a5	03 b1 40 04 00
	00		 add	 esi, DWORD PTR [ecx+1088]
  002ab	8b 7d f4	 mov	 edi, DWORD PTR _endx$137322[ebp]
  002ae	80 3c 3e 00	 cmp	 BYTE PTR [esi+edi], 0
  002b2	75 05		 jne	 SHORT $LN19@FindNextDi@2

; 308  : 					{
; 309  : 						MinDist = dist;

  002b4	8b da		 mov	 ebx, edx

; 310  : 						WhichDir = ldir;

  002b6	89 45 fc	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN19@FindNextDi@2:

; 297  : 		{
; 298  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  002b9	8b 45 1c	 mov	 eax, DWORD PTR _i$[ebp]
  002bc	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]

; 311  : 					}
; 312  : 				}
; 313  : 			}
; 314  : 
; 315  : 			if ( MinDist == 10000000 )

  002bf	8b 7d 08	 mov	 edi, DWORD PTR _sx$[ebp]
  002c2	40		 inc	 eax
  002c3	8d 72 09	 lea	 esi, DWORD PTR [edx+9]
  002c6	3b c6		 cmp	 eax, esi
  002c8	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  002cb	89 45 1c	 mov	 DWORD PTR _i$[ebp], eax
  002ce	7e 80		 jle	 SHORT $LL20@FindNextDi@2
  002d0	81 fb 80 96 98
	00		 cmp	 ebx, 10000000		; 00989680H
  002d6	0f 85 08 ff ff
	ff		 jne	 $LN12@FindNextDi@2
$LN121@FindNextDi@2:

; 316  : 			{
; 317  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  002dc	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  002df	83 c2 06	 add	 edx, 6
  002e2	89 45 1c	 mov	 DWORD PTR _i$[ebp], eax
  002e5	3b c2		 cmp	 eax, edx
  002e7	0f 8f f4 fe ff
	ff		 jg	 $LN142@FindNextDi@2
  002ed	8d 49 00	 npad	 3
$LL14@FindNextDi@2:

; 318  : 				{
; 319  : 					ldir = i % 8;

  002f0	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  002f5	79 05		 jns	 SHORT $LN146@FindNextDi@2
  002f7	48		 dec	 eax
  002f8	83 c8 f8	 or	 eax, -8			; fffffff8H
  002fb	40		 inc	 eax
$LN146@FindNextDi@2:

; 320  : 					int endx = sx + this->Dir[ldir*2];

  002fc	8b 94 c1 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+1012]
  00303	03 d7		 add	 edx, edi

; 321  : 					int endy = sy + this->Dir[ldir*2+1];

  00305	8b bc c1 f8 03
	00 00		 mov	 edi, DWORD PTR [ecx+eax*8+1016]
  0030c	03 fe		 add	 edi, esi

; 322  : 					int dist = this->GetDist(endx, endy, dx, dy);

  0030e	8b 75 10	 mov	 esi, DWORD PTR _dx$[ebp]
  00311	2b f2		 sub	 esi, edx
  00313	89 55 f4	 mov	 DWORD PTR _endx$137331[ebp], edx
  00316	0f af f6	 imul	 esi, esi
  00319	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  0031c	2b d7		 sub	 edx, edi
  0031e	0f af d2	 imul	 edx, edx
  00321	03 d6		 add	 edx, esi
  00323	89 7d f8	 mov	 DWORD PTR _endy$137332[ebp], edi

; 323  : 
; 324  : 					if ( MinDist > dist )

  00326	3b da		 cmp	 ebx, edx
  00328	7e 2f		 jle	 SHORT $LN13@FindNextDi@2

; 325  : 					{
; 326  : 						if ( this->IsThisSpotOK(endx, endy) != FALSE )

  0032a	8b 7d f4	 mov	 edi, DWORD PTR _endx$137331[ebp]
  0032d	85 ff		 test	 edi, edi
  0032f	78 28		 js	 SHORT $LN13@FindNextDi@2
  00331	8b 31		 mov	 esi, DWORD PTR [ecx]
  00333	3b fe		 cmp	 edi, esi
  00335	7d 22		 jge	 SHORT $LN13@FindNextDi@2
  00337	8b 7d f8	 mov	 edi, DWORD PTR _endy$137332[ebp]
  0033a	85 ff		 test	 edi, edi
  0033c	78 1b		 js	 SHORT $LN13@FindNextDi@2
  0033e	3b fe		 cmp	 edi, esi
  00340	7d 17		 jge	 SHORT $LN13@FindNextDi@2
  00342	0f af f7	 imul	 esi, edi
  00345	03 b1 40 04 00
	00		 add	 esi, DWORD PTR [ecx+1088]
  0034b	8b 7d f4	 mov	 edi, DWORD PTR _endx$137331[ebp]
  0034e	80 3c 3e 00	 cmp	 BYTE PTR [esi+edi], 0
  00352	75 05		 jne	 SHORT $LN13@FindNextDi@2

; 327  : 						{
; 328  : 							MinDist = dist;

  00354	8b da		 mov	 ebx, edx

; 329  : 							WhichDir = ldir;

  00356	89 45 fc	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN13@FindNextDi@2:

; 316  : 			{
; 317  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  00359	8b 45 1c	 mov	 eax, DWORD PTR _i$[ebp]
  0035c	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
  0035f	8b 7d 08	 mov	 edi, DWORD PTR _sx$[ebp]
  00362	40		 inc	 eax
  00363	8d 72 06	 lea	 esi, DWORD PTR [edx+6]
  00366	3b c6		 cmp	 eax, esi
  00368	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  0036b	89 45 1c	 mov	 DWORD PTR _i$[ebp], eax
  0036e	7e 80		 jle	 SHORT $LL14@FindNextDi@2
  00370	e9 6f fe ff ff	 jmp	 $LN12@FindNextDi@2
$LN143@FindNextDi@2:

; 341  : 		{
; 342  : 			WhichDir = this->LastDir;

  00375	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
$LN9@FindNextDi@2:

; 343  : 		}
; 344  : 
; 345  : 		if ( MinDist == 10000000 )

  00378	81 fb 80 96 98
	00		 cmp	 ebx, 10000000		; 00989680H

; 346  : 		{
; 347  : 			return -1;

  0037e	0f 84 4b 01 00
	00		 je	 $LN149@FindNextDi@2

; 348  : 		}
; 349  : 		
; 350  : 		if ( this->CanWeMoveForward2(sx+this->Dir[WhichDir*2],sy+ this->Dir[WhichDir*2+1]) != FALSE )

  00384	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  0038b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038d	8b 84 c1 f4 03
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+1012]
  00394	03 de		 add	 ebx, esi
  00396	0f af d3	 imul	 edx, ebx
  00399	03 c7		 add	 eax, edi
  0039b	89 45 0c	 mov	 DWORD PTR $T154616[ebp], eax
  0039e	03 d0		 add	 edx, eax
  003a0	8b 01		 mov	 eax, DWORD PTR [ecx]
  003a2	39 45 0c	 cmp	 DWORD PTR $T154616[ebp], eax
  003a5	7d 35		 jge	 SHORT $LN144@FindNextDi@2
  003a7	83 7d 0c 00	 cmp	 DWORD PTR $T154616[ebp], 0
  003ab	7c 2f		 jl	 SHORT $LN144@FindNextDi@2
  003ad	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  003b0	7d 2a		 jge	 SHORT $LN144@FindNextDi@2
  003b2	85 db		 test	 ebx, ebx
  003b4	78 26		 js	 SHORT $LN144@FindNextDi@2
  003b6	8b 99 3c 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1084]
  003bc	80 3c 1a 01	 cmp	 BYTE PTR [edx+ebx], 1
  003c0	73 10		 jae	 SHORT $LN53@FindNextDi@2
  003c2	8b 99 40 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1088]
  003c8	80 3c 13 00	 cmp	 BYTE PTR [ebx+edx], 0
  003cc	0f 84 09 01 00
	00		 je	 $LN124@FindNextDi@2
$LN53@FindNextDi@2:
  003d2	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  003d8	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN144@FindNextDi@2:

; 361  : 		}
; 362  : 
; 363  : 		if ( ErrorCheck != 0 )

  003dc	80 7d 20 00	 cmp	 BYTE PTR _ErrorCheck$[ebp], 0
  003e0	0f 84 da 00 00
	00		 je	 $LN2@FindNextDi@2

; 364  : 		{
; 365  : 			int dir = WhichDir+7;

  003e6	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  003e9	83 c0 07	 add	 eax, 7

; 366  : 
; 367  : 			dir %= 8;

  003ec	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  003f1	79 05		 jns	 SHORT $LN147@FindNextDi@2
  003f3	48		 dec	 eax
  003f4	83 c8 f8	 or	 eax, -8			; fffffff8H
  003f7	40		 inc	 eax
$LN147@FindNextDi@2:

; 368  : 
; 369  : 			if (this->CanWeMoveForward2(sx + this->Dir[dir*2], sy + this->Dir[dir*2+1]) != FALSE )

  003f8	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  003ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00401	03 de		 add	 ebx, esi
  00403	0f af d3	 imul	 edx, ebx
  00406	89 45 0c	 mov	 DWORD PTR _dir$137343[ebp], eax
  00409	8b 84 c1 f4 03
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+1012]
  00410	03 c7		 add	 eax, edi
  00412	89 45 20	 mov	 DWORD PTR $T154635[ebp], eax
  00415	03 d0		 add	 edx, eax
  00417	8b 01		 mov	 eax, DWORD PTR [ecx]
  00419	39 45 20	 cmp	 DWORD PTR $T154635[ebp], eax
  0041c	7d 35		 jge	 SHORT $LN4@FindNextDi@2
  0041e	83 7d 20 00	 cmp	 DWORD PTR $T154635[ebp], 0
  00422	7c 2f		 jl	 SHORT $LN4@FindNextDi@2
  00424	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  00427	7d 2a		 jge	 SHORT $LN4@FindNextDi@2
  00429	85 db		 test	 ebx, ebx
  0042b	78 26		 js	 SHORT $LN4@FindNextDi@2
  0042d	8b 99 3c 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1084]
  00433	80 3c 1a 01	 cmp	 BYTE PTR [edx+ebx], 1
  00437	73 10		 jae	 SHORT $LN65@FindNextDi@2
  00439	8b 99 40 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1088]
  0043f	80 3c 13 00	 cmp	 BYTE PTR [ebx+edx], 0
  00443	0f 84 e1 00 00
	00		 je	 $LN125@FindNextDi@2
$LN65@FindNextDi@2:
  00449	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  0044f	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN4@FindNextDi@2:

; 379  : 			}
; 380  : 
; 381  : 			int dir2 = WhichDir+9;

  00453	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00456	83 c0 09	 add	 eax, 9

; 382  : 			dir2 %= 8;

  00459	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0045e	79 05		 jns	 SHORT $LN148@FindNextDi@2
  00460	48		 dec	 eax
  00461	83 c8 f8	 or	 eax, -8			; fffffff8H
  00464	40		 inc	 eax
$LN148@FindNextDi@2:

; 383  : 
; 384  : 			if (CanWeMoveForward2(sx+this->Dir[dir2*2], sy+this->Dir[dir2*2+1]) != FALSE )

  00465	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  0046c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0046e	03 de		 add	 ebx, esi
  00470	0f af d3	 imul	 edx, ebx
  00473	89 45 0c	 mov	 DWORD PTR _dir2$137347[ebp], eax
  00476	8b 84 c1 f4 03
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+1012]
  0047d	03 c7		 add	 eax, edi
  0047f	89 45 20	 mov	 DWORD PTR $T154654[ebp], eax
  00482	03 d0		 add	 edx, eax
  00484	8b 01		 mov	 eax, DWORD PTR [ecx]
  00486	39 45 20	 cmp	 DWORD PTR $T154654[ebp], eax
  00489	7d 35		 jge	 SHORT $LN2@FindNextDi@2
  0048b	83 7d 20 00	 cmp	 DWORD PTR $T154654[ebp], 0
  0048f	7c 2f		 jl	 SHORT $LN2@FindNextDi@2
  00491	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  00494	7d 2a		 jge	 SHORT $LN2@FindNextDi@2
  00496	85 db		 test	 ebx, ebx
  00498	78 26		 js	 SHORT $LN2@FindNextDi@2
  0049a	8b 99 3c 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1084]
  004a0	80 3c 1a 01	 cmp	 BYTE PTR [edx+ebx], 1
  004a4	73 10		 jae	 SHORT $LN77@FindNextDi@2
  004a6	8b 99 40 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1088]
  004ac	80 3c 13 00	 cmp	 BYTE PTR [ebx+edx], 0
  004b0	0f 84 c3 00 00
	00		 je	 $LN126@FindNextDi@2
$LN77@FindNextDi@2:
  004b6	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  004bc	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN2@FindNextDi@2:

; 387  : 
; 388  : 				if ( path != -1 )
; 389  : 				{
; 390  : 					this->HitMap[sx + sy * this->Width] = 1;
; 391  : 					this->NumPath = path;
; 392  : 				}
; 393  : 				return dir2;
; 394  : 			}
; 395  : 		}
; 396  : 		
; 397  : 		this->HitMap[sx + sy*this->Width]=1;

  004c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  004c2	0f af d6	 imul	 edx, esi
  004c5	03 91 40 04 00
	00		 add	 edx, DWORD PTR [ecx+1088]
  004cb	c6 04 3a 01	 mov	 BYTE PTR [edx+edi], 1
$LN149@FindNextDi@2:

; 398  : 		return -1;

  004cf	5f		 pop	 edi
  004d0	5e		 pop	 esi
  004d1	83 c8 ff	 or	 eax, -1
  004d4	5b		 pop	 ebx

; 399  : 	};

  004d5	8b e5		 mov	 esp, ebp
  004d7	5d		 pop	 ebp
  004d8	c2 1c 00	 ret	 28			; 0000001cH
$LN124@FindNextDi@2:

; 351  : 		{
; 352  : 			int path = this->VerifyThatOnPath(sx, sy);

  004db	33 d2		 xor	 edx, edx
  004dd	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  004e0	7e 3c		 jle	 SHORT $LN6@FindNextDi@2
$LL62@FindNextDi@2:
  004e2	0f b6 5c 11 0c	 movzx	 ebx, BYTE PTR [ecx+edx+12]
  004e7	3b fb		 cmp	 edi, ebx
  004e9	75 0c		 jne	 SHORT $LN61@FindNextDi@2
  004eb	0f b6 9c 0a 00
	02 00 00	 movzx	 ebx, BYTE PTR [edx+ecx+512]
  004f3	3b f3		 cmp	 esi, ebx
  004f5	74 12		 je	 SHORT $LN63@FindNextDi@2
$LN61@FindNextDi@2:
  004f7	42		 inc	 edx
  004f8	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  004fb	7c e5		 jl	 SHORT $LL62@FindNextDi@2

; 358  : 			}
; 359  : 
; 360  : 			return WhichDir;

  004fd	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00500	5f		 pop	 edi
  00501	5e		 pop	 esi
  00502	5b		 pop	 ebx

; 399  : 	};

  00503	8b e5		 mov	 esp, ebp
  00505	5d		 pop	 ebp
  00506	c2 1c 00	 ret	 28			; 0000001cH

; 351  : 		{
; 352  : 			int path = this->VerifyThatOnPath(sx, sy);

$LN63@FindNextDi@2:

; 353  : 
; 354  : 			if ( path != -1 )

  00509	83 fa ff	 cmp	 edx, -1
  0050c	74 10		 je	 SHORT $LN6@FindNextDi@2

; 355  : 			{
; 356  : 				this->HitMap[sx+ sy * this->Width ] = 1;

  0050e	0f af c6	 imul	 eax, esi
  00511	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00517	c6 04 38 01	 mov	 BYTE PTR [eax+edi], 1

; 357  : 				this->NumPath = path;

  0051b	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN6@FindNextDi@2:

; 358  : 			}
; 359  : 
; 360  : 			return WhichDir;

  0051e	8b 45 fc	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00521	5f		 pop	 edi
  00522	5e		 pop	 esi
  00523	5b		 pop	 ebx

; 399  : 	};

  00524	8b e5		 mov	 esp, ebp
  00526	5d		 pop	 ebp
  00527	c2 1c 00	 ret	 28			; 0000001cH
$LN125@FindNextDi@2:

; 370  : 			{
; 371  : 				int path = this->VerifyThatOnPath(sx, sy);

  0052a	33 d2		 xor	 edx, edx
  0052c	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  0052f	7e 3c		 jle	 SHORT $LN3@FindNextDi@2
$LL74@FindNextDi@2:
  00531	0f b6 5c 11 0c	 movzx	 ebx, BYTE PTR [ecx+edx+12]
  00536	3b fb		 cmp	 edi, ebx
  00538	75 0c		 jne	 SHORT $LN73@FindNextDi@2
  0053a	0f b6 9c 0a 00
	02 00 00	 movzx	 ebx, BYTE PTR [edx+ecx+512]
  00542	3b f3		 cmp	 esi, ebx
  00544	74 12		 je	 SHORT $LN75@FindNextDi@2
$LN73@FindNextDi@2:
  00546	42		 inc	 edx
  00547	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0054a	7c e5		 jl	 SHORT $LL74@FindNextDi@2

; 377  : 				}
; 378  : 				return dir;

  0054c	8b 45 0c	 mov	 eax, DWORD PTR _dir$137343[ebp]
  0054f	5f		 pop	 edi
  00550	5e		 pop	 esi
  00551	5b		 pop	 ebx

; 399  : 	};

  00552	8b e5		 mov	 esp, ebp
  00554	5d		 pop	 ebp
  00555	c2 1c 00	 ret	 28			; 0000001cH

; 370  : 			{
; 371  : 				int path = this->VerifyThatOnPath(sx, sy);

$LN75@FindNextDi@2:

; 372  : 
; 373  : 				if ( path != -1 )

  00558	83 fa ff	 cmp	 edx, -1
  0055b	74 10		 je	 SHORT $LN3@FindNextDi@2

; 374  : 				{
; 375  : 					this->HitMap[sx+ sy * this->Width] = 1;

  0055d	0f af c6	 imul	 eax, esi
  00560	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  00566	c6 04 38 01	 mov	 BYTE PTR [eax+edi], 1

; 376  : 					this->NumPath = path;

  0056a	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN3@FindNextDi@2:

; 377  : 				}
; 378  : 				return dir;

  0056d	8b 45 0c	 mov	 eax, DWORD PTR _dir$137343[ebp]
  00570	5f		 pop	 edi
  00571	5e		 pop	 esi
  00572	5b		 pop	 ebx

; 399  : 	};

  00573	8b e5		 mov	 esp, ebp
  00575	5d		 pop	 ebp
  00576	c2 1c 00	 ret	 28			; 0000001cH
$LN126@FindNextDi@2:

; 385  : 			{
; 386  : 				int path = this->VerifyThatOnPath(sx, sy);

  00579	33 d2		 xor	 edx, edx
  0057b	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  0057e	7e ed		 jle	 SHORT $LN3@FindNextDi@2
$LL86@FindNextDi@2:
  00580	0f b6 5c 11 0c	 movzx	 ebx, BYTE PTR [ecx+edx+12]
  00585	3b fb		 cmp	 edi, ebx
  00587	75 0c		 jne	 SHORT $LN85@FindNextDi@2
  00589	0f b6 9c 0a 00
	02 00 00	 movzx	 ebx, BYTE PTR [edx+ecx+512]
  00591	3b f3		 cmp	 esi, ebx
  00593	74 c3		 je	 SHORT $LN75@FindNextDi@2
$LN85@FindNextDi@2:
  00595	42		 inc	 edx
  00596	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00599	7c e5		 jl	 SHORT $LL86@FindNextDi@2

; 377  : 				}
; 378  : 				return dir;

  0059b	8b 45 0c	 mov	 eax, DWORD PTR _dir$137343[ebp]
  0059e	5f		 pop	 edi
  0059f	5e		 pop	 esi
  005a0	5b		 pop	 ebx

; 399  : 	};

  005a1	8b e5		 mov	 esp, ebp
  005a3	5d		 pop	 ebp
  005a4	c2 1c 00	 ret	 28			; 0000001cH
?FindNextDir2@PATH@@AAEHHHHHH_N0@Z ENDP			; PATH::FindNextDir2
_TEXT	ENDS
PUBLIC	?FindNextDir3@PATH@@AAEHHHHHH_N0@Z		; PATH::FindNextDir3
; Function compile flags: /Ogtp
;	COMDAT ?FindNextDir3@PATH@@AAEHHHHHH_N0@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_WhichDir$ = -8						; size = 4
_MinDist$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_dx$ = 16						; size = 4
_dy$ = 20						; size = 4
tv1399 = 24						; size = 4
$T154869 = 24						; size = 4
_dirstart$ = 24						; size = 4
_ldir$ = 28						; size = 4
_First$ = 28						; size = 1
_ErrorCheck$ = 32					; size = 1
?FindNextDir3@PATH@@AAEHHHHHH_N0@Z PROC			; PATH::FindNextDir3, COMDAT
; _this$ = ecx

; 402  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 403  : 		int MinDist = 10000000;
; 404  : 		long ldir;
; 405  : 		int WhichDir = 0;
; 406  : 		int i;
; 407  : 
; 408  : 		if ( First != 0 )

  00006	80 7d 1c 00	 cmp	 BYTE PTR _First$[ebp], 0
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	c7 45 fc 80 96
	98 00		 mov	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H
  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _WhichDir$[ebp], 0
  0001b	0f 84 57 02 00
	00		 je	 $LN26@FindNextDi@3

; 409  : 		{
; 410  : 			for ( i = 0 ; i<8 ; i++ )

  00021	b8 02 00 00 00	 mov	 eax, 2
  00026	89 45 18	 mov	 DWORD PTR tv1399[ebp], eax
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL158@FindNextDi@3:

; 411  : 			{
; 412  : 				ldir = i % 8 ;
; 413  : 				int endx = sx + this->Dir[ldir*2];
; 414  : 				int endy = sy + this->Dir[ldir*2+1];
; 415  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00030	8b 7d 10	 mov	 edi, DWORD PTR _dx$[ebp]
  00033	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  00036	83 c0 fe	 add	 eax, -2			; fffffffeH
  00039	83 e0 07	 and	 eax, 7
  0003c	8b b4 c1 f4 03
	00 00		 mov	 esi, DWORD PTR [ecx+eax*8+1012]
  00043	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  0004a	03 75 08	 add	 esi, DWORD PTR _sx$[ebp]
  0004d	03 5d 0c	 add	 ebx, DWORD PTR _sy$[ebp]
  00050	2b fe		 sub	 edi, esi
  00052	2b d3		 sub	 edx, ebx
  00054	0f af ff	 imul	 edi, edi
  00057	0f af d2	 imul	 edx, edx
  0005a	03 d7		 add	 edx, edi
  0005c	89 45 1c	 mov	 DWORD PTR _ldir$[ebp], eax

; 416  : 
; 417  : 				if ( MinDist > dist )

  0005f	39 55 fc	 cmp	 DWORD PTR _MinDist$[ebp], edx
  00062	7e 57		 jle	 SHORT $LN24@FindNextDi@3

; 418  : 				{
; 419  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  00064	85 f6		 test	 esi, esi
  00066	78 53		 js	 SHORT $LN24@FindNextDi@3
  00068	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006a	3b f0		 cmp	 esi, eax
  0006c	7d 4d		 jge	 SHORT $LN24@FindNextDi@3
  0006e	85 db		 test	 ebx, ebx
  00070	78 49		 js	 SHORT $LN24@FindNextDi@3
  00072	3b d8		 cmp	 ebx, eax
  00074	7d 45		 jge	 SHORT $LN24@FindNextDi@3
  00076	8b b9 40 04 00
	00		 mov	 edi, DWORD PTR [ecx+1088]
  0007c	0f af c3	 imul	 eax, ebx
  0007f	03 f8		 add	 edi, eax
  00081	80 3c 37 00	 cmp	 BYTE PTR [edi+esi], 0
  00085	75 34		 jne	 SHORT $LN24@FindNextDi@3
  00087	03 f0		 add	 esi, eax
  00089	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  0008c	7d 2d		 jge	 SHORT $LN24@FindNextDi@3
  0008e	8b 81 3c 04 00
	00		 mov	 eax, DWORD PTR [ecx+1084]
  00094	80 3c 06 01	 cmp	 BYTE PTR [esi+eax], 1
  00098	73 0c		 jae	 SHORT $LN36@FindNextDi@3
  0009a	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  000a0	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  000a4	74 0c		 je	 SHORT $LN142@FindNextDi@3
$LN36@FindNextDi@3:
  000a6	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  000ac	c6 04 30 01	 mov	 BYTE PTR [eax+esi], 1
  000b0	eb 09		 jmp	 SHORT $LN24@FindNextDi@3
$LN142@FindNextDi@3:

; 420  : 					{
; 421  : 						MinDist = dist;

  000b2	89 55 fc	 mov	 DWORD PTR _MinDist$[ebp], edx

; 422  : 						WhichDir = ldir;

  000b5	8b 55 1c	 mov	 edx, DWORD PTR _ldir$[ebp]
  000b8	89 55 f8	 mov	 DWORD PTR _WhichDir$[ebp], edx
$LN24@FindNextDi@3:

; 411  : 			{
; 412  : 				ldir = i % 8 ;
; 413  : 				int endx = sx + this->Dir[ldir*2];
; 414  : 				int endy = sy + this->Dir[ldir*2+1];
; 415  : 				int dist = this->GetDist(endx, endy, dx, dy);

  000bb	8b 45 18	 mov	 eax, DWORD PTR tv1399[ebp]
  000be	8b 7d 10	 mov	 edi, DWORD PTR _dx$[ebp]
  000c1	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  000c4	48		 dec	 eax
  000c5	83 e0 07	 and	 eax, 7
  000c8	8b b4 c1 f4 03
	00 00		 mov	 esi, DWORD PTR [ecx+eax*8+1012]
  000cf	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  000d6	03 75 08	 add	 esi, DWORD PTR _sx$[ebp]
  000d9	03 5d 0c	 add	 ebx, DWORD PTR _sy$[ebp]
  000dc	2b fe		 sub	 edi, esi
  000de	2b d3		 sub	 edx, ebx
  000e0	0f af ff	 imul	 edi, edi
  000e3	0f af d2	 imul	 edx, edx
  000e6	03 d7		 add	 edx, edi
  000e8	89 45 1c	 mov	 DWORD PTR _ldir$[ebp], eax

; 416  : 
; 417  : 				if ( MinDist > dist )

  000eb	39 55 fc	 cmp	 DWORD PTR _MinDist$[ebp], edx
  000ee	7e 57		 jle	 SHORT $LN126@FindNextDi@3

; 418  : 				{
; 419  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  000f0	85 f6		 test	 esi, esi
  000f2	78 53		 js	 SHORT $LN126@FindNextDi@3
  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	3b f0		 cmp	 esi, eax
  000f8	7d 4d		 jge	 SHORT $LN126@FindNextDi@3
  000fa	85 db		 test	 ebx, ebx
  000fc	78 49		 js	 SHORT $LN126@FindNextDi@3
  000fe	3b d8		 cmp	 ebx, eax
  00100	7d 45		 jge	 SHORT $LN126@FindNextDi@3
  00102	8b b9 40 04 00
	00		 mov	 edi, DWORD PTR [ecx+1088]
  00108	0f af c3	 imul	 eax, ebx
  0010b	03 f8		 add	 edi, eax
  0010d	80 3c 37 00	 cmp	 BYTE PTR [edi+esi], 0
  00111	75 34		 jne	 SHORT $LN126@FindNextDi@3
  00113	03 f0		 add	 esi, eax
  00115	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  00118	7d 2d		 jge	 SHORT $LN126@FindNextDi@3
  0011a	8b 81 3c 04 00
	00		 mov	 eax, DWORD PTR [ecx+1084]
  00120	80 3c 06 01	 cmp	 BYTE PTR [esi+eax], 1
  00124	73 0c		 jae	 SHORT $LN123@FindNextDi@3
  00126	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  0012c	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  00130	74 0c		 je	 SHORT $LN144@FindNextDi@3
$LN123@FindNextDi@3:
  00132	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  00138	c6 04 30 01	 mov	 BYTE PTR [eax+esi], 1
  0013c	eb 09		 jmp	 SHORT $LN126@FindNextDi@3
$LN144@FindNextDi@3:

; 420  : 					{
; 421  : 						MinDist = dist;

  0013e	89 55 fc	 mov	 DWORD PTR _MinDist$[ebp], edx

; 422  : 						WhichDir = ldir;

  00141	8b 55 1c	 mov	 edx, DWORD PTR _ldir$[ebp]
  00144	89 55 f8	 mov	 DWORD PTR _WhichDir$[ebp], edx
$LN126@FindNextDi@3:

; 411  : 			{
; 412  : 				ldir = i % 8 ;
; 413  : 				int endx = sx + this->Dir[ldir*2];
; 414  : 				int endy = sy + this->Dir[ldir*2+1];
; 415  : 				int dist = this->GetDist(endx, endy, dx, dy);

  00147	8b 45 18	 mov	 eax, DWORD PTR tv1399[ebp]
  0014a	8b 7d 10	 mov	 edi, DWORD PTR _dx$[ebp]
  0014d	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  00150	83 e0 07	 and	 eax, 7
  00153	8b b4 c1 f4 03
	00 00		 mov	 esi, DWORD PTR [ecx+eax*8+1012]
  0015a	8b 9c c1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+eax*8+1016]
  00161	03 75 08	 add	 esi, DWORD PTR _sx$[ebp]
  00164	03 5d 0c	 add	 ebx, DWORD PTR _sy$[ebp]
  00167	2b fe		 sub	 edi, esi
  00169	2b d3		 sub	 edx, ebx
  0016b	0f af ff	 imul	 edi, edi
  0016e	0f af d2	 imul	 edx, edx
  00171	03 d7		 add	 edx, edi
  00173	89 45 1c	 mov	 DWORD PTR _ldir$[ebp], eax

; 416  : 
; 417  : 				if ( MinDist > dist )

  00176	39 55 fc	 cmp	 DWORD PTR _MinDist$[ebp], edx
  00179	7e 57		 jle	 SHORT $LN133@FindNextDi@3

; 418  : 				{
; 419  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  0017b	85 f6		 test	 esi, esi
  0017d	78 53		 js	 SHORT $LN133@FindNextDi@3
  0017f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00181	3b f0		 cmp	 esi, eax
  00183	7d 4d		 jge	 SHORT $LN133@FindNextDi@3
  00185	85 db		 test	 ebx, ebx
  00187	78 49		 js	 SHORT $LN133@FindNextDi@3
  00189	3b d8		 cmp	 ebx, eax
  0018b	7d 45		 jge	 SHORT $LN133@FindNextDi@3
  0018d	8b b9 40 04 00
	00		 mov	 edi, DWORD PTR [ecx+1088]
  00193	0f af c3	 imul	 eax, ebx
  00196	03 f8		 add	 edi, eax
  00198	80 3c 37 00	 cmp	 BYTE PTR [edi+esi], 0
  0019c	75 34		 jne	 SHORT $LN133@FindNextDi@3
  0019e	03 f0		 add	 esi, eax
  001a0	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  001a3	7d 2d		 jge	 SHORT $LN133@FindNextDi@3
  001a5	8b 81 3c 04 00
	00		 mov	 eax, DWORD PTR [ecx+1084]
  001ab	80 3c 06 01	 cmp	 BYTE PTR [esi+eax], 1
  001af	73 0c		 jae	 SHORT $LN130@FindNextDi@3
  001b1	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  001b7	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  001bb	74 0c		 je	 SHORT $LN146@FindNextDi@3
$LN130@FindNextDi@3:
  001bd	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  001c3	c6 04 30 01	 mov	 BYTE PTR [eax+esi], 1
  001c7	eb 09		 jmp	 SHORT $LN133@FindNextDi@3
$LN146@FindNextDi@3:

; 420  : 					{
; 421  : 						MinDist = dist;

  001c9	89 55 fc	 mov	 DWORD PTR _MinDist$[ebp], edx

; 422  : 						WhichDir = ldir;

  001cc	8b 55 1c	 mov	 edx, DWORD PTR _ldir$[ebp]
  001cf	89 55 f8	 mov	 DWORD PTR _WhichDir$[ebp], edx
$LN133@FindNextDi@3:

; 411  : 			{
; 412  : 				ldir = i % 8 ;
; 413  : 				int endx = sx + this->Dir[ldir*2];
; 414  : 				int endy = sy + this->Dir[ldir*2+1];
; 415  : 				int dist = this->GetDist(endx, endy, dx, dy);

  001d2	8b 55 18	 mov	 edx, DWORD PTR tv1399[ebp]
  001d5	8b 7d 10	 mov	 edi, DWORD PTR _dx$[ebp]
  001d8	42		 inc	 edx
  001d9	83 e2 07	 and	 edx, 7
  001dc	8b b4 d1 f4 03
	00 00		 mov	 esi, DWORD PTR [ecx+edx*8+1012]
  001e3	8b 9c d1 f8 03
	00 00		 mov	 ebx, DWORD PTR [ecx+edx*8+1016]
  001ea	03 75 08	 add	 esi, DWORD PTR _sx$[ebp]
  001ed	03 5d 0c	 add	 ebx, DWORD PTR _sy$[ebp]
  001f0	89 55 1c	 mov	 DWORD PTR _ldir$[ebp], edx
  001f3	8b 55 14	 mov	 edx, DWORD PTR _dy$[ebp]
  001f6	2b d3		 sub	 edx, ebx
  001f8	2b fe		 sub	 edi, esi
  001fa	0f af d2	 imul	 edx, edx
  001fd	0f af ff	 imul	 edi, edi
  00200	03 d7		 add	 edx, edi

; 416  : 
; 417  : 				if ( MinDist > dist )

  00202	39 55 fc	 cmp	 DWORD PTR _MinDist$[ebp], edx
  00205	7e 57		 jle	 SHORT $LN159@FindNextDi@3

; 418  : 				{
; 419  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  00207	85 f6		 test	 esi, esi
  00209	78 53		 js	 SHORT $LN159@FindNextDi@3
  0020b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0020d	3b f0		 cmp	 esi, eax
  0020f	7d 4d		 jge	 SHORT $LN159@FindNextDi@3
  00211	85 db		 test	 ebx, ebx
  00213	78 49		 js	 SHORT $LN159@FindNextDi@3
  00215	3b d8		 cmp	 ebx, eax
  00217	7d 45		 jge	 SHORT $LN159@FindNextDi@3
  00219	8b b9 40 04 00
	00		 mov	 edi, DWORD PTR [ecx+1088]
  0021f	0f af c3	 imul	 eax, ebx
  00222	03 f8		 add	 edi, eax
  00224	80 3c 37 00	 cmp	 BYTE PTR [edi+esi], 0
  00228	75 34		 jne	 SHORT $LN159@FindNextDi@3
  0022a	03 f0		 add	 esi, eax
  0022c	3b 59 04	 cmp	 ebx, DWORD PTR [ecx+4]
  0022f	7d 2d		 jge	 SHORT $LN159@FindNextDi@3
  00231	8b 81 3c 04 00
	00		 mov	 eax, DWORD PTR [ecx+1084]
  00237	80 3c 06 01	 cmp	 BYTE PTR [esi+eax], 1
  0023b	73 0c		 jae	 SHORT $LN137@FindNextDi@3
  0023d	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  00243	80 3c 30 00	 cmp	 BYTE PTR [eax+esi], 0
  00247	74 0c		 je	 SHORT $LN148@FindNextDi@3
$LN137@FindNextDi@3:
  00249	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  0024f	c6 04 30 01	 mov	 BYTE PTR [eax+esi], 1
  00253	eb 09		 jmp	 SHORT $LN159@FindNextDi@3
$LN148@FindNextDi@3:

; 420  : 					{
; 421  : 						MinDist = dist;

  00255	89 55 fc	 mov	 DWORD PTR _MinDist$[ebp], edx

; 422  : 						WhichDir = ldir;

  00258	8b 55 1c	 mov	 edx, DWORD PTR _ldir$[ebp]
  0025b	89 55 f8	 mov	 DWORD PTR _WhichDir$[ebp], edx
$LN159@FindNextDi@3:

; 409  : 		{
; 410  : 			for ( i = 0 ; i<8 ; i++ )

  0025e	8b 45 18	 mov	 eax, DWORD PTR tv1399[ebp]
  00261	83 c0 04	 add	 eax, 4
  00264	8d 50 fe	 lea	 edx, DWORD PTR [eax-2]
  00267	89 45 18	 mov	 DWORD PTR tv1399[ebp], eax
  0026a	83 fa 08	 cmp	 edx, 8
  0026d	0f 8c bd fd ff
	ff		 jl	 $LL158@FindNextDi@3

; 423  : 					}
; 424  : 				}
; 425  : 			}
; 426  : 		}
; 427  : 		else

  00273	e9 80 01 00 00	 jmp	 $LN11@FindNextDi@3
$LN26@FindNextDi@3:

; 428  : 		{
; 429  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  00278	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
  0027b	8d 42 07	 lea	 eax, DWORD PTR [edx+7]
  0027e	8d 72 09	 lea	 esi, DWORD PTR [edx+9]
  00281	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  00284	3b c6		 cmp	 eax, esi
  00286	0f 8f b7 00 00
	00		 jg	 $LN149@FindNextDi@3
  0028c	8d 64 24 00	 npad	 4
$LL168@FindNextDi@3:

; 430  : 			{
; 431  : 				ldir = i % 8;

  00290	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00295	79 05		 jns	 SHORT $LN175@FindNextDi@3
  00297	48		 dec	 eax
  00298	83 c8 f8	 or	 eax, -8			; fffffff8H
  0029b	40		 inc	 eax
$LN175@FindNextDi@3:

; 432  : 				int endx = sx + this->Dir[ldir*2];

  0029c	8b 94 c1 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+1012]

; 433  : 				int endy = sy + this->Dir[ldir*2+1];

  002a3	8b b4 c1 f8 03
	00 00		 mov	 esi, DWORD PTR [ecx+eax*8+1016]
  002aa	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  002ad	03 75 0c	 add	 esi, DWORD PTR _sy$[ebp]

; 434  : 				int dist = this->GetDist(endx, endy, dx, dy);

  002b0	8b 7d 10	 mov	 edi, DWORD PTR _dx$[ebp]
  002b3	89 45 1c	 mov	 DWORD PTR _ldir$[ebp], eax
  002b6	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  002b9	2b c6		 sub	 eax, esi
  002bb	2b fa		 sub	 edi, edx
  002bd	0f af c0	 imul	 eax, eax
  002c0	0f af ff	 imul	 edi, edi
  002c3	03 c7		 add	 eax, edi

; 435  : 
; 436  : 				if ( MinDist > dist )

  002c5	39 45 fc	 cmp	 DWORD PTR _MinDist$[ebp], eax
  002c8	7e 57		 jle	 SHORT $LN18@FindNextDi@3

; 437  : 				{
; 438  : 					if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  002ca	85 d2		 test	 edx, edx
  002cc	78 53		 js	 SHORT $LN18@FindNextDi@3
  002ce	8b 39		 mov	 edi, DWORD PTR [ecx]
  002d0	3b d7		 cmp	 edx, edi
  002d2	7d 4d		 jge	 SHORT $LN18@FindNextDi@3
  002d4	85 f6		 test	 esi, esi
  002d6	78 49		 js	 SHORT $LN18@FindNextDi@3
  002d8	3b f7		 cmp	 esi, edi
  002da	7d 45		 jge	 SHORT $LN18@FindNextDi@3
  002dc	8b 99 40 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1088]
  002e2	0f af fe	 imul	 edi, esi
  002e5	03 df		 add	 ebx, edi
  002e7	80 3c 13 00	 cmp	 BYTE PTR [ebx+edx], 0
  002eb	75 34		 jne	 SHORT $LN18@FindNextDi@3
  002ed	03 d7		 add	 edx, edi
  002ef	3b 71 04	 cmp	 esi, DWORD PTR [ecx+4]
  002f2	7d 2d		 jge	 SHORT $LN18@FindNextDi@3
  002f4	8b b1 3c 04 00
	00		 mov	 esi, DWORD PTR [ecx+1084]
  002fa	80 3c 32 01	 cmp	 BYTE PTR [edx+esi], 1
  002fe	73 0c		 jae	 SHORT $LN49@FindNextDi@3
  00300	8b b1 40 04 00
	00		 mov	 esi, DWORD PTR [ecx+1088]
  00306	80 3c 16 00	 cmp	 BYTE PTR [esi+edx], 0
  0030a	74 0c		 je	 SHORT $LN151@FindNextDi@3
$LN49@FindNextDi@3:
  0030c	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  00312	c6 04 10 01	 mov	 BYTE PTR [eax+edx], 1
  00316	eb 09		 jmp	 SHORT $LN18@FindNextDi@3
$LN151@FindNextDi@3:

; 439  : 					{
; 440  : 						MinDist = dist;

  00318	89 45 fc	 mov	 DWORD PTR _MinDist$[ebp], eax

; 441  : 						WhichDir = ldir;

  0031b	8b 45 1c	 mov	 eax, DWORD PTR _ldir$[ebp]
  0031e	89 45 f8	 mov	 DWORD PTR _WhichDir$[ebp], eax
$LN18@FindNextDi@3:

; 428  : 		{
; 429  : 			for ( i = dirstart+7 ; i <= dirstart+9 ; i++ )

  00321	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00324	8b 55 18	 mov	 edx, DWORD PTR _dirstart$[ebp]
  00327	40		 inc	 eax
  00328	8d 72 09	 lea	 esi, DWORD PTR [edx+9]
  0032b	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  0032e	3b c6		 cmp	 eax, esi
  00330	0f 8e 5a ff ff
	ff		 jle	 $LL168@FindNextDi@3

; 442  : 					}
; 443  : 				}
; 444  : 			}
; 445  : 
; 446  : 			if ( MinDist == 10000000 )

  00336	81 7d fc 80 96
	98 00		 cmp	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H
  0033d	0f 85 c2 00 00
	00		 jne	 $LN174@FindNextDi@3
$LN149@FindNextDi@3:

; 447  : 			{
; 448  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  00343	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00346	83 c2 06	 add	 edx, 6
  00349	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  0034c	89 55 18	 mov	 DWORD PTR $T154869[ebp], edx
  0034f	3b c2		 cmp	 eax, edx
  00351	0f 8f f2 01 00
	00		 jg	 $LN152@FindNextDi@3
$LL163@FindNextDi@3:

; 449  : 				{
; 450  : 					ldir = i % 8;

  00357	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0035c	79 05		 jns	 SHORT $LN176@FindNextDi@3
  0035e	48		 dec	 eax
  0035f	83 c8 f8	 or	 eax, -8			; fffffff8H
  00362	40		 inc	 eax
$LN176@FindNextDi@3:

; 451  : 					int endx = sx + this->Dir[ldir*2];

  00363	8b 94 c1 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+1012]

; 452  : 					int endy = sy + this->Dir[ldir*2+1];

  0036a	8b b4 c1 f8 03
	00 00		 mov	 esi, DWORD PTR [ecx+eax*8+1016]
  00371	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  00374	03 75 0c	 add	 esi, DWORD PTR _sy$[ebp]

; 453  : 					int dist = this->GetDist(endx, endy, dx, dy);

  00377	8b 7d 10	 mov	 edi, DWORD PTR _dx$[ebp]
  0037a	89 45 1c	 mov	 DWORD PTR _ldir$[ebp], eax
  0037d	8b 45 14	 mov	 eax, DWORD PTR _dy$[ebp]
  00380	2b c6		 sub	 eax, esi
  00382	2b fa		 sub	 edi, edx
  00384	0f af c0	 imul	 eax, eax
  00387	0f af ff	 imul	 edi, edi
  0038a	03 c7		 add	 eax, edi

; 454  : 
; 455  : 					if ( MinDist > dist )

  0038c	39 45 fc	 cmp	 DWORD PTR _MinDist$[ebp], eax
  0038f	7e 57		 jle	 SHORT $LN12@FindNextDi@3

; 456  : 					{
; 457  : 						if ( this->IsThisSpotOK(endx, endy) != FALSE && this->CanWeMoveForward3(endx, endy) != FALSE)

  00391	85 d2		 test	 edx, edx
  00393	78 53		 js	 SHORT $LN12@FindNextDi@3
  00395	8b 39		 mov	 edi, DWORD PTR [ecx]
  00397	3b d7		 cmp	 edx, edi
  00399	7d 4d		 jge	 SHORT $LN12@FindNextDi@3
  0039b	85 f6		 test	 esi, esi
  0039d	78 49		 js	 SHORT $LN12@FindNextDi@3
  0039f	3b f7		 cmp	 esi, edi
  003a1	7d 45		 jge	 SHORT $LN12@FindNextDi@3
  003a3	8b 99 40 04 00
	00		 mov	 ebx, DWORD PTR [ecx+1088]
  003a9	0f af fe	 imul	 edi, esi
  003ac	03 df		 add	 ebx, edi
  003ae	80 3c 13 00	 cmp	 BYTE PTR [ebx+edx], 0
  003b2	75 34		 jne	 SHORT $LN12@FindNextDi@3
  003b4	03 d7		 add	 edx, edi
  003b6	3b 71 04	 cmp	 esi, DWORD PTR [ecx+4]
  003b9	7d 2d		 jge	 SHORT $LN12@FindNextDi@3
  003bb	8b b1 3c 04 00
	00		 mov	 esi, DWORD PTR [ecx+1084]
  003c1	80 3c 32 01	 cmp	 BYTE PTR [edx+esi], 1
  003c5	73 0c		 jae	 SHORT $LN62@FindNextDi@3
  003c7	8b b1 40 04 00
	00		 mov	 esi, DWORD PTR [ecx+1088]
  003cd	80 3c 16 00	 cmp	 BYTE PTR [esi+edx], 0
  003d1	74 0c		 je	 SHORT $LN154@FindNextDi@3
$LN62@FindNextDi@3:
  003d3	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  003d9	c6 04 10 01	 mov	 BYTE PTR [eax+edx], 1
  003dd	eb 09		 jmp	 SHORT $LN12@FindNextDi@3
$LN154@FindNextDi@3:

; 458  : 						{
; 459  : 							MinDist = dist;
; 460  : 							WhichDir = ldir;

  003df	8b 55 1c	 mov	 edx, DWORD PTR _ldir$[ebp]
  003e2	89 45 fc	 mov	 DWORD PTR _MinDist$[ebp], eax
  003e5	89 55 f8	 mov	 DWORD PTR _WhichDir$[ebp], edx
$LN12@FindNextDi@3:

; 447  : 			{
; 448  : 				for ( i = dirstart+2 ; i <= dirstart+6 ; i++ )

  003e8	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  003eb	40		 inc	 eax
  003ec	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  003ef	3b 45 18	 cmp	 eax, DWORD PTR $T154869[ebp]
  003f2	0f 8e 5f ff ff
	ff		 jle	 $LL163@FindNextDi@3
$LN11@FindNextDi@3:

; 461  : 						}
; 462  : 					}
; 463  : 				}
; 464  : 			}
; 465  : 		}
; 466  : 		
; 467  : 		if ( MinDist == 10000000 )

  003f8	81 7d fc 80 96
	98 00		 cmp	 DWORD PTR _MinDist$[ebp], 10000000 ; 00989680H

; 468  : 		{
; 469  : 			return -1;

  003ff	0f 84 44 01 00
	00		 je	 $LN152@FindNextDi@3
$LN174@FindNextDi@3:

; 470  : 		}
; 471  : 		
; 472  : 		if ( this->CanWeMoveForward3(sx+this->Dir[WhichDir*2],sy+ this->Dir[WhichDir*2+1]) != FALSE )

  00405	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  00408	8b b4 c1 f8 03
	00 00		 mov	 esi, DWORD PTR [ecx+eax*8+1016]
  0040f	8b 94 c1 f4 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+1012]
  00416	8b 39		 mov	 edi, DWORD PTR [ecx]
  00418	8b 5d 0c	 mov	 ebx, DWORD PTR _sy$[ebp]
  0041b	03 55 08	 add	 edx, DWORD PTR _sx$[ebp]
  0041e	03 f3		 add	 esi, ebx
  00420	8b c7		 mov	 eax, edi
  00422	0f af c6	 imul	 eax, esi
  00425	03 c2		 add	 eax, edx
  00427	3b d7		 cmp	 edx, edi
  00429	7d 33		 jge	 SHORT $LN7@FindNextDi@3
  0042b	85 d2		 test	 edx, edx
  0042d	78 2f		 js	 SHORT $LN7@FindNextDi@3
  0042f	3b 71 04	 cmp	 esi, DWORD PTR [ecx+4]
  00432	7d 2a		 jge	 SHORT $LN7@FindNextDi@3
  00434	85 f6		 test	 esi, esi
  00436	78 26		 js	 SHORT $LN7@FindNextDi@3
  00438	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  0043e	80 3c 10 01	 cmp	 BYTE PTR [eax+edx], 1
  00442	73 10		 jae	 SHORT $LN68@FindNextDi@3
  00444	8b 91 40 04 00
	00		 mov	 edx, DWORD PTR [ecx+1088]
  0044a	80 3c 02 00	 cmp	 BYTE PTR [edx+eax], 0
  0044e	0f 84 01 01 00
	00		 je	 $LN155@FindNextDi@3
$LN68@FindNextDi@3:
  00454	8b 91 40 04 00
	00		 mov	 edx, DWORD PTR [ecx+1088]
  0045a	c6 04 10 01	 mov	 BYTE PTR [eax+edx], 1
$LN7@FindNextDi@3:

; 483  : 		}
; 484  : 
; 485  : 		if ( ErrorCheck != 0 )

  0045e	80 7d 20 00	 cmp	 BYTE PTR _ErrorCheck$[ebp], 0
  00462	0f 84 ce 00 00
	00		 je	 $LN2@FindNextDi@3

; 486  : 		{
; 487  : 			int dir = WhichDir+7;

  00468	8b 5d f8	 mov	 ebx, DWORD PTR _WhichDir$[ebp]
  0046b	83 c3 07	 add	 ebx, 7

; 488  : 
; 489  : 			dir %= 8;

  0046e	81 e3 07 00 00
	80		 and	 ebx, -2147483641	; 80000007H
  00474	79 05		 jns	 SHORT $LN177@FindNextDi@3
  00476	4b		 dec	 ebx
  00477	83 cb f8	 or	 ebx, -8			; fffffff8H
  0047a	43		 inc	 ebx
$LN177@FindNextDi@3:

; 490  : 
; 491  : 			if (this->CanWeMoveForward3(sx + this->Dir[dir*2], sy + this->Dir[dir*2+1]) != FALSE )

  0047b	8b bc d9 f8 03
	00 00		 mov	 edi, DWORD PTR [ecx+ebx*8+1016]
  00482	8b 01		 mov	 eax, DWORD PTR [ecx]
  00484	03 7d 0c	 add	 edi, DWORD PTR _sy$[ebp]
  00487	8b b4 d9 f4 03
	00 00		 mov	 esi, DWORD PTR [ecx+ebx*8+1012]
  0048e	03 75 08	 add	 esi, DWORD PTR _sx$[ebp]
  00491	8b d0		 mov	 edx, eax
  00493	0f af d7	 imul	 edx, edi
  00496	03 d6		 add	 edx, esi
  00498	3b f0		 cmp	 esi, eax
  0049a	7d 33		 jge	 SHORT $LN4@FindNextDi@3
  0049c	85 f6		 test	 esi, esi
  0049e	78 2f		 js	 SHORT $LN4@FindNextDi@3
  004a0	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  004a3	7d 2a		 jge	 SHORT $LN4@FindNextDi@3
  004a5	85 ff		 test	 edi, edi
  004a7	78 26		 js	 SHORT $LN4@FindNextDi@3
  004a9	8b b1 3c 04 00
	00		 mov	 esi, DWORD PTR [ecx+1084]
  004af	80 3c 32 01	 cmp	 BYTE PTR [edx+esi], 1
  004b3	73 10		 jae	 SHORT $LN80@FindNextDi@3
  004b5	8b b1 40 04 00
	00		 mov	 esi, DWORD PTR [ecx+1088]
  004bb	80 3c 16 00	 cmp	 BYTE PTR [esi+edx], 0
  004bf	0f 84 e3 00 00
	00		 je	 $LN156@FindNextDi@3
$LN80@FindNextDi@3:
  004c5	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  004cb	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN4@FindNextDi@3:

; 501  : 			}
; 502  : 
; 503  : 			int dir2 = WhichDir+9;

  004cf	8b 5d f8	 mov	 ebx, DWORD PTR _WhichDir$[ebp]
  004d2	83 c3 09	 add	 ebx, 9

; 504  : 			dir2 %= 8;

  004d5	81 e3 07 00 00
	80		 and	 ebx, -2147483641	; 80000007H
  004db	79 05		 jns	 SHORT $LN178@FindNextDi@3
  004dd	4b		 dec	 ebx
  004de	83 cb f8	 or	 ebx, -8			; fffffff8H
  004e1	43		 inc	 ebx
$LN178@FindNextDi@3:

; 505  : 
; 506  : 			if (CanWeMoveForward3(sx+this->Dir[dir2*2], sy+this->Dir[dir2*2+1]) != FALSE )

  004e2	8b bc d9 f8 03
	00 00		 mov	 edi, DWORD PTR [ecx+ebx*8+1016]
  004e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  004eb	03 7d 0c	 add	 edi, DWORD PTR _sy$[ebp]
  004ee	8b b4 d9 f4 03
	00 00		 mov	 esi, DWORD PTR [ecx+ebx*8+1012]
  004f5	03 75 08	 add	 esi, DWORD PTR _sx$[ebp]
  004f8	8b d0		 mov	 edx, eax
  004fa	0f af d7	 imul	 edx, edi
  004fd	03 d6		 add	 edx, esi
  004ff	3b f0		 cmp	 esi, eax
  00501	7d 33		 jge	 SHORT $LN2@FindNextDi@3
  00503	85 f6		 test	 esi, esi
  00505	78 2f		 js	 SHORT $LN2@FindNextDi@3
  00507	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  0050a	7d 2a		 jge	 SHORT $LN2@FindNextDi@3
  0050c	85 ff		 test	 edi, edi
  0050e	78 26		 js	 SHORT $LN2@FindNextDi@3
  00510	8b b1 3c 04 00
	00		 mov	 esi, DWORD PTR [ecx+1084]
  00516	80 3c 32 01	 cmp	 BYTE PTR [edx+esi], 1
  0051a	73 10		 jae	 SHORT $LN92@FindNextDi@3
  0051c	8b b1 40 04 00
	00		 mov	 esi, DWORD PTR [ecx+1088]
  00522	80 3c 16 00	 cmp	 BYTE PTR [esi+edx], 0
  00526	0f 84 d1 00 00
	00		 je	 $LN157@FindNextDi@3
$LN92@FindNextDi@3:
  0052c	8b 81 40 04 00
	00		 mov	 eax, DWORD PTR [ecx+1088]
  00532	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN2@FindNextDi@3:

; 509  : 
; 510  : 				if ( path != -1 )
; 511  : 				{
; 512  : 					this->HitMap[sx + sy * this->Width] = 1;
; 513  : 					this->NumPath = path;
; 514  : 				}
; 515  : 				return dir2;
; 516  : 			}
; 517  : 		}
; 518  : 		
; 519  : 		this->HitMap[sx + sy*this->Width]=1;

  00536	8b 11		 mov	 edx, DWORD PTR [ecx]
  00538	0f af 55 0c	 imul	 edx, DWORD PTR _sy$[ebp]
  0053c	03 91 40 04 00
	00		 add	 edx, DWORD PTR [ecx+1088]
  00542	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  00545	c6 04 02 01	 mov	 BYTE PTR [edx+eax], 1
$LN152@FindNextDi@3:

; 520  : 		return -1;

  00549	5f		 pop	 edi
  0054a	5e		 pop	 esi
  0054b	83 c8 ff	 or	 eax, -1
  0054e	5b		 pop	 ebx

; 521  : 	};

  0054f	8b e5		 mov	 esp, ebp
  00551	5d		 pop	 ebp
  00552	c2 1c 00	 ret	 28			; 0000001cH
$LN155@FindNextDi@3:

; 473  : 		{
; 474  : 			int path = this->VerifyThatOnPath(sx, sy);

  00555	33 c0		 xor	 eax, eax
  00557	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  0055a	7e 40		 jle	 SHORT $LN6@FindNextDi@3
  0055c	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  0055f	90		 npad	 1
$LL77@FindNextDi@3:
  00560	0f b6 74 08 0c	 movzx	 esi, BYTE PTR [eax+ecx+12]
  00565	3b d6		 cmp	 edx, esi
  00567	75 0c		 jne	 SHORT $LN76@FindNextDi@3
  00569	0f b6 b4 08 00
	02 00 00	 movzx	 esi, BYTE PTR [eax+ecx+512]
  00571	3b de		 cmp	 ebx, esi
  00573	74 12		 je	 SHORT $LN78@FindNextDi@3
$LN76@FindNextDi@3:
  00575	40		 inc	 eax
  00576	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00579	7c e5		 jl	 SHORT $LL77@FindNextDi@3

; 480  : 			}
; 481  : 
; 482  : 			return WhichDir;

  0057b	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  0057e	5f		 pop	 edi
  0057f	5e		 pop	 esi
  00580	5b		 pop	 ebx

; 521  : 	};

  00581	8b e5		 mov	 esp, ebp
  00583	5d		 pop	 ebp
  00584	c2 1c 00	 ret	 28			; 0000001cH

; 473  : 		{
; 474  : 			int path = this->VerifyThatOnPath(sx, sy);

$LN78@FindNextDi@3:

; 475  : 
; 476  : 			if ( path != -1 )

  00587	83 f8 ff	 cmp	 eax, -1
  0058a	74 10		 je	 SHORT $LN6@FindNextDi@3

; 477  : 			{
; 478  : 				this->HitMap[sx+ sy * this->Width ] = 1;

  0058c	0f af fb	 imul	 edi, ebx
  0058f	03 b9 40 04 00
	00		 add	 edi, DWORD PTR [ecx+1088]
  00595	c6 04 17 01	 mov	 BYTE PTR [edi+edx], 1

; 479  : 				this->NumPath = path;

  00599	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN6@FindNextDi@3:

; 480  : 			}
; 481  : 
; 482  : 			return WhichDir;

  0059c	8b 45 f8	 mov	 eax, DWORD PTR _WhichDir$[ebp]
  0059f	5f		 pop	 edi
  005a0	5e		 pop	 esi
  005a1	5b		 pop	 ebx

; 521  : 	};

  005a2	8b e5		 mov	 esp, ebp
  005a4	5d		 pop	 ebp
  005a5	c2 1c 00	 ret	 28			; 0000001cH
$LN156@FindNextDi@3:

; 492  : 			{
; 493  : 				int path = this->VerifyThatOnPath(sx, sy);

  005a8	33 d2		 xor	 edx, edx
  005aa	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  005ad	7e 43		 jle	 SHORT $LN3@FindNextDi@3
  005af	90		 npad	 1
$LL89@FindNextDi@3:
  005b0	0f b6 74 0a 0c	 movzx	 esi, BYTE PTR [edx+ecx+12]
  005b5	39 75 08	 cmp	 DWORD PTR _sx$[ebp], esi
  005b8	75 0f		 jne	 SHORT $LN88@FindNextDi@3
  005ba	0f b6 bc 0a 00
	02 00 00	 movzx	 edi, BYTE PTR [edx+ecx+512]
  005c2	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  005c5	3b f7		 cmp	 esi, edi
  005c7	74 11		 je	 SHORT $LN90@FindNextDi@3
$LN88@FindNextDi@3:
  005c9	42		 inc	 edx
  005ca	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  005cd	7c e1		 jl	 SHORT $LL89@FindNextDi@3

; 499  : 				}
; 500  : 				return dir;

  005cf	5f		 pop	 edi
  005d0	5e		 pop	 esi
  005d1	8b c3		 mov	 eax, ebx
  005d3	5b		 pop	 ebx

; 521  : 	};

  005d4	8b e5		 mov	 esp, ebp
  005d6	5d		 pop	 ebp
  005d7	c2 1c 00	 ret	 28			; 0000001cH

; 492  : 			{
; 493  : 				int path = this->VerifyThatOnPath(sx, sy);

$LN90@FindNextDi@3:

; 494  : 
; 495  : 				if ( path != -1 )

  005da	83 fa ff	 cmp	 edx, -1
  005dd	74 13		 je	 SHORT $LN3@FindNextDi@3

; 496  : 				{
; 497  : 					this->HitMap[sx+ sy * this->Width] = 1;

  005df	0f af c6	 imul	 eax, esi
  005e2	03 81 40 04 00
	00		 add	 eax, DWORD PTR [ecx+1088]
  005e8	8b 75 08	 mov	 esi, DWORD PTR _sx$[ebp]
  005eb	c6 04 30 01	 mov	 BYTE PTR [eax+esi], 1

; 498  : 					this->NumPath = path;

  005ef	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN3@FindNextDi@3:

; 499  : 				}
; 500  : 				return dir;

  005f2	5f		 pop	 edi
  005f3	5e		 pop	 esi
  005f4	8b c3		 mov	 eax, ebx
  005f6	5b		 pop	 ebx

; 521  : 	};

  005f7	8b e5		 mov	 esp, ebp
  005f9	5d		 pop	 ebp
  005fa	c2 1c 00	 ret	 28			; 0000001cH
$LN157@FindNextDi@3:

; 507  : 			{
; 508  : 				int path = this->VerifyThatOnPath(sx, sy);

  005fd	33 d2		 xor	 edx, edx
  005ff	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  00602	7e ee		 jle	 SHORT $LN3@FindNextDi@3
$LL101@FindNextDi@3:
  00604	0f b6 74 0a 0c	 movzx	 esi, BYTE PTR [edx+ecx+12]
  00609	39 75 08	 cmp	 DWORD PTR _sx$[ebp], esi
  0060c	75 0f		 jne	 SHORT $LN100@FindNextDi@3
  0060e	0f b6 bc 0a 00
	02 00 00	 movzx	 edi, BYTE PTR [edx+ecx+512]
  00616	8b 75 0c	 mov	 esi, DWORD PTR _sy$[ebp]
  00619	3b f7		 cmp	 esi, edi
  0061b	74 bd		 je	 SHORT $LN90@FindNextDi@3
$LN100@FindNextDi@3:
  0061d	42		 inc	 edx
  0061e	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00621	7c e1		 jl	 SHORT $LL101@FindNextDi@3

; 499  : 				}
; 500  : 				return dir;

  00623	5f		 pop	 edi
  00624	5e		 pop	 esi
  00625	8b c3		 mov	 eax, ebx
  00627	5b		 pop	 ebx

; 521  : 	};

  00628	8b e5		 mov	 esp, ebp
  0062a	5d		 pop	 ebp
  0062b	c2 1c 00	 ret	 28			; 0000001cH
?FindNextDir3@PATH@@AAEHHHHHH_N0@Z ENDP			; PATH::FindNextDir3
_TEXT	ENDS
PUBLIC	??0PATH@@QAE@XZ					; PATH::PATH
; Function compile flags: /Ogtp
;	COMDAT ??0PATH@@QAE@XZ
_TEXT	SEGMENT
_dir$ = -64						; size = 64
??0PATH@@QAE@XZ PROC					; PATH::PATH, COMDAT
; _this$ = ecx

; 527  : 	PATH() // line : 250

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 528  : 	{
; 529  : 		 int dir[16] = {-1, -1,

  00006	83 ca ff	 or	 edx, -1
  00009	56		 push	 esi

; 530  : 						0, -1,

  0000a	33 f6		 xor	 esi, esi
  0000c	8b c1		 mov	 eax, ecx

; 531  : 						1, -1,

  0000e	b9 01 00 00 00	 mov	 ecx, 1
  00013	57		 push	 edi
  00014	89 75 c8	 mov	 DWORD PTR _dir$[ebp+8], esi

; 532  : 						1, 0,

  00017	89 75 dc	 mov	 DWORD PTR _dir$[ebp+28], esi

; 533  : 						1, 1,
; 534  : 						0, 1,

  0001a	89 75 e8	 mov	 DWORD PTR _dir$[ebp+40], esi

; 535  : 						-1, 1,
; 536  : 						-1, 0} ;

  0001d	89 75 fc	 mov	 DWORD PTR _dir$[ebp+60], esi
  00020	89 4d d0	 mov	 DWORD PTR _dir$[ebp+16], ecx
  00023	89 4d d8	 mov	 DWORD PTR _dir$[ebp+24], ecx
  00026	89 4d e0	 mov	 DWORD PTR _dir$[ebp+32], ecx
  00029	89 4d e4	 mov	 DWORD PTR _dir$[ebp+36], ecx
  0002c	89 4d ec	 mov	 DWORD PTR _dir$[ebp+44], ecx
  0002f	89 4d f4	 mov	 DWORD PTR _dir$[ebp+52], ecx

; 537  : 
; 538  : 		memcpy(this->Dir, dir, sizeof(dir));

  00032	8d b8 f4 03 00
	00		 lea	 edi, DWORD PTR [eax+1012]
  00038	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0003d	8d 75 c0	 lea	 esi, DWORD PTR _dir$[ebp]
  00040	89 55 c0	 mov	 DWORD PTR _dir$[ebp], edx
  00043	89 55 c4	 mov	 DWORD PTR _dir$[ebp+4], edx
  00046	89 55 cc	 mov	 DWORD PTR _dir$[ebp+12], edx
  00049	89 55 d4	 mov	 DWORD PTR _dir$[ebp+20], edx
  0004c	89 55 f0	 mov	 DWORD PTR _dir$[ebp+48], edx
  0004f	89 55 f8	 mov	 DWORD PTR _dir$[ebp+56], edx
  00052	f3 a5		 rep movsd
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 539  : 	};	// line : 252

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??0PATH@@QAE@XZ ENDP					; PATH::PATH
_TEXT	ENDS
PUBLIC	??1PATH@@QAE@XZ					; PATH::~PATH
; Function compile flags: /Ogtp
;	COMDAT ??1PATH@@QAE@XZ
_TEXT	SEGMENT
??1PATH@@QAE@XZ PROC					; PATH::~PATH, COMDAT
; _this$ = ecx

; 543  : 		return;
; 544  : 	};	// line : 255

  00000	c3		 ret	 0
??1PATH@@QAE@XZ ENDP					; PATH::~PATH
_TEXT	ENDS
PUBLIC	?FindPath@PATH@@QAE_NHHHH_N@Z			; PATH::FindPath
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?FindPath@PATH@@QAE_NHHHH_N@Z
_TEXT	SEGMENT
_NumFails$ = -8						; size = 4
_First$ = -4						; size = 1
_startx$ = 8						; size = 4
_starty$ = 12						; size = 4
_endx$ = 16						; size = 4
_endy$ = 20						; size = 4
_ErrorCheck$ = 24					; size = 1
?FindPath@PATH@@QAE_NHHHH_N@Z PROC			; PATH::FindPath, COMDAT
; _this$ = ecx

; 547  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 548  : 		this->NumPath = 0;
; 549  : 
; 550  : 		int WhichDir = 0;
; 551  : 		int NumFails = 0;
; 552  : 		bool First;
; 553  : 
; 554  : 		
; 555  : 		memset(this->HitMap, 0, this->Width * this->Height);

  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	0f af 06	 imul	 eax, DWORD PTR [esi]
  00010	8b 8e 40 04 00
	00		 mov	 ecx, DWORD PTR [esi+1088]
  00016	57		 push	 edi
  00017	33 ff		 xor	 edi, edi
  00019	50		 push	 eax
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0001f	89 7d f8	 mov	 DWORD PTR _NumFails$[ebp], edi
  00022	e8 00 00 00 00	 call	 _memset

; 556  : 		First = true;

  00027	8b 5d 08	 mov	 ebx, DWORD PTR _startx$[ebp]
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	c6 45 fc 01	 mov	 BYTE PTR _First$[ebp], 1
$LL11@FindPath:

; 557  : 
; 558  : 		while ( (startx != endx) || (starty != endy) )

  00031	8b 45 10	 mov	 eax, DWORD PTR _endx$[ebp]
  00034	3b d8		 cmp	 ebx, eax
  00036	75 0c		 jne	 SHORT $LN18@FindPath
  00038	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  0003b	3b 55 14	 cmp	 edx, DWORD PTR _endy$[ebp]
  0003e	0f 84 8b 00 00
	00		 je	 $LN19@FindPath
$LN18@FindPath:

; 559  : 		{
; 560  : 			WhichDir = this->FindNextDir( startx, starty, endx, endy, WhichDir, First, ErrorCheck);

  00044	8b 4d 18	 mov	 ecx, DWORD PTR _ErrorCheck$[ebp]
  00047	8b 55 fc	 mov	 edx, DWORD PTR _First$[ebp]
  0004a	51		 push	 ecx
  0004b	8b 4d 14	 mov	 ecx, DWORD PTR _endy$[ebp]
  0004e	52		 push	 edx
  0004f	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  00052	57		 push	 edi
  00053	51		 push	 ecx
  00054	50		 push	 eax
  00055	52		 push	 edx
  00056	53		 push	 ebx
  00057	8b ce		 mov	 ecx, esi
  00059	e8 00 00 00 00	 call	 ?FindNextDir@PATH@@AAEHHHHHH_N0@Z ; PATH::FindNextDir
  0005e	8b f8		 mov	 edi, eax

; 561  : 			First = 0;

  00060	c6 45 fc 00	 mov	 BYTE PTR _First$[ebp], 0

; 562  : 			
; 563  : 			if ( WhichDir >= 0 )

  00064	85 ff		 test	 edi, edi
  00066	78 2e		 js	 SHORT $LN8@FindPath

; 564  : 			{
; 565  : 				this->PathX[this->NumPath] = startx;

  00068	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006b	88 5c 06 0c	 mov	 BYTE PTR [esi+eax+12], bl

; 566  : 				this->PathY[this->NumPath] = starty;

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _starty$[ebp]
  00072	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00075	88 84 0e 00 02
	00 00		 mov	 BYTE PTR [esi+ecx+512], al

; 567  : 				startx += this->Dir[WhichDir*2];
; 568  : 				starty += this->Dir[WhichDir*2+1];

  0007c	03 84 fe f8 03
	00 00		 add	 eax, DWORD PTR [esi+edi*8+1016]
  00083	03 9c fe f4 03
	00 00		 add	 ebx, DWORD PTR [esi+edi*8+1012]

; 569  : 				this->NumPath++;

  0008a	ff 46 08	 inc	 DWORD PTR [esi+8]

; 570  : 
; 571  : 				if ( this->NumPath >= 15 )

  0008d	83 7e 08 0f	 cmp	 DWORD PTR [esi+8], 15	; 0000000fH
  00091	89 45 0c	 mov	 DWORD PTR _starty$[ebp], eax

; 574  : 				}
; 575  : 			}

  00094	eb 28		 jmp	 SHORT $LN20@FindPath
$LN8@FindPath:

; 576  : 			else if ( ErrorCheck != false )

  00096	80 7d 18 00	 cmp	 BYTE PTR _ErrorCheck$[ebp], 0
  0009a	74 33		 je	 SHORT $LN19@FindPath

; 577  : 			{
; 578  : 				this->NumPath--;

  0009c	ff 4e 08	 dec	 DWORD PTR [esi+8]
  0009f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 579  : 
; 580  : 				if ( this->NumPath < 0 )

  000a2	78 20		 js	 SHORT $LN15@FindPath

; 581  : 				{
; 582  : 					return false;
; 583  : 				}
; 584  : 
; 585  : 				startx = this->PathX[this->NumPath];
; 586  : 				starty = this->PathY[this->NumPath];

  000a4	0f b6 94 30 00
	02 00 00	 movzx	 edx, BYTE PTR [eax+esi+512]
  000ac	0f b6 5c 30 0c	 movzx	 ebx, BYTE PTR [eax+esi+12]

; 587  : 				NumFails++;

  000b1	8b 45 f8	 mov	 eax, DWORD PTR _NumFails$[ebp]
  000b4	40		 inc	 eax
  000b5	89 55 0c	 mov	 DWORD PTR _starty$[ebp], edx
  000b8	89 45 f8	 mov	 DWORD PTR _NumFails$[ebp], eax

; 588  : 
; 589  : 				if ( NumFails >= 10 )

  000bb	83 f8 0a	 cmp	 eax, 10			; 0000000aH
$LN20@FindPath:
  000be	0f 8c 6d ff ff
	ff		 jl	 $LL11@FindPath
$LN15@FindPath:
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi

; 572  : 				{
; 573  : 					return false;

  000c6	32 c0		 xor	 al, al
  000c8	5b		 pop	 ebx

; 606  : 		{
; 607  : 			return false;
; 608  : 		}
; 609  : 
; 610  : 		return true;
; 611  : 	};	// line : 302

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 14 00	 ret	 20			; 00000014H
$LN19@FindPath:

; 590  : 				{
; 591  : 					return false;
; 592  : 				}
; 593  : 			}
; 594  : 			else
; 595  : 			{
; 596  : 				break;
; 597  : 			}
; 598  : 			
; 599  : 		}
; 600  : 
; 601  : 		this->PathX[this->NumPath] = startx;

  000cf	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 602  : 		this->PathY[this->NumPath] = starty;

  000d2	8a 55 0c	 mov	 dl, BYTE PTR _starty$[ebp]
  000d5	88 5c 06 0c	 mov	 BYTE PTR [esi+eax+12], bl
  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	88 94 0e 00 02
	00 00		 mov	 BYTE PTR [esi+ecx+512], dl

; 603  : 		this->NumPath++;

  000e3	ff 46 08	 inc	 DWORD PTR [esi+8]

; 604  : 
; 605  : 		if ( this->NumPath >= 15 )

  000e6	83 7e 08 0f	 cmp	 DWORD PTR [esi+8], 15	; 0000000fH
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	0f 9c c0	 setl	 al
  000ef	5b		 pop	 ebx

; 606  : 		{
; 607  : 			return false;
; 608  : 		}
; 609  : 
; 610  : 		return true;
; 611  : 	};	// line : 302

  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 14 00	 ret	 20			; 00000014H
?FindPath@PATH@@QAE_NHHHH_N@Z ENDP			; PATH::FindPath
_TEXT	ENDS
PUBLIC	?FindPath2@PATH@@QAE_NHHHH_N@Z			; PATH::FindPath2
; Function compile flags: /Ogtp
;	COMDAT ?FindPath2@PATH@@QAE_NHHHH_N@Z
_TEXT	SEGMENT
_NumFails$ = -8						; size = 4
_First$ = -4						; size = 1
_startx$ = 8						; size = 4
_starty$ = 12						; size = 4
_endx$ = 16						; size = 4
_endy$ = 20						; size = 4
_ErrorCheck$ = 24					; size = 1
?FindPath2@PATH@@QAE_NHHHH_N@Z PROC			; PATH::FindPath2, COMDAT
; _this$ = ecx

; 614  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 615  : 		this->NumPath = 0;
; 616  : 
; 617  : 		int WhichDir=0;
; 618  : 		int NumFails=0;
; 619  : 		bool First;
; 620  : 
; 621  : 		
; 622  : 		memset(this->HitMap, 0, this->Width * this->Height);

  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	0f af 06	 imul	 eax, DWORD PTR [esi]
  00010	8b 8e 40 04 00
	00		 mov	 ecx, DWORD PTR [esi+1088]
  00016	57		 push	 edi
  00017	33 ff		 xor	 edi, edi
  00019	50		 push	 eax
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0001f	89 7d f8	 mov	 DWORD PTR _NumFails$[ebp], edi
  00022	e8 00 00 00 00	 call	 _memset

; 623  : 		First = true;

  00027	8b 5d 08	 mov	 ebx, DWORD PTR _startx$[ebp]
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	c6 45 fc 01	 mov	 BYTE PTR _First$[ebp], 1
$LL11@FindPath2:

; 624  : 
; 625  : 		while ( (startx != endx) || (starty != endy) )

  00031	8b 45 10	 mov	 eax, DWORD PTR _endx$[ebp]
  00034	3b d8		 cmp	 ebx, eax
  00036	75 08		 jne	 SHORT $LN18@FindPath2
  00038	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  0003b	3b 55 14	 cmp	 edx, DWORD PTR _endy$[ebp]
  0003e	74 58		 je	 SHORT $LN19@FindPath2
$LN18@FindPath2:

; 626  : 		{
; 627  : 			WhichDir = this->FindNextDir2(startx, starty, endx, endy, WhichDir, First, ErrorCheck);

  00040	8b 4d 18	 mov	 ecx, DWORD PTR _ErrorCheck$[ebp]
  00043	8b 55 fc	 mov	 edx, DWORD PTR _First$[ebp]
  00046	51		 push	 ecx
  00047	8b 4d 14	 mov	 ecx, DWORD PTR _endy$[ebp]
  0004a	52		 push	 edx
  0004b	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  0004e	57		 push	 edi
  0004f	51		 push	 ecx
  00050	50		 push	 eax
  00051	52		 push	 edx
  00052	53		 push	 ebx
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?FindNextDir2@PATH@@AAEHHHHHH_N0@Z ; PATH::FindNextDir2
  0005a	8b f8		 mov	 edi, eax

; 628  : 			First = 0;

  0005c	c6 45 fc 00	 mov	 BYTE PTR _First$[ebp], 0

; 629  : 			
; 630  : 			if ( WhichDir >= 0 )

  00060	85 ff		 test	 edi, edi
  00062	78 5b		 js	 SHORT $LN8@FindPath2

; 631  : 			{
; 632  : 				this->PathX[this->NumPath] = startx;

  00064	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00067	88 5c 06 0c	 mov	 BYTE PTR [esi+eax+12], bl

; 633  : 				this->PathY[this->NumPath] = starty;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _starty$[ebp]
  0006e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00071	88 84 0e 00 02
	00 00		 mov	 BYTE PTR [esi+ecx+512], al

; 634  : 				startx += this->Dir[WhichDir*2];
; 635  : 				starty += this->Dir[WhichDir*2+1];

  00078	03 84 fe f8 03
	00 00		 add	 eax, DWORD PTR [esi+edi*8+1016]
  0007f	03 9c fe f4 03
	00 00		 add	 ebx, DWORD PTR [esi+edi*8+1012]

; 636  : 				this->NumPath++;

  00086	ff 46 08	 inc	 DWORD PTR [esi+8]
  00089	89 45 0c	 mov	 DWORD PTR _starty$[ebp], eax
  0008c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 637  : 
; 638  : 				if ( this->NumPath >= 14 )

  0008f	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00092	7c 9d		 jl	 SHORT $LL11@FindPath2

; 639  : 				{
; 640  : 					this->NumPath--;

  00094	48		 dec	 eax
  00095	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN19@FindPath2:

; 658  : 				{
; 659  : 					return false;
; 660  : 				}
; 661  : 			}
; 662  : 			else
; 663  : 			{
; 664  : 				break;
; 665  : 			}
; 666  : 			
; 667  : 		}
; 668  : 
; 669  : 		this->PathX[this->NumPath] = startx;

  00098	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 670  : 		this->PathY[this->NumPath] = starty;

  0009b	8a 55 0c	 mov	 dl, BYTE PTR _starty$[ebp]
  0009e	88 5c 06 0c	 mov	 BYTE PTR [esi+eax+12], bl
  000a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a5	88 94 0e 00 02
	00 00		 mov	 BYTE PTR [esi+ecx+512], dl

; 671  : 		this->NumPath++;

  000ac	ff 46 08	 inc	 DWORD PTR [esi+8]

; 672  : 
; 673  : 		if ( this->NumPath >= 15 )

  000af	83 7e 08 0f	 cmp	 DWORD PTR [esi+8], 15	; 0000000fH
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	0f 9c c0	 setl	 al
  000b8	5b		 pop	 ebx

; 674  : 		{
; 675  : 			return false;
; 676  : 		}
; 677  : 
; 678  : 		return true;
; 679  : 	};	// line : 351

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 14 00	 ret	 20			; 00000014H
$LN8@FindPath2:

; 641  : 					break;
; 642  : 				}
; 643  : 			}
; 644  : 			else if ( ErrorCheck != FALSE )

  000bf	80 7d 18 00	 cmp	 BYTE PTR _ErrorCheck$[ebp], 0
  000c3	74 d3		 je	 SHORT $LN19@FindPath2

; 645  : 			{
; 646  : 				this->NumPath--;

  000c5	ff 4e 08	 dec	 DWORD PTR [esi+8]
  000c8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 647  : 
; 648  : 				if ( this->NumPath < 0 )

  000cb	78 20		 js	 SHORT $LN16@FindPath2

; 651  : 				}
; 652  : 
; 653  : 				startx = this->PathX[this->NumPath];
; 654  : 				starty = this->PathY[this->NumPath];

  000cd	0f b6 94 30 00
	02 00 00	 movzx	 edx, BYTE PTR [eax+esi+512]
  000d5	0f b6 5c 30 0c	 movzx	 ebx, BYTE PTR [eax+esi+12]

; 655  : 				NumFails++;

  000da	8b 45 f8	 mov	 eax, DWORD PTR _NumFails$[ebp]
  000dd	40		 inc	 eax
  000de	89 55 0c	 mov	 DWORD PTR _starty$[ebp], edx
  000e1	89 45 f8	 mov	 DWORD PTR _NumFails$[ebp], eax

; 656  : 
; 657  : 				if ( NumFails >= 10 )

  000e4	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e7	0f 8c 44 ff ff
	ff		 jl	 $LL11@FindPath2
$LN16@FindPath2:
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi

; 649  : 				{
; 650  : 					return false;

  000ef	32 c0		 xor	 al, al
  000f1	5b		 pop	 ebx

; 674  : 		{
; 675  : 			return false;
; 676  : 		}
; 677  : 
; 678  : 		return true;
; 679  : 	};	// line : 351

  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 14 00	 ret	 20			; 00000014H
?FindPath2@PATH@@QAE_NHHHH_N@Z ENDP			; PATH::FindPath2
_TEXT	ENDS
PUBLIC	?FindPath3@PATH@@QAE_NHHHH_N@Z			; PATH::FindPath3
; Function compile flags: /Ogtp
;	COMDAT ?FindPath3@PATH@@QAE_NHHHH_N@Z
_TEXT	SEGMENT
_NumFails$ = -8						; size = 4
_First$ = -4						; size = 1
_startx$ = 8						; size = 4
_starty$ = 12						; size = 4
_endx$ = 16						; size = 4
_endy$ = 20						; size = 4
_ErrorCheck$ = 24					; size = 1
?FindPath3@PATH@@QAE_NHHHH_N@Z PROC			; PATH::FindPath3, COMDAT
; _this$ = ecx

; 683  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 684  : 		this->NumPath = 0;
; 685  : 
; 686  : 		int WhichDir=0;
; 687  : 		int NumFails=0;
; 688  : 		bool First;
; 689  : 
; 690  : 		
; 691  : 		memset(this->HitMap, 0, this->Width * this->Height);

  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	0f af 06	 imul	 eax, DWORD PTR [esi]
  00010	8b 8e 40 04 00
	00		 mov	 ecx, DWORD PTR [esi+1088]
  00016	57		 push	 edi
  00017	33 ff		 xor	 edi, edi
  00019	50		 push	 eax
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0001f	89 7d f8	 mov	 DWORD PTR _NumFails$[ebp], edi
  00022	e8 00 00 00 00	 call	 _memset

; 692  : 		First = true;

  00027	8b 5d 08	 mov	 ebx, DWORD PTR _startx$[ebp]
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	c6 45 fc 01	 mov	 BYTE PTR _First$[ebp], 1
$LL11@FindPath3:

; 693  : 
; 694  : 		while ( (startx != endx) || (starty != endy) )

  00031	8b 45 10	 mov	 eax, DWORD PTR _endx$[ebp]
  00034	3b d8		 cmp	 ebx, eax
  00036	75 08		 jne	 SHORT $LN18@FindPath3
  00038	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  0003b	3b 55 14	 cmp	 edx, DWORD PTR _endy$[ebp]
  0003e	74 58		 je	 SHORT $LN19@FindPath3
$LN18@FindPath3:

; 695  : 		{
; 696  : 			WhichDir = this->FindNextDir3(startx, starty, endx, endy, WhichDir, First, ErrorCheck);

  00040	8b 4d 18	 mov	 ecx, DWORD PTR _ErrorCheck$[ebp]
  00043	8b 55 fc	 mov	 edx, DWORD PTR _First$[ebp]
  00046	51		 push	 ecx
  00047	8b 4d 14	 mov	 ecx, DWORD PTR _endy$[ebp]
  0004a	52		 push	 edx
  0004b	8b 55 0c	 mov	 edx, DWORD PTR _starty$[ebp]
  0004e	57		 push	 edi
  0004f	51		 push	 ecx
  00050	50		 push	 eax
  00051	52		 push	 edx
  00052	53		 push	 ebx
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?FindNextDir3@PATH@@AAEHHHHHH_N0@Z ; PATH::FindNextDir3
  0005a	8b f8		 mov	 edi, eax

; 697  : 			First = 0;

  0005c	c6 45 fc 00	 mov	 BYTE PTR _First$[ebp], 0

; 698  : 			
; 699  : 			if ( WhichDir >= 0 )

  00060	85 ff		 test	 edi, edi
  00062	78 5b		 js	 SHORT $LN8@FindPath3

; 700  : 			{
; 701  : 				this->PathX[this->NumPath] = startx;

  00064	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00067	88 5c 06 0c	 mov	 BYTE PTR [esi+eax+12], bl

; 702  : 				this->PathY[this->NumPath] = starty;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _starty$[ebp]
  0006e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00071	88 84 0e 00 02
	00 00		 mov	 BYTE PTR [esi+ecx+512], al

; 703  : 				startx += this->Dir[WhichDir*2];
; 704  : 				starty += this->Dir[WhichDir*2+1];

  00078	03 84 fe f8 03
	00 00		 add	 eax, DWORD PTR [esi+edi*8+1016]
  0007f	03 9c fe f4 03
	00 00		 add	 ebx, DWORD PTR [esi+edi*8+1012]

; 705  : 				this->NumPath++;

  00086	ff 46 08	 inc	 DWORD PTR [esi+8]
  00089	89 45 0c	 mov	 DWORD PTR _starty$[ebp], eax
  0008c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 706  : 
; 707  : 				if ( this->NumPath >= 14 )

  0008f	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00092	7c 9d		 jl	 SHORT $LL11@FindPath3

; 708  : 				{
; 709  : 					this->NumPath--;

  00094	48		 dec	 eax
  00095	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN19@FindPath3:

; 727  : 				{
; 728  : 					return false;
; 729  : 				}
; 730  : 			}
; 731  : 			else
; 732  : 			{
; 733  : 				break;
; 734  : 			}
; 735  : 			
; 736  : 		}
; 737  : 
; 738  : 		this->PathX[this->NumPath] = startx;

  00098	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 739  : 		this->PathY[this->NumPath] = starty;

  0009b	8a 55 0c	 mov	 dl, BYTE PTR _starty$[ebp]
  0009e	88 5c 06 0c	 mov	 BYTE PTR [esi+eax+12], bl
  000a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a5	88 94 0e 00 02
	00 00		 mov	 BYTE PTR [esi+ecx+512], dl

; 740  : 		this->NumPath++;

  000ac	ff 46 08	 inc	 DWORD PTR [esi+8]

; 741  : 
; 742  : 		if ( this->NumPath >= 15 )

  000af	83 7e 08 0f	 cmp	 DWORD PTR [esi+8], 15	; 0000000fH
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	0f 9c c0	 setl	 al
  000b8	5b		 pop	 ebx

; 743  : 		{
; 744  : 			return false;
; 745  : 		}
; 746  : 
; 747  : 		return true;
; 748  : 	};

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 14 00	 ret	 20			; 00000014H
$LN8@FindPath3:

; 710  : 					break;
; 711  : 				}
; 712  : 			}
; 713  : 			else if ( ErrorCheck != FALSE )

  000bf	80 7d 18 00	 cmp	 BYTE PTR _ErrorCheck$[ebp], 0
  000c3	74 d3		 je	 SHORT $LN19@FindPath3

; 714  : 			{
; 715  : 				this->NumPath--;

  000c5	ff 4e 08	 dec	 DWORD PTR [esi+8]
  000c8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 716  : 
; 717  : 				if ( this->NumPath < 0 )

  000cb	78 20		 js	 SHORT $LN16@FindPath3

; 720  : 				}
; 721  : 
; 722  : 				startx = this->PathX[this->NumPath];
; 723  : 				starty = this->PathY[this->NumPath];

  000cd	0f b6 94 30 00
	02 00 00	 movzx	 edx, BYTE PTR [eax+esi+512]
  000d5	0f b6 5c 30 0c	 movzx	 ebx, BYTE PTR [eax+esi+12]

; 724  : 				NumFails++;

  000da	8b 45 f8	 mov	 eax, DWORD PTR _NumFails$[ebp]
  000dd	40		 inc	 eax
  000de	89 55 0c	 mov	 DWORD PTR _starty$[ebp], edx
  000e1	89 45 f8	 mov	 DWORD PTR _NumFails$[ebp], eax

; 725  : 
; 726  : 				if ( NumFails >= 10 )

  000e4	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e7	0f 8c 44 ff ff
	ff		 jl	 $LL11@FindPath3
$LN16@FindPath3:
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi

; 718  : 				{
; 719  : 					return false;

  000ef	32 c0		 xor	 al, al
  000f1	5b		 pop	 ebx

; 743  : 		{
; 744  : 			return false;
; 745  : 		}
; 746  : 
; 747  : 		return true;
; 748  : 	};

  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 14 00	 ret	 20			; 00000014H
?FindPath3@PATH@@QAE_NHHHH_N@Z ENDP			; PATH::FindPath3
_TEXT	ENDS
PUBLIC	?SetMapDimensions@PATH@@QAEXHHPAE@Z		; PATH::SetMapDimensions
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogtp
;	COMDAT ?SetMapDimensions@PATH@@QAEXHHPAE@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
_h$ = 12						; size = 4
_map$ = 16						; size = 4
?SetMapDimensions@PATH@@QAEXHHPAE@Z PROC		; PATH::SetMapDimensions, COMDAT
; _this$ = ecx

; 752  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 753  : 		this->Width = w;

  00003	8b 45 08	 mov	 eax, DWORD PTR _w$[ebp]

; 754  : 		this->Height = h;
; 755  : 		this->Map = (unsigned char*)map;

  00006	8b 55 10	 mov	 edx, DWORD PTR _map$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _h$[ebp]
  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 756  : 		this->HitMap = new unsigned char [this->Width * this->Height];

  00011	0f af c1	 imul	 eax, ecx
  00014	50		 push	 eax
  00015	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00018	89 96 3c 04 00
	00		 mov	 DWORD PTR [esi+1084], edx
  0001e	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00023	83 c4 04	 add	 esp, 4
  00026	89 86 40 04 00
	00		 mov	 DWORD PTR [esi+1088], eax
  0002c	5e		 pop	 esi

; 757  : 	};

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
?SetMapDimensions@PATH@@QAEXHHPAE@Z ENDP		; PATH::SetMapDimensions
_TEXT	ENDS
PUBLIC	?GetPath@PATH@@QAEHXZ				; PATH::GetPath
; Function compile flags: /Ogtp
;	COMDAT ?GetPath@PATH@@QAEHXZ
_TEXT	SEGMENT
?GetPath@PATH@@QAEHXZ PROC				; PATH::GetPath, COMDAT
; _this$ = ecx

; 761  : 		return this->NumPath;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 762  : 	};

  00003	c3		 ret	 0
?GetPath@PATH@@QAEHXZ ENDP				; PATH::GetPath
_TEXT	ENDS
PUBLIC	?GetPathX@PATH@@QAEPAEXZ			; PATH::GetPathX
; Function compile flags: /Ogtp
;	COMDAT ?GetPathX@PATH@@QAEPAEXZ
_TEXT	SEGMENT
?GetPathX@PATH@@QAEPAEXZ PROC				; PATH::GetPathX, COMDAT
; _this$ = ecx

; 766  : 		return this->PathX;

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]

; 767  : 	};

  00003	c3		 ret	 0
?GetPathX@PATH@@QAEPAEXZ ENDP				; PATH::GetPathX
_TEXT	ENDS
PUBLIC	?GetPathY@PATH@@QAEPAEXZ			; PATH::GetPathY
; Function compile flags: /Ogtp
;	COMDAT ?GetPathY@PATH@@QAEPAEXZ
_TEXT	SEGMENT
?GetPathY@PATH@@QAEPAEXZ PROC				; PATH::GetPathY, COMDAT
; _this$ = ecx

; 771  : 		return this->PathY;

  00000	8d 81 00 02 00
	00		 lea	 eax, DWORD PTR [ecx+512]

; 772  : 	};

  00006	c3		 ret	 0
?GetPathY@PATH@@QAEPAEXZ ENDP				; PATH::GetPathY
_TEXT	ENDS
PUBLIC	?init@MapClass@@QAEXXZ				; MapClass::init
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\mapclass.h
;	COMDAT ?init@MapClass@@QAEXXZ
_TEXT	SEGMENT
_dir$154986 = -68					; size = 64
_this$ = -4						; size = 4
?init@MapClass@@QAEXXZ PROC				; MapClass::init, COMDAT
; _this$ = ecx

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 57   : 		this->m_attrbuf = 0;

  0000a	33 db		 xor	 ebx, ebx

; 58   : 		this->path = new PATH;

  0000c	68 54 04 00 00	 push	 1108			; 00000454H
  00011	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00014	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b c3		 cmp	 eax, ebx
  00021	74 5c		 je	 SHORT $LN3@init
  00023	b9 01 00 00 00	 mov	 ecx, 1
  00028	83 ca ff	 or	 edx, -1
  0002b	57		 push	 edi
  0002c	89 4d cc	 mov	 DWORD PTR _dir$154986[ebp+16], ecx
  0002f	89 4d d4	 mov	 DWORD PTR _dir$154986[ebp+24], ecx
  00032	89 4d dc	 mov	 DWORD PTR _dir$154986[ebp+32], ecx
  00035	89 4d e0	 mov	 DWORD PTR _dir$154986[ebp+36], ecx
  00038	89 4d e8	 mov	 DWORD PTR _dir$154986[ebp+44], ecx
  0003b	89 4d f0	 mov	 DWORD PTR _dir$154986[ebp+52], ecx
  0003e	89 5d c4	 mov	 DWORD PTR _dir$154986[ebp+8], ebx
  00041	89 5d d8	 mov	 DWORD PTR _dir$154986[ebp+28], ebx
  00044	89 5d e4	 mov	 DWORD PTR _dir$154986[ebp+40], ebx
  00047	89 5d f8	 mov	 DWORD PTR _dir$154986[ebp+60], ebx
  0004a	8d b8 f4 03 00
	00		 lea	 edi, DWORD PTR [eax+1012]
  00050	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00055	8d 75 bc	 lea	 esi, DWORD PTR _dir$154986[ebp]
  00058	89 55 bc	 mov	 DWORD PTR _dir$154986[ebp], edx
  0005b	89 55 c0	 mov	 DWORD PTR _dir$154986[ebp+4], edx
  0005e	89 55 c8	 mov	 DWORD PTR _dir$154986[ebp+12], edx
  00061	89 55 d0	 mov	 DWORD PTR _dir$154986[ebp+20], edx
  00064	89 55 ec	 mov	 DWORD PTR _dir$154986[ebp+48], edx
  00067	89 55 f4	 mov	 DWORD PTR _dir$154986[ebp+56], edx
  0006a	f3 a5		 rep movsd
  0006c	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0006f	5f		 pop	 edi

; 59   : 		this->m_width = 0;

  00070	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 60   : 		this->m_height = 0;

  00073	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00076	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx

; 61   : 	}	// line : 134

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
$LN3@init:

; 58   : 		this->path = new PATH;

  0007f	33 c0		 xor	 eax, eax

; 59   : 		this->m_width = 0;

  00081	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 60   : 		this->m_height = 0;

  00084	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00087	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 61   : 	}	// line : 134

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?init@MapClass@@QAEXXZ ENDP				; MapClass::init
_TEXT	ENDS
PUBLIC	??_GPATH@@QAEPAXI@Z				; PATH::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GPATH@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPATH@@QAEPAXI@Z PROC				; PATH::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 09		 je	 SHORT $LN6@scalar
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??_GPATH@@QAEPAXI@Z ENDP				; PATH::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7MapClass@@6B@				; MapClass::`vftable'
PUBLIC	??0MapClass@@QAE@XZ				; MapClass::MapClass
PUBLIC	??_R4MapClass@@6B@				; MapClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMapClass@@@8				; MapClass `RTTI Type Descriptor'
PUBLIC	??_R3MapClass@@8				; MapClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MapClass@@8				; MapClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MapClass@@8			; MapClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__imp__SetRect@20:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0CMapItem@@QAE@XZ:PROC			; CMapItem::CMapItem
EXTRN	??1CMapItem@@UAE@XZ:PROC			; CMapItem::~CMapItem
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EMapClass@@UAEPAXI@Z:PROC			; MapClass::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MapClass@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\mapclass.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@MapClass@@8 DD FLAT:??_R0?AVMapClass@@@8	; MapClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MapClass@@8
rdata$r	ENDS
;	COMDAT ??_R2MapClass@@8
rdata$r	SEGMENT
??_R2MapClass@@8 DD FLAT:??_R1A@?0A@EA@MapClass@@8	; MapClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MapClass@@8
rdata$r	SEGMENT
??_R3MapClass@@8 DD 00H					; MapClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MapClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMapClass@@@8
_DATA	SEGMENT
??_R0?AVMapClass@@@8 DD FLAT:??_7type_info@@6B@		; MapClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMapClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MapClass@@6B@
rdata$r	SEGMENT
??_R4MapClass@@6B@ DD 00H				; MapClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMapClass@@@8
	DD	FLAT:??_R3MapClass@@8
rdata$r	ENDS
;	COMDAT ??_7MapClass@@6B@
CONST	SEGMENT
??_7MapClass@@6B@ DD FLAT:??_R4MapClass@@6B@		; MapClass::`vftable'
	DD	FLAT:??_EMapClass@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0MapClass@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MapClass@@QAE@XZ$0
__ehfuncinfo$??0MapClass@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MapClass@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0MapClass@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0MapClass@@QAE@XZ PROC				; MapClass::MapClass, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0MapClass@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	68 00 00 00 00	 push	 OFFSET ??1CMapItem@@UAE@XZ ; CMapItem::~CMapItem
  0002f	68 00 00 00 00	 push	 OFFSET ??0CMapItem@@QAE@XZ ; CMapItem::CMapItem
  00034	68 2c 01 00 00	 push	 300			; 0000012cH
  00039	68 48 04 00 00	 push	 1096			; 00000448H
  0003e	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00041	50		 push	 eax
  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7MapClass@@6B@
  00048	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 18   : 	this->m_Weather =0;

  00054	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0

; 19   : 	this->m_WeatherTimer=GetTickCount();

  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0005e	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 20   : 	this->m_NextWeatherTimer=(rand()%10000)+10000;

  00061	e8 00 00 00 00	 call	 _rand
  00066	99		 cdq
  00067	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0006c	f7 f9		 idiv	 ecx
  0006e	03 d1		 add	 edx, ecx

; 21   : 	this->init();

  00070	8b ce		 mov	 ecx, esi
  00072	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00075	e8 00 00 00 00	 call	 ?init@MapClass@@QAEXXZ	; MapClass::init

; 22   : 	
; 23   : 	SetRect(&this->gRegenRect[0], 130, 116, 151, 137);

  0007a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SetRect@20
  00080	68 89 00 00 00	 push	 137			; 00000089H
  00085	68 97 00 00 00	 push	 151			; 00000097H
  0008a	6a 74		 push	 116			; 00000074H
  0008c	68 82 00 00 00	 push	 130			; 00000082H
  00091	8d 96 84 04 05
	00		 lea	 edx, DWORD PTR [esi+328836]
  00097	52		 push	 edx
  00098	ff d7		 call	 edi

; 24   : 	SetRect(&this->gRegenRect[1], 106, 236, 112, 243);

  0009a	68 f3 00 00 00	 push	 243			; 000000f3H
  0009f	6a 70		 push	 112			; 00000070H
  000a1	68 ec 00 00 00	 push	 236			; 000000ecH
  000a6	6a 6a		 push	 106			; 0000006aH
  000a8	8d 86 94 04 05
	00		 lea	 eax, DWORD PTR [esi+328852]
  000ae	50		 push	 eax
  000af	ff d7		 call	 edi

; 25   : 	SetRect(&this->gRegenRect[2], 197, 35, 218, 50);

  000b1	6a 32		 push	 50			; 00000032H
  000b3	68 da 00 00 00	 push	 218			; 000000daH
  000b8	6a 23		 push	 35			; 00000023H
  000ba	68 c5 00 00 00	 push	 197			; 000000c5H
  000bf	8d 8e a4 04 05
	00		 lea	 ecx, DWORD PTR [esi+328868]
  000c5	51		 push	 ecx
  000c6	ff d7		 call	 edi

; 26   : 	SetRect(&this->gRegenRect[3], 174, 101, 187, 125);

  000c8	6a 7d		 push	 125			; 0000007dH
  000ca	68 bb 00 00 00	 push	 187			; 000000bbH
  000cf	6a 65		 push	 101			; 00000065H
  000d1	68 ae 00 00 00	 push	 174			; 000000aeH
  000d6	8d 96 b4 04 05
	00		 lea	 edx, DWORD PTR [esi+328884]
  000dc	52		 push	 edx
  000dd	ff d7		 call	 edi

; 27   : 	SetRect(&this->gRegenRect[4], 201, 70, 213, 81);

  000df	6a 51		 push	 81			; 00000051H
  000e1	68 d5 00 00 00	 push	 213			; 000000d5H
  000e6	6a 46		 push	 70			; 00000046H
  000e8	68 c9 00 00 00	 push	 201			; 000000c9H
  000ed	8d 86 c4 04 05
	00		 lea	 eax, DWORD PTR [esi+328900]
  000f3	50		 push	 eax
  000f4	ff d7		 call	 edi

; 28   : 	SetRect(&this->gRegenRect[5], 89, 135, 90, 136);

  000f6	68 88 00 00 00	 push	 136			; 00000088H
  000fb	6a 5a		 push	 90			; 0000005aH
  000fd	68 87 00 00 00	 push	 135			; 00000087H
  00102	6a 59		 push	 89			; 00000059H
  00104	8d 8e d4 04 05
	00		 lea	 ecx, DWORD PTR [esi+328916]
  0010a	51		 push	 ecx
  0010b	ff d7		 call	 edi

; 29   : 	SetRect(&this->gRegenRect[6], 89, 135, 90, 136);

  0010d	68 88 00 00 00	 push	 136			; 00000088H
  00112	6a 5a		 push	 90			; 0000005aH
  00114	68 87 00 00 00	 push	 135			; 00000087H
  00119	6a 59		 push	 89			; 00000059H
  0011b	8d 96 e4 04 05
	00		 lea	 edx, DWORD PTR [esi+328932]
  00121	52		 push	 edx
  00122	ff d7		 call	 edi

; 30   : 	SetRect(&this->gRegenRect[7], 14, 11, 27, 23);

  00124	6a 17		 push	 23			; 00000017H
  00126	6a 1b		 push	 27			; 0000001bH
  00128	6a 0b		 push	 11			; 0000000bH
  0012a	6a 0e		 push	 14			; 0000000eH
  0012c	8d 86 f4 04 05
	00		 lea	 eax, DWORD PTR [esi+328948]
  00132	50		 push	 eax
  00133	ff d7		 call	 edi

; 31   : 	SetRect(&this->gRegenRect[8], 187, 54, 203, 69);

  00135	6a 45		 push	 69			; 00000045H
  00137	68 cb 00 00 00	 push	 203			; 000000cbH
  0013c	6a 36		 push	 54			; 00000036H
  0013e	68 bb 00 00 00	 push	 187			; 000000bbH
  00143	8d 8e 04 05 05
	00		 lea	 ecx, DWORD PTR [esi+328964]
  00149	51		 push	 ecx
  0014a	ff d7		 call	 edi

; 32   : 	SetRect(&this->gRegenRect[33], 82, 8, 87, 14);

  0014c	6a 0e		 push	 14			; 0000000eH
  0014e	6a 57		 push	 87			; 00000057H
  00150	6a 08		 push	 8
  00152	6a 52		 push	 82			; 00000052H
  00154	8d 96 94 06 05
	00		 lea	 edx, DWORD PTR [esi+329364]
  0015a	52		 push	 edx
  0015b	ff d7		 call	 edi

; 33   : 	SetRect(&this->gRegenRect[34], 133, 41, 140, 44);

  0015d	6a 2c		 push	 44			; 0000002cH
  0015f	68 8c 00 00 00	 push	 140			; 0000008cH
  00164	6a 29		 push	 41			; 00000029H
  00166	68 85 00 00 00	 push	 133			; 00000085H
  0016b	8d 86 a4 06 05
	00		 lea	 eax, DWORD PTR [esi+329380]
  00171	50		 push	 eax
  00172	ff d7		 call	 edi

; 34   : 	this->m_ItemCount=0;

  00174	c7 86 80 04 05
	00 00 00 00 00	 mov	 DWORD PTR [esi+328832], 0

; 35   : }

  0017e	8b c6		 mov	 eax, esi
  00180	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00183	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018a	59		 pop	 ecx
  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MapClass@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CMapItem@@UAE@XZ ; CMapItem::~CMapItem
  00005	68 2c 01 00 00	 push	 300			; 0000012cH
  0000a	68 48 04 00 00	 push	 1096			; 00000448H
  0000f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 20	 add	 eax, 32			; 00000020H
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001b	c3		 ret	 0
__ehhandler$??0MapClass@@QAE@XZ:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0MapClass@@QAE@XZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0MapClass@@QAE@XZ ENDP				; MapClass::MapClass
PUBLIC	?GetLevelPos@MapClass@@QAEXFAAF0@Z		; MapClass::GetLevelPos
EXTRN	__except_handler4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetLevelPos@MapClass@@QAEXFAAF0@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffbcH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN8@GetLevelPo
	DD	FLAT:$LN9@GetLevelPo
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetLevelPos@MapClass@@QAEXFAAF0@Z
_TEXT	SEGMENT
_y$ = -52						; size = 4
_levelpos$ = -48					; size = 4
_this$ = -44						; size = 4
_loopcount$ = -40					; size = 4
_x$ = -36						; size = 4
_h$ = -32						; size = 4
_w$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_level$ = 8						; size = 2
_ox$ = 12						; size = 4
_oy$ = 16						; size = 4
?GetLevelPos@MapClass@@QAEXFAAF0@Z PROC			; MapClass::GetLevelPos, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetLevelPos@MapClass@@QAEXFAAF0@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 24	 sub	 esp, 36			; 00000024H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00033	8b f9		 mov	 edi, ecx
  00035	89 7d d4	 mov	 DWORD PTR _this$[ebp], edi

; 55   : 
; 56   : 	int x;
; 57   : 	int y;
; 58   : 	int levelpos = 0;

  00038	33 db		 xor	 ebx, ebx
  0003a	89 5d d0	 mov	 DWORD PTR _levelpos$[ebp], ebx

; 59   : 	int loopcount = 50;

  0003d	8d 43 32	 lea	 eax, DWORD PTR [ebx+50]
  00040	eb 03		 jmp	 SHORT $LN4@GetLevelPo
$LL13@GetLevelPo:
  00042	8b 45 d8	 mov	 eax, DWORD PTR _loopcount$[ebp]
$LN4@GetLevelPo:

; 60   : 	BYTE attr;
; 61   : 	int w;
; 62   : 	int h;
; 63   : 
; 64   : 	while ( loopcount-- != 0 )

  00045	8b c8		 mov	 ecx, eax
  00047	48		 dec	 eax
  00048	89 45 d8	 mov	 DWORD PTR _loopcount$[ebp], eax
  0004b	85 c9		 test	 ecx, ecx
  0004d	0f 84 c1 00 00
	00		 je	 $LN3@GetLevelPo

; 65   : 	{
; 66   : 		w = this->gRegenRect[levelpos].right - this->gRegenRect[levelpos].left;

  00053	8b f3		 mov	 esi, ebx
  00055	c1 e6 04	 shl	 esi, 4
  00058	03 f7		 add	 esi, edi
  0005a	8b 86 8c 04 05
	00		 mov	 eax, DWORD PTR [esi+328844]
  00060	2b 86 84 04 05
	00		 sub	 eax, DWORD PTR [esi+328836]
  00066	89 45 e4	 mov	 DWORD PTR _w$[ebp], eax

; 67   : 		h = this->gRegenRect[levelpos].bottom - this->gRegenRect[levelpos].top;

  00069	8d 8b 49 50 00
	00		 lea	 ecx, DWORD PTR [ebx+20553]
  0006f	03 c9		 add	 ecx, ecx
  00071	8b 14 cf	 mov	 edx, DWORD PTR [edi+ecx*8]
  00074	2b 96 88 04 05
	00		 sub	 edx, DWORD PTR [esi+328840]
  0007a	89 55 e0	 mov	 DWORD PTR _h$[ebp], edx

; 68   : 
; 69   : 		__try

  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 70   : 		{
; 71   : 			x = (short)(this->gRegenRect[levelpos].left + (rand()%w));

  00084	e8 00 00 00 00	 call	 _rand
  00089	8b 4d e4	 mov	 ecx, DWORD PTR _w$[ebp]
  0008c	99		 cdq
  0008d	f7 f9		 idiv	 ecx
  0008f	66 03 96 84 04
	05 00		 add	 dx, WORD PTR [esi+328836]
  00096	0f bf d2	 movsx	 edx, dx
  00099	89 55 dc	 mov	 DWORD PTR _x$[ebp], edx

; 72   : 			y = (short)(this->gRegenRect[levelpos].top  + (rand()%h));

  0009c	e8 00 00 00 00	 call	 _rand
  000a1	8b 4d e0	 mov	 ecx, DWORD PTR _h$[ebp]
  000a4	99		 cdq
  000a5	f7 f9		 idiv	 ecx
  000a7	66 03 96 88 04
	05 00		 add	 dx, WORD PTR [esi+328840]
  000ae	0f bf f2	 movsx	 esi, dx
  000b1	89 75 cc	 mov	 DWORD PTR _y$[ebp], esi

; 73   : 		}

  000b4	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000bb	eb 1f		 jmp	 SHORT $LN11@GetLevelPo
$LN8@GetLevelPo:
$LN15@GetLevelPo:

; 74   : 		__except(w=1, h=1,1)

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	89 45 e4	 mov	 DWORD PTR _w$[ebp], eax
  000c5	89 45 e0	 mov	 DWORD PTR _h$[ebp], eax
$LN14@GetLevelPo:
$LN10@GetLevelPo:
  000c8	c3		 ret	 0
$LN9@GetLevelPo:
  000c9	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 75   : 		{
; 76   : 		}

  000cc	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000d3	8b 7d d4	 mov	 edi, DWORD PTR _this$[ebp]
  000d6	8b 5d d0	 mov	 ebx, DWORD PTR _levelpos$[ebp]
  000d9	8b 75 cc	 mov	 esi, DWORD PTR _y$[ebp]
$LN11@GetLevelPo:

; 77   : 
; 78   : 		attr = this->GetAttr(x, y);

  000dc	56		 push	 esi
  000dd	8b 55 dc	 mov	 edx, DWORD PTR _x$[ebp]
  000e0	52		 push	 edx
  000e1	8b cf		 mov	 ecx, edi
  000e3	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 79   : 
; 80   : 		if ( (attr & 4) != 4  && (attr & 8) != 8 ) 

  000e8	a8 0c		 test	 al, 12			; 0000000cH
  000ea	0f 85 52 ff ff
	ff		 jne	 $LL13@GetLevelPo

; 81   : 		{
; 82   : 			ox = x;

  000f0	8b 45 0c	 mov	 eax, DWORD PTR _ox$[ebp]
  000f3	66 8b 4d dc	 mov	 cx, WORD PTR _x$[ebp]
  000f7	66 89 08	 mov	 WORD PTR [eax], cx

; 83   : 			oy = y;

  000fa	8b 55 10	 mov	 edx, DWORD PTR _oy$[ebp]
  000fd	66 89 32	 mov	 WORD PTR [edx], si

; 89   : 	x = this->gRegenRect[levelpos].left;
; 90   : 	y = this->gRegenRect[levelpos].top;
; 91   : }

  00100	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00103	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010a	59		 pop	 ecx
  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 0c 00	 ret	 12			; 0000000cH
$LN3@GetLevelPo:

; 84   : 			return;
; 85   : 		}
; 86   : 	}
; 87   : 	
; 88   : 	LogAdd(LOG_BLACK, lMsg.Get( MSGGET(1, 204 )) , __FILE__, __LINE__);

  00114	6a 58		 push	 88			; 00000058H
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@
  0011b	68 cc 01 00 00	 push	 460			; 000001ccH
  00120	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00125	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0012a	50		 push	 eax
  0012b	6a 00		 push	 0
  0012d	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00132	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	x = this->gRegenRect[levelpos].left;
; 90   : 	y = this->gRegenRect[levelpos].top;
; 91   : }

  00135	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
?GetLevelPos@MapClass@@QAEXFAAF0@Z ENDP			; MapClass::GetLevelPos
_TEXT	ENDS
PUBLIC	?GetRandomLengthPos@MapClass@@QAEXAAF0H@Z	; MapClass::GetRandomLengthPos
; Function compile flags: /Ogtp
;	COMDAT ?GetRandomLengthPos@MapClass@@QAEXAAF0H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_lc$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_length$ = 16						; size = 4
?GetRandomLengthPos@MapClass@@QAEXAAF0H@Z PROC		; MapClass::GetRandomLengthPos, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 95   : 	int lc = 10;	// loopcount
; 96   : 	int px;
; 97   : 	int py;
; 98   : 	BYTE attr;
; 99   : 	int maxlen;
; 100  : 
; 101  : 	if ( length < 1 )

  00007	8b 5d 10	 mov	 ebx, DWORD PTR _length$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _lc$[ebp], 10	; 0000000aH
  00016	83 fb 01	 cmp	 ebx, 1
  00019	7d 05		 jge	 SHORT $LL3@GetRandomL

; 102  : 	{
; 103  : 		length = 1;

  0001b	bb 01 00 00 00	 mov	 ebx, 1
$LL3@GetRandomL:

; 104  : 	}
; 105  : 
; 106  : 	maxlen = length*2;
; 107  : 
; 108  : 	while ( lc-- != 0 )

  00020	ff 4d fc	 dec	 DWORD PTR _lc$[ebp]

; 109  : 	{
; 110  : 		px = (x-length)+(rand()%maxlen);

  00023	e8 00 00 00 00	 call	 _rand
  00028	99		 cdq
  00029	8d 3c 1b	 lea	 edi, DWORD PTR [ebx+ebx]
  0002c	f7 ff		 idiv	 edi
  0002e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00031	0f bf 30	 movsx	 esi, WORD PTR [eax]
  00034	03 f2		 add	 esi, edx
  00036	2b f3		 sub	 esi, ebx

; 111  : 		py = (y-length)+(rand()%maxlen);

  00038	e8 00 00 00 00	 call	 _rand
  0003d	99		 cdq
  0003e	f7 ff		 idiv	 edi

; 112  : 
; 113  : 		attr = this->GetAttr(px, py);

  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b fa		 mov	 edi, edx
  00045	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00048	0f bf 02	 movsx	 eax, WORD PTR [edx]
  0004b	03 f8		 add	 edi, eax
  0004d	2b fb		 sub	 edi, ebx
  0004f	57		 push	 edi
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 114  : 
; 115  : 		if ( (attr & 4) != 4  && (attr & 8) != 8 )

  00056	a8 0c		 test	 al, 12			; 0000000cH
  00058	74 0f		 je	 SHORT $LN8@GetRandomL

; 104  : 	}
; 105  : 
; 106  : 	maxlen = length*2;
; 107  : 
; 108  : 	while ( lc-- != 0 )

  0005a	83 7d fc 00	 cmp	 DWORD PTR _lc$[ebp], 0
  0005e	75 c0		 jne	 SHORT $LL3@GetRandomL
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx

; 119  : 			return;
; 120  : 		}
; 121  : 	}
; 122  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 0c 00	 ret	 12			; 0000000cH
$LN8@GetRandomL:

; 116  : 		{
; 117  : 			x = px;

  00069	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]

; 118  : 			y = py;

  0006c	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0006f	66 89 31	 mov	 WORD PTR [ecx], si
  00072	66 89 3a	 mov	 WORD PTR [edx], di
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 119  : 			return;
; 120  : 		}
; 121  : 	}
; 122  : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 0c 00	 ret	 12			; 0000000cH
?GetRandomLengthPos@MapClass@@QAEXAAF0H@Z ENDP		; MapClass::GetRandomLengthPos
_TEXT	ENDS
PUBLIC	?GetMapPos@MapClass@@QAEXFAAF0@Z		; MapClass::GetMapPos
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetMapPos@MapClass@@QAEXFAAF0@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN14@GetMapPos
	DD	FLAT:$LN15@GetMapPos
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetMapPos@MapClass@@QAEXFAAF0@Z
_TEXT	SEGMENT
_x$ = -48						; size = 4
_y$ = -44						; size = 4
_this$ = -40						; size = 4
_loopcount$ = -36					; size = 4
_h$ = -32						; size = 4
_w$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_Map$ = 8						; size = 2
_levelpos$ = 8						; size = 4
_ox$ = 12						; size = 4
_oy$ = 16						; size = 4
?GetMapPos@MapClass@@QAEXFAAF0@Z PROC			; MapClass::GetMapPos, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetMapPos@MapClass@@QAEXFAAF0@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00033	8b f9		 mov	 edi, ecx
  00035	89 7d d8	 mov	 DWORD PTR _this$[ebp], edi

; 126  : 	if ( Map != 8 )

  00038	8b 45 08	 mov	 eax, DWORD PTR _Map$[ebp]
  0003b	66 83 f8 08	 cmp	 ax, 8
  0003f	74 3a		 je	 SHORT $LN5@GetMapPos

; 127  : 	{
; 128  : 		if ( Map == 33 )

  00041	66 83 f8 21	 cmp	 ax, 33			; 00000021H
  00045	75 10		 jne	 SHORT $LN9@GetMapPos

; 129  : 		{
; 130  : 			Map = 33;

  00047	b8 21 00 00 00	 mov	 eax, 33			; 00000021H

; 139  : 		}
; 140  : 	}
; 141  : 
; 142  : 	int x;
; 143  : 	int y;
; 144  : 	int levelpos = Map;

  0004c	98		 cwde
  0004d	89 45 08	 mov	 DWORD PTR _levelpos$[ebp], eax

; 145  : 	int loopcount=50;

  00050	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00055	eb 35		 jmp	 SHORT $LN4@GetMapPos
$LN9@GetMapPos:

; 131  : 		}
; 132  : 		else if ( Map == 34 )

  00057	66 83 f8 22	 cmp	 ax, 34			; 00000022H
  0005b	75 10		 jne	 SHORT $LN7@GetMapPos

; 133  : 		{
; 134  : 			Map = 34;

  0005d	b8 22 00 00 00	 mov	 eax, 34			; 00000022H

; 139  : 		}
; 140  : 	}
; 141  : 
; 142  : 	int x;
; 143  : 	int y;
; 144  : 	int levelpos = Map;

  00062	98		 cwde
  00063	89 45 08	 mov	 DWORD PTR _levelpos$[ebp], eax

; 145  : 	int loopcount=50;

  00066	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0006b	eb 1f		 jmp	 SHORT $LN4@GetMapPos
$LN7@GetMapPos:

; 135  : 		}
; 136  : 		else if ( Map > 4 && Map != 7 )

  0006d	66 83 f8 04	 cmp	 ax, 4
  00071	7e 08		 jle	 SHORT $LN5@GetMapPos
  00073	66 83 f8 07	 cmp	 ax, 7
  00077	74 02		 je	 SHORT $LN5@GetMapPos

; 137  : 		{
; 138  : 			Map = 0;

  00079	33 c0		 xor	 eax, eax
$LN5@GetMapPos:

; 139  : 		}
; 140  : 	}
; 141  : 
; 142  : 	int x;
; 143  : 	int y;
; 144  : 	int levelpos = Map;

  0007b	98		 cwde
  0007c	89 45 08	 mov	 DWORD PTR _levelpos$[ebp], eax

; 145  : 	int loopcount=50;

  0007f	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00084	eb 06		 jmp	 SHORT $LN4@GetMapPos
$LL20@GetMapPos:
  00086	8b 4d dc	 mov	 ecx, DWORD PTR _loopcount$[ebp]
  00089	8b 45 08	 mov	 eax, DWORD PTR _levelpos$[ebp]
$LN4@GetMapPos:

; 146  : 	BYTE attr;
; 147  : 	int w;
; 148  : 	int h;
; 149  : 
; 150  : 	while ( loopcount-- != 0 )

  0008c	8b d1		 mov	 edx, ecx
  0008e	49		 dec	 ecx
  0008f	89 4d dc	 mov	 DWORD PTR _loopcount$[ebp], ecx
  00092	85 d2		 test	 edx, edx
  00094	0f 84 b9 00 00
	00		 je	 $LN3@GetMapPos

; 151  : 	{
; 152  : 		w = this->gRegenRect[levelpos].right - this->gRegenRect[levelpos].left;

  0009a	8b f0		 mov	 esi, eax
  0009c	c1 e6 04	 shl	 esi, 4
  0009f	03 f7		 add	 esi, edi
  000a1	8b 96 8c 04 05
	00		 mov	 edx, DWORD PTR [esi+328844]
  000a7	2b 96 84 04 05
	00		 sub	 edx, DWORD PTR [esi+328836]
  000ad	89 55 e4	 mov	 DWORD PTR _w$[ebp], edx

; 153  : 		h = this->gRegenRect[levelpos].bottom - this->gRegenRect[levelpos].top;

  000b0	05 49 50 00 00	 add	 eax, 20553		; 00005049H
  000b5	03 c0		 add	 eax, eax
  000b7	8b 04 c7	 mov	 eax, DWORD PTR [edi+eax*8]
  000ba	2b 86 88 04 05
	00		 sub	 eax, DWORD PTR [esi+328840]
  000c0	89 45 e0	 mov	 DWORD PTR _h$[ebp], eax

; 154  : 
; 155  : 		__try

  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 156  : 		{
; 157  : 			x = (short)(this->gRegenRect[levelpos].left + (rand()%w));

  000ca	e8 00 00 00 00	 call	 _rand
  000cf	8b 4d e4	 mov	 ecx, DWORD PTR _w$[ebp]
  000d2	99		 cdq
  000d3	f7 f9		 idiv	 ecx
  000d5	66 03 96 84 04
	05 00		 add	 dx, WORD PTR [esi+328836]
  000dc	0f bf d2	 movsx	 edx, dx
  000df	89 55 d0	 mov	 DWORD PTR _x$[ebp], edx

; 158  : 			y = (short)(this->gRegenRect[levelpos].top  + (rand()%h));

  000e2	e8 00 00 00 00	 call	 _rand
  000e7	8b 4d e0	 mov	 ecx, DWORD PTR _h$[ebp]
  000ea	99		 cdq
  000eb	f7 f9		 idiv	 ecx
  000ed	66 03 96 88 04
	05 00		 add	 dx, WORD PTR [esi+328840]
  000f4	0f bf f2	 movsx	 esi, dx
  000f7	89 75 d4	 mov	 DWORD PTR _y$[ebp], esi

; 159  : 		}

  000fa	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00101	eb 1c		 jmp	 SHORT $LN17@GetMapPos
$LN14@GetMapPos:
$LN22@GetMapPos:

; 160  : 		__except(w=1,h=1,1)

  00103	b8 01 00 00 00	 mov	 eax, 1
  00108	89 45 e4	 mov	 DWORD PTR _w$[ebp], eax
  0010b	89 45 e0	 mov	 DWORD PTR _h$[ebp], eax
$LN21@GetMapPos:
$LN16@GetMapPos:
  0010e	c3		 ret	 0
$LN15@GetMapPos:
  0010f	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 161  : 		{
; 162  : 		}

  00112	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00119	8b 7d d8	 mov	 edi, DWORD PTR _this$[ebp]
  0011c	8b 75 d4	 mov	 esi, DWORD PTR _y$[ebp]
$LN17@GetMapPos:

; 163  : 		attr = this->GetAttr(x, y);

  0011f	56		 push	 esi
  00120	8b 5d d0	 mov	 ebx, DWORD PTR _x$[ebp]
  00123	53		 push	 ebx
  00124	8b cf		 mov	 ecx, edi
  00126	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 164  : 
; 165  : 		if ( (attr & 4) != 4  && (attr & 8) != 8 )

  0012b	a8 0c		 test	 al, 12			; 0000000cH
  0012d	0f 85 53 ff ff
	ff		 jne	 $LL20@GetMapPos

; 166  : 		{
; 167  : 			ox = x;

  00133	8b 55 0c	 mov	 edx, DWORD PTR _ox$[ebp]
  00136	66 89 1a	 mov	 WORD PTR [edx], bx

; 168  : 			oy = y;

  00139	8b 45 10	 mov	 eax, DWORD PTR _oy$[ebp]
  0013c	66 89 30	 mov	 WORD PTR [eax], si

; 174  : 	x = this->gRegenRect[levelpos].left;
; 175  : 	y = this->gRegenRect[levelpos].top;
; 176  : }

  0013f	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00142	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00149	59		 pop	 ecx
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 0c 00	 ret	 12			; 0000000cH
$LN3@GetMapPos:

; 169  : 			return;
; 170  : 		}
; 171  : 	}
; 172  : 				
; 173  : 	LogAdd(LOG_BLACK, lMsg.Get( MSGGET(1, 204 )) , __FILE__, __LINE__);

  00153	68 ad 00 00 00	 push	 173			; 000000adH
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@
  0015d	68 cc 01 00 00	 push	 460			; 000001ccH
  00162	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00167	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0016c	50		 push	 eax
  0016d	6a 00		 push	 0
  0016f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00174	83 c4 10	 add	 esp, 16			; 00000010H

; 174  : 	x = this->gRegenRect[levelpos].left;
; 175  : 	y = this->gRegenRect[levelpos].top;
; 176  : }

  00177	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0017a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00181	59		 pop	 ecx
  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c2 0c 00	 ret	 12			; 0000000cH
?GetMapPos@MapClass@@QAEXFAAF0@Z ENDP			; MapClass::GetMapPos
_TEXT	ENDS
PUBLIC	?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKE@Z	; MapClass::MonsterItemDrop
EXTRN	?CreateItem@CMapItem@@QAEXHHHHMEEEEEKE@Z:PROC	; CMapItem::CreateItem
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
;	COMDAT ?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKE@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
_level$ = 12						; size = 4
_dur$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_Option1$ = 28						; size = 1
_Option2$ = 32						; size = 1
_Option3$ = 36						; size = 1
_NOption$ = 40						; size = 1
_SOption$ = 44						; size = 1
_aIndex$ = 48						; size = 4
_number$ = 52						; size = 4
_ItemEffectEx$ = 56					; size = 1
?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKE@Z PROC	; MapClass::MonsterItemDrop, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 256  : 	int count;
; 257  : 	int counttot=0;
; 258  : 	BYTE attr = this->GetAttr(x, y);

  00003	8b 45 18	 mov	 eax, DWORD PTR _y$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 14	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	8b ce		 mov	 ecx, esi
  00011	33 db		 xor	 ebx, ebx
  00013	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 259  : 
; 260  : 	if ( (attr & 4) == 4  || (attr & 8) == 8 )

  00018	a8 0c		 test	 al, 12			; 0000000cH
  0001a	0f 85 ee 00 00
	00		 jne	 $LN7@MonsterIte

; 263  : 	}
; 264  : 	count = this->m_ItemCount;

  00020	57		 push	 edi
  00021	8b be 80 04 05
	00		 mov	 edi, DWORD PTR [esi+328832]

; 265  : 
; 266  : 	while ( true )
; 267  : 	{
; 268  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  00027	8b d7		 mov	 edx, edi
  00029	69 d2 48 04 00
	00		 imul	 edx, 1096		; 00000448H
  0002f	8d 4c 32 24	 lea	 ecx, DWORD PTR [edx+esi+36]
  00033	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00038	85 c0		 test	 eax, eax
  0003a	74 31		 je	 SHORT $LN12@MonsterIte
  0003c	8d 64 24 00	 npad	 4
$LL6@MonsterIte:

; 280  : 
; 281  : 		}
; 282  : 
; 283  : 		count++;

  00040	47		 inc	 edi

; 284  : 
; 285  : 		if ( count > MAX_MAPITEM-1 )

  00041	81 ff 2b 01 00
	00		 cmp	 edi, 299		; 0000012bH
  00047	7e 02		 jle	 SHORT $LN2@MonsterIte

; 286  : 		{
; 287  : 			count = 0;

  00049	33 ff		 xor	 edi, edi
$LN2@MonsterIte:

; 288  : 		}
; 289  : 
; 290  : 		counttot++;

  0004b	43		 inc	 ebx

; 291  : 
; 292  : 		if ( counttot > MAX_MAPITEM-1 )

  0004c	81 fb 2b 01 00
	00		 cmp	 ebx, 299		; 0000012bH
  00052	0f 8f 88 00 00
	00		 jg	 $LN13@MonsterIte

; 265  : 
; 266  : 	while ( true )
; 267  : 	{
; 268  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  00058	8b c7		 mov	 eax, edi
  0005a	69 c0 48 04 00
	00		 imul	 eax, 1096		; 00000448H
  00060	8d 4c 30 24	 lea	 ecx, DWORD PTR [eax+esi+36]
  00064	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00069	85 c0		 test	 eax, eax
  0006b	75 d3		 jne	 SHORT $LL6@MonsterIte
$LN12@MonsterIte:

; 269  : 		{
; 270  : 			this->m_cItem[count].CreateItem(type, level, x, y, dur, Option1, Option2, Option3, NOption, SOption, number, ItemEffectEx);

  0006d	8b 55 38	 mov	 edx, DWORD PTR _ItemEffectEx$[ebp]
  00070	d9 45 10	 fld	 DWORD PTR _dur$[ebp]
  00073	8b 45 34	 mov	 eax, DWORD PTR _number$[ebp]
  00076	8b 4d 2c	 mov	 ecx, DWORD PTR _SOption$[ebp]
  00079	52		 push	 edx
  0007a	8b 55 28	 mov	 edx, DWORD PTR _NOption$[ebp]
  0007d	50		 push	 eax
  0007e	8b 45 24	 mov	 eax, DWORD PTR _Option3$[ebp]
  00081	51		 push	 ecx
  00082	8b 4d 20	 mov	 ecx, DWORD PTR _Option2$[ebp]
  00085	52		 push	 edx
  00086	8b 55 1c	 mov	 edx, DWORD PTR _Option1$[ebp]
  00089	50		 push	 eax
  0008a	8b 45 18	 mov	 eax, DWORD PTR _y$[ebp]
  0008d	51		 push	 ecx
  0008e	52		 push	 edx
  0008f	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00092	51		 push	 ecx
  00093	8b 4d 14	 mov	 ecx, DWORD PTR _x$[ebp]
  00096	d9 1c 24	 fstp	 DWORD PTR [esp]
  00099	8b df		 mov	 ebx, edi
  0009b	69 db 48 04 00
	00		 imul	 ebx, 1096		; 00000448H
  000a1	50		 push	 eax
  000a2	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  000a5	51		 push	 ecx
  000a6	52		 push	 edx
  000a7	50		 push	 eax
  000a8	8d 4c 33 20	 lea	 ecx, DWORD PTR [ebx+esi+32]
  000ac	e8 00 00 00 00	 call	 ?CreateItem@CMapItem@@QAEXHHHHMEEEEEKE@Z ; CMapItem::CreateItem

; 271  : 			this->m_cItem[count].m_UserIndex = aIndex;

  000b1	8b 4d 30	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000b4	89 8c 33 d8 00
	00 00		 mov	 DWORD PTR [ebx+esi+216], ecx

; 272  : 			this->m_ItemCount++;

  000bb	ff 86 80 04 05
	00		 inc	 DWORD PTR [esi+328832]

; 273  : 
; 274  : 			if ( this->m_ItemCount > MAX_MAPITEM-1 )

  000c1	81 be 80 04 05
	00 2b 01 00 00	 cmp	 DWORD PTR [esi+328832], 299 ; 0000012bH
  000cb	7e 0a		 jle	 SHORT $LN3@MonsterIte

; 275  : 			{
; 276  : 				this->m_ItemCount = 0;

  000cd	c7 86 80 04 05
	00 00 00 00 00	 mov	 DWORD PTR [esi+328832], 0
$LN3@MonsterIte:

; 277  : 			}
; 278  : 
; 279  : 			return count;

  000d7	8b c7		 mov	 eax, edi
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx

; 301  : }

  000dc	5d		 pop	 ebp
  000dd	c2 34 00	 ret	 52			; 00000034H
$LN13@MonsterIte:

; 293  : 		{
; 294  : 			break;
; 295  : 		}
; 296  : 	}
; 297  : 
; 298  : 	LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 205)), __FILE__, __LINE__ );

  000e0	68 2a 01 00 00	 push	 298			; 0000012aH
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OIPODJPN@MapClass?4cpp?$AA@
  000ea	68 cd 01 00 00	 push	 461			; 000001cdH
  000ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000f4	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000f9	50		 push	 eax
  000fa	6a 00		 push	 0
  000fc	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00101	83 c4 10	 add	 esp, 16			; 00000010H
  00104	5f		 pop	 edi
  00105	5e		 pop	 esi

; 299  : 
; 300  : 	return -1;

  00106	83 c8 ff	 or	 eax, -1
  00109	5b		 pop	 ebx

; 301  : }

  0010a	5d		 pop	 ebp
  0010b	c2 34 00	 ret	 52			; 00000034H
$LN7@MonsterIte:
  0010e	5e		 pop	 esi

; 261  : 	{
; 262  : 		return -1;

  0010f	83 c8 ff	 or	 eax, -1
  00112	5b		 pop	 ebx

; 301  : }

  00113	5d		 pop	 ebp
  00114	c2 34 00	 ret	 52			; 00000034H
?MonsterItemDrop@MapClass@@QAEHHHMHHEEEEEHKE@Z ENDP	; MapClass::MonsterItemDrop
_TEXT	ENDS
PUBLIC	??_C@_0EL@BKCBEOOI@?$FLBlood?5Castle?$FN?5?$CI?$CFd?$CJ?5?$CIAccount?3?$CFs?0@ ; `string'
PUBLIC	?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHE@Z	; MapClass::ItemDrop
EXTRN	?g_BloodCastle@@3VCBloodCastle@@A:BYTE		; g_BloodCastle
EXTRN	?DropCreateItem@CMapItem@@QAEXHHHHMEEEEEKHHE@Z:PROC ; CMapItem::DropCreateItem
;	COMDAT ??_C@_0EL@BKCBEOOI@?$FLBlood?5Castle?$FN?5?$CI?$CFd?$CJ?5?$CIAccount?3?$CFs?0@
CONST	SEGMENT
??_C@_0EL@BKCBEOOI@?$FLBlood?5Castle?$FN?5?$CI?$CFd?$CJ?5?$CIAccount?3?$CFs?0@ DB '['
	DB	'Blood Castle] (%d) (Account:%s, Name:%s) Dropped Angel King'''
	DB	's Weapon (%d)', 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHE@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
_level$ = 12						; size = 4
_dur$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_Option1$ = 28						; size = 1
_Option2$ = 32						; size = 1
_Option3$ = 36						; size = 1
_NOption$ = 40						; size = 1
_SOption$ = 44						; size = 1
_number$ = 48						; size = 4
_aIndex$ = 52						; size = 4
_PetLevel$ = 56						; size = 4
_PetExp$ = 60						; size = 4
_ItemEffectEx$ = 64					; size = 1
?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHE@Z PROC		; MapClass::ItemDrop, COMDAT
; _this$ = ecx

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  : 	int count;
; 312  : 	int counttot = 0;
; 313  : 	BYTE attr = this->GetAttr(x, y);

  00003	8b 45 18	 mov	 eax, DWORD PTR _y$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 14	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	8b ce		 mov	 ecx, esi
  00011	33 db		 xor	 ebx, ebx
  00013	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 314  : 
; 315  : 	if ( (attr&4) == 4 || (attr&8) == 8 )

  00018	a8 0c		 test	 al, 12			; 0000000cH
  0001a	0f 85 8b 01 00
	00		 jne	 $LN13@ItemDrop

; 318  : 	}
; 319  : 
; 320  : 	count = this->m_ItemCount;

  00020	57		 push	 edi
  00021	8b be 80 04 05
	00		 mov	 edi, DWORD PTR [esi+328832]

; 321  : 
; 322  : 	while ( true )
; 323  : 	{
; 324  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  00027	8b d7		 mov	 edx, edi
  00029	69 d2 48 04 00
	00		 imul	 edx, 1096		; 00000448H
  0002f	8d 4c 32 24	 lea	 ecx, DWORD PTR [edx+esi+36]
  00033	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00038	85 c0		 test	 eax, eax
  0003a	74 31		 je	 SHORT $LN22@ItemDrop
  0003c	8d 64 24 00	 npad	 4
$LL12@ItemDrop:

; 364  : 		}
; 365  : 
; 366  : 		count++;

  00040	47		 inc	 edi

; 367  : 
; 368  : 		if ( count > MAX_MAPITEM-1 )

  00041	81 ff 2b 01 00
	00		 cmp	 edi, 299		; 0000012bH
  00047	7e 02		 jle	 SHORT $LN2@ItemDrop

; 369  : 		{
; 370  : 			count = 0;

  00049	33 ff		 xor	 edi, edi
$LN2@ItemDrop:

; 371  : 		}
; 372  : 
; 373  : 		counttot++;

  0004b	43		 inc	 ebx

; 374  : 
; 375  : 		if ( counttot > MAX_MAPITEM-1 )

  0004c	81 fb 2b 01 00
	00		 cmp	 ebx, 299		; 0000012bH
  00052	0f 8f 4a 01 00
	00		 jg	 $LN23@ItemDrop

; 321  : 
; 322  : 	while ( true )
; 323  : 	{
; 324  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  00058	8b c7		 mov	 eax, edi
  0005a	69 c0 48 04 00
	00		 imul	 eax, 1096		; 00000448H
  00060	8d 4c 30 24	 lea	 ecx, DWORD PTR [eax+esi+36]
  00064	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00069	85 c0		 test	 eax, eax
  0006b	75 d3		 jne	 SHORT $LL12@ItemDrop
$LN22@ItemDrop:

; 325  : 		{
; 326  : 			this->m_cItem[count].DropCreateItem(type, level, x, y, dur, Option1, Option2, Option3, NOption, SOption, number, PetLevel, PetExp, ItemEffectEx);

  0006d	8b 4d 40	 mov	 ecx, DWORD PTR _ItemEffectEx$[ebp]
  00070	d9 45 10	 fld	 DWORD PTR _dur$[ebp]
  00073	69 ff 48 04 00
	00		 imul	 edi, 1096		; 00000448H
  00079	8b 55 3c	 mov	 edx, DWORD PTR _PetExp$[ebp]
  0007c	8b 45 38	 mov	 eax, DWORD PTR _PetLevel$[ebp]
  0007f	51		 push	 ecx
  00080	8b 4d 30	 mov	 ecx, DWORD PTR _number$[ebp]
  00083	52		 push	 edx
  00084	8b 55 2c	 mov	 edx, DWORD PTR _SOption$[ebp]
  00087	50		 push	 eax
  00088	8b 45 28	 mov	 eax, DWORD PTR _NOption$[ebp]
  0008b	8b 5d 0c	 mov	 ebx, DWORD PTR _level$[ebp]
  0008e	51		 push	 ecx
  0008f	8b 4d 24	 mov	 ecx, DWORD PTR _Option3$[ebp]
  00092	52		 push	 edx
  00093	8b 55 20	 mov	 edx, DWORD PTR _Option2$[ebp]
  00096	50		 push	 eax
  00097	8b 45 1c	 mov	 eax, DWORD PTR _Option1$[ebp]
  0009a	51		 push	 ecx
  0009b	52		 push	 edx
  0009c	8b 55 14	 mov	 edx, DWORD PTR _x$[ebp]
  0009f	50		 push	 eax
  000a0	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  000a3	51		 push	 ecx
  000a4	8b 4d 18	 mov	 ecx, DWORD PTR _y$[ebp]
  000a7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000aa	51		 push	 ecx
  000ab	52		 push	 edx
  000ac	53		 push	 ebx
  000ad	50		 push	 eax
  000ae	8d 4c 37 20	 lea	 ecx, DWORD PTR [edi+esi+32]
  000b2	e8 00 00 00 00	 call	 ?DropCreateItem@CMapItem@@QAEXHHHHMEEEEEKHHE@Z ; CMapItem::DropCreateItem

; 327  : 			this->m_cItem[count].m_UserIndex = aIndex;

  000b7	8b 4d 34	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  000ba	89 8c 37 d8 00
	00 00		 mov	 DWORD PTR [edi+esi+216], ecx

; 328  : 			this->m_ItemCount++;

  000c1	ff 86 80 04 05
	00		 inc	 DWORD PTR [esi+328832]

; 329  : 
; 330  : 			if ( this->m_ItemCount > MAX_MAPITEM-1 )

  000c7	81 be 80 04 05
	00 2b 01 00 00	 cmp	 DWORD PTR [esi+328832], 299 ; 0000012bH
  000d1	7e 0a		 jle	 SHORT $LN24@ItemDrop

; 331  : 			{
; 332  : 				this->m_ItemCount = 0;

  000d3	c7 86 80 04 05
	00 00 00 00 00	 mov	 DWORD PTR [esi+328832], 0
$LN24@ItemDrop:

; 333  : 			}
; 334  : 
; 335  : 			if ( BC_MAP_RANGE(this->thisMapNumber) != FALSE )

  000dd	8b 96 04 07 05
	00		 mov	 edx, DWORD PTR [esi+329476]
  000e3	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  000e6	0f 8c aa 00 00
	00		 jl	 $LN3@ItemDrop
  000ec	33 c0		 xor	 eax, eax
  000ee	83 fa 11	 cmp	 edx, 17			; 00000011H
  000f1	0f 9e c0	 setle	 al
  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 9a 00 00
	00		 je	 $LN3@ItemDrop

; 336  : 			{
; 337  : 				if ( type == ITEMGET(13,19) )

  000fc	81 7d 08 13 1a
	00 00		 cmp	 DWORD PTR _type$[ebp], 6675 ; 00001a13H
  00103	0f 85 8d 00 00
	00		 jne	 $LN3@ItemDrop

; 338  : 				{
; 339  : 					if ( ((level<0)?FALSE:(level>2)?FALSE:TRUE) != FALSE )

  00109	85 db		 test	 ebx, ebx
  0010b	0f 88 85 00 00
	00		 js	 $LN3@ItemDrop
  00111	33 c0		 xor	 eax, eax
  00113	83 fb 02	 cmp	 ebx, 2
  00116	0f 9e c0	 setle	 al
  00119	85 c0		 test	 eax, eax
  0011b	74 79		 je	 SHORT $LN3@ItemDrop

; 340  : 					{
; 341  : 						if ( g_BloodCastle.m_BridgeData[this->thisMapNumber-MAP_INDEX_BLOODCASTLE1].m_nBC_QUESTITEM_SERIAL != -1 )

  0011d	8d 4a f5	 lea	 ecx, DWORD PTR [edx-11]
  00120	c1 e1 09	 shl	 ecx, 9
  00123	8b 81 90 01 00
	00		 mov	 eax, DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[ecx+400]
  00129	83 f8 ff	 cmp	 eax, -1
  0012c	74 68		 je	 SHORT $LN3@ItemDrop

; 342  : 						{
; 343  : 							if ( number == g_BloodCastle.m_BridgeData[this->thisMapNumber-MAP_INDEX_BLOODCASTLE1].m_nBC_QUESTITEM_SERIAL )

  0012e	39 45 30	 cmp	 DWORD PTR _number$[ebp], eax
  00131	75 63		 jne	 SHORT $LN3@ItemDrop

; 344  : 							{
; 345  : 								if ( g_BloodCastle.m_BridgeData[this->thisMapNumber-MAP_INDEX_BLOODCASTLE1].m_iBC_QUEST_ITEM_USER_INDEX != -1 )

  00133	8b 81 94 01 00
	00		 mov	 eax, DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[ecx+404]
  00139	83 f8 ff	 cmp	 eax, -1
  0013c	74 58		 je	 SHORT $LN3@ItemDrop

; 346  : 								{
; 347  : 									LogAdd(LOG_BLACK, "[Blood Castle] (%d) (Account:%s, Name:%s) Dropped Angel King's Weapon (%d)",
; 348  : 										this->thisMapNumber-(MAP_INDEX_BLOODCASTLE1-1), gObj[g_BloodCastle.m_BridgeData[this->thisMapNumber-MAP_INDEX_BLOODCASTLE1].m_iBC_QUEST_ITEM_USER_INDEX ].AccountID,
; 349  : 										gObj[g_BloodCastle.m_BridgeData[this->thisMapNumber-MAP_INDEX_BLOODCASTLE1].m_iBC_QUEST_ITEM_USER_INDEX].Name,
; 350  : 										g_BloodCastle.m_BridgeData[this->thisMapNumber-MAP_INDEX_BLOODCASTLE1].m_btBC_QUEST_ITEM_NUMBER);

  0013e	0f b6 89 98 01
	00 00		 movzx	 ecx, BYTE PTR ?g_BloodCastle@@3VCBloodCastle@@A[ecx+408]
  00145	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  0014b	51		 push	 ecx
  0014c	8d 88 6f 00 00
	00		 lea	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+111]
  00152	51		 push	 ecx
  00153	8d 80 64 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+100]
  00159	50		 push	 eax
  0015a	83 c2 f6	 add	 edx, -10		; fffffff6H
  0015d	52		 push	 edx
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@BKCBEOOI@?$FLBlood?5Castle?$FN?5?$CI?$CFd?$CJ?5?$CIAccount?3?$CFs?0@
  00163	6a 00		 push	 0
  00165	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 351  : 									
; 352  : 									g_BloodCastle.m_BridgeData[this->thisMapNumber-MAP_INDEX_BLOODCASTLE1].m_iBC_QUEST_ITEM_USER_INDEX = -1;

  0016a	8b 8e 04 07 05
	00		 mov	 ecx, DWORD PTR [esi+329476]
  00170	83 e9 0b	 sub	 ecx, 11			; 0000000bH
  00173	c1 e1 09	 shl	 ecx, 9
  00176	c7 81 94 01 00
	00 ff ff ff ff	 mov	 DWORD PTR ?g_BloodCastle@@3VCBloodCastle@@A[ecx+404], -1

; 353  : 									g_BloodCastle.m_BridgeData[this->thisMapNumber-MAP_INDEX_BLOODCASTLE1].m_btBC_QUEST_ITEM_NUMBER = 0;

  00180	8b 96 04 07 05
	00		 mov	 edx, DWORD PTR [esi+329476]
  00186	83 ea 0b	 sub	 edx, 11			; 0000000bH
  00189	83 c4 18	 add	 esp, 24			; 00000018H
  0018c	c1 e2 09	 shl	 edx, 9
  0018f	c6 82 98 01 00
	00 00		 mov	 BYTE PTR ?g_BloodCastle@@3VCBloodCastle@@A[edx+408], 0
$LN3@ItemDrop:

; 354  : 
; 355  : 									
; 356  : 								}
; 357  : 							}
; 358  : 						}
; 359  : 					}
; 360  : 				}
; 361  : 			}
; 362  : 
; 363  : 			return TRUE;

  00196	5f		 pop	 edi
  00197	5e		 pop	 esi
  00198	b8 01 00 00 00	 mov	 eax, 1
  0019d	5b		 pop	 ebx

; 378  : 		}
; 379  : 	}
; 380  : 
; 381  : 	LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 205)), __FILE__, __LINE__ );
; 382  : 
; 383  : 	return FALSE;
; 384  : }

  0019e	5d		 pop	 ebp
  0019f	c2 3c 00	 ret	 60			; 0000003cH
$LN23@ItemDrop:
  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi

; 376  : 		{
; 377  : 			return FALSE;

  001a4	33 c0		 xor	 eax, eax
  001a6	5b		 pop	 ebx

; 378  : 		}
; 379  : 	}
; 380  : 
; 381  : 	LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 205)), __FILE__, __LINE__ );
; 382  : 
; 383  : 	return FALSE;
; 384  : }

  001a7	5d		 pop	 ebp
  001a8	c2 3c 00	 ret	 60			; 0000003cH
$LN13@ItemDrop:
  001ab	5e		 pop	 esi

; 316  : 	{
; 317  : 		return FALSE;

  001ac	33 c0		 xor	 eax, eax
  001ae	5b		 pop	 ebx

; 378  : 		}
; 379  : 	}
; 380  : 
; 381  : 	LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 205)), __FILE__, __LINE__ );
; 382  : 
; 383  : 	return FALSE;
; 384  : }

  001af	5d		 pop	 ebp
  001b0	c2 3c 00	 ret	 60			; 0000003cH
?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHE@Z ENDP		; MapClass::ItemDrop
_TEXT	ENDS
PUBLIC	?MoneyItemDrop@MapClass@@QAEHHHH@Z		; MapClass::MoneyItemDrop
EXTRN	?gZenDurationTime@@3HA:DWORD			; gZenDurationTime
; Function compile flags: /Ogtp
;	COMDAT ?MoneyItemDrop@MapClass@@QAEHHHH@Z
_TEXT	SEGMENT
_counttot$ = -4						; size = 4
_money$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?MoneyItemDrop@MapClass@@QAEHHHH@Z PROC			; MapClass::MoneyItemDrop, COMDAT
; _this$ = ecx

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 395  : 	int count;
; 396  : 	int counttot = 0;
; 397  : 
; 398  : 	BYTE attr = this->GetAttr(x, y);

  00004	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0000d	50		 push	 eax
  0000e	51		 push	 ecx
  0000f	8b cf		 mov	 ecx, edi
  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _counttot$[ebp], 0
  00018	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 399  : 
; 400  : 	if ( (attr&4) == 4 || (attr&8) == 8 )

  0001d	a8 0c		 test	 al, 12			; 0000000cH
  0001f	0f 85 e4 00 00
	00		 jne	 $LN7@MoneyItemD

; 403  : 	}
; 404  : 
; 405  : 	count = this->m_ItemCount;

  00025	56		 push	 esi
  00026	8b b7 80 04 05
	00		 mov	 esi, DWORD PTR [edi+328832]

; 406  : 
; 407  : 	while ( true )
; 408  : 	{
; 409  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  0002c	8b d6		 mov	 edx, esi
  0002e	69 d2 48 04 00
	00		 imul	 edx, 1096		; 00000448H
  00034	8d 4c 3a 24	 lea	 ecx, DWORD PTR [edx+edi+36]
  00038	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003d	85 c0		 test	 eax, eax
  0003f	74 32		 je	 SHORT $LN12@MoneyItemD
$LL6@MoneyItemD:

; 429  : 		}
; 430  : 
; 431  : 		count++;

  00041	46		 inc	 esi

; 432  : 
; 433  : 		if ( count > MAX_MAPITEM-1 )

  00042	81 fe 2b 01 00
	00		 cmp	 esi, 299		; 0000012bH
  00048	7e 02		 jle	 SHORT $LN2@MoneyItemD

; 434  : 		{
; 435  : 			count = 0;

  0004a	33 f6		 xor	 esi, esi
$LN2@MoneyItemD:

; 436  : 		}
; 437  : 
; 438  : 		counttot++;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _counttot$[ebp]
  0004f	40		 inc	 eax
  00050	89 45 fc	 mov	 DWORD PTR _counttot$[ebp], eax

; 439  : 
; 440  : 		if ( counttot > MAX_MAPITEM-1 )

  00053	3d 2b 01 00 00	 cmp	 eax, 299		; 0000012bH
  00058	0f 8f a1 00 00
	00		 jg	 $LN13@MoneyItemD

; 406  : 
; 407  : 	while ( true )
; 408  : 	{
; 409  : 		if ( this->m_cItem[count].IsItem() == FALSE )

  0005e	8b c6		 mov	 eax, esi
  00060	69 c0 48 04 00
	00		 imul	 eax, 1096		; 00000448H
  00066	8d 4c 38 24	 lea	 ecx, DWORD PTR [eax+edi+36]
  0006a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006f	85 c0		 test	 eax, eax
  00071	75 ce		 jne	 SHORT $LL6@MoneyItemD
$LN12@MoneyItemD:

; 410  : 		{
; 411  : 			this->m_cItem[count].m_Type = ITEMGET(14,15);
; 412  : 			this->m_cItem[count].m_SellMoney = money;

  00073	8b 45 08	 mov	 eax, DWORD PTR _money$[ebp]
  00076	69 f6 48 04 00
	00		 imul	 esi, 1096		; 00000448H

; 413  : 			this->m_cItem[count].m_BuyMoney = money;
; 414  : 			this->m_cItem[count].px = x;

  0007c	8a 55 0c	 mov	 dl, BYTE PTR _x$[ebp]
  0007f	03 f7		 add	 esi, edi
  00081	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  00087	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 415  : 			this->m_cItem[count].py = y;

  0008d	8a 45 10	 mov	 al, BYTE PTR _y$[ebp]
  00090	b9 0f 1c 00 00	 mov	 ecx, 7183		; 00001c0fH
  00095	66 89 4e 2a	 mov	 WORD PTR [esi+42], cx
  00099	88 96 cc 00 00
	00		 mov	 BYTE PTR [esi+204], dl
  0009f	88 86 cd 00 00
	00		 mov	 BYTE PTR [esi+205], al

; 416  : 			this->m_cItem[count].live = 1;

  000a5	66 c7 86 ce 00
	00 00 01 00	 mov	 WORD PTR [esi+206], 1

; 417  : 			this->m_cItem[count].Give = 0;
; 418  : 			this->m_cItem[count].m_State = 1;

  000ae	c7 86 d0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+208], 1

; 419  : 			this->m_cItem[count].m_Time = GetTickCount() + ::gZenDurationTime * 1000;

  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gZenDurationTime@@3HA ; gZenDurationTime
  000c4	69 c9 e8 03 00
	00		 imul	 ecx, 1000		; 000003e8H
  000ca	03 c1		 add	 eax, ecx
  000cc	89 86 d4 00 00
	00		 mov	 DWORD PTR [esi+212], eax

; 420  : 			this->m_cItem[count].m_LootTime = 0;

  000d2	33 c0		 xor	 eax, eax
  000d4	89 86 dc 00 00
	00		 mov	 DWORD PTR [esi+220], eax

; 421  : 			this->m_ItemCount++;

  000da	ff 87 80 04 05
	00		 inc	 DWORD PTR [edi+328832]

; 422  : 
; 423  : 			if ( this->m_ItemCount > MAX_MAPITEM-1 )

  000e0	81 bf 80 04 05
	00 2b 01 00 00	 cmp	 DWORD PTR [edi+328832], 299 ; 0000012bH
  000ea	7e 06		 jle	 SHORT $LN3@MoneyItemD

; 424  : 			{
; 425  : 				this->m_ItemCount = 0;

  000ec	89 87 80 04 05
	00		 mov	 DWORD PTR [edi+328832], eax
$LN3@MoneyItemD:
  000f2	5e		 pop	 esi

; 426  : 			}
; 427  : 
; 428  : 			return TRUE;

  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	5f		 pop	 edi

; 443  : 		}
; 444  : 	}
; 445  : 
; 446  : 	return FALSE;
; 447  : }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 0c 00	 ret	 12			; 0000000cH
$LN13@MoneyItemD:
  000ff	5e		 pop	 esi

; 441  : 		{
; 442  : 			return FALSE;

  00100	33 c0		 xor	 eax, eax
  00102	5f		 pop	 edi

; 443  : 		}
; 444  : 	}
; 445  : 
; 446  : 	return FALSE;
; 447  : }

  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 0c 00	 ret	 12			; 0000000cH
$LN7@MoneyItemD:

; 401  : 	{
; 402  : 		return FALSE;

  00109	33 c0		 xor	 eax, eax
  0010b	5f		 pop	 edi

; 443  : 		}
; 444  : 	}
; 445  : 
; 446  : 	return FALSE;
; 447  : }

  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 0c 00	 ret	 12			; 0000000cH
?MoneyItemDrop@MapClass@@QAEHHHH@Z ENDP			; MapClass::MoneyItemDrop
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	?AttrLoad@MapClass@@QAEHPAD@Z			; MapClass::AttrLoad
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fclose:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	__imp__GlobalFree@4:PROC
EXTRN	_fread:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_02JDPG@rb?$AA@
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\zzzpath.h
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\mapclass.cpp
CONST	ENDS
;	COMDAT ?AttrLoad@MapClass@@QAEHPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_head$ = 11						; size = 1
?AttrLoad@MapClass@@QAEHPAD@Z PROC			; MapClass::AttrLoad, COMDAT
; _this$ = ecx

; 600  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 601  : 	FILE * fp;
; 602  : 	unsigned char head;
; 603  : 
; 604  : 	fp = fopen(filename,"rb");

  00003	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  0000d	50		 push	 eax
  0000e	8b f1		 mov	 esi, ecx
  00010	e8 00 00 00 00	 call	 _fopen
  00015	8b f8		 mov	 edi, eax
  00017	83 c4 08	 add	 esp, 8

; 605  : 
; 606  : 	if ( fp == NULL )

  0001a	85 ff		 test	 edi, edi

; 607  : 	{
; 608  : 		return false;

  0001c	0f 84 d1 00 00
	00		 je	 $LN9@AttrLoad

; 609  : 	}
; 610  : 	
; 611  : 	fread(&head, sizeof(head), 1, fp);

  00022	53		 push	 ebx
  00023	57		 push	 edi
  00024	6a 01		 push	 1
  00026	8d 4d 0b	 lea	 ecx, DWORD PTR _head$[ebp]
  00029	6a 01		 push	 1
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 _fread

; 612  : 	fread(&this->m_width, sizeof(char), 1, fp);

  00031	57		 push	 edi
  00032	6a 01		 push	 1
  00034	8d 5e 14	 lea	 ebx, DWORD PTR [esi+20]
  00037	6a 01		 push	 1
  00039	53		 push	 ebx
  0003a	e8 00 00 00 00	 call	 _fread

; 613  : 	fread(&this->m_height, sizeof(char), 1, fp);

  0003f	57		 push	 edi
  00040	6a 01		 push	 1
  00042	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00045	6a 01		 push	 1
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _fread
  0004d	83 c4 30	 add	 esp, 48			; 00000030H

; 614  : 
; 615  : 	if ( this->m_width > 255 || this->m_height > 255 )

  00050	81 3b ff 00 00
	00		 cmp	 DWORD PTR [ebx], 255	; 000000ffH
  00056	5b		 pop	 ebx
  00057	7f 7c		 jg	 SHORT $LN2@AttrLoad
  00059	81 7e 18 ff 00
	00 00		 cmp	 DWORD PTR [esi+24], 255	; 000000ffH
  00060	7f 73		 jg	 SHORT $LN2@AttrLoad

; 620  : 	}
; 621  : 
; 622  : 	if ( this->m_attrbuf != NULL )

  00062	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00065	85 c0		 test	 eax, eax
  00067	74 0e		 je	 SHORT $LN1@AttrLoad

; 623  : 	{
; 624  : 		GlobalFree(this->m_attrbuf);

  00069	50		 push	 eax
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalFree@4

; 625  : 		this->m_attrbuf = NULL;

  00070	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN1@AttrLoad:

; 626  : 	}
; 627  : 
; 628  : 	this->m_attrbuf = (UCHAR*)GlobalAlloc(GPTR, 65536);

  00077	68 00 00 01 00	 push	 65536			; 00010000H
  0007c	6a 40		 push	 64			; 00000040H
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalAlloc@8

; 629  : 	fread(this->m_attrbuf, 256, 256, fp);

  00084	57		 push	 edi
  00085	68 00 01 00 00	 push	 256			; 00000100H
  0008a	68 00 01 00 00	 push	 256			; 00000100H
  0008f	50		 push	 eax
  00090	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00093	e8 00 00 00 00	 call	 _fread

; 630  : 	fclose(fp);

  00098	57		 push	 edi
  00099	e8 00 00 00 00	 call	 _fclose

; 631  : 	this->path->SetMapDimensions( 256, 256, (UCHAR *)this->m_attrbuf);

  0009e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000a1	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]
  000a4	68 00 00 01 00	 push	 65536			; 00010000H
  000a9	c7 06 00 01 00
	00		 mov	 DWORD PTR [esi], 256	; 00000100H
  000af	c7 46 04 00 01
	00 00		 mov	 DWORD PTR [esi+4], 256	; 00000100H
  000b6	89 86 3c 04 00
	00		 mov	 DWORD PTR [esi+1084], eax
  000bc	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000c1	83 c4 18	 add	 esp, 24			; 00000018H
  000c4	89 86 40 04 00
	00		 mov	 DWORD PTR [esi+1088], eax
  000ca	5f		 pop	 edi

; 632  : 	return true;

  000cb	b8 01 00 00 00	 mov	 eax, 1
  000d0	5e		 pop	 esi

; 633  : }

  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN2@AttrLoad:

; 616  : 	{
; 617  : 		MsgBox(lMsg.Get( MSGGET(2, 51)));

  000d5	68 33 02 00 00	 push	 563			; 00000233H
  000da	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000df	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 618  : 		fclose(fp);

  000ea	57		 push	 edi
  000eb	e8 00 00 00 00	 call	 _fclose
  000f0	83 c4 08	 add	 esp, 8
$LN9@AttrLoad:

; 619  : 		return false;

  000f3	5f		 pop	 edi
  000f4	33 c0		 xor	 eax, eax
  000f6	5e		 pop	 esi

; 633  : }

  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
?AttrLoad@MapClass@@QAEHPAD@Z ENDP			; MapClass::AttrLoad
_TEXT	ENDS
PUBLIC	?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z	; MapClass::PathFinding2
; Function compile flags: /Ogtp
;	COMDAT ?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
_a$ = 24						; size = 4
?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z PROC	; MapClass::PathFinding2, COMDAT
; _this$ = ecx

; 782  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 783  : 	bool Success = this->path->FindPath(sx, sy, tx, ty, true);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR _tx$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 14	 mov	 edi, DWORD PTR _ty$[ebp]
  0000f	6a 01		 push	 1
  00011	57		 push	 edi
  00012	53		 push	 ebx
  00013	8b f1		 mov	 esi, ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0001d	e8 00 00 00 00	 call	 ?FindPath@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath

; 784  : 
; 785  : 	if ( Success == false )

  00022	84 c0		 test	 al, al
  00024	75 18		 jne	 SHORT $LN17@PathFindin

; 786  : 	{
; 787  : 		Success = this->path->FindPath(sx, sy, tx, ty, false);

  00026	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00029	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  0002c	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0002f	6a 00		 push	 0
  00031	57		 push	 edi
  00032	53		 push	 ebx
  00033	52		 push	 edx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?FindPath@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath

; 788  : 	}
; 789  : 
; 790  : 	if ( Success != false )

  0003a	84 c0		 test	 al, al
  0003c	74 4c		 je	 SHORT $LN4@PathFindin
$LN17@PathFindin:

; 791  : 	{
; 792  : 		int path = this->path->GetPath();

  0003e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00041	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 793  : 
; 794  : 		if ( path > 1 )

  00044	83 f8 01	 cmp	 eax, 1
  00047	7e 41		 jle	 SHORT $LN4@PathFindin

; 795  : 		{
; 796  : 			a->PathNum = path;

  00049	8b 7d 18	 mov	 edi, DWORD PTR _a$[ebp]
  0004c	89 07		 mov	 DWORD PTR [edi], eax

; 797  : 			BYTE * px = this->path->GetPathX();

  0004e	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]

; 798  : 			BYTE * py = this->path->GetPathY();
; 799  : 
; 800  : 			for (int n=0;n<a->PathNum;n++)

  00051	33 d2		 xor	 edx, edx
  00053	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  00059	85 c0		 test	 eax, eax
  0005b	7e 1d		 jle	 SHORT $LN1@PathFindin
  0005d	83 c6 0c	 add	 esi, 12			; 0000000cH
  00060	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00063	2b f1		 sub	 esi, ecx
$LL3@PathFindin:

; 801  : 			{
; 802  : 				a->PathX[n] = px[n];

  00065	0f b6 1c 0e	 movzx	 ebx, BYTE PTR [esi+ecx]
  00069	89 58 c4	 mov	 DWORD PTR [eax-60], ebx

; 803  : 				a->PathY[n] = py[n];

  0006c	0f b6 19	 movzx	 ebx, BYTE PTR [ecx]
  0006f	89 18		 mov	 DWORD PTR [eax], ebx
  00071	42		 inc	 edx
  00072	83 c0 04	 add	 eax, 4
  00075	41		 inc	 ecx
  00076	3b 17		 cmp	 edx, DWORD PTR [edi]
  00078	7c eb		 jl	 SHORT $LL3@PathFindin
$LN1@PathFindin:

; 804  : 			}
; 805  : 
; 806  : 			a->CurrentPath = 0;

  0007a	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 807  : 			return 1;

  00083	b0 01		 mov	 al, 1
  00085	5b		 pop	 ebx

; 813  : }

  00086	5d		 pop	 ebp
  00087	c2 14 00	 ret	 20			; 00000014H
$LN4@PathFindin:
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi

; 808  : 		}
; 809  : 
; 810  : 	}
; 811  : 
; 812  : 	return false;

  0008c	32 c0		 xor	 al, al
  0008e	5b		 pop	 ebx

; 813  : }

  0008f	5d		 pop	 ebp
  00090	c2 14 00	 ret	 20			; 00000014H
?PathFinding2@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ENDP	; MapClass::PathFinding2
_TEXT	ENDS
PUBLIC	?CheckWall@MapClass@@QAEHHHHH@Z			; MapClass::CheckWall
; Function compile flags: /Ogtp
;	COMDAT ?CheckWall@MapClass@@QAEHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_len2$ = 8						; size = 4
_sx1$ = 8						; size = 4
_Index$ = 12						; size = 4
_sy1$ = 12						; size = 4
_d1$ = 16						; size = 4
_sx2$ = 16						; size = 4
tv138 = 20						; size = 4
_sy2$ = 20						; size = 4
?CheckWall@MapClass@@QAEHHHHH@Z PROC			; MapClass::CheckWall, COMDAT
; _this$ = ecx

; 823  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 824  : 	int Index = TERRAIN_INDEX_REPEAT(sx1,sy1);

  00004	8b 55 0c	 mov	 edx, DWORD PTR _sy1$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR _sx1$[ebp]
  0000c	57		 push	 edi
  0000d	52		 push	 edx
  0000e	56		 push	 esi
  0000f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00012	e8 00 00 00 00	 call	 ?TERRAIN_INDEX_REPEAT@@YAHHH@Z ; TERRAIN_INDEX_REPEAT

; 825  : 	int nx1;
; 826  : 	int ny1;
; 827  : 	int d1;
; 828  : 	int d2;
; 829  : 	int len1;
; 830  : 	int len2;
; 831  : 	int px1 = sx2 - sx1;
; 832  : 	int py1 = sy2 - sy1;

  00017	8b 4d 14	 mov	 ecx, DWORD PTR _sy2$[ebp]
  0001a	89 45 0c	 mov	 DWORD PTR _Index$[ebp], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR _sx2$[ebp]
  00020	83 c4 08	 add	 esp, 8
  00023	2b ca		 sub	 ecx, edx
  00025	2b c6		 sub	 eax, esi

; 833  : 
; 834  : 	if ( px1 < 0 )

  00027	79 07		 jns	 SHORT $LN11@CheckWall

; 835  : 	{
; 836  : 		px1 = -px1;

  00029	f7 d8		 neg	 eax

; 837  : 		nx1 = -1;

  0002b	83 cf ff	 or	 edi, -1

; 838  : 	}
; 839  : 	else

  0002e	eb 05		 jmp	 SHORT $LN10@CheckWall
$LN11@CheckWall:

; 840  : 	{
; 841  : 		nx1 = 1;

  00030	bf 01 00 00 00	 mov	 edi, 1
$LN10@CheckWall:

; 842  : 	}
; 843  : 
; 844  : 	if ( py1 < 0 )

  00035	85 c9		 test	 ecx, ecx
  00037	79 09		 jns	 SHORT $LN9@CheckWall

; 845  : 	{
; 846  : 		py1 = -py1;

  00039	f7 d9		 neg	 ecx

; 847  : 		ny1 = -256;

  0003b	ba 00 ff ff ff	 mov	 edx, -256		; ffffff00H

; 848  : 	}
; 849  : 	else

  00040	eb 05		 jmp	 SHORT $LN8@CheckWall
$LN9@CheckWall:

; 850  : 	{
; 851  : 		ny1 = 256;

  00042	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
$LN8@CheckWall:

; 852  : 	}
; 853  : 
; 854  : 	if ( px1 > py1 )

  00047	3b c1		 cmp	 eax, ecx
  00049	7e 0c		 jle	 SHORT $LN7@CheckWall

; 855  : 	{
; 856  : 		len1 = px1;

  0004b	8b f0		 mov	 esi, eax

; 857  : 		len2= py1;

  0004d	89 4d 08	 mov	 DWORD PTR _len2$[ebp], ecx

; 858  : 		d1 = ny1;

  00050	89 55 10	 mov	 DWORD PTR _d1$[ebp], edx

; 859  : 		d2 = nx1;

  00053	8b df		 mov	 ebx, edi

; 860  : 	}
; 861  : 	else

  00055	eb 0a		 jmp	 SHORT $LN6@CheckWall
$LN7@CheckWall:

; 862  : 	{
; 863  : 		len1 = py1;

  00057	8b f1		 mov	 esi, ecx

; 864  : 		len2 = px1;

  00059	89 45 08	 mov	 DWORD PTR _len2$[ebp], eax

; 865  : 		d1 = nx1;

  0005c	89 7d 10	 mov	 DWORD PTR _d1$[ebp], edi

; 866  : 		d2 = ny1;

  0005f	8b da		 mov	 ebx, edx
$LN6@CheckWall:

; 867  : 	}
; 868  : 
; 869  : 	int error = 0;
; 870  : 	int count = 0;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 890  : 	}
; 891  : 	while ( count <= len1 );

  00064	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00067	33 ff		 xor	 edi, edi
  00069	33 c9		 xor	 ecx, ecx
  0006b	89 55 14	 mov	 DWORD PTR tv138[ebp], edx
  0006e	8b ff		 npad	 2
$LL5@CheckWall:

; 871  : 	int Shadow = 0;
; 872  : 
; 873  : 	do
; 874  : 	{
; 875  : 		if ( (this->m_attrbuf[Index]&4) == 4 )

  00070	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]
  00073	8b 55 14	 mov	 edx, DWORD PTR tv138[ebp]
  00076	f6 04 02 04	 test	 BYTE PTR [edx+eax], 4
  0007a	75 2c		 jne	 SHORT $LN15@CheckWall

; 878  : 		}
; 879  : 
; 880  : 		error += len2;

  0007c	03 7d 08	 add	 edi, DWORD PTR _len2$[ebp]

; 881  : 
; 882  : 		if ( error > len1/2 )

  0007f	8b c6		 mov	 eax, esi
  00081	99		 cdq
  00082	2b c2		 sub	 eax, edx
  00084	d1 f8		 sar	 eax, 1
  00086	3b f8		 cmp	 edi, eax
  00088	7e 08		 jle	 SHORT $LN17@CheckWall

; 883  : 		{
; 884  : 			Index += d1;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _d1$[ebp]
  0008d	01 45 0c	 add	 DWORD PTR _Index$[ebp], eax

; 885  : 			error -= len1;

  00090	2b fe		 sub	 edi, esi
$LN17@CheckWall:

; 886  : 		}
; 887  : 		
; 888  : 		Index += d2;

  00092	01 5d 0c	 add	 DWORD PTR _Index$[ebp], ebx

; 889  : 		count++;	

  00095	41		 inc	 ecx

; 890  : 	}
; 891  : 	while ( count <= len1 );

  00096	3b ce		 cmp	 ecx, esi
  00098	7e d6		 jle	 SHORT $LL5@CheckWall

; 892  : 
; 893  : 	return TRUE;

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	b8 01 00 00 00	 mov	 eax, 1
  000a1	5b		 pop	 ebx

; 894  : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 10 00	 ret	 16			; 00000010H
$LN15@CheckWall:
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi

; 876  : 		{
; 877  : 			return FALSE;

  000aa	33 c0		 xor	 eax, eax
  000ac	5b		 pop	 ebx

; 894  : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 10 00	 ret	 16			; 00000010H
?CheckWall@MapClass@@QAEHHHHH@Z ENDP			; MapClass::CheckWall
_TEXT	ENDS
PUBLIC	?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z	; MapClass::PathFinding3
; Function compile flags: /Ogtp
;	COMDAT ?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
_a$ = 24						; size = 4
?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z PROC	; MapClass::PathFinding3, COMDAT
; _this$ = ecx

; 909  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 	bool Success = this->path->FindPath2(sx, sy, tx, ty, TRUE);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR _tx$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 14	 mov	 edi, DWORD PTR _ty$[ebp]
  0000f	6a 01		 push	 1
  00011	57		 push	 edi
  00012	53		 push	 ebx
  00013	8b f1		 mov	 esi, ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0001d	e8 00 00 00 00	 call	 ?FindPath2@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath2

; 911  : 
; 912  : 	if ( Success == false )

  00022	84 c0		 test	 al, al
  00024	75 18		 jne	 SHORT $LN17@PathFindin@2

; 913  : 	{
; 914  : 		Success = this->path->FindPath2(sx, sy, tx, ty, FALSE);

  00026	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00029	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  0002c	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0002f	6a 00		 push	 0
  00031	57		 push	 edi
  00032	53		 push	 ebx
  00033	52		 push	 edx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?FindPath2@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath2

; 915  : 	}
; 916  : 
; 917  : 	if ( Success != false )

  0003a	84 c0		 test	 al, al
  0003c	74 4c		 je	 SHORT $LN4@PathFindin@2
$LN17@PathFindin@2:

; 918  : 	{
; 919  : 		int lc3 = this->path->GetPath();

  0003e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00041	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 920  : 
; 921  : 		if ( lc3 > 1 )

  00044	83 f8 01	 cmp	 eax, 1
  00047	7e 41		 jle	 SHORT $LN4@PathFindin@2

; 922  : 		{
; 923  : 			a->PathNum = lc3;

  00049	8b 7d 18	 mov	 edi, DWORD PTR _a$[ebp]
  0004c	89 07		 mov	 DWORD PTR [edi], eax

; 924  : 			BYTE * px = this->path->GetPathX();

  0004e	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]

; 925  : 			BYTE * py = this->path->GetPathY();
; 926  : 
; 927  : 			for (int n=0;n<a->PathNum;n++)

  00051	33 d2		 xor	 edx, edx
  00053	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  00059	85 c0		 test	 eax, eax
  0005b	7e 1d		 jle	 SHORT $LN1@PathFindin@2
  0005d	83 c6 0c	 add	 esi, 12			; 0000000cH
  00060	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00063	2b f1		 sub	 esi, ecx
$LL3@PathFindin@2:

; 928  : 			{
; 929  : 				a->PathX[n] = px[n];

  00065	0f b6 1c 0e	 movzx	 ebx, BYTE PTR [esi+ecx]
  00069	89 58 c4	 mov	 DWORD PTR [eax-60], ebx

; 930  : 				a->PathY[n] = py[n];

  0006c	0f b6 19	 movzx	 ebx, BYTE PTR [ecx]
  0006f	89 18		 mov	 DWORD PTR [eax], ebx
  00071	42		 inc	 edx
  00072	83 c0 04	 add	 eax, 4
  00075	41		 inc	 ecx
  00076	3b 17		 cmp	 edx, DWORD PTR [edi]
  00078	7c eb		 jl	 SHORT $LL3@PathFindin@2
$LN1@PathFindin@2:

; 931  : 			}
; 932  : 
; 933  : 			a->CurrentPath = 0;

  0007a	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 934  : 			return 1;

  00083	b0 01		 mov	 al, 1
  00085	5b		 pop	 ebx

; 940  : }

  00086	5d		 pop	 ebp
  00087	c2 14 00	 ret	 20			; 00000014H
$LN4@PathFindin@2:
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi

; 935  : 		}
; 936  : 
; 937  : 	}
; 938  : 
; 939  : 	return false;

  0008c	32 c0		 xor	 al, al
  0008e	5b		 pop	 ebx

; 940  : }

  0008f	5d		 pop	 ebp
  00090	c2 14 00	 ret	 20			; 00000014H
?PathFinding3@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ENDP	; MapClass::PathFinding3
_TEXT	ENDS
PUBLIC	?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z	; MapClass::PathFinding4
; Function compile flags: /Ogtp
;	COMDAT ?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
_a$ = 24						; size = 4
?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z PROC	; MapClass::PathFinding4, COMDAT
; _this$ = ecx

; 944  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 945  : 	bool Success = this->path->FindPath3(sx, sy, tx, ty, true);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 10	 mov	 ebx, DWORD PTR _tx$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 14	 mov	 edi, DWORD PTR _ty$[ebp]
  0000f	6a 01		 push	 1
  00011	57		 push	 edi
  00012	53		 push	 ebx
  00013	8b f1		 mov	 esi, ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0001d	e8 00 00 00 00	 call	 ?FindPath3@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath3

; 946  : 
; 947  : 	if ( Success == false )

  00022	84 c0		 test	 al, al
  00024	75 18		 jne	 SHORT $LN17@PathFindin@3

; 948  : 	{
; 949  : 		Success = this->path->FindPath3(sx, sy, tx, ty, false);

  00026	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00029	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  0002c	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0002f	6a 00		 push	 0
  00031	57		 push	 edi
  00032	53		 push	 ebx
  00033	52		 push	 edx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?FindPath3@PATH@@QAE_NHHHH_N@Z ; PATH::FindPath3

; 950  : 	}
; 951  : 
; 952  : 	if ( Success != false )

  0003a	84 c0		 test	 al, al
  0003c	74 4c		 je	 SHORT $LN4@PathFindin@3
$LN17@PathFindin@3:

; 953  : 	{
; 954  : 		int lc3 = this->path->GetPath();

  0003e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00041	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 955  : 
; 956  : 		if ( lc3 > 1 )

  00044	83 f8 01	 cmp	 eax, 1
  00047	7e 41		 jle	 SHORT $LN4@PathFindin@3

; 957  : 		{
; 958  : 			a->PathNum = lc3;

  00049	8b 7d 18	 mov	 edi, DWORD PTR _a$[ebp]
  0004c	89 07		 mov	 DWORD PTR [edi], eax

; 959  : 			BYTE * px = this->path->GetPathX();

  0004e	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]

; 960  : 			BYTE * py = this->path->GetPathY();
; 961  : 
; 962  : 			for (int n=0;n<a->PathNum;n++)

  00051	33 d2		 xor	 edx, edx
  00053	8d 8e 00 02 00
	00		 lea	 ecx, DWORD PTR [esi+512]
  00059	85 c0		 test	 eax, eax
  0005b	7e 1d		 jle	 SHORT $LN1@PathFindin@3
  0005d	83 c6 0c	 add	 esi, 12			; 0000000cH
  00060	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00063	2b f1		 sub	 esi, ecx
$LL3@PathFindin@3:

; 963  : 			{
; 964  : 				a->PathX[n] = px[n];

  00065	0f b6 1c 0e	 movzx	 ebx, BYTE PTR [esi+ecx]
  00069	89 58 c4	 mov	 DWORD PTR [eax-60], ebx

; 965  : 				a->PathY[n] = py[n];

  0006c	0f b6 19	 movzx	 ebx, BYTE PTR [ecx]
  0006f	89 18		 mov	 DWORD PTR [eax], ebx
  00071	42		 inc	 edx
  00072	83 c0 04	 add	 eax, 4
  00075	41		 inc	 ecx
  00076	3b 17		 cmp	 edx, DWORD PTR [edi]
  00078	7c eb		 jl	 SHORT $LL3@PathFindin@3
$LN1@PathFindin@3:

; 966  : 			}
; 967  : 
; 968  : 			a->CurrentPath = 0;

  0007a	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 969  : 			return 1;

  00083	b0 01		 mov	 al, 1
  00085	5b		 pop	 ebx

; 975  : }

  00086	5d		 pop	 ebp
  00087	c2 14 00	 ret	 20			; 00000014H
$LN4@PathFindin@3:
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi

; 970  : 		}
; 971  : 
; 972  : 	}
; 973  : 
; 974  : 	return false;

  0008c	32 c0		 xor	 al, al
  0008e	5b		 pop	 ebx

; 975  : }

  0008f	5d		 pop	 ebp
  00090	c2 14 00	 ret	 20			; 00000014H
?PathFinding4@MapClass@@QAE_NHHHHPAUPATH_t@@@Z ENDP	; MapClass::PathFinding4
_TEXT	ENDS
PUBLIC	?free@MapClass@@QAEXXZ				; MapClass::free
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\mapclass.h
;	COMDAT ?free@MapClass@@QAEXXZ
_TEXT	SEGMENT
?free@MapClass@@QAEXXZ PROC				; MapClass::free, COMDAT
; _this$ = ecx

; 64   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 65   : 		if ( this->m_attrbuf != 0 )

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax
  00008	74 0e		 je	 SHORT $LN2@free

; 66   : 		{
; 67   : 			GlobalFree(this->m_attrbuf);

  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalFree@4

; 68   : 			this->m_attrbuf=0;

  00011	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN2@free:

; 69   : 		}
; 70   : 
; 71   : 		if ( this->path != 0 )

  00018	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001b	85 c0		 test	 eax, eax
  0001d	74 10		 je	 SHORT $LN1@free

; 72   : 		{
; 73   : 			delete this->path;

  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4

; 74   : 			this->path = 0;

  00028	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN1@free:
  0002f	5e		 pop	 esi

; 75   : 		}
; 76   : 	}	// line : 147

  00030	c3		 ret	 0
?free@MapClass@@QAEXXZ ENDP				; MapClass::free
_TEXT	ENDS
PUBLIC	??1MapClass@@UAE@XZ				; MapClass::~MapClass
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\mapclass.cpp
;	COMDAT ??1MapClass@@UAE@XZ
_TEXT	SEGMENT
??1MapClass@@UAE@XZ PROC				; MapClass::~MapClass, COMDAT
; _this$ = ecx

; 39   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 40   : 	this->free();

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7MapClass@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	74 0e		 je	 SHORT $LN5@MapClass
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalFree@4
  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN5@MapClass:
  0001e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00021	85 c0		 test	 eax, eax
  00023	74 10		 je	 SHORT $LN4@MapClass
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
  0002e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN4@MapClass:

; 41   : }

  00035	68 00 00 00 00	 push	 OFFSET ??1CMapItem@@UAE@XZ ; CMapItem::~CMapItem
  0003a	68 2c 01 00 00	 push	 300			; 0000012cH
  0003f	68 48 04 00 00	 push	 1096			; 00000448H
  00044	83 c6 20	 add	 esi, 32			; 00000020H
  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
??1MapClass@@UAE@XZ ENDP				; MapClass::~MapClass
_TEXT	ENDS
PUBLIC	?LoadMapAttr@MapClass@@QAEXPADH@Z		; MapClass::LoadMapAttr
; Function compile flags: /Ogtp
;	COMDAT ?LoadMapAttr@MapClass@@QAEXPADH@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_MapNumber$ = 12					; size = 4
?LoadMapAttr@MapClass@@QAEXPADH@Z PROC			; MapClass::LoadMapAttr, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  : 	if (this->AttrLoad(filename) == FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?AttrLoad@MapClass@@QAEHPAD@Z ; MapClass::AttrLoad
  0000f	85 c0		 test	 eax, eax
  00011	75 26		 jne	 SHORT $LN4@LoadMapAtt

; 181  : 	{
; 182  : 		MsgBox( lMsg.Get( MSGGET ( 2, 52 )));

  00013	68 34 02 00 00	 push	 564			; 00000234H
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0001d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 183  : 	}
; 184  : 
; 185  : 	this->thisMapNumber = MapNumber;

  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _MapNumber$[ebp]
  0002b	83 c4 04	 add	 esp, 4
  0002e	89 8e 04 07 05
	00		 mov	 DWORD PTR [esi+329476], ecx
  00034	5e		 pop	 esi

; 186  : }

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN4@LoadMapAtt:

; 183  : 	}
; 184  : 
; 185  : 	this->thisMapNumber = MapNumber;

  00039	8b 55 0c	 mov	 edx, DWORD PTR _MapNumber$[ebp]
  0003c	89 96 04 07 05
	00		 mov	 DWORD PTR [esi+329476], edx
  00042	5e		 pop	 esi

; 186  : }

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?LoadMapAttr@MapClass@@QAEXPADH@Z ENDP			; MapClass::LoadMapAttr
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GMapClass@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMapClass@@UAEPAXI@Z PROC				; MapClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1MapClass@@UAE@XZ	; MapClass::~MapClass
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GMapClass@@UAEPAXI@Z ENDP				; MapClass::`scalar deleting destructor'
_TEXT	ENDS
END
