; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\LogToFile.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_07EIPNPBIJ@LOGDATA?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0CLogToFile@@QAE@QAD0H@Z			; CLogToFile::CLogToFile
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
;	COMDAT ??_C@_07EIPNPBIJ@LOGDATA?$AA@
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\logtofile.cpp
CONST	SEGMENT
??_C@_07EIPNPBIJ@LOGDATA?$AA@ DB 'LOGDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CLogToFile@@QAE@QAD0H@Z
_TEXT	SEGMENT
_LogFileName$ = 8					; size = 4
_LogDirectoryName$ = 12					; size = 4
_bWithDate$ = 16					; size = 4
??0CLogToFile@@QAE@QAD0H@Z PROC				; CLogToFile::CLogToFile, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   : 	if (strcmp(LogFileName, "") == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _LogFileName$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0000f	8b c8		 mov	 ecx, eax
  00011	53		 push	 ebx
$LL11@CLogToFile:
  00012	8a 19		 mov	 bl, BYTE PTR [ecx]
  00014	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00016	75 1a		 jne	 SHORT $LN12@CLogToFile
  00018	84 db		 test	 bl, bl
  0001a	74 12		 je	 SHORT $LN13@CLogToFile
  0001c	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  0001f	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00022	75 0e		 jne	 SHORT $LN12@CLogToFile
  00024	83 c1 02	 add	 ecx, 2
  00027	83 c2 02	 add	 edx, 2
  0002a	84 db		 test	 bl, bl
  0002c	75 e4		 jne	 SHORT $LL11@CLogToFile
$LN13@CLogToFile:
  0002e	33 c9		 xor	 ecx, ecx
  00030	eb 05		 jmp	 SHORT $LN14@CLogToFile
$LN12@CLogToFile:
  00032	1b c9		 sbb	 ecx, ecx
  00034	83 d9 ff	 sbb	 ecx, -1
$LN14@CLogToFile:
  00037	5b		 pop	 ebx
  00038	85 c9		 test	 ecx, ecx
  0003a	75 13		 jne	 SHORT $LN4@CLogToFile

; 19   : 	{
; 20   : 		strcpy(this->m_szLogFileName , "LOGDATA");

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07EIPNPBIJ@LOGDATA?$AA@
  00041	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00044	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07EIPNPBIJ@LOGDATA?$AA@+4
  0004a	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 21   : 	}
; 22   : 	else

  0004d	eb 0f		 jmp	 SHORT $LN3@CLogToFile
$LN4@CLogToFile:

; 23   : 	{
; 24   : 		strcpy(this->m_szLogFileName , LogFileName);

  0004f	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
  00052	2b d0		 sub	 edx, eax
$LL7@CLogToFile:
  00054	8a 08		 mov	 cl, BYTE PTR [eax]
  00056	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00059	40		 inc	 eax
  0005a	84 c9		 test	 cl, cl
  0005c	75 f6		 jne	 SHORT $LL7@CLogToFile
$LN3@CLogToFile:

; 25   : 	}
; 26   : 
; 27   : 	
; 28   : 	if (!strcmp(LogDirectoryName, ""))

  0005e	8b 75 0c	 mov	 esi, DWORD PTR _LogDirectoryName$[ebp]
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00066	8b c6		 mov	 eax, esi
$LL15@CLogToFile:
  00068	8a 10		 mov	 dl, BYTE PTR [eax]
  0006a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0006c	75 1a		 jne	 SHORT $LN16@CLogToFile
  0006e	84 d2		 test	 dl, dl
  00070	74 12		 je	 SHORT $LN17@CLogToFile
  00072	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00075	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00078	75 0e		 jne	 SHORT $LN16@CLogToFile
  0007a	83 c0 02	 add	 eax, 2
  0007d	83 c1 02	 add	 ecx, 2
  00080	84 d2		 test	 dl, dl
  00082	75 e4		 jne	 SHORT $LL15@CLogToFile
$LN17@CLogToFile:
  00084	33 c0		 xor	 eax, eax
  00086	eb 05		 jmp	 SHORT $LN18@CLogToFile
$LN16@CLogToFile:
  00088	1b c0		 sbb	 eax, eax
  0008a	83 d8 ff	 sbb	 eax, -1
$LN18@CLogToFile:
  0008d	85 c0		 test	 eax, eax
  0008f	75 0c		 jne	 SHORT $LN2@CLogToFile

; 29   : 	{
; 30   : 		strcpy(this->m_szLogDirectoryName , "LOG");

  00091	c7 87 08 01 00
	00 4c 4f 47 00	 mov	 DWORD PTR [edi+264], 4673356 ; 00474f4cH

; 31   : 	}
; 32   : 	else

  0009b	eb 14		 jmp	 SHORT $LN1@CLogToFile
$LN2@CLogToFile:

; 33   : 	{
; 34   : 		strcpy(this->m_szLogDirectoryName  , LogDirectoryName);

  0009d	8d 97 08 01 00
	00		 lea	 edx, DWORD PTR [edi+264]
  000a3	8b c6		 mov	 eax, esi
  000a5	2b d6		 sub	 edx, esi
$LL8@CLogToFile:
  000a7	8a 08		 mov	 cl, BYTE PTR [eax]
  000a9	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000ac	40		 inc	 eax
  000ad	84 c9		 test	 cl, cl
  000af	75 f6		 jne	 SHORT $LL8@CLogToFile
$LN1@CLogToFile:

; 35   : 	}
; 36   : 	
; 37   : 	this->m_bWithDate  = bWithDate;	

  000b1	8b 55 10	 mov	 edx, DWORD PTR _bWithDate$[ebp]

; 38   : 
; 39   : 	CreateDirectory(LogDirectoryName, NULL);

  000b4	6a 00		 push	 0
  000b6	56		 push	 esi
  000b7	89 97 0c 02 01
	00		 mov	 DWORD PTR [edi+66060], edx
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 40   : 
; 41   : 	InitializeCriticalSection(&this->m_critLogToFile );

  000c3	8d 87 10 02 01
	00		 lea	 eax, DWORD PTR [edi+66064]
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 42   : 	
; 43   : }

  000d0	8b c7		 mov	 eax, edi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH
??0CLogToFile@@QAE@QAD0H@Z ENDP				; CLogToFile::CLogToFile
_TEXT	ENDS
PUBLIC	??1CLogToFile@@QAE@XZ				; CLogToFile::~CLogToFile
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1CLogToFile@@QAE@XZ
_TEXT	SEGMENT
??1CLogToFile@@QAE@XZ PROC				; CLogToFile::~CLogToFile, COMDAT
; _this$ = ecx

; 48   : 	DeleteCriticalSection(&this->m_critLogToFile );

  00000	81 c1 10 02 01
	00		 add	 ecx, 66064		; 00010210H
  00006	51		 push	 ecx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 49   : }

  0000d	c3		 ret	 0
??1CLogToFile@@QAE@XZ ENDP				; CLogToFile::~CLogToFile
_TEXT	ENDS
PUBLIC	??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_02DPNLHKJD@a?$CL?$AA@			; `string'
PUBLIC	??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Output@CLogToFile@@QAAXPADZZ			; CLogToFile::Output
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	_fclose:PROC
EXTRN	_fprintf:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	_vsprintf:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@ DB '%d:%d:%d  %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNLHKJD@a?$CL?$AA@
CONST	SEGMENT
??_C@_02DPNLHKJD@a?$CL?$AA@ DB 'a+', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@
CONST	SEGMENT
??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@ DB '%'
	DB	's\%s %04d-%02d-%02d_%s.txt', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Output@CLogToFile@@QAAXPADZZ
_TEXT	SEGMENT
_strSystime$ = -280					; size = 16
_szLogFileName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_fmt$ = 12						; size = 4
?Output@CLogToFile@@QAAXPADZZ PROC			; CLogToFile::Output, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00018	57		 push	 edi

; 54   : 	va_list argptr;
; 55   : 	int iChrWritten;
; 56   : 	char szLogFileName[260]; // Is StringZero Terminated
; 57   : 
; 58   : 	SYSTEMTIME strSystime;
; 59   : 	
; 60   : 	EnterCriticalSection(&this->m_critLogToFile );

  00019	8d 9e 10 02 01
	00		 lea	 ebx, DWORD PTR [esi+66064]
  0001f	53		 push	 ebx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 61   : 
; 62   : 	va_start(argptr, fmt);
; 63   : 	iChrWritten=vsprintf(this->m_cBUFFER , fmt, argptr);

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00029	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	8d be 0c 02 00
	00		 lea	 edi, DWORD PTR [esi+524]
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 _vsprintf
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 64   : 	va_end(argptr);
; 65   : 
; 66   : 	GetLocalTime(&strSystime);

  0003d	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _strSystime$[ebp]
  00043	52		 push	 edx
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 67   : 
; 68   : 	wsprintf(szLogFileName, "%s\\%s %04d-%02d-%02d_%s.txt",
; 69   : 		&this->m_szLogDirectoryName[0] , &this->m_szLogFileName [0],
; 70   : 		strSystime.wYear, strSystime.wMonth, strSystime.wDay,
; 71   : 		szServerName);

  0004a	0f b7 85 ee fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp+6]
  00051	0f b7 8d ea fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp+2]
  00058	0f b7 95 e8 fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$[ebp]
  0005f	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  00064	50		 push	 eax
  00065	51		 push	 ecx
  00066	52		 push	 edx
  00067	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0006a	50		 push	 eax
  0006b	8d 8e 08 01 00
	00		 lea	 ecx, DWORD PTR [esi+264]
  00071	51		 push	 ecx
  00072	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szLogFileName$[ebp]
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@
  0007d	52		 push	 edx
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 72   : 
; 73   : 	if ( (this->m_fLogFile = fopen(szLogFileName, "a+"))==0)	//flipe +'0

  00084	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szLogFileName$[ebp]
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_02DPNLHKJD@a?$CL?$AA@
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _fopen
  00095	83 c4 28	 add	 esp, 40			; 00000028H
  00098	89 06		 mov	 DWORD PTR [esi], eax
  0009a	85 c0		 test	 eax, eax

; 74   : 	{
; 75   : 		LeaveCriticalSection(&this->m_critLogToFile );	
; 76   : 	}
; 77   : 	else

  0009c	74 4b		 je	 SHORT $LN7@Output

; 78   : 	{
; 79   : 		if (this->m_bWithDate ==0)

  0009e	83 be 0c 02 01
	00 00		 cmp	 DWORD PTR [esi+66060], 0

; 80   : 		{
; 81   : 			fprintf(this->m_fLogFile , "%s\n", this->m_cBUFFER);

  000a5	57		 push	 edi
  000a6	75 10		 jne	 SHORT $LN2@Output
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _fprintf
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 82   : 		}
; 83   : 		else

  000b6	eb 26		 jmp	 SHORT $LN1@Output
$LN2@Output:

; 84   : 		{
; 85   : 			fprintf(this->m_fLogFile , "%d:%d:%d  %s\n", strSystime.wHour, strSystime.wMinute, strSystime.wSecond, this->m_cBUFFER);

  000b8	0f b7 8d f4 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp+12]
  000bf	0f b7 95 f2 fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$[ebp+10]
  000c6	51		 push	 ecx
  000c7	0f b7 8d f0 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp+8]
  000ce	52		 push	 edx
  000cf	51		 push	 ecx
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _fprintf
  000db	83 c4 18	 add	 esp, 24			; 00000018H
$LN1@Output:

; 86   : 		}
; 87   : 		fclose(this->m_fLogFile );

  000de	8b 16		 mov	 edx, DWORD PTR [esi]
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 _fclose
  000e6	83 c4 04	 add	 esp, 4
$LN7@Output:

; 88   : 
; 89   : 		LeaveCriticalSection(&this->m_critLogToFile );

  000e9	53		 push	 ebx
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 90   : 	}
; 91   : }

  000f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	33 cd		 xor	 ecx, ebp
  000f7	5b		 pop	 ebx
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
?Output@CLogToFile@@QAAXPADZZ ENDP			; CLogToFile::Output
_TEXT	ENDS
END
