; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\MonsterItemMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CMonsterItemMng@@6B@			; CMonsterItemMng::`vftable'
PUBLIC	??0CMonsterItemMng@@QAE@XZ			; CMonsterItemMng::CMonsterItemMng
PUBLIC	??_R4CMonsterItemMng@@6B@			; CMonsterItemMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterItemMng@@@8			; CMonsterItemMng `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterItemMng@@8				; CMonsterItemMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterItemMng@@8				; CMonsterItemMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterItemMng@@8		; CMonsterItemMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMonsterItemMng@@UAEPAXI@Z:PROC		; CMonsterItemMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMonsterItemMng@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\monsteritemmng.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterItemMng@@8 DD FLAT:??_R0?AVCMonsterItemMng@@@8 ; CMonsterItemMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterItemMng@@8
rdata$r	SEGMENT
??_R2CMonsterItemMng@@8 DD FLAT:??_R1A@?0A@EA@CMonsterItemMng@@8 ; CMonsterItemMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterItemMng@@8
rdata$r	SEGMENT
??_R3CMonsterItemMng@@8 DD 00H				; CMonsterItemMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterItemMng@@@8
_DATA	SEGMENT
??_R0?AVCMonsterItemMng@@@8 DD FLAT:??_7type_info@@6B@	; CMonsterItemMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterItemMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMonsterItemMng@@6B@
rdata$r	SEGMENT
??_R4CMonsterItemMng@@6B@ DD 00H			; CMonsterItemMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterItemMng@@@8
	DD	FLAT:??_R3CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_7CMonsterItemMng@@6B@
CONST	SEGMENT
??_7CMonsterItemMng@@6B@ DD FLAT:??_R4CMonsterItemMng@@6B@ ; CMonsterItemMng::`vftable'
	DD	FLAT:??_ECMonsterItemMng@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMonsterItemMng@@QAE@XZ
_TEXT	SEGMENT
??0CMonsterItemMng@@QAE@XZ PROC				; CMonsterItemMng::CMonsterItemMng, COMDAT
; _this$ = ecx

; 15   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMonsterItemMng@@6B@

; 16   : 	return;
; 17   : }

  00008	c3		 ret	 0
??0CMonsterItemMng@@QAE@XZ ENDP				; CMonsterItemMng::CMonsterItemMng
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Clear@CMonsterItemMng@@QAEXXZ			; CMonsterItemMng::Clear
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Clear@CMonsterItemMng@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMonsterItemMng@@QAEXXZ PROC			; CMonsterItemMng::Clear, COMDAT
; _this$ = ecx

; 55   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 56   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  00004	68 60 09 00 00	 push	 2400			; 00000960H
  00009	8d 86 64 09 00
	00		 lea	 eax, DWORD PTR [esi+2404]
  0000f	6a 00		 push	 0
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 c6 04	 add	 esi, 4
  0001d	bf 58 02 00 00	 mov	 edi, 600		; 00000258H
$LL3@Clear:

; 57   : 
; 58   : 	for (int i =0 ; i< MAX_LEVEL_MONSTER ; i++ )
; 59   : 	{
; 60   : 		delete this->m_MonsterInvenItems[i];

  00022	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	83 c4 04	 add	 esp, 4
  0002d	83 c6 04	 add	 esi, 4
  00030	4f		 dec	 edi
  00031	75 ef		 jne	 SHORT $LL3@Clear

; 61   : 	}
; 62   : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	c3		 ret	 0
?Clear@CMonsterItemMng@@QAEXXZ ENDP			; CMonsterItemMng::Clear
_TEXT	ENDS
PUBLIC	__real@4059000000000000
PUBLIC	?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z	; CMonsterItemMng::InsertItem
EXTRN	_rand:PROC
EXTRN	?Convert@CItem@@QAEXHEEEEEEE@Z:PROC		; CItem::Convert
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_monsterlevel$ = 8					; size = 4
_type$ = 12						; size = 4
tv188 = 16						; size = 4
_index$ = 16						; size = 4
_itemlevel$ = 20					; size = 4
_op1$ = 24						; size = 4
_op2$ = 28						; size = 4
_op3$ = 32						; size = 4
?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z PROC		; CMonsterItemMng::InsertItem, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 66   : 	if ( monsterlevel > MAX_LEVEL_MONSTER || monsterlevel < 0 )

  00004	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	3d 58 02 00 00	 cmp	 eax, 600		; 00000258H
  0000f	0f 87 9b 00 00
	00		 ja	 $LN4@InsertItem

; 69   : 	}
; 70   : 
; 71   : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00015	57		 push	 edi
  00016	8b bc 81 64 09
	00 00		 mov	 edi, DWORD PTR [ecx+eax*4+2404]

; 72   : 
; 73   : 	if ( itemcount >= MAX_ITEM_IN_MONSTER )

  0001d	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  00023	7c 09		 jl	 SHORT $LN3@InsertItem

; 74   : 	{
; 75   : 		return -1;

  00025	0c ff		 or	 al, 255			; 000000ffH
  00027	5f		 pop	 edi

; 96   : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 1c 00	 ret	 28			; 0000001cH
$LN3@InsertItem:

; 76   : 	}
; 77   : 
; 78   : 	CItem * item = &this->m_MonsterInvenItems[monsterlevel][itemcount];
; 79   : 	int item_type = (type * MAX_SUBTYPE_ITEMS) + index;
; 80   : 	item->m_Level = itemlevel;
; 81   : 	item->Convert(item_type, op1, op2, op3, 0, 0,0, CURRENT_DB_VERSION);

  0002e	8b 55 1c	 mov	 edx, DWORD PTR _op2$[ebp]
  00031	53		 push	 ebx
  00032	8b 5d 0c	 mov	 ebx, DWORD PTR _type$[ebp]
  00035	56		 push	 esi
  00036	8b f7		 mov	 esi, edi
  00038	6a 03		 push	 3
  0003a	69 f6 a8 00 00
	00		 imul	 esi, 168		; 000000a8H
  00040	03 74 81 04	 add	 esi, DWORD PTR [ecx+eax*4+4]
  00044	8b 4d 20	 mov	 ecx, DWORD PTR _op3$[ebp]
  00047	66 8b 45 14	 mov	 ax, WORD PTR _itemlevel$[ebp]
  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	51		 push	 ecx
  00052	8b cb		 mov	 ecx, ebx
  00054	c1 e1 09	 shl	 ecx, 9
  00057	03 4d 10	 add	 ecx, DWORD PTR _index$[ebp]
  0005a	66 89 46 08	 mov	 WORD PTR [esi+8], ax
  0005e	8b 45 18	 mov	 eax, DWORD PTR _op1$[ebp]
  00061	52		 push	 edx
  00062	50		 push	 eax
  00063	51		 push	 ecx
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEE@Z ; CItem::Convert

; 82   : 
; 83   : 	if ( type == 13 && index == 10 )

  0006b	83 fb 0d	 cmp	 ebx, 13			; 0000000dH
  0006e	75 21		 jne	 SHORT $LN2@InsertItem
  00070	83 7d 10 0a	 cmp	 DWORD PTR _index$[ebp], 10 ; 0000000aH
  00074	75 1b		 jne	 SHORT $LN2@InsertItem

; 84   : 	{
; 85   : 		int rd = rand() % 100;

  00076	e8 00 00 00 00	 call	 _rand
  0007b	99		 cdq
  0007c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00081	f7 f9		 idiv	 ecx

; 86   : 		item->m_Durability = rd + 100.0f;

  00083	89 55 10	 mov	 DWORD PTR tv188[ebp], edx
  00086	db 45 10	 fild	 DWORD PTR tv188[ebp]
  00089	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@4059000000000000

; 87   : 	}
; 88   : 	else

  0008f	eb 03		 jmp	 SHORT $LN9@InsertItem
$LN2@InsertItem:

; 89   : 	{
; 90   : 		item->m_Durability = item->m_BaseDurability;

  00091	d9 46 2c	 fld	 DWORD PTR [esi+44]
$LN9@InsertItem:

; 91   : 	}
; 92   : 
; 93   : 	itemcount ++;
; 94   : 	this->m_iMonsterInvenItemCount[monsterlevel] = itemcount;

  00094	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00097	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  0009a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009d	47		 inc	 edi
  0009e	5e		 pop	 esi
  0009f	89 bc 82 64 09
	00 00		 mov	 DWORD PTR [edx+eax*4+2404], edi
  000a6	5b		 pop	 ebx

; 95   : 	return 0;

  000a7	32 c0		 xor	 al, al
  000a9	5f		 pop	 edi

; 96   : }

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 1c 00	 ret	 28			; 0000001cH
$LN4@InsertItem:

; 67   : 	{
; 68   : 		return -1;

  000b0	0c ff		 or	 al, 255			; 000000ffH

; 96   : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 1c 00	 ret	 28			; 0000001cH
?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ENDP		; CMonsterItemMng::InsertItem
_TEXT	ENDS
PUBLIC	?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z	; CMonsterItemMng::GetItem
; Function compile flags: /Ogtp
;	COMDAT ?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z
_TEXT	SEGMENT
_monsterlevel$ = 8					; size = 4
?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z PROC		; CMonsterItemMng::GetItem, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 101  : 	if ( monsterlevel > MAX_LEVEL_MONSTER || monsterlevel < 0 )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _monsterlevel$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fb 58 02 00
	00		 cmp	 ebx, 600		; 00000258H
  00010	77 30		 ja	 SHORT $LN2@GetItem

; 104  : 	}
; 105  : 
; 106  : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00012	56		 push	 esi
  00013	8b b4 9f 64 09
	00 00		 mov	 esi, DWORD PTR [edi+ebx*4+2404]

; 107  : 
; 108  : 	if ( itemcount <= 0 )

  0001a	85 f6		 test	 esi, esi
  0001c	7f 09		 jg	 SHORT $LN1@GetItem

; 109  : 	{
; 110  : 		return NULL;

  0001e	5e		 pop	 esi
  0001f	5f		 pop	 edi
  00020	33 c0		 xor	 eax, eax
  00022	5b		 pop	 ebx

; 115  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN1@GetItem:

; 111  : 	}
; 112  : 
; 113  : 	int itemindex = rand() % itemcount;

  00027	e8 00 00 00 00	 call	 _rand
  0002c	99		 cdq
  0002d	f7 fe		 idiv	 esi
  0002f	5e		 pop	 esi
  00030	8b c2		 mov	 eax, edx

; 114  : 	return &this->m_MonsterInvenItems[monsterlevel][itemindex];

  00032	69 c0 a8 00 00
	00		 imul	 eax, 168		; 000000a8H
  00038	03 44 9f 04	 add	 eax, DWORD PTR [edi+ebx*4+4]
  0003c	5f		 pop	 edi
  0003d	5b		 pop	 ebx

; 115  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN2@GetItem:
  00042	5f		 pop	 edi

; 102  : 	{
; 103  : 		return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	5b		 pop	 ebx

; 115  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z ENDP		; CMonsterItemMng::GetItem
_TEXT	ENDS
PUBLIC	??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@ ; `string'
PUBLIC	??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@	; `string'
PUBLIC	_monsterlevel$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z	; CMonsterItemMng::gObjGiveItemSearch
EXTRN	?gKeyOfDevilSquareDropRate@@3HA:DWORD		; gKeyOfDevilSquareDropRate
EXTRN	?gDevilSquareEvent@@3HA:DWORD			; gDevilSquareEvent
EXTRN	?gEyesOfDevilSquareDropRate@@3HA:DWORD		; gEyesOfDevilSquareDropRate
EXTRN	?zzzItemLevel@@YAHHHH@Z:PROC			; zzzItemLevel
EXTRN	?GetLevelItem@@YAHHHH@Z:PROC			; GetLevelItem
EXTRN	?g_MaxItemIndexOfEachItemType@@3PAHA:BYTE	; g_MaxItemIndexOfEachItemType
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@
CONST	SEGMENT
??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@ DB 'error-L3 :'
	DB	' Monster Level Overflow~ %s %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@
CONST	SEGMENT
??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@ DB 'MonsterItemMng.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -84					; size = 4
_incount$ = -80						; size = 4
_monsterlevel$GSCopy$ = -76				; size = 4
_BallTable$ = -72					; size = 68
__$ArrayPad$ = -4					; size = 4
_monsterlevel$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z PROC	; CMonsterItemMng::gObjGiveItemSearch, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _monsterlevel$[ebp]
  00013	89 4d ac	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 119  : 	int result;
; 120  : 	int incount = 0;

  00016	89 45 b4	 mov	 DWORD PTR _monsterlevel$GSCopy$[ebp], eax
  00019	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _incount$[ebp], 0

; 121  : 	int type;
; 122  : 	int index;
; 123  : 
; 124  : 	if ( monsterlevel > MAX_LEVEL_MONSTER-1 )

  00020	3d 57 02 00 00	 cmp	 eax, 599		; 00000257H
  00025	7e 26		 jle	 SHORT $LN81@gObjGiveIt

; 125  : 	{
; 126  : 		LogAdd(LOG_BLACK, "error-L3 : Monster Level Overflow~ %s %d", __FILE__, __LINE__ );

  00027	6a 7e		 push	 126			; 0000007eH
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@
  00033	6a 00		 push	 0
  00035	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 385  : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN81@gObjGiveIt:
  0004d	53		 push	 ebx
  0004e	56		 push	 esi
  0004f	57		 push	 edi

; 127  : 		return;
; 128  : 	}
; 129  : 
; 130  : 	int BallTable[17];
; 131  : 
; 132  : 	BallTable[0] = 7;

  00050	c7 45 b8 07 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp], 7

; 133  : 	BallTable[1] = 8;

  00057	c7 45 bc 08 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+4], 8

; 134  : 	BallTable[2] = 9;

  0005e	c7 45 c0 09 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+8], 9

; 135  : 	BallTable[3] = 10;

  00065	c7 45 c4 0a 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+12], 10 ; 0000000aH

; 136  : 	BallTable[4] = 11;

  0006c	c7 45 c8 0b 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+16], 11 ; 0000000bH

; 137  : 	BallTable[5] = 12;

  00073	c7 45 cc 0c 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+20], 12 ; 0000000cH

; 138  : 	BallTable[6] = 13;

  0007a	c7 45 d0 0d 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+24], 13 ; 0000000dH

; 139  : 	BallTable[7] = 14;

  00081	c7 45 d4 0e 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+28], 14 ; 0000000eH

; 140  : 	BallTable[8] = 16;

  00088	c7 45 d8 10 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+32], 16 ; 00000010H

; 141  : 	BallTable[9] = 17;

  0008f	c7 45 dc 11 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+36], 17 ; 00000011H

; 142  : 	BallTable[10] = 18;

  00096	c7 45 e0 12 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+40], 18 ; 00000012H

; 143  : 	BallTable[11] = 19;

  0009d	c7 45 e4 13 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+44], 19 ; 00000013H

; 144  : 	BallTable[12] = 21;

  000a4	c7 45 e8 15 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+48], 21 ; 00000015H

; 145  : 	BallTable[13] = 22;

  000ab	c7 45 ec 16 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+52], 22 ; 00000016H

; 146  : 	BallTable[14] = 23;

  000b2	c7 45 f0 17 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+56], 23 ; 00000017H

; 147  : 	BallTable[15] = 24;

  000b9	c7 45 f4 18 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+60], 24 ; 00000018H

; 148  : 	BallTable[16] = 35;

  000c0	c7 45 f8 23 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+64], 35 ; 00000023H
$LL116@gObjGiveIt:
  000c7	8b 5d 0c	 mov	 ebx, DWORD PTR _maxlevel$[ebp]
  000ca	8d 9b 00 00 00
	00		 npad	 6
$LL80@gObjGiveIt:

; 149  : 
; 150  : 	while ( true )
; 151  : 	{
; 152  : 		if ( (rand() % 20) ==  0 ) 

  000d0	e8 00 00 00 00	 call	 _rand
  000d5	99		 cdq
  000d6	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000db	f7 f9		 idiv	 ecx
  000dd	85 d2		 test	 edx, edx
  000df	0f 85 e8 00 00
	00		 jne	 $LN78@gObjGiveIt

; 153  : 		{
; 154  : 			if ( (rand() % 2)	!= 0 )

  000e5	e8 00 00 00 00	 call	 _rand
  000ea	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000ef	79 05		 jns	 SHORT $LN122@gObjGiveIt
  000f1	48		 dec	 eax
  000f2	83 c8 fe	 or	 eax, -2			; fffffffeH
  000f5	40		 inc	 eax
$LN122@gObjGiveIt:
  000f6	74 1a		 je	 SHORT $LN77@gObjGiveIt

; 155  : 			{
; 156  : 				type = MAX_TYPE_ITEMS-1;

  000f8	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 157  : 				index = rand() % (g_MaxItemIndexOfEachItemType[type]+1);

  000fd	e8 00 00 00 00	 call	 _rand
  00102	8b 0d 3c 00 00
	00		 mov	 ecx, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA+60
  00108	99		 cdq
  00109	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0010c	f7 f9		 idiv	 ecx
  0010e	8b f2		 mov	 esi, edx

; 158  : 			}
; 159  : 			else

  00110	eb 1f		 jmp	 SHORT $LN57@gObjGiveIt
$LN77@gObjGiveIt:

; 160  : 			{
; 161  : 				type = 12;

  00112	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH

; 162  : 				index = BallTable[rand() % 17];

  00117	e8 00 00 00 00	 call	 _rand
  0011c	99		 cdq
  0011d	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00122	f7 f9		 idiv	 ecx
  00124	8b 74 95 b8	 mov	 esi, DWORD PTR _BallTable$[ebp+edx*4]

; 198  : 		{
; 199  : 			continue;
; 200  : 		}
; 201  : 
; 202  :         if ( (type == 13 && index < 8) || 
; 203  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 204  : 			(type == 12 && index == 15) || 
; 205  : 			(type == 13 && index == 14) || 
; 206  : 			(type == 14 && index == 31 ) )

  00128	83 fe 0f	 cmp	 esi, 15			; 0000000fH
$LN128@gObjGiveIt:
  0012b	0f 84 9e 01 00
	00		 je	 $LN56@gObjGiveIt
$LN57@gObjGiveIt:

; 322  : 		{
; 323  : 			result = GetLevelItem(type, index, monsterlevel);

  00131	8b 4d b4	 mov	 ecx, DWORD PTR _monsterlevel$GSCopy$[ebp]
  00134	51		 push	 ecx
  00135	56		 push	 esi
  00136	57		 push	 edi
  00137	e8 00 00 00 00	 call	 ?GetLevelItem@@YAHHHH@Z	; GetLevelItem
  0013c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 324  : 
; 325  : 			if ( result >= 0 )

  0013f	85 c0		 test	 eax, eax
  00141	78 60		 js	 SHORT $LN2@gObjGiveIt

; 326  : 			{
; 327  : 				if ( (type == 13 && index == 10) || (type == 12 && index == 11 ) )

  00143	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  00146	0f 85 f3 02 00
	00		 jne	 $LN16@gObjGiveIt
  0014c	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0014f	0f 84 fc 02 00
	00		 je	 $LN17@gObjGiveIt
$LN18@gObjGiveIt:

; 339  : 				else if ( result <= maxlevel )

  00155	3b c3		 cmp	 eax, ebx
  00157	7f 4a		 jg	 SHORT $LN2@gObjGiveIt

; 340  : 				{
; 341  : 					if ( type == 12 )

  00159	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  0015c	75 07		 jne	 SHORT $LN117@gObjGiveIt

; 342  : 					{
; 343  : 						if ( index != 11 )

  0015e	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00161	74 19		 je	 SHORT $LN6@gObjGiveIt

; 344  : 						{
; 345  : 							result = 0;

  00163	33 c0		 xor	 eax, eax
$LN117@gObjGiveIt:

; 346  : 						}
; 347  : 					}
; 348  : 
; 349  : 					if ( type == 12 && index == 11 )
; 350  : 					{
; 351  : 
; 352  : 					}
; 353  : 					else
; 354  : 					{
; 355  : 						if ( result > maxlevel )

  00165	3b c3		 cmp	 eax, ebx
  00167	7e 02		 jle	 SHORT $LN7@gObjGiveIt

; 356  : 						{
; 357  : 							result = maxlevel;

  00169	8b c3		 mov	 eax, ebx
$LN7@gObjGiveIt:

; 358  : 						}
; 359  : 					}
; 360  : 
; 361  : 					if ( (type == 4 && index == 7) || (type == 4 && index == 15) )

  0016b	83 ff 04	 cmp	 edi, 4
  0016e	75 0c		 jne	 SHORT $LN6@gObjGiveIt
  00170	83 fe 07	 cmp	 esi, 7
  00173	74 05		 je	 SHORT $LN5@gObjGiveIt
  00175	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00178	75 02		 jne	 SHORT $LN6@gObjGiveIt
$LN5@gObjGiveIt:

; 362  : 					{
; 363  : 						result = 0;

  0017a	33 c0		 xor	 eax, eax
$LN6@gObjGiveIt:

; 364  : 					}
; 365  : 				
; 366  : 
; 367  : 					if ( this->InsertItem(monsterlevel, type, index,result, 0,0,0) != (BYTE)-1 )

  0017c	6a 00		 push	 0
  0017e	6a 00		 push	 0
  00180	6a 00		 push	 0
  00182	50		 push	 eax
$LN127@gObjGiveIt:
  00183	8b 45 b4	 mov	 eax, DWORD PTR _monsterlevel$GSCopy$[ebp]
  00186	56		 push	 esi
  00187	57		 push	 edi
  00188	50		 push	 eax
$LN126@gObjGiveIt:
  00189	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0018c	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ; CMonsterItemMng::InsertItem
  00191	3c ff		 cmp	 al, 255			; 000000ffH
  00193	74 0e		 je	 SHORT $LN2@gObjGiveIt

; 368  : 					{
; 369  : 						incount++;

  00195	8b 45 b0	 mov	 eax, DWORD PTR _incount$[ebp]
  00198	40		 inc	 eax
  00199	89 45 b0	 mov	 DWORD PTR _incount$[ebp], eax

; 370  : 
; 371  : 						if ( incount > MAX_ITEM_IN_MONSTER-1 )

  0019c	3d e7 03 00 00	 cmp	 eax, 999		; 000003e7H
  001a1	7f 17		 jg	 SHORT $LN119@gObjGiveIt
$LN2@gObjGiveIt:

; 372  : 						{
; 373  : 							return;
; 374  : 						}
; 375  : 					}
; 376  : 				}
; 377  : 			}
; 378  : 		}
; 379  : 		
; 380  : 		if ( this->m_iMonsterInvenItemCount[monsterlevel] >= MAX_ITEM_IN_MONSTER )

  001a3	8b 4d b4	 mov	 ecx, DWORD PTR _monsterlevel$GSCopy$[ebp]
  001a6	8b 55 ac	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  001a9	81 bc 8a 64 09
	00 00 e8 03 00
	00		 cmp	 DWORD PTR [edx+ecx*4+2404], 1000 ; 000003e8H

; 381  : 		{
; 382  : 			return;
; 383  : 		}
; 384  : 	}

  001b4	0f 8c 0d ff ff
	ff		 jl	 $LL116@gObjGiveIt
$LN119@gObjGiveIt:

; 385  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi
  001bf	33 cd		 xor	 ecx, ebp
  001c1	5b		 pop	 ebx
  001c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 08 00	 ret	 8
$LN78@gObjGiveIt:

; 163  : 			}
; 164  : 		}
; 165  : 		else
; 166  : 		{
; 167  : 			type = rand() % MAX_TYPE_ITEMS;

  001cd	e8 00 00 00 00	 call	 _rand
  001d2	8b f8		 mov	 edi, eax
  001d4	81 e7 0f 00 00
	80		 and	 edi, -2147483633	; 8000000fH
  001da	79 05		 jns	 SHORT $LN123@gObjGiveIt
  001dc	4f		 dec	 edi
  001dd	83 cf f0	 or	 edi, -16		; fffffff0H
  001e0	47		 inc	 edi
$LN123@gObjGiveIt:

; 168  : 			int iMaxItemIndex = g_MaxItemIndexOfEachItemType[type]+1;

  001e1	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[edi*4]
  001e8	46		 inc	 esi

; 169  : 			index = rand() % iMaxItemIndex;

  001e9	e8 00 00 00 00	 call	 _rand
  001ee	99		 cdq
  001ef	f7 fe		 idiv	 esi
  001f1	8b f2		 mov	 esi, edx

; 170  : 
; 171  : 			if ( type == 15 || (type == 12 && index != 15 ) )

  001f3	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  001f6	0f 84 d4 fe ff
	ff		 je	 $LL80@gObjGiveIt
  001fc	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  001ff	75 0e		 jne	 SHORT $LN74@gObjGiveIt
  00201	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00204	0f 85 c6 fe ff
	ff		 jne	 $LL80@gObjGiveIt

; 172  : 			{
; 173  : 				continue;
; 174  : 			}
; 175  : 		}
; 176  : 
; 177  : 		if ( type == 13 && index == 3 )

  0020a	e9 c0 00 00 00	 jmp	 $LN56@gObjGiveIt
$LN74@gObjGiveIt:
  0020f	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  00212	75 4c		 jne	 SHORT $LN71@gObjGiveIt
  00214	83 fe 03	 cmp	 esi, 3
  00217	0f 84 b3 fe ff
	ff		 je	 $LL80@gObjGiveIt

; 178  : 		{
; 179  : 			continue;
; 180  : 		}
; 181  : 
; 182  : 		if ( (type == 13 && index == 32)
; 183  :           || (type == 13 && index == 33)
; 184  :           || (type == 13 && index == 34)
; 185  :           || (type == 13 && index == 35)
; 186  :           || (type == 13 && index == 36)
; 187  :           || (type == 13 && index == 37) )

  0021d	83 fe 20	 cmp	 esi, 32			; 00000020H
  00220	0f 84 aa fe ff
	ff		 je	 $LL80@gObjGiveIt
  00226	83 fe 21	 cmp	 esi, 33			; 00000021H
  00229	0f 84 a1 fe ff
	ff		 je	 $LL80@gObjGiveIt
  0022f	83 fe 22	 cmp	 esi, 34			; 00000022H
  00232	0f 84 98 fe ff
	ff		 je	 $LL80@gObjGiveIt
  00238	83 fe 23	 cmp	 esi, 35			; 00000023H
  0023b	0f 84 8f fe ff
	ff		 je	 $LL80@gObjGiveIt
  00241	83 fe 24	 cmp	 esi, 36			; 00000024H
  00244	0f 84 86 fe ff
	ff		 je	 $LL80@gObjGiveIt
  0024a	83 fe 25	 cmp	 esi, 37			; 00000025H
  0024d	0f 84 7d fe ff
	ff		 je	 $LL80@gObjGiveIt

; 198  : 		{
; 199  : 			continue;
; 200  : 		}
; 201  : 
; 202  :         if ( (type == 13 && index < 8) || 
; 203  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 204  : 			(type == 12 && index == 15) || 
; 205  : 			(type == 13 && index == 14) || 
; 206  : 			(type == 14 && index == 31 ) )

  00253	83 fe 08	 cmp	 esi, 8
  00256	7c 77		 jl	 SHORT $LN56@gObjGiveIt
  00258	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  0025b	e9 cb fe ff ff	 jmp	 $LN128@gObjGiveIt
$LN71@gObjGiveIt:

; 188  : 		{
; 189  : 			continue;
; 190  : 		}
; 191  : 
; 192  :         if ( (type == 14 && index == 35)
; 193  :           || (type == 14 && index == 36)
; 194  :           || (type == 14 && index == 37)
; 195  :           || (type == 14 && index == 38)
; 196  :           || (type == 14 && index == 39)
; 197  :           || (type == 14 && index == 40) )

  00260	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  00263	0f 85 c8 fe ff
	ff		 jne	 $LN57@gObjGiveIt
  00269	83 fe 23	 cmp	 esi, 35			; 00000023H
  0026c	0f 84 5e fe ff
	ff		 je	 $LL80@gObjGiveIt
  00272	83 fe 24	 cmp	 esi, 36			; 00000024H
  00275	0f 84 55 fe ff
	ff		 je	 $LL80@gObjGiveIt
  0027b	83 fe 25	 cmp	 esi, 37			; 00000025H
  0027e	0f 84 4c fe ff
	ff		 je	 $LL80@gObjGiveIt
  00284	83 fe 26	 cmp	 esi, 38			; 00000026H
  00287	0f 84 43 fe ff
	ff		 je	 $LL80@gObjGiveIt
  0028d	83 fe 27	 cmp	 esi, 39			; 00000027H
  00290	0f 84 3a fe ff
	ff		 je	 $LL80@gObjGiveIt
  00296	83 fe 28	 cmp	 esi, 40			; 00000028H
  00299	0f 84 31 fe ff
	ff		 je	 $LL80@gObjGiveIt

; 198  : 		{
; 199  : 			continue;
; 200  : 		}
; 201  : 
; 202  :         if ( (type == 13 && index < 8) || 
; 203  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 204  : 			(type == 12 && index == 15) || 
; 205  : 			(type == 13 && index == 14) || 
; 206  : 			(type == 14 && index == 31 ) )

  0029f	83 fe 09	 cmp	 esi, 9
  002a2	74 2b		 je	 SHORT $LN56@gObjGiveIt
  002a4	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  002a7	74 26		 je	 SHORT $LN56@gObjGiveIt
  002a9	83 fe 0d	 cmp	 esi, 13			; 0000000dH
  002ac	74 21		 je	 SHORT $LN56@gObjGiveIt
  002ae	3b f7		 cmp	 esi, edi
  002b0	74 1d		 je	 SHORT $LN56@gObjGiveIt
  002b2	83 fe 10	 cmp	 esi, 16			; 00000010H
  002b5	74 18		 je	 SHORT $LN56@gObjGiveIt
  002b7	83 fe 11	 cmp	 esi, 17			; 00000011H
  002ba	74 13		 je	 SHORT $LN56@gObjGiveIt
  002bc	83 fe 12	 cmp	 esi, 18			; 00000012H
  002bf	74 0e		 je	 SHORT $LN56@gObjGiveIt
  002c1	83 fe 16	 cmp	 esi, 22			; 00000016H
  002c4	74 09		 je	 SHORT $LN56@gObjGiveIt
  002c6	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  002c9	0f 85 62 fe ff
	ff		 jne	 $LN57@gObjGiveIt
$LN56@gObjGiveIt:

; 207  : 		{
; 208  : 			int perc = rand() % 11;

  002cf	e8 00 00 00 00	 call	 _rand
  002d4	99		 cdq
  002d5	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  002da	f7 f9		 idiv	 ecx

; 209  : 			BOOL bCheckDevil = FALSE;

  002dc	33 db		 xor	 ebx, ebx

; 210  : 
; 211  : 			if ( type == 12 && index == 15 )

  002de	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  002e1	75 52		 jne	 SHORT $LN48@gObjGiveIt
  002e3	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  002e6	0f 85 a5 00 00
	00		 jne	 $LN43@gObjGiveIt

; 212  : 			{
; 213  : 				if ( monsterlevel >= 13 && monsterlevel <= 66 )

  002ec	8b 55 b4	 mov	 edx, DWORD PTR _monsterlevel$GSCopy$[ebp]
  002ef	83 c2 f3	 add	 edx, -13		; fffffff3H
  002f2	83 fa 35	 cmp	 edx, 53			; 00000035H
  002f5	0f 87 a8 fe ff
	ff		 ja	 $LN2@gObjGiveIt

; 214  : 				{
; 215  : 					perc = rand() % 7 ;

  002fb	e8 00 00 00 00	 call	 _rand
  00300	99		 cdq
  00301	b9 07 00 00 00	 mov	 ecx, 7
  00306	f7 f9		 idiv	 ecx

; 216  : 					
; 217  : 					if ( perc < 3 )

  00308	83 fa 03	 cmp	 edx, 3
  0030b	0f 8d 80 00 00
	00		 jge	 $LN43@gObjGiveIt
$LN41@gObjGiveIt:

; 307  : 				else if ( zzzItemLevel(type, index, monsterlevel ) == TRUE )

  00311	8b 55 b4	 mov	 edx, DWORD PTR _monsterlevel$GSCopy$[ebp]
  00314	52		 push	 edx
  00315	56		 push	 esi
  00316	57		 push	 edi
  00317	e8 00 00 00 00	 call	 ?zzzItemLevel@@YAHHHH@Z	; zzzItemLevel
  0031c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0031f	83 f8 01	 cmp	 eax, 1
  00322	0f 85 7b fe ff
	ff		 jne	 $LN2@gObjGiveIt

; 308  : 				{
; 309  : 					if ( this->InsertItem(monsterlevel, type, index, 0, 0, 0, 0) != (BYTE)-1 )

  00328	6a 00		 push	 0
  0032a	6a 00		 push	 0
  0032c	6a 00		 push	 0
  0032e	6a 00		 push	 0

; 310  : 					{
; 311  : 						incount++;
; 312  : 
; 313  : 						if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 314  : 						{
; 315  : 							return;
; 316  : 						}
; 317  : 					}
; 318  : 				}
; 319  : 			}
; 320  : 		}
; 321  : 		else

  00330	e9 4e fe ff ff	 jmp	 $LN127@gObjGiveIt
$LN48@gObjGiveIt:

; 218  : 					{
; 219  : 						perc = 0;
; 220  : 					}
; 221  : 				}
; 222  : 				else
; 223  : 				{
; 224  : 					perc = 1;
; 225  : 				}
; 226  : 			}
; 227  : 
; 228  : 			if ( type == 14 && index == 17 )

  00335	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  00338	75 57		 jne	 SHORT $LN43@gObjGiveIt
  0033a	83 fe 11	 cmp	 esi, 17			; 00000011H
  0033d	75 31		 jne	 SHORT $LN112@gObjGiveIt

; 229  : 			{
; 230  : 				if ( gEyesOfDevilSquareDropRate <= 0 )

  0033f	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, ebx ; gEyesOfDevilSquareDropRate
  00345	7f 0a		 jg	 SHORT $LN46@gObjGiveIt

; 231  : 				{
; 232  : 					gEyesOfDevilSquareDropRate = 1;

  00347	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, 1 ; gEyesOfDevilSquareDropRate
$LN46@gObjGiveIt:

; 233  : 				}
; 234  : 
; 235  : 				perc = rand() % gEyesOfDevilSquareDropRate;

  00351	e8 00 00 00 00	 call	 _rand
  00356	99		 cdq
  00357	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA ; gEyesOfDevilSquareDropRate

; 236  : 				bCheckDevil = 1;
; 237  : 
; 238  : 				if ( gDevilSquareEvent == 0 )

  0035d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00364	bb 01 00 00 00	 mov	 ebx, 1
  00369	75 26		 jne	 SHORT $LN43@gObjGiveIt

; 239  : 				{
; 240  : 					perc = 1;
; 241  : 				}
; 242  : 			}
; 243  : 
; 244  : 			if ( type == 14 && index == 18 )

  0036b	e9 33 fe ff ff	 jmp	 $LN2@gObjGiveIt
$LN112@gObjGiveIt:
  00370	83 fe 12	 cmp	 esi, 18			; 00000012H
  00373	75 1c		 jne	 SHORT $LN43@gObjGiveIt

; 245  : 			{
; 246  : 				perc = rand() % gKeyOfDevilSquareDropRate;

  00375	e8 00 00 00 00	 call	 _rand
  0037a	99		 cdq
  0037b	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gKeyOfDevilSquareDropRate@@3HA ; gKeyOfDevilSquareDropRate

; 247  : 				bCheckDevil = 1;
; 248  : 
; 249  : 				if ( gDevilSquareEvent == 0 )

  00381	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00388	8d 5e ef	 lea	 ebx, DWORD PTR [esi-17]

; 250  : 				{
; 251  : 					perc = 1;
; 252  : 				}
; 253  : 
; 254  : 			}
; 255  : 
; 256  : 			if ( perc == 0 )

  0038b	0f 84 12 fe ff
	ff		 je	 $LN2@gObjGiveIt
$LN43@gObjGiveIt:
  00391	85 d2		 test	 edx, edx
  00393	0f 85 0a fe ff
	ff		 jne	 $LN2@gObjGiveIt

; 257  : 			{
; 258  : 				if ( bCheckDevil == 1 )

  00399	83 fb 01	 cmp	 ebx, 1
  0039c	0f 85 6f ff ff
	ff		 jne	 $LN41@gObjGiveIt

; 259  : 				{
; 260  : 					int devilitemlevel = 0;
; 261  : 
; 262  : 					if ( (rand() % 5) != 0 )

  003a2	e8 00 00 00 00	 call	 _rand
  003a7	99		 cdq
  003a8	b9 05 00 00 00	 mov	 ecx, 5
  003ad	f7 f9		 idiv	 ecx
  003af	85 d2		 test	 edx, edx
  003b1	0f 84 ec fd ff
	ff		 je	 $LN2@gObjGiveIt

; 263  : 					{
; 264  : 						if ( monsterlevel < 3 )

  003b7	83 7d b4 03	 cmp	 DWORD PTR _monsterlevel$GSCopy$[ebp], 3

; 265  : 						{
; 266  : 							devilitemlevel = 0;

  003bb	0f 8c e2 fd ff
	ff		 jl	 $LN2@gObjGiveIt

; 267  : 						}
; 268  : 						else if ( monsterlevel < 36 ) 

  003c1	8b 4d b4	 mov	 ecx, DWORD PTR _monsterlevel$GSCopy$[ebp]
  003c4	83 f9 24	 cmp	 ecx, 36			; 00000024H
  003c7	7d 11		 jge	 SHORT $LN37@gObjGiveIt

; 285  : 						{
; 286  : 							devilitemlevel = 5;
; 287  : 						}
; 288  : 						else 
; 289  : 						{
; 290  : 							devilitemlevel = 6;
; 291  : 						}
; 292  : 
; 293  : 						if ( devilitemlevel != 0 )
; 294  : 						{
; 295  : 							if ( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )

  003c9	6a 00		 push	 0
  003cb	6a 00		 push	 0
  003cd	6a 00		 push	 0
  003cf	8b c3		 mov	 eax, ebx
  003d1	50		 push	 eax
  003d2	56		 push	 esi
  003d3	57		 push	 edi
  003d4	51		 push	 ecx

; 296  : 							{
; 297  : 								incount++;
; 298  : 
; 299  : 								if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 300  : 								{
; 301  : 									return;
; 302  : 								}
; 303  : 							}
; 304  : 						}
; 305  : 					}
; 306  : 				}

  003d5	e9 af fd ff ff	 jmp	 $LN126@gObjGiveIt
$LN37@gObjGiveIt:

; 269  : 						{
; 270  : 							devilitemlevel = 1;
; 271  : 						}
; 272  : 						else if ( monsterlevel < 47 )

  003da	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  003dd	7d 14		 jge	 SHORT $LN35@gObjGiveIt

; 285  : 						{
; 286  : 							devilitemlevel = 5;
; 287  : 						}
; 288  : 						else 
; 289  : 						{
; 290  : 							devilitemlevel = 6;
; 291  : 						}
; 292  : 
; 293  : 						if ( devilitemlevel != 0 )
; 294  : 						{
; 295  : 							if ( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )

  003df	6a 00		 push	 0
  003e1	6a 00		 push	 0
  003e3	6a 00		 push	 0
  003e5	b8 02 00 00 00	 mov	 eax, 2
  003ea	50		 push	 eax
  003eb	56		 push	 esi
  003ec	57		 push	 edi
  003ed	51		 push	 ecx

; 296  : 							{
; 297  : 								incount++;
; 298  : 
; 299  : 								if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 300  : 								{
; 301  : 									return;
; 302  : 								}
; 303  : 							}
; 304  : 						}
; 305  : 					}
; 306  : 				}

  003ee	e9 96 fd ff ff	 jmp	 $LN126@gObjGiveIt
$LN35@gObjGiveIt:

; 273  : 						{
; 274  : 							devilitemlevel = 2;
; 275  : 						}
; 276  : 						else if ( monsterlevel < 60 )

  003f3	83 f9 3c	 cmp	 ecx, 60			; 0000003cH
  003f6	7d 14		 jge	 SHORT $LN33@gObjGiveIt

; 285  : 						{
; 286  : 							devilitemlevel = 5;
; 287  : 						}
; 288  : 						else 
; 289  : 						{
; 290  : 							devilitemlevel = 6;
; 291  : 						}
; 292  : 
; 293  : 						if ( devilitemlevel != 0 )
; 294  : 						{
; 295  : 							if ( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )

  003f8	6a 00		 push	 0
  003fa	6a 00		 push	 0
  003fc	6a 00		 push	 0
  003fe	b8 03 00 00 00	 mov	 eax, 3
  00403	50		 push	 eax
  00404	56		 push	 esi
  00405	57		 push	 edi
  00406	51		 push	 ecx

; 296  : 							{
; 297  : 								incount++;
; 298  : 
; 299  : 								if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 300  : 								{
; 301  : 									return;
; 302  : 								}
; 303  : 							}
; 304  : 						}
; 305  : 					}
; 306  : 				}

  00407	e9 7d fd ff ff	 jmp	 $LN126@gObjGiveIt
$LN33@gObjGiveIt:

; 277  : 						{
; 278  : 							devilitemlevel = 3;
; 279  : 						}
; 280  : 						else if ( monsterlevel < 70 )

  0040c	83 f9 46	 cmp	 ecx, 70			; 00000046H
  0040f	7d 14		 jge	 SHORT $LN31@gObjGiveIt

; 285  : 						{
; 286  : 							devilitemlevel = 5;
; 287  : 						}
; 288  : 						else 
; 289  : 						{
; 290  : 							devilitemlevel = 6;
; 291  : 						}
; 292  : 
; 293  : 						if ( devilitemlevel != 0 )
; 294  : 						{
; 295  : 							if ( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )

  00411	6a 00		 push	 0
  00413	6a 00		 push	 0
  00415	6a 00		 push	 0
  00417	b8 04 00 00 00	 mov	 eax, 4
  0041c	50		 push	 eax
  0041d	56		 push	 esi
  0041e	57		 push	 edi
  0041f	51		 push	 ecx

; 296  : 							{
; 297  : 								incount++;
; 298  : 
; 299  : 								if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 300  : 								{
; 301  : 									return;
; 302  : 								}
; 303  : 							}
; 304  : 						}
; 305  : 					}
; 306  : 				}

  00420	e9 64 fd ff ff	 jmp	 $LN126@gObjGiveIt
$LN31@gObjGiveIt:

; 281  : 						{
; 282  : 							devilitemlevel = 4;
; 283  : 						}
; 284  : 						else if ( monsterlevel < 80 )

  00425	33 c0		 xor	 eax, eax
  00427	83 f9 50	 cmp	 ecx, 80			; 00000050H

; 285  : 						{
; 286  : 							devilitemlevel = 5;
; 287  : 						}
; 288  : 						else 
; 289  : 						{
; 290  : 							devilitemlevel = 6;
; 291  : 						}
; 292  : 
; 293  : 						if ( devilitemlevel != 0 )
; 294  : 						{
; 295  : 							if ( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )

  0042a	6a 00		 push	 0
  0042c	0f 9d c0	 setge	 al
  0042f	6a 00		 push	 0
  00431	6a 00		 push	 0
  00433	83 c0 05	 add	 eax, 5
  00436	50		 push	 eax
  00437	56		 push	 esi
  00438	57		 push	 edi
  00439	51		 push	 ecx

; 296  : 							{
; 297  : 								incount++;
; 298  : 
; 299  : 								if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 300  : 								{
; 301  : 									return;
; 302  : 								}
; 303  : 							}
; 304  : 						}
; 305  : 					}
; 306  : 				}

  0043a	e9 4a fd ff ff	 jmp	 $LN126@gObjGiveIt
$LN16@gObjGiveIt:

; 326  : 			{
; 327  : 				if ( (type == 13 && index == 10) || (type == 12 && index == 11 ) )

  0043f	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  00442	0f 85 0d fd ff
	ff		 jne	 $LN18@gObjGiveIt
  00448	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  0044b	0f 85 04 fd ff
	ff		 jne	 $LN18@gObjGiveIt
$LN17@gObjGiveIt:

; 328  : 				{
; 329  : 					if ( this->InsertItem(monsterlevel, type, index, result, 0,0,0) != 0xFF )

  00451	8b 55 b4	 mov	 edx, DWORD PTR _monsterlevel$GSCopy$[ebp]
  00454	6a 00		 push	 0
  00456	6a 00		 push	 0
  00458	6a 00		 push	 0
  0045a	50		 push	 eax
  0045b	56		 push	 esi
  0045c	57		 push	 edi
  0045d	52		 push	 edx

; 330  : 					{
; 331  : 						incount++;
; 332  : 
; 333  : 						if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 334  : 						{
; 335  : 							return;
; 336  : 						}
; 337  : 					}
; 338  : 				}

  0045e	e9 26 fd ff ff	 jmp	 $LN126@gObjGiveIt
?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z ENDP	; CMonsterItemMng::gObjGiveItemSearch
_TEXT	ENDS
PUBLIC	??1CMonsterItemMng@@UAE@XZ			; CMonsterItemMng::~CMonsterItemMng
; Function compile flags: /Ogtp
;	COMDAT ??1CMonsterItemMng@@UAE@XZ
_TEXT	SEGMENT
??1CMonsterItemMng@@UAE@XZ PROC				; CMonsterItemMng::~CMonsterItemMng, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMonsterItemMng@@6B@

; 22   : 	this->Clear();

  00006	e9 00 00 00 00	 jmp	 ?Clear@CMonsterItemMng@@QAEXXZ ; CMonsterItemMng::Clear
??1CMonsterItemMng@@UAE@XZ ENDP				; CMonsterItemMng::~CMonsterItemMng
_TEXT	ENDS
PUBLIC	?Init@CMonsterItemMng@@QAEXXZ			; CMonsterItemMng::Init
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Init@CMonsterItemMng@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMonsterItemMng@@QAEXXZ$0
__ehfuncinfo$?Init@CMonsterItemMng@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@CMonsterItemMng@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?Init@CMonsterItemMng@@QAEXXZ
_TEXT	SEGMENT
$T153750 = -28						; size = 4
_this$ = -24						; size = 4
tv245 = -20						; size = 4
tv269 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Init@CMonsterItemMng@@QAEXXZ PROC			; CMonsterItemMng::Init, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CMonsterItemMng@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi

; 28   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  0002d	68 60 09 00 00	 push	 2400			; 00000960H
  00032	8d 87 64 09 00
	00		 lea	 eax, DWORD PTR [edi+2404]
  00038	6a 00		 push	 0
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memset
  00040	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	89 4d f0	 mov	 DWORD PTR tv269[ebp], ecx
  00049	c7 45 ec 58 02
	00 00		 mov	 DWORD PTR tv245[ebp], 600 ; 00000258H
$LN8@Init:

; 29   : 
; 30   : 	for (int i=0 ; i< MAX_LEVEL_MONSTER ; i++ )
; 31   : 	{
; 32   : 		this->m_MonsterInvenItems[i] = new CItem[MAX_ITEM_IN_MONSTER];

  00050	68 40 90 02 00	 push	 168000			; 00029040H
  00055	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005a	8b d8		 mov	 ebx, eax
  0005c	83 c4 04	 add	 esp, 4
  0005f	89 5d e4	 mov	 DWORD PTR $T153750[ebp], ebx
  00062	33 c0		 xor	 eax, eax
  00064	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00067	3b d8		 cmp	 ebx, eax
  00069	74 1c		 je	 SHORT $LN11@Init
  0006b	8b f3		 mov	 esi, ebx
  0006d	bf e7 03 00 00	 mov	 edi, 999		; 000003e7H
$LL16@Init:
  00072	8b ce		 mov	 ecx, esi
  00074	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  00079	81 c6 a8 00 00
	00		 add	 esi, 168		; 000000a8H
  0007f	4f		 dec	 edi
  00080	79 f0		 jns	 SHORT $LL16@Init
  00082	8b 7d e8	 mov	 edi, DWORD PTR _this$[ebp]
  00085	8b c3		 mov	 eax, ebx
$LN11@Init:
  00087	8b 4d f0	 mov	 ecx, DWORD PTR tv269[ebp]
  0008a	89 01		 mov	 DWORD PTR [ecx], eax
  0008c	83 c1 04	 add	 ecx, 4
  0008f	ff 4d ec	 dec	 DWORD PTR tv245[ebp]
  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	89 4d f0	 mov	 DWORD PTR tv269[ebp], ecx
  0009c	75 b2		 jne	 SHORT $LN8@Init

; 33   : 	}
; 34   : 
; 35   : 	LPMONSTER_ATTRIBUTE lpm;
; 36   : 
; 37   : 	for (int i = 0; i< MAX_MONSTER_TYPE ; i++ )

  0009e	33 db		 xor	 ebx, ebx
$LN5@Init:

; 38   : 	{
; 39   : 		lpm = gMAttr.GetAttr(i);

  000a0	53		 push	 ebx
  000a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  000a6	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 40   : 
; 41   : 		if ( lpm != NULL )

  000ab	85 c0		 test	 eax, eax
  000ad	74 28		 je	 SHORT $LN4@Init

; 42   : 		{
; 43   : 			strcpy( this->MonsterName, lpm->m_Name);

  000af	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  000b2	8b f7		 mov	 esi, edi
  000b4	2b f1		 sub	 esi, ecx
$LL13@Init:
  000b6	8a 11		 mov	 dl, BYTE PTR [ecx]
  000b8	88 94 0e c4 12
	00 00		 mov	 BYTE PTR [esi+ecx+4804], dl
  000bf	41		 inc	 ecx
  000c0	84 d2		 test	 dl, dl
  000c2	75 f2		 jne	 SHORT $LL13@Init

; 44   : 
; 45   : 			if ( lpm->m_Level != 0 )

  000c4	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000c7	85 c9		 test	 ecx, ecx
  000c9	74 0c		 je	 SHORT $LN4@Init

; 46   : 			{
; 47   : 				this->gObjGiveItemSearch(lpm->m_Level, lpm->m_MaxItemLevel);

  000cb	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  000ce	50		 push	 eax
  000cf	51		 push	 ecx
  000d0	8b cf		 mov	 ecx, edi
  000d2	e8 00 00 00 00	 call	 ?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z ; CMonsterItemMng::gObjGiveItemSearch
$LN4@Init:

; 33   : 	}
; 34   : 
; 35   : 	LPMONSTER_ATTRIBUTE lpm;
; 36   : 
; 37   : 	for (int i = 0; i< MAX_MONSTER_TYPE ; i++ )

  000d7	43		 inc	 ebx
  000d8	81 fb 00 02 00
	00		 cmp	 ebx, 512		; 00000200H
  000de	7c c0		 jl	 SHORT $LN5@Init

; 48   : 			}
; 49   : 		}
; 50   : 	}
; 51   : }

  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CMonsterItemMng@@QAEXXZ$0:
  00000	8b 45 e4	 mov	 eax, DWORD PTR $T153750[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?Init@CMonsterItemMng@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CMonsterItemMng@@QAEXXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CMonsterItemMng@@QAEXXZ ENDP			; CMonsterItemMng::Init
; Function compile flags: /Ogtp
;	COMDAT ??_GCMonsterItemMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMonsterItemMng@@UAEPAXI@Z PROC			; CMonsterItemMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMonsterItemMng@@UAE@XZ ; CMonsterItemMng::~CMonsterItemMng
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMonsterItemMng@@UAEPAXI@Z ENDP			; CMonsterItemMng::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_MonsterItemMng@@YAXXZ
text$yc	SEGMENT
??__Eg_MonsterItemMng@@YAXXZ PROC			; `dynamic initializer for 'g_MonsterItemMng'', COMDAT

; 11   : CMonsterItemMng g_MonsterItemMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMng@@3VCMonsterItemMng@@A ; g_MonsterItemMng
  00005	e8 00 00 00 00	 call	 ??0CMonsterItemMng@@QAE@XZ ; CMonsterItemMng::CMonsterItemMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MonsterItemMng@@YAXXZ ; `dynamic atexit destructor for 'g_MonsterItemMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MonsterItemMng@@YAXXZ ENDP			; `dynamic initializer for 'g_MonsterItemMng''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_MonsterItemMng@@YAXXZ
text$yd	SEGMENT
??__Fg_MonsterItemMng@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MonsterItemMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMng@@3VCMonsterItemMng@@A ; g_MonsterItemMng
  00005	e9 00 00 00 00	 jmp	 ??1CMonsterItemMng@@UAE@XZ ; CMonsterItemMng::~CMonsterItemMng
??__Fg_MonsterItemMng@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MonsterItemMng''
text$yd	ENDS
PUBLIC	?g_MonsterItemMng@@3VCMonsterItemMng@@A		; g_MonsterItemMng
_BSS	SEGMENT
?g_MonsterItemMng@@3VCMonsterItemMng@@A DB 013c4H DUP (?) ; g_MonsterItemMng
_BSS	ENDS
CRT$XCU	SEGMENT
_g_MonsterItemMng$initializer$ DD FLAT:??__Eg_MonsterItemMng@@YAXXZ
CRT$XCU	ENDS
END
