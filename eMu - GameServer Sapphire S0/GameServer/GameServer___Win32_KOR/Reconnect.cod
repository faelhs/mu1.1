; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\Reconnect.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gReconnect@@3VCReconnect@@A			; gReconnect
_BSS	SEGMENT
?gReconnect@@3VCReconnect@@A DB 01H DUP (?)		; gReconnect
_BSS	ENDS
PUBLIC	?PacketCheckTime@CReconnect@@AAE_NPAUOBJECTSTRUCT@@@Z ; CReconnect::PacketCheckTime
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\reconnect.cpp
;	COMDAT ?PacketCheckTime@CReconnect@@AAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?PacketCheckTime@CReconnect@@AAE_NPAUOBJECTSTRUCT@@@Z PROC ; CReconnect::PacketCheckTime, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 12   : 	if((GetTickCount() - lpObj->m_PacketCheckTime) < 300)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0000e	ff d7		 call	 edi
  00010	2b 86 ec 01 00
	00		 sub	 eax, DWORD PTR [esi+492]
  00016	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  0001b	73 08		 jae	 SHORT $LN1@PacketChec

; 13   : 	{
; 14   : 		return false;

  0001d	5f		 pop	 edi
  0001e	32 c0		 xor	 al, al
  00020	5e		 pop	 esi

; 20   : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN1@PacketChec:

; 15   : 	}
; 16   : 	// ----
; 17   : 	lpObj->m_PacketCheckTime = GetTickCount();

  00025	ff d7		 call	 edi
  00027	89 86 ec 01 00
	00		 mov	 DWORD PTR [esi+492], eax
  0002d	5f		 pop	 edi

; 18   : 	// ----
; 19   : 	return true;

  0002e	b0 01		 mov	 al, 1
  00030	5e		 pop	 esi

; 20   : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?PacketCheckTime@CReconnect@@AAE_NPAUOBJECTSTRUCT@@@Z ENDP ; CReconnect::PacketCheckTime
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD@@QAEXPAEEE@Z			; PBMSG_HEAD::set
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD@@QAEXPAEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 1
?set@PBMSG_HEAD@@QAEXPAEEE@Z PROC			; PBMSG_HEAD::set, COMDAT
; _this$ = ecx

; 92   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 94   : 		lpBuf[1] = size;

  00006	8a 4d 10	 mov	 cl, BYTE PTR _size$[ebp]

; 95   : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  0000f	88 48 01	 mov	 BYTE PTR [eax+1], cl
  00012	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 96   : 	};	// line : 22

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?set@PBMSG_HEAD@@QAEXPAEEE@Z ENDP			; PBMSG_HEAD::set
_TEXT	ENDS
PUBLIC	?set@PBMSG_HEAD2@@QAEXPAEEEE@Z			; PBMSG_HEAD2::set
; Function compile flags: /Ogtp
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 142  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		lpBuf[0] = 0xC1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]

; 144  : 		lpBuf[1] = size;

  00006	8a 4d 14	 mov	 cl, BYTE PTR _size$[ebp]

; 145  : 		lpBuf[2] = head;

  00009	8a 55 0c	 mov	 dl, BYTE PTR _head$[ebp]
  0000c	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 146  : 		lpBuf[3] = sub;

  0000f	8a 4d 10	 mov	 cl, BYTE PTR _sub$[ebp]
  00012	c6 00 c1	 mov	 BYTE PTR [eax], 193	; 000000c1H
  00015	88 50 02	 mov	 BYTE PTR [eax+2], dl
  00018	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 147  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
PUBLIC	??_C@_0BP@KHOJEFLF@?$FLRECONNECT?$FN?5Join?5Send?5?3?5?$CI?$CFd?$CJ?$CFs?$AA@ ; `string'
PUBLIC	_Data$GSCopy$
PUBLIC	_UserIndex$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?SendLogin@CReconnect@@QAEXHPAUCONNECTEX_LOGIN@@@Z ; CReconnect::SendLogin
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?wsJServerCli@@3VwsJoinServerCli@@A:BYTE	; wsJServerCli
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
EXTRN	?GJPUserClose@@YAXPAD@Z:PROC			; GJPUserClose
EXTRN	?BuxConvert@@YAXPADH@Z:PROC			; BuxConvert
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BP@KHOJEFLF@?$FLRECONNECT?$FN?5Join?5Send?5?3?5?$CI?$CFd?$CJ?$CFs?$AA@
CONST	SEGMENT
??_C@_0BP@KHOJEFLF@?$FLRECONNECT?$FN?5Join?5Send?5?3?5?$CI?$CFd?$CJ?$CFs?$AA@ DB '['
	DB	'RECONNECT] Join Send : (%d)%s', 00H		; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\reconnect.cpp
CONST	ENDS
;	COMDAT ?SendLogin@CReconnect@@QAEXHPAUCONNECTEX_LOGIN@@@Z
_TEXT	SEGMENT
_Data$GSCopy$ = -68					; size = 4
_UserIndex$GSCopy$ = -64				; size = 4
_spMsg$ = -60						; size = 44
_id$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_Data$ = 12						; size = 4
?SendLogin@CReconnect@@QAEXHPAUCONNECTEX_LOGIN@@@Z PROC	; CReconnect::SendLogin, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _Data$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]
  00018	57		 push	 edi

; 24   : 	BuxConvert(Data->AccountID, MAX_ACCOUNT_LEN);

  00019	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001c	6a 0a		 push	 10			; 0000000aH
  0001e	57		 push	 edi

; 43   : 	{
; 44   : 		return;
; 45   : 	}
; 46   : 	// ---
; 47   : 	if(gObj[UserIndex].Connected >= PLAYER_LOGGED)
; 48   : 	{
; 49   : 		return;
; 50   : 	}
; 51   : 	// ---
; 52   : 	SDHP_IDPASS spMsg = {0};

  0001f	89 75 c0	 mov	 DWORD PTR _UserIndex$GSCopy$[ebp], esi
  00022	89 5d bc	 mov	 DWORD PTR _Data$GSCopy$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert
  0002a	83 c3 0e	 add	 ebx, 14			; 0000000eH
  0002d	6a 0a		 push	 10			; 0000000aH
  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert
  00035	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00038	66 8b 57 08	 mov	 dx, WORD PTR [edi+8]
  0003c	33 c0		 xor	 eax, eax
  0003e	66 89 45 f9	 mov	 WORD PTR _id$[ebp+9], ax
  00042	89 45 f1	 mov	 DWORD PTR _id$[ebp+1], eax
  00045	89 45 f5	 mov	 DWORD PTR _id$[ebp+5], eax
  00048	88 45 fa	 mov	 BYTE PTR _id$[ebp+10], al
  0004b	8b 07		 mov	 eax, DWORD PTR [edi]
  0004d	89 45 f0	 mov	 DWORD PTR _id$[ebp], eax
  00050	8d 45 f0	 lea	 eax, DWORD PTR _id$[ebp]
  00053	6a 0a		 push	 10			; 0000000aH
  00055	50		 push	 eax
  00056	89 4d f4	 mov	 DWORD PTR _id$[ebp+4], ecx
  00059	66 89 55 f8	 mov	 WORD PTR _id$[ebp+8], dx
  0005d	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert
  00062	8d 4d f0	 lea	 ecx, DWORD PTR _id$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?GJPUserClose@@YAXPAD@Z	; GJPUserClose
  0006b	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  00071	83 c4 1c	 add	 esp, 28			; 0000001cH
  00074	80 be 04 00 00
	00 01		 cmp	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+4], 1
  0007b	74 1f		 je	 SHORT $LN3@SendLogin

; 25   : 	BuxConvert(Data->Password, MAX_ACCOUNT_LEN);
; 26   : 	// ---
; 27   : 	char id[11] = {NULL};
; 28   : 	id[10] = 0;
; 29   : 	memcpy(id, Data->AccountID, sizeof(Data->AccountID));
; 30   : 	// ---
; 31   : 	BuxConvert(id, MAX_ACCOUNT_LEN);
; 32   : 	// ---
; 33   : 	GJPUserClose(id);
; 34   : 	// ---
; 35   : 	if(gObj[UserIndex].Connected != PLAYER_CONNECTED)
; 36   : 	{
; 37   : 		CloseClient(UserIndex);

  0007d	8b 55 c0	 mov	 edx, DWORD PTR _UserIndex$GSCopy$[ebp]
  00080	52		 push	 edx
  00081	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00086	83 c4 04	 add	 esp, 4
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 89   : }

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008f	33 cd		 xor	 ecx, ebp
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
$LN3@SendLogin:

; 38   : 		// ---
; 39   : 		return;
; 40   : 	}
; 41   : 	// ---
; 42   : 	if(gObj[UserIndex].LoginMsgSnd != FALSE)

  0009c	80 be 05 00 00
	00 00		 cmp	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5], 0
  000a3	0f 85 47 01 00
	00		 jne	 $LN4@SendLogin

; 43   : 	{
; 44   : 		return;
; 45   : 	}
; 46   : 	// ---
; 47   : 	if(gObj[UserIndex].Connected >= PLAYER_LOGGED)
; 48   : 	{
; 49   : 		return;
; 50   : 	}
; 51   : 	// ---
; 52   : 	SDHP_IDPASS spMsg = {0};

  000a9	6a 2b		 push	 43			; 0000002bH
  000ab	8d 45 c5	 lea	 eax, DWORD PTR _spMsg$[ebp+1]
  000ae	6a 00		 push	 0
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _memset

; 53   : 	// ---
; 54   : 	spMsg.h.set((LPBYTE)&spMsg, 0x01, sizeof(spMsg));
; 55   : 	// ---
; 56   : 	spMsg.Number								= UserIndex;

  000b6	0f b7 4d c0	 movzx	 ecx, WORD PTR _UserIndex$GSCopy$[ebp]

; 57   : 	// ---
; 58   : 	memcpy(spMsg.Id, Data->AccountID, sizeof(spMsg.Id));

  000ba	8b 17		 mov	 edx, DWORD PTR [edi]
  000bc	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000bf	66 89 4d dc	 mov	 WORD PTR _spMsg$[ebp+24], cx
  000c3	0f b7 4f 08	 movzx	 ecx, WORD PTR [edi+8]
  000c7	89 55 c7	 mov	 DWORD PTR _spMsg$[ebp+3], edx

; 59   : 	memcpy(spMsg.Pass, Data->Password, sizeof(spMsg.Pass));

  000ca	8b 13		 mov	 edx, DWORD PTR [ebx]
  000cc	89 45 cb	 mov	 DWORD PTR _spMsg$[ebp+7], eax
  000cf	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000d2	66 89 4d cf	 mov	 WORD PTR _spMsg$[ebp+11], cx
  000d6	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  000da	89 55 d1	 mov	 DWORD PTR _spMsg$[ebp+13], edx
  000dd	89 45 d5	 mov	 DWORD PTR _spMsg$[ebp+17], eax

; 60   : 	// ---
; 61   : 	strcpy(spMsg.IpAddress, gObj[UserIndex].Ip_addr);

  000e0	8d 86 14 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+20]
  000e6	8d 55 de	 lea	 edx, DWORD PTR _spMsg$[ebp+26]
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ec	66 c7 45 c4 c1
	2c		 mov	 WORD PTR _spMsg$[ebp], 11457 ; 00002cc1H
  000f2	c6 45 c6 01	 mov	 BYTE PTR _spMsg$[ebp+2], 1
  000f6	66 89 4d d9	 mov	 WORD PTR _spMsg$[ebp+21], cx
  000fa	2b d0		 sub	 edx, eax
  000fc	8d 64 24 00	 npad	 4
$LL6@SendLogin:
  00100	8a 08		 mov	 cl, BYTE PTR [eax]
  00102	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00105	40		 inc	 eax
  00106	84 c9		 test	 cl, cl
  00108	75 f6		 jne	 SHORT $LL6@SendLogin

; 62   : 	// ---
; 63   : 	gObj[UserIndex].CheckTick					= Data->TickCount;

  0010a	8b 5d bc	 mov	 ebx, DWORD PTR _Data$GSCopy$[ebp]
  0010d	8b 53 22	 mov	 edx, DWORD PTR [ebx+34]

; 64   : 	gObj[UserIndex].CheckTick2					= GetTickCount();

  00110	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00116	89 96 38 00 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+56], edx
  0011c	ff d7		 call	 edi
  0011e	89 86 40 00 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+64], eax

; 65   : 	gObj[UserIndex].ConnectCheckTime			= GetTickCount();

  00124	ff d7		 call	 edi

; 66   : 	gObj[UserIndex].CheckSpeedHack				= true;
; 67   : 	gObj[UserIndex].LoginMsgSnd					= 1;
; 68   : 	gObj[UserIndex].LoginMsgCount				= 1;
; 69   : 	gObj[UserIndex].AccountID[MAX_ACCOUNT_LEN]	= 0;
; 70   : 	gObj[UserIndex].Name[MAX_ACCOUNT_LEN]		= 0;
; 71   : 	// ---
; 72   : 	memcpy(gObj[UserIndex].AccountID, id, MAX_ACCOUNT_LEN);

  00126	8b 4d f4	 mov	 ecx, DWORD PTR _id$[ebp+4]
  00129	66 8b 55 f8	 mov	 dx, WORD PTR _id$[ebp+8]
  0012d	89 86 34 00 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+52], eax
  00133	8b 45 f0	 mov	 eax, DWORD PTR _id$[ebp]
  00136	89 86 64 00 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+100], eax
  0013c	89 8e 68 00 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+104], ecx
  00142	8d be 64 00 00
	00		 lea	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+100]
  00148	66 89 57 08	 mov	 WORD PTR [edi+8], dx
  0014c	c6 86 3c 00 00
	00 01		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+60], 1
  00153	c6 86 05 00 00
	00 01		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5], 1
  0015a	c6 86 06 00 00
	00 01		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+6], 1
  00161	c6 86 6e 00 00
	00 00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+110], 0
  00168	c6 86 79 00 00
	00 00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+121], 0

; 73   : 	memcpy(gObj[UserIndex].Name, Data->Name, MAX_ACCOUNT_LEN);

  0016f	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00172	89 8e 6f 00 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+111], ecx
  00178	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]

; 74   : 	// ---
; 75   : 	gObj[UserIndex].m_cAccountItemBlock			= 0;
; 76   : 	// ---
; 77   : 	gObj[UserIndex].bReconnect					= true;
; 78   : 	// ---
; 79   : 	wsJServerCli.DataSend((char*)&spMsg, spMsg.h.size);

  0017b	0f b6 4d c5	 movzx	 ecx, BYTE PTR _spMsg$[ebp+1]
  0017f	89 96 73 00 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+115], edx
  00185	66 8b 43 20	 mov	 ax, WORD PTR [ebx+32]
  00189	51		 push	 ecx
  0018a	8d 55 c4	 lea	 edx, DWORD PTR _spMsg$[ebp]
  0018d	52		 push	 edx
  0018e	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00193	66 89 86 77 00
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+119], ax
  0019a	c6 86 b0 01 00
	00 00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+432], 0
  001a1	c6 86 5c 15 00
	00 01		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5468], 1
  001a8	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 80   : 	// ---
; 81   : 	LogAdd(LOG_GOLD, "[RECONNECT] Join Send : (%d)%s", UserIndex, gObj[UserIndex].AccountID);

  001ad	8b 45 c0	 mov	 eax, DWORD PTR _UserIndex$GSCopy$[ebp]
  001b0	57		 push	 edi
  001b1	50		 push	 eax
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KHOJEFLF@?$FLRECONNECT?$FN?5Join?5Send?5?3?5?$CI?$CFd?$CJ?$CFs?$AA@
  001b7	6a 05		 push	 5
  001b9	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 82   : 	// ---
; 83   : 	gObj[UserIndex].DieRegen			= 1;
; 84   : 	gObj[UserIndex].m_bMapSvrMoveReq	= false;
; 85   : 	gObj[UserIndex].m_sPrevMapSvrCode	= -1; 

  001be	83 c9 ff	 or	 ecx, -1
  001c1	83 c4 10	 add	 esp, 16			; 00000010H

; 86   : 	gObj[UserIndex].m_sDestMapNumber	= -1;

  001c4	0b d1		 or	 edx, ecx
  001c6	c6 86 02 02 00
	00 01		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+514], 1
  001cd	c6 86 c5 14 00
	00 00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5317], 0
  001d4	66 89 8e cc 14
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5324], cx
  001db	66 89 96 ce 14
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5326], dx

; 87   : 	gObj[UserIndex].m_btDestX			= 0;

  001e2	c6 86 d0 14 00
	00 00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5328], 0

; 88   : 	gObj[UserIndex].m_btDestY			= 0;

  001e9	c6 86 d1 14 00
	00 00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5329], 0
$LN4@SendLogin:

; 89   : }

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	5f		 pop	 edi
  001f4	5e		 pop	 esi
  001f5	33 cd		 xor	 ecx, ebp
  001f7	5b		 pop	 ebx
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c2 08 00	 ret	 8
?SendLogin@CReconnect@@QAEXHPAUCONNECTEX_LOGIN@@@Z ENDP	; CReconnect::SendLogin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendGame@CReconnect@@QAEXH@Z			; CReconnect::SendGame
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?gObjIsAccontConnect@@YAHHPAD@Z:PROC		; gObjIsAccontConnect
EXTRN	?DataServerGetCharListRequest@@YAXF@Z:PROC	; DataServerGetCharListRequest
; Function compile flags: /Ogtp
;	COMDAT ?SendGame@CReconnect@@QAEXH@Z
_TEXT	SEGMENT
_pCRequest$ = -44					; size = 28
_szName$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
?SendGame@CReconnect@@QAEXH@Z PROC			; CReconnect::SendGame, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _UserIndex$[ebp]
  00014	56		 push	 esi

; 93   : 	gObj[UserIndex].bReconnect = false;

  00015	8b f3		 mov	 esi, ebx
  00017	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H

; 94   : 	// ---
; 95   : 	DataServerGetCharListRequest(UserIndex);

  0001d	53		 push	 ebx
  0001e	c6 86 5c 15 00
	00 00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+5468], 0
  00025	e8 00 00 00 00	 call	 ?DataServerGetCharListRequest@@YAXF@Z ; DataServerGetCharListRequest
  0002a	83 c4 04	 add	 esp, 4

; 96   : 	// ---
; 97   : 	if(!gReconnect.PacketCheckTime(&gObj[UserIndex]))

  0002d	8d 86 00 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi]
  00033	50		 push	 eax
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?gReconnect@@3VCReconnect@@A ; gReconnect
  00039	e8 00 00 00 00	 call	 ?PacketCheckTime@CReconnect@@AAE_NPAUOBJECTSTRUCT@@@Z ; CReconnect::PacketCheckTime
  0003e	84 c0		 test	 al, al
  00040	0f 84 c4 00 00
	00		 je	 $LN4@SendGame

; 98   : 	{
; 99   : 		return;
; 100  : 	}
; 101  : 	// ---
; 102  : 	if(!gObjIsAccontConnect(UserIndex, gObj[UserIndex].AccountID))

  00046	57		 push	 edi
  00047	8d be 64 00 00
	00		 lea	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+100]
  0004d	57		 push	 edi
  0004e	53		 push	 ebx
  0004f	e8 00 00 00 00	 call	 ?gObjIsAccontConnect@@YAHHPAD@Z ; gObjIsAccontConnect
  00054	83 c4 08	 add	 esp, 8
  00057	85 c0		 test	 eax, eax
  00059	0f 84 aa 00 00
	00		 je	 $LN10@SendGame

; 103  : 	{
; 104  : 		return;
; 105  : 	}
; 106  : 	// ---
; 107  : 	if(gObj[UserIndex].Connected == PLAYER_PLAYING)

  0005f	80 be 04 00 00
	00 03		 cmp	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+4], 3
  00066	0f 84 9d 00 00
	00		 je	 $LN10@SendGame

; 108  : 	{
; 109  : 		return;
; 110  : 	}
; 111  : 	// ---
; 112  : 	gObj[UserIndex].bEnableDelCharacter = 0;
; 113  : 	// ---
; 114  : 	char szName[MAX_ACCOUNT_LEN + 1];
; 115  : 	// ---
; 116  : 	SDHP_DBCHARINFOREQUEST pCRequest = {NULL};
; 117  : 	// ---
; 118  : 	pCRequest.h.set((LPBYTE)&pCRequest, 0x06, sizeof(pCRequest));
; 119  : 	// ---
; 120  : 	memset(szName, 0, MAX_ACCOUNT_LEN);
; 121  : 	memcpy(szName, gObj[UserIndex].Name, MAX_ACCOUNT_LEN);

  0006c	8b 8e 6f 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+111]
  00072	8b 96 73 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+115]
  00078	33 c0		 xor	 eax, eax
  0007a	89 45 f0	 mov	 DWORD PTR _szName$[ebp], eax
  0007d	89 45 d5	 mov	 DWORD PTR _pCRequest$[ebp+1], eax
  00080	89 45 f4	 mov	 DWORD PTR _szName$[ebp+4], eax
  00083	66 89 45 f8	 mov	 WORD PTR _szName$[ebp+8], ax
  00087	89 4d f0	 mov	 DWORD PTR _szName$[ebp], ecx
  0008a	89 45 d9	 mov	 DWORD PTR _pCRequest$[ebp+5], eax
  0008d	89 45 dd	 mov	 DWORD PTR _pCRequest$[ebp+9], eax
  00090	89 45 e1	 mov	 DWORD PTR _pCRequest$[ebp+13], eax
  00093	89 45 e5	 mov	 DWORD PTR _pCRequest$[ebp+17], eax
  00096	89 45 e9	 mov	 DWORD PTR _pCRequest$[ebp+21], eax
  00099	66 89 45 ed	 mov	 WORD PTR _pCRequest$[ebp+25], ax
  0009d	88 45 ef	 mov	 BYTE PTR _pCRequest$[ebp+27], al
  000a0	66 8b 86 77 00
	00 00		 mov	 ax, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+119]

; 122  : 	// ---
; 123  : 	BuxConvert(szName, MAX_ACCOUNT_LEN);

  000a7	8d 4d f0	 lea	 ecx, DWORD PTR _szName$[ebp]
  000aa	6a 0a		 push	 10			; 0000000aH
  000ac	51		 push	 ecx
  000ad	c6 86 09 00 00
	00 00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+9], 0
  000b4	66 c7 45 d4 c1
	1c		 mov	 WORD PTR _pCRequest$[ebp], 7361 ; 00001cc1H
  000ba	c6 45 d6 06	 mov	 BYTE PTR _pCRequest$[ebp+2], 6
  000be	89 55 f4	 mov	 DWORD PTR _szName$[ebp+4], edx
  000c1	66 89 45 f8	 mov	 WORD PTR _szName$[ebp+8], ax
  000c5	e8 00 00 00 00	 call	 ?BuxConvert@@YAXPADH@Z	; BuxConvert

; 124  : 	// ---
; 125  : 	memcpy(pCRequest.Name, szName, MAX_ACCOUNT_LEN);

  000ca	8b 55 f0	 mov	 edx, DWORD PTR _szName$[ebp]
  000cd	8b 45 f4	 mov	 eax, DWORD PTR _szName$[ebp+4]
  000d0	66 8b 4d f8	 mov	 cx, WORD PTR _szName$[ebp+8]
  000d4	89 55 e2	 mov	 DWORD PTR _pCRequest$[ebp+14], edx

; 126  : 	// ---
; 127  : 	strcpy(pCRequest.AccountID, gObj[UserIndex].AccountID);

  000d7	8d 55 d7	 lea	 edx, DWORD PTR _pCRequest$[ebp+3]
  000da	83 c4 08	 add	 esp, 8
  000dd	89 45 e6	 mov	 DWORD PTR _pCRequest$[ebp+18], eax
  000e0	66 89 4d ea	 mov	 WORD PTR _pCRequest$[ebp+22], cx
  000e4	8b c7		 mov	 eax, edi
  000e6	2b d7		 sub	 edx, edi
$LL6@SendGame:
  000e8	8a 08		 mov	 cl, BYTE PTR [eax]
  000ea	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000ed	40		 inc	 eax
  000ee	84 c9		 test	 cl, cl
  000f0	75 f6		 jne	 SHORT $LL6@SendGame

; 128  : 	// ---
; 129  : 	pCRequest.Number = UserIndex;
; 130  : 	// ---
; 131  : 	cDBSMng.Send((char*)&pCRequest, pCRequest.h.size);

  000f2	0f b6 55 d5	 movzx	 edx, BYTE PTR _pCRequest$[ebp+1]
  000f6	52		 push	 edx
  000f7	8d 45 d4	 lea	 eax, DWORD PTR _pCRequest$[ebp]
  000fa	50		 push	 eax
  000fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00100	66 89 5d ee	 mov	 WORD PTR _pCRequest$[ebp+26], bx
  00104	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN10@SendGame:
  00109	5f		 pop	 edi
$LN4@SendGame:

; 132  : }

  0010a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010d	5e		 pop	 esi
  0010e	33 cd		 xor	 ecx, ebp
  00110	5b		 pop	 ebx
  00111	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c2 04 00	 ret	 4
?SendGame@CReconnect@@QAEXH@Z ENDP			; CReconnect::SendGame
_TEXT	ENDS
PUBLIC	?SendClose@CReconnect@@QAEXH@Z			; CReconnect::SendClose
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
; Function compile flags: /Ogtp
;	COMDAT ?SendClose@CReconnect@@QAEXH@Z
_TEXT	SEGMENT
_pRequest$ = -4						; size = 4
_UserIndex$ = 8						; size = 4
?SendClose@CReconnect@@QAEXH@Z PROC			; CReconnect::SendClose, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 136  : 	CONNECTEX_CLOSE pRequest = {NULL};
; 137  : 	// ----
; 138  : 	pRequest.h.set((LPBYTE)&pRequest, 0xFB, 0xC, sizeof(CONNECTEX_CLOSE));
; 139  : 	// ----
; 140  : 	DataSend(UserIndex, (LPBYTE)&pRequest, pRequest.h.size);

  00004	8b 4d 08	 mov	 ecx, DWORD PTR _UserIndex$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	66 89 45 fd	 mov	 WORD PTR _pRequest$[ebp+1], ax
  0000d	6a 04		 push	 4
  0000f	8d 45 fc	 lea	 eax, DWORD PTR _pRequest$[ebp]
  00012	50		 push	 eax
  00013	c7 45 fc c1 04
	fb 00		 mov	 DWORD PTR _pRequest$[ebp], 16450753 ; 00fb04c1H
  0001a	51		 push	 ecx
  0001b	c6 45 ff 0c	 mov	 BYTE PTR _pRequest$[ebp+3], 12 ; 0000000cH
  0001f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SendClose@CReconnect@@QAEXH@Z ENDP			; CReconnect::SendClose
_TEXT	ENDS
END
