; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\AcceptIp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CAcceptIp@@6B@				; CAcceptIp::`vftable'
PUBLIC	??1CAcceptIp@@UAE@XZ				; CAcceptIp::~CAcceptIp
PUBLIC	??_R4CAcceptIp@@6B@				; CAcceptIp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAcceptIp@@@8				; CAcceptIp `RTTI Type Descriptor'
PUBLIC	??_R3CAcceptIp@@8				; CAcceptIp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAcceptIp@@8				; CAcceptIp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAcceptIp@@8			; CAcceptIp::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECAcceptIp@@UAEPAXI@Z:PROC			; CAcceptIp::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CAcceptIp@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\acceptip.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CAcceptIp@@8 DD FLAT:??_R0?AVCAcceptIp@@@8 ; CAcceptIp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAcceptIp@@8
rdata$r	ENDS
;	COMDAT ??_R2CAcceptIp@@8
rdata$r	SEGMENT
??_R2CAcceptIp@@8 DD FLAT:??_R1A@?0A@EA@CAcceptIp@@8	; CAcceptIp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CAcceptIp@@8
rdata$r	SEGMENT
??_R3CAcceptIp@@8 DD 00H				; CAcceptIp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CAcceptIp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAcceptIp@@@8
_DATA	SEGMENT
??_R0?AVCAcceptIp@@@8 DD FLAT:??_7type_info@@6B@	; CAcceptIp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAcceptIp@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CAcceptIp@@6B@
rdata$r	SEGMENT
??_R4CAcceptIp@@6B@ DD 00H				; CAcceptIp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAcceptIp@@@8
	DD	FLAT:??_R3CAcceptIp@@8
rdata$r	ENDS
;	COMDAT ??_7CAcceptIp@@6B@
CONST	SEGMENT
??_7CAcceptIp@@6B@ DD FLAT:??_R4CAcceptIp@@6B@		; CAcceptIp::`vftable'
	DD	FLAT:??_ECAcceptIp@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CAcceptIp@@UAE@XZ
_TEXT	SEGMENT
??1CAcceptIp@@UAE@XZ PROC				; CAcceptIp::~CAcceptIp, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CAcceptIp@@6B@

; 26   : 	return;
; 27   : }

  00006	c3		 ret	 0
??1CAcceptIp@@UAE@XZ ENDP				; CAcceptIp::~CAcceptIp
_TEXT	ENDS
PUBLIC	?Init@CAcceptIp@@QAEXXZ				; CAcceptIp::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CAcceptIp@@QAEXXZ
_TEXT	SEGMENT
?Init@CAcceptIp@@QAEXXZ PROC				; CAcceptIp::Init, COMDAT
; _this$ = ecx

; 30   : {

  00000	56		 push	 esi

; 31   : 	for (int n=0; n<MAX_USE_IP;n++)

  00001	33 d2		 xor	 edx, edx
  00003	33 f6		 xor	 esi, esi
  00005	8d 41 68	 lea	 eax, DWORD PTR [ecx+104]
$LL3@Init:

; 32   : 	{
; 33   : 		memset(this->szIp[n] , 0, sizeof(szIp[n]) );

  00008	89 10		 mov	 DWORD PTR [eax], edx
  0000a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0000d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00010	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 34   : 		this->UseIp[n]= false;

  00013	88 54 31 04	 mov	 BYTE PTR [ecx+esi+4], dl
  00017	46		 inc	 esi
  00018	83 c0 10	 add	 eax, 16			; 00000010H
  0001b	83 fe 64	 cmp	 esi, 100		; 00000064H
  0001e	7c e8		 jl	 SHORT $LL3@Init
  00020	5e		 pop	 esi

; 35   : 	}
; 36   : }

  00021	c3		 ret	 0
?Init@CAcceptIp@@QAEXXZ ENDP				; CAcceptIp::Init
_TEXT	ENDS
PUBLIC	?IsIp@CAcceptIp@@QAEHPAD@Z			; CAcceptIp::IsIp
; Function compile flags: /Ogtp
;	COMDAT ?IsIp@CAcceptIp@@QAEHPAD@Z
_TEXT	SEGMENT
_ip$ = 8						; size = 4
?IsIp@CAcceptIp@@QAEHPAD@Z PROC				; CAcceptIp::IsIp, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 40   : 	for(int n=0;n<MAX_USE_IP;n++)

  00006	33 f6		 xor	 esi, esi
  00008	8d 79 68	 lea	 edi, DWORD PTR [ecx+104]
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@IsIp:

; 41   : 	{
; 42   : 		if ( this->UseIp[n] != false )

  00010	80 7c 31 04 00	 cmp	 BYTE PTR [ecx+esi+4], 0
  00015	74 32		 je	 SHORT $LN4@IsIp

; 43   : 		{
; 44   : 			if ( strcmp(this->szIp[n], ip)== 0 )

  00017	8b 55 08	 mov	 edx, DWORD PTR _ip$[ebp]
  0001a	8b c7		 mov	 eax, edi
  0001c	8d 64 24 00	 npad	 4
$LL11@IsIp:
  00020	8a 18		 mov	 bl, BYTE PTR [eax]
  00022	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00024	75 1a		 jne	 SHORT $LN12@IsIp
  00026	84 db		 test	 bl, bl
  00028	74 12		 je	 SHORT $LN13@IsIp
  0002a	8a 58 01	 mov	 bl, BYTE PTR [eax+1]
  0002d	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00030	75 0e		 jne	 SHORT $LN12@IsIp
  00032	83 c0 02	 add	 eax, 2
  00035	83 c2 02	 add	 edx, 2
  00038	84 db		 test	 bl, bl
  0003a	75 e4		 jne	 SHORT $LL11@IsIp
$LN13@IsIp:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN14@IsIp
$LN12@IsIp:
  00040	1b c0		 sbb	 eax, eax
  00042	83 d8 ff	 sbb	 eax, -1
$LN14@IsIp:
  00045	85 c0		 test	 eax, eax
  00047	74 12		 je	 SHORT $LN9@IsIp
$LN4@IsIp:

; 40   : 	for(int n=0;n<MAX_USE_IP;n++)

  00049	46		 inc	 esi
  0004a	83 c7 10	 add	 edi, 16			; 00000010H
  0004d	83 fe 64	 cmp	 esi, 100		; 00000064H
  00050	7c be		 jl	 SHORT $LL5@IsIp

; 47   : 			}
; 48   : 		}
; 49   : 	}
; 50   : 	return FALSE;

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	33 c0		 xor	 eax, eax
  00056	5b		 pop	 ebx

; 51   : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN9@IsIp:
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 45   : 			{
; 46   : 				return TRUE;

  0005d	b8 01 00 00 00	 mov	 eax, 1
  00062	5b		 pop	 ebx

; 51   : }

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?IsIp@CAcceptIp@@QAEHPAD@Z ENDP				; CAcceptIp::IsIp
_TEXT	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CAcceptIp@@QAEXPAD@Z			; CAcceptIp::Load
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fopen:PROC
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CAcceptIp@@QAEXPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?Load@CAcceptIp@@QAEXPAD@Z PROC				; CAcceptIp::Load, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 55   : 	int count=0;
; 56   : 	int Token;
; 57   : 	
; 58   : 	SMDFile=fopen(filename, "r");

  00005	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000e	56		 push	 esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	33 ff		 xor	 edi, edi
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 59   : 
; 60   : 	if (SMDFile == NULL)

  00020	85 c0		 test	 eax, eax
  00022	75 1d		 jne	 SHORT $LN5@Load

; 61   : 	{
; 62   : 		MsgBox(lMsg.Get(MSGGET(0, 112)), filename);

  00024	56		 push	 esi
  00025	6a 70		 push	 112			; 00000070H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00037	83 c4 08	 add	 esp, 8
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx

; 88   : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN5@Load:

; 63   : 		return;
; 64   : 	}
; 65   : 
; 66   : 
; 67   : 	int n=0;
; 68   : 
; 69   : 	while ( true )
; 70   : 	{
; 71   : 		Token=GetToken();

  00041	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 
; 73   : 		if (Token == END)

  00046	83 f8 02	 cmp	 eax, 2
  00049	74 32		 je	 SHORT $LN12@Load

; 63   : 		return;
; 64   : 	}
; 65   : 
; 66   : 
; 67   : 	int n=0;
; 68   : 
; 69   : 	while ( true )
; 70   : 	{
; 71   : 		Token=GetToken();

  0004b	8b f3		 mov	 esi, ebx
  0004d	81 ee 00 00 00
	00		 sub	 esi, OFFSET _TokenString
  00053	83 c6 68	 add	 esi, 104		; 00000068H
$LL4@Load:

; 74   : 		{
; 75   : 			break;
; 76   : 		}
; 77   : 
; 78   : 		if ( Token == NAME )

  00056	85 c0		 test	 eax, eax
  00058	75 19		 jne	 SHORT $LN1@Load

; 79   : 		{
; 80   : 			strcpy(this->szIp[count] , TokenString);

  0005a	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
  0005f	90		 npad	 1
$LL8@Load:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  00065	40		 inc	 eax
  00066	84 c9		 test	 cl, cl
  00068	75 f6		 jne	 SHORT $LL8@Load

; 81   : 			this->UseIp[count] = true;

  0006a	c6 44 1f 04 01	 mov	 BYTE PTR [edi+ebx+4], 1

; 82   : 			count++;

  0006f	47		 inc	 edi
  00070	83 c6 10	 add	 esi, 16			; 00000010H
$LN1@Load:

; 72   : 
; 73   : 		if (Token == END)

  00073	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00078	83 f8 02	 cmp	 eax, 2
  0007b	75 d9		 jne	 SHORT $LL4@Load
$LN12@Load:

; 83   : 		}
; 84   : 	}
; 85   : 
; 86   : 	fclose(SMDFile);

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 _fclose
  00088	83 c4 04	 add	 esp, 4

; 87   : 	LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 164)), count);

  0008b	57		 push	 edi
  0008c	68 a4 01 00 00	 push	 420			; 000001a4H
  00091	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00096	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0009b	50		 push	 eax
  0009c	6a 00		 push	 0
  0009e	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx

; 88   : }

  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
?Load@CAcceptIp@@QAEXPAD@Z ENDP				; CAcceptIp::Load
_TEXT	ENDS
PUBLIC	??0CAcceptIp@@QAE@XZ				; CAcceptIp::CAcceptIp
; Function compile flags: /Ogtp
;	COMDAT ??0CAcceptIp@@QAE@XZ
_TEXT	SEGMENT
??0CAcceptIp@@QAE@XZ PROC				; CAcceptIp::CAcceptIp, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CAcceptIp@@6B@

; 21   : 	this->Init();

  00006	e8 00 00 00 00	 call	 ?Init@CAcceptIp@@QAEXXZ	; CAcceptIp::Init

; 22   : }

  0000b	8b c1		 mov	 eax, ecx
  0000d	c3		 ret	 0
??0CAcceptIp@@QAE@XZ ENDP				; CAcceptIp::CAcceptIp
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCAcceptIp@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCAcceptIp@@UAEPAXI@Z PROC				; CAcceptIp::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CAcceptIp@@UAE@XZ	; CAcceptIp::~CAcceptIp
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCAcceptIp@@UAEPAXI@Z ENDP				; CAcceptIp::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EacceptIP@@YAXXZ
text$yc	SEGMENT
??__EacceptIP@@YAXXZ PROC				; `dynamic initializer for 'acceptIP'', COMDAT

; 16   : CAcceptIp acceptIP;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?acceptIP@@3VCAcceptIp@@A ; acceptIP
  00005	e8 00 00 00 00	 call	 ??0CAcceptIp@@QAE@XZ	; CAcceptIp::CAcceptIp
  0000a	68 00 00 00 00	 push	 OFFSET ??__FacceptIP@@YAXXZ ; `dynamic atexit destructor for 'acceptIP''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EacceptIP@@YAXXZ ENDP				; `dynamic initializer for 'acceptIP''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FacceptIP@@YAXXZ
text$yd	SEGMENT
??__FacceptIP@@YAXXZ PROC				; `dynamic atexit destructor for 'acceptIP'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?acceptIP@@3VCAcceptIp@@A ; acceptIP
  00005	e9 00 00 00 00	 jmp	 ??1CAcceptIp@@UAE@XZ	; CAcceptIp::~CAcceptIp
??__FacceptIP@@YAXXZ ENDP				; `dynamic atexit destructor for 'acceptIP''
text$yd	ENDS
PUBLIC	?acceptIP@@3VCAcceptIp@@A			; acceptIP
_BSS	SEGMENT
?acceptIP@@3VCAcceptIp@@A DB 06a8H DUP (?)		; acceptIP
_BSS	ENDS
CRT$XCU	SEGMENT
_acceptIP$initializer$ DD FLAT:??__EacceptIP@@YAXXZ
CRT$XCU	ENDS
END
