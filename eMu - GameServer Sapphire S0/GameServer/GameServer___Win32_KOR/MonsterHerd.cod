; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\MonsterHerd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0_MONSTER_HERD_DATA@@QAE@XZ			; _MONSTER_HERD_DATA::_MONSTER_HERD_DATA
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\monsterherd.h
;	COMDAT ??0_MONSTER_HERD_DATA@@QAE@XZ
_TEXT	SEGMENT
??0_MONSTER_HERD_DATA@@QAE@XZ PROC			; _MONSTER_HERD_DATA::_MONSTER_HERD_DATA, COMDAT
; _this$ = ecx

; 22   : 	_MONSTER_HERD_DATA()

  00000	8b c1		 mov	 eax, ecx

; 23   : 	{
; 24   : 		this->m_iIndex = -1;

  00002	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 25   : 		this->m_iType = -1;

  00008	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 26   : 		this->m_iX = -1;

  0000f	66 c7 40 08 ff
	ff		 mov	 WORD PTR [eax+8], 65535	; 0000ffffH

; 27   : 		this->m_iY = -1;
; 28   : 		this->m_bRegen = FALSE;

  00015	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 29   : 	}

  0001c	c3		 ret	 0
??0_MONSTER_HERD_DATA@@QAE@XZ ENDP			; _MONSTER_HERD_DATA::_MONSTER_HERD_DATA
_TEXT	ENDS
PUBLIC	?SetTotalInfo@MonsterHerd@@UAEHHHHH@Z		; MonsterHerd::SetTotalInfo
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\monsterherd.cpp
;	COMDAT ?SetTotalInfo@MonsterHerd@@UAEHHHHH@Z
_TEXT	SEGMENT
_iMapNumber$ = 8					; size = 4
_iRadius$ = 12						; size = 4
_iStartX$ = 16						; size = 4
_iStartY$ = 20						; size = 4
?SetTotalInfo@MonsterHerd@@UAEHHHHH@Z PROC		; MonsterHerd::SetTotalInfo, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 35   : 	if ( MAX_MAP_RANGE(iMapNumber) == FALSE ) 

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _iMapNumber$[ebp]
  00009	85 c9		 test	 ecx, ecx
  0000b	78 0c		 js	 SHORT $LN17@SetTotalIn
  0000d	33 c0		 xor	 eax, eax
  0000f	83 f9 27	 cmp	 ecx, 39			; 00000027H
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	75 07		 jne	 SHORT $LN6@SetTotalIn
$LN17@SetTotalIn:

; 36   : 	{
; 37   : 		return FALSE;

  00019	33 c0		 xor	 eax, eax
  0001b	5e		 pop	 esi

; 62   : 	return TRUE;
; 63   : }

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
$LN6@SetTotalIn:
  00020	53		 push	 ebx

; 38   : 	}
; 39   : 
; 40   : 	if ( ((iStartX < 0)? FALSE : (iStartX > 254 )? FALSE : TRUE ) == FALSE || ( ( iStartY < 0)?FALSE : (iStartY > 254)? FALSE : TRUE) == FALSE)

  00021	8b 5d 10	 mov	 ebx, DWORD PTR _iStartX$[ebp]
  00024	57		 push	 edi
  00025	85 db		 test	 ebx, ebx
  00027	78 6d		 js	 SHORT $LN4@SetTotalIn
  00029	33 c0		 xor	 eax, eax
  0002b	81 fb fe 00 00
	00		 cmp	 ebx, 254		; 000000feH
  00031	0f 9e c0	 setle	 al
  00034	85 c0		 test	 eax, eax
  00036	74 5e		 je	 SHORT $LN4@SetTotalIn
  00038	8b 7d 14	 mov	 edi, DWORD PTR _iStartY$[ebp]
  0003b	85 ff		 test	 edi, edi
  0003d	78 57		 js	 SHORT $LN4@SetTotalIn
  0003f	33 c0		 xor	 eax, eax
  00041	81 ff fe 00 00
	00		 cmp	 edi, 254		; 000000feH
  00047	0f 9e c0	 setle	 al
  0004a	85 c0		 test	 eax, eax
  0004c	74 48		 je	 SHORT $LN4@SetTotalIn

; 43   : 	}
; 44   : 
; 45   : 	BYTE btMapAttr = MapC[iMapNumber].GetAttr(iStartX, iStartY);

  0004e	69 c9 08 07 05
	00		 imul	 ecx, 329480		; 00050708H
  00054	57		 push	 edi
  00055	53		 push	 ebx
  00056	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0005c	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 46   : 
; 47   : 	if ( ( btMapAttr & 1) == 1  || (btMapAttr & 4) == 4 || (btMapAttr&8)==8)

  00061	a8 0d		 test	 al, 13			; 0000000dH
  00063	75 31		 jne	 SHORT $LN4@SetTotalIn

; 48   : 	{
; 49   : 		return FALSE;
; 50   : 	}
; 51   : 
; 52   : 	if ( ( ( iRadius < 0 )? FALSE : ( iRadius > 15 )? FALSE : TRUE ) == FALSE )

  00065	8b 45 0c	 mov	 eax, DWORD PTR _iRadius$[ebp]
  00068	85 c0		 test	 eax, eax
  0006a	78 2a		 js	 SHORT $LN4@SetTotalIn
  0006c	33 c9		 xor	 ecx, ecx
  0006e	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00071	0f 9e c1	 setle	 cl
  00074	85 c9		 test	 ecx, ecx

; 53   : 	{
; 54   : 		return FALSE;

  00076	74 1e		 je	 SHORT $LN4@SetTotalIn

; 55   : 	}
; 56   : 
; 57   : 	this->m_iMapNumber = iMapNumber;

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _iMapNumber$[ebp]

; 58   : 	this->m_iCUR_X = iStartX;
; 59   : 	this->m_iCUR_Y = iStartY;

  0007b	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 60   : 	this->m_iRADIUS = iRadius;

  0007e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00081	5f		 pop	 edi
  00082	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 61   : 	this->m_bHasInfo = 1;

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	5b		 pop	 ebx
  0008b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0008e	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00091	5e		 pop	 esi

; 62   : 	return TRUE;
; 63   : }

  00092	5d		 pop	 ebp
  00093	c2 10 00	 ret	 16			; 00000010H
$LN4@SetTotalIn:
  00096	5f		 pop	 edi
  00097	5b		 pop	 ebx

; 41   : 	{
; 42   : 		return FALSE;

  00098	33 c0		 xor	 eax, eax
  0009a	5e		 pop	 esi

; 62   : 	return TRUE;
; 63   : }

  0009b	5d		 pop	 ebp
  0009c	c2 10 00	 ret	 16			; 00000010H
?SetTotalInfo@MonsterHerd@@UAEHHHHH@Z ENDP		; MonsterHerd::SetTotalInfo
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?SetRadius@MonsterHerd@@UAEXH@Z			; MonsterHerd::SetRadius
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\monsterherd.cpp
;	COMDAT ?SetRadius@MonsterHerd@@UAEXH@Z
_TEXT	SEGMENT
_iRadius$ = 8						; size = 4
?SetRadius@MonsterHerd@@UAEXH@Z PROC			; MonsterHerd::SetRadius, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 	if ( ((iRadius<0)?FALSE:(iRadius>15)?FALSE:TRUE) != FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iRadius$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 0c		 js	 SHORT $LN6@SetRadius
  0000a	33 d2		 xor	 edx, edx
  0000c	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0000f	0f 9e c2	 setle	 dl
  00012	85 d2		 test	 edx, edx
  00014	75 03		 jne	 SHORT $LN2@SetRadius
$LN6@SetRadius:

; 141  : 	{
; 142  : 		return;
; 143  : 	}
; 144  : 
; 145  : 	this->m_iRADIUS = iRadius;

  00016	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN2@SetRadius:

; 146  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?SetRadius@MonsterHerd@@UAEXH@Z ENDP			; MonsterHerd::SetRadius
_TEXT	ENDS
PUBLIC	?SetPosition@MonsterHerd@@UAEXEE@Z		; MonsterHerd::SetPosition
; Function compile flags: /Ogtp
;	COMDAT ?SetPosition@MonsterHerd@@UAEXEE@Z
_TEXT	SEGMENT
_iTX$ = 8						; size = 1
_iTY$ = 12						; size = 1
?SetPosition@MonsterHerd@@UAEXEE@Z PROC			; MonsterHerd::SetPosition, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 154  : 	if ( this->m_bHasInfo == 0 )

  00006	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  0000a	74 2c		 je	 SHORT $LN1@SetPositio

; 155  : 	{
; 156  : 		return;
; 157  : 	}
; 158  : 
; 159  : 	BYTE btMapAttr = MapC[this->m_iMapNumber].GetAttr(iTX, iTY);

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	53		 push	 ebx
  00010	69 c9 08 07 05
	00		 imul	 ecx, 329480		; 00050708H
  00016	0f b6 5d 08	 movzx	 ebx, BYTE PTR _iTX$[ebp]
  0001a	57		 push	 edi
  0001b	0f b6 7d 0c	 movzx	 edi, BYTE PTR _iTY$[ebp]
  0001f	57		 push	 edi
  00020	53		 push	 ebx
  00021	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00027	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 160  : 
; 161  : 	if ( (btMapAttr&1) == 1 || (btMapAttr&4)==4 || (btMapAttr&8) == 8 )

  0002c	a8 0d		 test	 al, 13			; 0000000dH
  0002e	75 06		 jne	 SHORT $LN6@SetPositio

; 162  : 	{
; 163  : 		return;
; 164  : 	}
; 165  : 
; 166  : 	this->m_iCUR_X = iTX;

  00030	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 167  : 	this->m_iCUR_Y = iTY;

  00033	89 7e 10	 mov	 DWORD PTR [esi+16], edi
$LN6@SetPositio:
  00036	5f		 pop	 edi
  00037	5b		 pop	 ebx
$LN1@SetPositio:
  00038	5e		 pop	 esi

; 168  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?SetPosition@MonsterHerd@@UAEXEE@Z ENDP			; MonsterHerd::SetPosition
_TEXT	ENDS
PUBLIC	?Start@MonsterHerd@@UAEHXZ			; MonsterHerd::Start
; Function compile flags: /Ogtp
;	COMDAT ?Start@MonsterHerd@@UAEHXZ
_TEXT	SEGMENT
?Start@MonsterHerd@@UAEHXZ PROC				; MonsterHerd::Start, COMDAT
; _this$ = ecx

; 176  : 	if ( this->m_bHerdActive != 0 )

  00000	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00004	74 03		 je	 SHORT $LN2@Start
$LN5@Start:

; 177  : 	{
; 178  : 		return FALSE;

  00006	33 c0		 xor	 eax, eax

; 187  : 	return TRUE;
; 188  : }

  00008	c3		 ret	 0
$LN2@Start:

; 179  : 	}
; 180  : 
; 181  : 	if ( this->m_bHasInfo == 0 )

  00009	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0

; 182  : 	{
; 183  : 		return FALSE;

  0000d	74 f7		 je	 SHORT $LN5@Start

; 184  : 	}
; 185  : 
; 186  : 	this->m_bHerdActive = 1;

  0000f	b8 01 00 00 00	 mov	 eax, 1
  00014	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 187  : 	return TRUE;
; 188  : }

  00017	c3		 ret	 0
?Start@MonsterHerd@@UAEHXZ ENDP				; MonsterHerd::Start
_TEXT	ENDS
PUBLIC	?CheckInRadius@MonsterHerd@@UAEHH@Z		; MonsterHerd::CheckInRadius
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
; Function compile flags: /Ogtp
;	COMDAT ?CheckInRadius@MonsterHerd@@UAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CheckInRadius@MonsterHerd@@UAEHH@Z PROC		; MonsterHerd::CheckInRadius, COMDAT
; _this$ = ecx

; 395  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 396  : 	if ( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 55		 js	 SHORT $LN2@CheckInRad
  0000a	33 c0		 xor	 eax, eax
  0000c	81 fa e7 1c 00
	00		 cmp	 edx, 7399		; 00001ce7H
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax

; 397  : 	{
; 398  : 		return FALSE;

  00017	74 46		 je	 SHORT $LN2@CheckInRad

; 399  : 	}
; 400  : 
; 401  : 	LPOBJ lpOBJ = &gObj[iIndex];

  00019	69 d2 64 15 00
	00		 imul	 edx, 5476		; 00001564H
  0001f	81 c2 00 00 00
	00		 add	 edx, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 402  : 
; 403  : 	if ( lpOBJ->Connected < PLAYER_PLAYING || lpOBJ->Type != OBJ_MONSTER )

  00025	80 7a 04 03	 cmp	 BYTE PTR [edx+4], 3
  00029	72 34		 jb	 SHORT $LN2@CheckInRad
  0002b	66 83 7a 60 02	 cmp	 WORD PTR [edx+96], 2
  00030	75 2d		 jne	 SHORT $LN2@CheckInRad

; 406  : 	}
; 407  : 
; 408  : 	int iX2 = (lpOBJ->X - this->m_iCUR_X) * (lpOBJ->X - this->m_iCUR_X);
; 409  : 	int iY2 = (lpOBJ->Y - this->m_iCUR_Y) * (lpOBJ->Y - this->m_iCUR_Y);

  00032	0f bf 82 06 01
	00 00		 movsx	 eax, WORD PTR [edx+262]
  00039	0f bf 92 04 01
	00 00		 movsx	 edx, WORD PTR [edx+260]
  00040	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00043	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]

; 410  : 
; 411  : 	if ( (this->m_iRADIUS * this->m_iRADIUS) < (iX2+iY2) )

  00046	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00049	0f af c0	 imul	 eax, eax
  0004c	0f af d2	 imul	 edx, edx
  0004f	0f af c9	 imul	 ecx, ecx
  00052	03 d0		 add	 edx, eax
  00054	33 c0		 xor	 eax, eax
  00056	3b ca		 cmp	 ecx, edx
  00058	0f 9d c0	 setge	 al

; 412  : 	{
; 413  : 		return FALSE;
; 414  : 	}
; 415  : 
; 416  : 	return TRUE;
; 417  : }

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN2@CheckInRad:

; 404  : 	{
; 405  : 		return FALSE;

  0005f	33 c0		 xor	 eax, eax

; 412  : 	{
; 413  : 		return FALSE;
; 414  : 	}
; 415  : 
; 416  : 	return TRUE;
; 417  : }

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?CheckInRadius@MonsterHerd@@UAEHH@Z ENDP		; MonsterHerd::CheckInRadius
_TEXT	ENDS
PUBLIC	?GetCurrentLocation@MonsterHerd@@UAEHAAE0@Z	; MonsterHerd::GetCurrentLocation
; Function compile flags: /Ogtp
;	COMDAT ?GetCurrentLocation@MonsterHerd@@UAEHAAE0@Z
_TEXT	SEGMENT
_cX$ = 8						; size = 4
_cY$ = 12						; size = 4
?GetCurrentLocation@MonsterHerd@@UAEHAAE0@Z PROC	; MonsterHerd::GetCurrentLocation, COMDAT
; _this$ = ecx

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 426  : 	if ( this->m_bHasInfo == 0 )

  00003	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00007	75 06		 jne	 SHORT $LN1@GetCurrent

; 427  : 	{
; 428  : 		return FALSE;

  00009	33 c0		 xor	 eax, eax

; 435  : }

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
$LN1@GetCurrent:

; 429  : 	}
; 430  : 
; 431  : 	cX = this->m_iCUR_X;

  0000f	0f b6 41 0c	 movzx	 eax, BYTE PTR [ecx+12]
  00013	8b 55 08	 mov	 edx, DWORD PTR _cX$[ebp]
  00016	88 02		 mov	 BYTE PTR [edx], al

; 432  : 	cY = this->m_iCUR_Y ;

  00018	0f b6 41 10	 movzx	 eax, BYTE PTR [ecx+16]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _cY$[ebp]
  0001f	88 01		 mov	 BYTE PTR [ecx], al

; 433  : 
; 434  : 	return TRUE;

  00021	b8 01 00 00 00	 mov	 eax, 1

; 435  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?GetCurrentLocation@MonsterHerd@@UAEHAAE0@Z ENDP	; MonsterHerd::GetCurrentLocation
_TEXT	ENDS
PUBLIC	?GetRandomLocation@MonsterHerd@@UAEHAAE0@Z	; MonsterHerd::GetRandomLocation
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetRandomLocation@MonsterHerd@@UAEHAAE0@Z
_TEXT	SEGMENT
_iCount$ = -4						; size = 4
_cX$ = 8						; size = 4
_cY$ = 12						; size = 4
?GetRandomLocation@MonsterHerd@@UAEHAAE0@Z PROC		; MonsterHerd::GetRandomLocation, COMDAT
; _this$ = ecx

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 441  : 	if ( this->m_bHasInfo == 0 )

  00007	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  0000b	75 09		 jne	 SHORT $LN4@GetRandomL

; 442  : 	{
; 443  : 		return FALSE;

  0000d	33 c0		 xor	 eax, eax
  0000f	5e		 pop	 esi

; 462  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
$LN4@GetRandomL:
  00016	57		 push	 edi

; 444  : 	}
; 445  : 
; 446  : 	int iCount = 100;

  00017	8b 7d 08	 mov	 edi, DWORD PTR _cX$[ebp]
  0001a	c7 45 fc 64 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 100 ; 00000064H
  00021	53		 push	 ebx
$LL3@GetRandomL:

; 447  : 
; 448  : 	while ( iCount-- != 0)

  00022	ff 4d fc	 dec	 DWORD PTR _iCount$[ebp]

; 449  : 	{
; 450  : 		cX = rand()%(this->m_iRADIUS+1) * (((rand()%2==0)?-1:1)) + this->m_iCUR_X;

  00025	e8 00 00 00 00	 call	 _rand
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	99		 cdq
  0002e	41		 inc	 ecx
  0002f	f7 f9		 idiv	 ecx
  00031	8b da		 mov	 ebx, edx
  00033	e8 00 00 00 00	 call	 _rand
  00038	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0003d	79 05		 jns	 SHORT $LN13@GetRandomL
  0003f	48		 dec	 eax
  00040	83 c8 fe	 or	 eax, -2			; fffffffeH
  00043	40		 inc	 eax
$LN13@GetRandomL:
  00044	f7 d8		 neg	 eax
  00046	1a c0		 sbb	 al, al
  00048	24 02		 and	 al, 2
  0004a	fe c8		 dec	 al
  0004c	f6 eb		 imul	 bl
  0004e	02 46 0c	 add	 al, BYTE PTR [esi+12]
  00051	88 07		 mov	 BYTE PTR [edi], al

; 451  : 		cY = rand()%(this->m_iRADIUS+1) * (((!(rand()%2)))?-1:1) + this->m_iCUR_Y;

  00053	e8 00 00 00 00	 call	 _rand
  00058	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0005b	99		 cdq
  0005c	41		 inc	 ecx
  0005d	f7 f9		 idiv	 ecx
  0005f	8b da		 mov	 ebx, edx
  00061	e8 00 00 00 00	 call	 _rand
  00066	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0006b	79 05		 jns	 SHORT $LN14@GetRandomL
  0006d	48		 dec	 eax
  0006e	83 c8 fe	 or	 eax, -2			; fffffffeH
  00071	40		 inc	 eax
$LN14@GetRandomL:
  00072	8b 55 0c	 mov	 edx, DWORD PTR _cY$[ebp]
  00075	f7 d8		 neg	 eax
  00077	1a c0		 sbb	 al, al
  00079	24 02		 and	 al, 2
  0007b	fe c8		 dec	 al
  0007d	f6 eb		 imul	 bl
  0007f	02 46 10	 add	 al, BYTE PTR [esi+16]
  00082	88 02		 mov	 BYTE PTR [edx], al

; 452  : 
; 453  : 		BYTE attr = MapC[this->m_iMapNumber].GetAttr(cX, cY);
; 454  : 
; 455  : 		if ( attr == 0 )

  00084	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00087	0f b6 c0	 movzx	 eax, al
  0008a	50		 push	 eax
  0008b	51		 push	 ecx
  0008c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008f	69 c9 08 07 05
	00		 imul	 ecx, 329480		; 00050708H
  00095	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0009b	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  000a0	84 c0		 test	 al, al
  000a2	74 15		 je	 SHORT $LN8@GetRandomL

; 447  : 
; 448  : 	while ( iCount-- != 0)

  000a4	83 7d fc 00	 cmp	 DWORD PTR _iCount$[ebp], 0
  000a8	0f 85 74 ff ff
	ff		 jne	 $LL3@GetRandomL

; 458  : 		}
; 459  : 	}
; 460  : 
; 461  : 	return FALSE;

  000ae	5b		 pop	 ebx
  000af	5f		 pop	 edi
  000b0	33 c0		 xor	 eax, eax
  000b2	5e		 pop	 esi

; 462  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
$LN8@GetRandomL:
  000b9	5b		 pop	 ebx
  000ba	5f		 pop	 edi

; 456  : 		{
; 457  : 			return TRUE;

  000bb	b8 01 00 00 00	 mov	 eax, 1
  000c0	5e		 pop	 esi

; 462  : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 08 00	 ret	 8
?GetRandomLocation@MonsterHerd@@UAEHAAE0@Z ENDP		; MonsterHerd::GetRandomLocation
_TEXT	ENDS
PUBLIC	?CheckLocation@MonsterHerd@@UAEHAAE0@Z		; MonsterHerd::CheckLocation
; Function compile flags: /Ogtp
;	COMDAT ?CheckLocation@MonsterHerd@@UAEHAAE0@Z
_TEXT	SEGMENT
_cX$ = 8						; size = 4
_cY$ = 12						; size = 4
?CheckLocation@MonsterHerd@@UAEHAAE0@Z PROC		; MonsterHerd::CheckLocation, COMDAT
; _this$ = ecx

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 469  : 	BYTE btMapAttr = MapC[this->m_iMapNumber].GetAttr(cX, cY);

  00003	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _cY$[ebp]
  00009	69 c9 08 07 05
	00		 imul	 ecx, 329480		; 00050708H
  0000f	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00012	8b 45 08	 mov	 eax, DWORD PTR _cX$[ebp]
  00015	52		 push	 edx
  00016	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00019	52		 push	 edx
  0001a	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00020	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 470  : 
; 471  : 	if ( (btMapAttr&1) == 1 || (btMapAttr&4) == 4 || (btMapAttr&8) == 8 )

  00025	a8 0d		 test	 al, 13			; 0000000dH
  00027	75 09		 jne	 SHORT $LN1@CheckLocat

; 474  : 	}
; 475  : 
; 476  : 	return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 477  : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN1@CheckLocat:

; 472  : 	{
; 473  : 		return FALSE;

  00032	33 c0		 xor	 eax, eax

; 477  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?CheckLocation@MonsterHerd@@UAEHAAE0@Z ENDP		; MonsterHerd::CheckLocation
_TEXT	ENDS
PUBLIC	?MoveHerd@MonsterHerd@@UAEHEE@Z			; MonsterHerd::MoveHerd
; Function compile flags: /Ogtp
;	COMDAT ?MoveHerd@MonsterHerd@@UAEHEE@Z
_TEXT	SEGMENT
_iTX$ = 8						; size = 1
_iTY$ = 12						; size = 1
?MoveHerd@MonsterHerd@@UAEHEE@Z PROC			; MonsterHerd::MoveHerd, COMDAT
; _this$ = ecx

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 484  : 	if ( this->m_bHasInfo == 0 )

  00006	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  0000a	75 07		 jne	 SHORT $LN3@MoveHerd

; 485  : 	{
; 486  : 		return FALSE;

  0000c	33 c0		 xor	 eax, eax
  0000e	5e		 pop	 esi

; 500  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN3@MoveHerd:

; 487  : 	}
; 488  : 
; 489  : 	BYTE btMapAttr = MapC[this->m_iMapNumber].GetAttr(iTX, iTY);

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	53		 push	 ebx
  00017	69 c9 08 07 05
	00		 imul	 ecx, 329480		; 00050708H
  0001d	0f b6 5d 08	 movzx	 ebx, BYTE PTR _iTX$[ebp]
  00021	57		 push	 edi
  00022	0f b6 7d 0c	 movzx	 edi, BYTE PTR _iTY$[ebp]
  00026	57		 push	 edi
  00027	53		 push	 ebx
  00028	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0002e	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 490  : 
; 491  : 	if ( (btMapAttr&1) == 1 || (btMapAttr&4) == 4 || (btMapAttr&8) == 8 )

  00033	a8 0d		 test	 al, 13			; 0000000dH
  00035	75 12		 jne	 SHORT $LN1@MoveHerd

; 494  : 	}
; 495  : 
; 496  : 	this->m_iCUR_X = iTX;
; 497  : 	this->m_iCUR_Y = iTY;

  00037	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0003a	5f		 pop	 edi
  0003b	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0003e	5b		 pop	 ebx

; 498  : 
; 499  : 	return TRUE;

  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	5e		 pop	 esi

; 500  : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN1@MoveHerd:
  00049	5f		 pop	 edi
  0004a	5b		 pop	 ebx

; 492  : 	{
; 493  : 		return FALSE;

  0004b	33 c0		 xor	 eax, eax
  0004d	5e		 pop	 esi

; 500  : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?MoveHerd@MonsterHerd@@UAEHEE@Z ENDP			; MonsterHerd::MoveHerd
_TEXT	ENDS
PUBLIC	?MonsterHerdItemDrop@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z ; MonsterHerd::MonsterHerdItemDrop
; Function compile flags: /Ogtp
;	COMDAT ?MonsterHerdItemDrop@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?MonsterHerdItemDrop@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z PROC ; MonsterHerd::MonsterHerdItemDrop, COMDAT
; _this$ = ecx

; 507  : 	return FALSE;	// NO MACRO

  00000	33 c0		 xor	 eax, eax

; 508  : }

  00002	c2 04 00	 ret	 4
?MonsterHerdItemDrop@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z ENDP ; MonsterHerd::MonsterHerdItemDrop
_TEXT	ENDS
PUBLIC	?MonsterMoveAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z ; MonsterHerd::MonsterMoveAction
; Function compile flags: /Ogtp
;	COMDAT ?MonsterMoveAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_tpy$ = -1						; size = 1
_lpObj$ = 8						; size = 4
_tpx$ = 11						; size = 1
?MonsterMoveAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z PROC ; MonsterHerd::MonsterMoveAction, COMDAT
; _this$ = ecx

; 512  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 513  : 	if ( lpObj->m_SkillHarden != 0 )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	83 bb 98 02 00
	00 00		 cmp	 DWORD PTR [ebx+664], 0
  0000f	57		 push	 edi
  00010	8b f9		 mov	 edi, ecx
  00012	0f 85 80 00 00
	00		 jne	 $LN4@MonsterMov

; 514  : 	{
; 515  : 		return;
; 516  : 	}
; 517  : 
; 518  : 	if ( lpObj == NULL )
; 519  : 	{
; 520  : 		return;
; 521  : 	}
; 522  : 
; 523  : 	if ( lpObj->Connected < PLAYER_PLAYING || lpObj->Type != OBJ_MONSTER )

  00018	80 7b 04 03	 cmp	 BYTE PTR [ebx+4], 3
  0001c	72 7a		 jb	 SHORT $LN4@MonsterMov
  0001e	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  00023	75 73		 jne	 SHORT $LN4@MonsterMov

; 524  : 	{
; 525  : 		return;
; 526  : 	}
; 527  : 
; 528  : 	int searchc = 10;

  00025	56		 push	 esi
  00026	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH

; 529  : 	BYTE tpx;
; 530  : 	BYTE tpy;
; 531  : 
; 532  : 	lpObj->NextActionTime = 1000;

  0002b	c7 83 1c 02 00
	00 e8 03 00 00	 mov	 DWORD PTR [ebx+540], 1000 ; 000003e8H
$LL3@MonsterMov:

; 535  : 	{
; 536  : 		BOOL ret = this->GetRandomLocation(tpx, tpy);

  00035	8b 07		 mov	 eax, DWORD PTR [edi]
  00037	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0003a	8d 4d ff	 lea	 ecx, DWORD PTR _tpy$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 0b	 lea	 edx, DWORD PTR _tpx$[ebp]
  00041	52		 push	 edx
  00042	8b cf		 mov	 ecx, edi
  00044	4e		 dec	 esi
  00045	ff d0		 call	 eax

; 537  : 
; 538  : 		if ( ret != FALSE )

  00047	85 c0		 test	 eax, eax
  00049	75 0d		 jne	 SHORT $LN11@MonsterMov

; 533  : 
; 534  : 	while ( searchc-- != 0 )

  0004b	85 f6		 test	 esi, esi
  0004d	75 e6		 jne	 SHORT $LL3@MonsterMov
  0004f	5e		 pop	 esi
  00050	5f		 pop	 edi
  00051	5b		 pop	 ebx

; 547  : 
; 548  : 			break;
; 549  : 		}
; 550  : 	}
; 551  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN11@MonsterMov:

; 539  : 		{
; 540  : 			lpObj->TargetNumber = -1;
; 541  : 			lpObj->m_ActState.Attack = 0;
; 542  : 			lpObj->NextActionTime = 500;
; 543  : 			lpObj->m_ActState.Emotion = 0;
; 544  : 			lpObj->MTX = tpx;

  00058	0f b6 55 0b	 movzx	 edx, BYTE PTR _tpx$[ebp]

; 545  : 			lpObj->MTY = tpy;

  0005c	0f b6 45 ff	 movzx	 eax, BYTE PTR _tpy$[ebp]
  00060	83 c9 ff	 or	 ecx, -1
  00063	66 89 8b d4 02
	00 00		 mov	 WORD PTR [ebx+724], cx
  0006a	8b 8b b4 01 00
	00		 mov	 ecx, DWORD PTR [ebx+436]
  00070	81 e1 0d ff ff
	ff		 and	 ecx, -243		; ffffff0dH

; 546  : 			lpObj->m_ActState.Move = 1;

  00076	83 c9 04	 or	 ecx, 4
  00079	c7 83 1c 02 00
	00 f4 01 00 00	 mov	 DWORD PTR [ebx+540], 500 ; 000001f4H
  00083	66 89 93 24 01
	00 00		 mov	 WORD PTR [ebx+292], dx
  0008a	66 89 83 26 01
	00 00		 mov	 WORD PTR [ebx+294], ax
  00091	89 8b b4 01 00
	00		 mov	 DWORD PTR [ebx+436], ecx
  00097	5e		 pop	 esi
$LN4@MonsterMov:
  00098	5f		 pop	 edi
  00099	5b		 pop	 ebx

; 547  : 
; 548  : 			break;
; 549  : 		}
; 550  : 	}
; 551  : }

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?MonsterMoveAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z ENDP ; MonsterHerd::MonsterMoveAction
_TEXT	ENDS
PUBLIC	?MonsterAttackAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z ; MonsterHerd::MonsterAttackAction
; Function compile flags: /Ogtp
;	COMDAT ?MonsterAttackAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?MonsterAttackAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z PROC ; MonsterHerd::MonsterAttackAction, COMDAT
; _this$ = ecx

; 556  : 	return;	// Here goes a MACRO
; 557  : }

  00000	c2 08 00	 ret	 8
?MonsterAttackAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z ENDP ; MonsterHerd::MonsterAttackAction
_TEXT	ENDS
PUBLIC	?MonsterBaseAct@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z ; MonsterHerd::MonsterBaseAct
EXTRN	?gObjMonsterSearchEnemy@@YAHPAUOBJECTSTRUCT@@E@Z:PROC ; gObjMonsterSearchEnemy
EXTRN	?gObjMonsterGetTargetPos@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterGetTargetPos
EXTRN	?GetPathPacketDirPos@@YAEHH@Z:PROC		; GetPathPacketDirPos
EXTRN	?CheckWall@MapClass@@QAEHHHHH@Z:PROC		; MapClass::CheckWall
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
; Function compile flags: /Ogtp
;	COMDAT ?MonsterBaseAct@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpTargetObj$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?MonsterBaseAct@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z PROC ; MonsterHerd::MonsterBaseAct, COMDAT
; _this$ = ecx

; 564  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 565  : 	LPOBJ lpTargetObj = NULL;
; 566  : 
; 567  : 	if ( lpObj->TargetNumber >= 0 )

  00006	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00009	0f b7 96 d4 02
	00 00		 movzx	 edx, WORD PTR [esi+724]
  00010	57		 push	 edi
  00011	33 ff		 xor	 edi, edi
  00013	8b d9		 mov	 ebx, ecx
  00015	89 7d fc	 mov	 DWORD PTR _lpTargetObj$[ebp], edi
  00018	66 85 d2	 test	 dx, dx
  0001b	78 15		 js	 SHORT $LN30@MonsterBas

; 568  : 	{
; 569  : 		lpTargetObj = &gObj[lpObj->TargetNumber];

  0001d	0f bf c2	 movsx	 eax, dx
  00020	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  00026	05 00 00 00 00	 add	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	89 45 fc	 mov	 DWORD PTR _lpTargetObj$[ebp], eax

; 570  : 	}
; 571  : 	else

  0002e	8b f8		 mov	 edi, eax
  00030	eb 0a		 jmp	 SHORT $LN29@MonsterBas
$LN30@MonsterBas:

; 572  : 	{
; 573  : 		lpObj->m_ActState.Emotion = 0;

  00032	81 a6 b4 01 00
	00 0f ff ff ff	 and	 DWORD PTR [esi+436], -241 ; ffffff0fH
$LN29@MonsterBas:

; 574  : 	}
; 575  : 
; 576  : 	switch ( lpObj->m_ActState.Emotion )

  0003c	8b 86 b4 01 00
	00		 mov	 eax, DWORD PTR [esi+436]
  00042	8b c8		 mov	 ecx, eax
  00044	c1 e9 04	 shr	 ecx, 4
  00047	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0004a	83 e9 00	 sub	 ecx, 0
  0004d	0f 84 78 02 00
	00		 je	 $LN26@MonsterBas
  00053	49		 dec	 ecx
  00054	74 42		 je	 SHORT $LN18@MonsterBas
  00056	83 e9 02	 sub	 ecx, 2
  00059	0f 85 08 03 00
	00		 jne	 $LN19@MonsterBas

; 687  : 					}
; 688  : 				}
; 689  : 			}
; 690  : 
; 691  : 			break;
; 692  : 
; 693  : 		case 3:
; 694  : 
; 695  : 			if ( lpObj->m_ActState.EmotionCount > 0 )

  0005f	8a 8e b5 01 00
	00		 mov	 cl, BYTE PTR [esi+437]
  00065	84 c9		 test	 cl, cl
  00067	74 0a		 je	 SHORT $LN2@MonsterBas

; 696  : 			{
; 697  : 				lpObj->m_ActState.EmotionCount--;

  00069	fe c9		 dec	 cl
  0006b	88 8e b5 01 00
	00		 mov	 BYTE PTR [esi+437], cl

; 698  : 			}
; 699  : 			else

  00071	eb 0b		 jmp	 SHORT $LN1@MonsterBas
$LN2@MonsterBas:

; 700  : 			{
; 701  : 				lpObj->m_ActState.Emotion = 0;

  00073	25 0f ff ff ff	 and	 eax, -241		; ffffff0fH
  00078	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
$LN1@MonsterBas:

; 702  : 			}
; 703  : 
; 704  : 			lpObj->m_ActState.Move = 0;
; 705  : 			lpObj->m_ActState.Attack = 0;

  0007e	83 a6 b4 01 00
	00 f9		 and	 DWORD PTR [esi+436], -7	; fffffff9H
  00085	5f		 pop	 edi

; 706  : 			lpObj->NextActionTime = 400;

  00086	c7 86 1c 02 00
	00 90 01 00 00	 mov	 DWORD PTR [esi+540], 400 ; 00000190H
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 707  : 
; 708  : 			break;
; 709  : 	}
; 710  : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
$LN18@MonsterBas:

; 610  : 					}
; 611  : 				}
; 612  : 			}
; 613  : 			break;
; 614  : 
; 615  : 		case 1:
; 616  : 
; 617  : 			if ( lpObj->m_ActState.EmotionCount > 0 )

  00098	8a 8e b5 01 00
	00		 mov	 cl, BYTE PTR [esi+437]
  0009e	84 c9		 test	 cl, cl
  000a0	74 0a		 je	 SHORT $LN17@MonsterBas

; 618  : 			{
; 619  : 				lpObj->m_ActState.EmotionCount --;

  000a2	fe c9		 dec	 cl
  000a4	88 8e b5 01 00
	00		 mov	 BYTE PTR [esi+437], cl

; 620  : 			}
; 621  : 			else

  000aa	eb 0b		 jmp	 SHORT $LN16@MonsterBas
$LN17@MonsterBas:

; 622  : 			{
; 623  : 				lpObj->m_ActState.Emotion = 0;

  000ac	25 0f ff ff ff	 and	 eax, -241		; ffffff0fH
  000b1	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
$LN16@MonsterBas:

; 624  : 			}
; 625  : 
; 626  : 			if ( lpObj->TargetNumber >= 0 && lpObj->PathStartEnd == 0 )

  000b7	66 85 d2	 test	 dx, dx
  000ba	0f 88 a7 02 00
	00		 js	 $LN19@MonsterBas
  000c0	80 be 30 01 00
	00 00		 cmp	 BYTE PTR [esi+304], 0
  000c7	0f 85 9a 02 00
	00		 jne	 $LN19@MonsterBas

; 627  : 			{
; 628  : 				int dis = gObjCalDistance(lpObj, lpTargetObj);

  000cd	57		 push	 edi
  000ce	56		 push	 esi
  000cf	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance

; 629  : 				int attackRange;
; 630  : 
; 631  : 				if ( lpObj->m_AttackType >= 100 )
; 632  : 				{
; 633  : 					attackRange = lpObj->m_AttackRange + 2;

  000d4	0f bf 8e 20 03
	00 00		 movsx	 ecx, WORD PTR [esi+800]
  000db	83 c4 08	 add	 esp, 8
  000de	66 83 be 22 03
	00 00 64	 cmp	 WORD PTR [esi+802], 100	; 00000064H
  000e6	7c 03		 jl	 SHORT $LN13@MonsterBas
  000e8	83 c1 02	 add	 ecx, 2
$LN13@MonsterBas:

; 634  : 				}
; 635  : 				else
; 636  : 				{
; 637  : 					attackRange = lpObj->m_AttackRange;
; 638  : 				}
; 639  : 
; 640  : 				if ( dis <= attackRange )

  000eb	3b c1		 cmp	 eax, ecx
  000ed	0f 8f 10 01 00
	00		 jg	 $LN12@MonsterBas

; 641  : 				{
; 642  : 					int tuser = lpObj->TargetNumber;

  000f3	0f bf be d4 02
	00 00		 movsx	 edi, WORD PTR [esi+724]

; 643  : 					int map = gObj[tuser].MapNumber;

  000fa	69 ff 64 15 00
	00		 imul	 edi, 5476		; 00001564H
  00100	0f b6 87 09 01
	00 00		 movzx	 eax, BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+265]

; 644  : 
; 645  : 					if ( MapC[map].CheckWall(lpObj->X, lpObj->Y, gObj[tuser].X, gObj[tuser].Y) == TRUE )

  00107	0f bf 8f 04 01
	00 00		 movsx	 ecx, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+260]
  0010e	69 c0 08 07 05
	00		 imul	 eax, 329480		; 00050708H
  00114	0f bf 96 06 01
	00 00		 movsx	 edx, WORD PTR [esi+262]
  0011b	8d 98 00 00 00
	00		 lea	 ebx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax]
  00121	0f bf 87 06 01
	00 00		 movsx	 eax, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+262]
  00128	50		 push	 eax
  00129	0f bf 86 04 01
	00 00		 movsx	 eax, WORD PTR [esi+260]
  00130	51		 push	 ecx
  00131	52		 push	 edx
  00132	50		 push	 eax
  00133	8b cb		 mov	 ecx, ebx
  00135	e8 00 00 00 00	 call	 ?CheckWall@MapClass@@QAEHHHHH@Z ; MapClass::CheckWall
  0013a	83 f8 01	 cmp	 eax, 1
  0013d	0f 85 24 02 00
	00		 jne	 $LN19@MonsterBas

; 646  : 					{
; 647  : 						BYTE attr = MapC[map].GetAttr(gObj[tuser].X, gObj[tuser].Y);
; 648  : 
; 649  : 						if ( (attr&1) != 1 )

  00143	0f bf 8f 06 01
	00 00		 movsx	 ecx, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+262]
  0014a	0f bf 97 04 01
	00 00		 movsx	 edx, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edi+260]
  00151	51		 push	 ecx
  00152	52		 push	 edx
  00153	8b cb		 mov	 ecx, ebx
  00155	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  0015a	a8 01		 test	 al, 1
  0015c	75 37		 jne	 SHORT $LN10@MonsterBas

; 650  : 						{
; 651  : 							lpObj->m_ActState.Attack = 1;

  0015e	83 8e b4 01 00
	00 02		 or	 DWORD PTR [esi+436], 2

; 652  : 							lpObj->m_ActState.EmotionCount = (rand()%30+20);

  00165	e8 00 00 00 00	 call	 _rand
  0016a	8b c8		 mov	 ecx, eax
  0016c	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00171	f7 e9		 imul	 ecx
  00173	03 d1		 add	 edx, ecx
  00175	c1 fa 04	 sar	 edx, 4
  00178	8b c2		 mov	 eax, edx
  0017a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0017d	03 c2		 add	 eax, edx
  0017f	8a d0		 mov	 dl, al
  00181	c0 e2 04	 shl	 dl, 4
  00184	2a d0		 sub	 dl, al
  00186	02 d2		 add	 dl, dl
  00188	2a ca		 sub	 cl, dl
  0018a	80 c1 14	 add	 cl, 20			; 00000014H
  0018d	88 8e b5 01 00
	00		 mov	 BYTE PTR [esi+437], cl

; 653  : 						}
; 654  : 						else

  00193	eb 26		 jmp	 SHORT $LN9@MonsterBas
$LN10@MonsterBas:

; 655  : 						{
; 656  : 							lpObj->TargetNumber = -1;
; 657  : 							lpObj->m_ActState.EmotionCount = 30;

  00195	c6 86 b5 01 00
	00 1e		 mov	 BYTE PTR [esi+437], 30	; 0000001eH

; 658  : 							lpObj->m_ActState.Emotion = 1;

  0019c	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  001a2	83 c8 ff	 or	 eax, -1
  001a5	81 e1 1f ff ff
	ff		 and	 ecx, -225		; ffffff1fH
  001ab	83 c9 10	 or	 ecx, 16			; 00000010H
  001ae	66 89 86 d4 02
	00 00		 mov	 WORD PTR [esi+724], ax
  001b5	89 8e b4 01 00
	00		 mov	 DWORD PTR [esi+436], ecx
$LN9@MonsterBas:

; 659  : 						}
; 660  : 
; 661  : 						lpObj->Dir = GetPathPacketDirPos(lpTargetObj->X-lpObj->X, lpTargetObj->Y-lpObj->Y);

  001bb	8b 45 fc	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  001be	0f bf 90 06 01
	00 00		 movsx	 edx, WORD PTR [eax+262]
  001c5	0f bf 8e 06 01
	00 00		 movsx	 ecx, WORD PTR [esi+262]
  001cc	2b d1		 sub	 edx, ecx
  001ce	52		 push	 edx
  001cf	0f bf 90 04 01
	00 00		 movsx	 edx, WORD PTR [eax+260]
  001d6	0f bf 86 04 01
	00 00		 movsx	 eax, WORD PTR [esi+260]
  001dd	2b d0		 sub	 edx, eax
  001df	52		 push	 edx
  001e0	e8 00 00 00 00	 call	 ?GetPathPacketDirPos@@YAEHH@Z ; GetPathPacketDirPos

; 662  : 						lpObj->NextActionTime = lpObj->m_AttackSpeed;

  001e5	8b 8e 08 03 00
	00		 mov	 ecx, DWORD PTR [esi+776]
  001eb	83 c4 08	 add	 esp, 8
  001ee	5f		 pop	 edi
  001ef	88 86 08 01 00
	00		 mov	 BYTE PTR [esi+264], al
  001f5	89 8e 1c 02 00
	00		 mov	 DWORD PTR [esi+540], ecx
  001fb	5e		 pop	 esi
  001fc	5b		 pop	 ebx

; 707  : 
; 708  : 			break;
; 709  : 	}
; 710  : }

  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c2 04 00	 ret	 4
$LN12@MonsterBas:

; 663  : 					}
; 664  : 				}
; 665  : 				else
; 666  : 				{
; 667  : 					if ( gObjMonsterGetTargetPos(lpObj) == TRUE )

  00203	56		 push	 esi
  00204	e8 00 00 00 00	 call	 ?gObjMonsterGetTargetPos@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterGetTargetPos
  00209	83 c4 04	 add	 esp, 4
  0020c	83 f8 01	 cmp	 eax, 1
  0020f	0f 85 87 00 00
	00		 jne	 $LN7@MonsterBas

; 668  : 					{
; 669  : 						if ( MapC[lpObj->MapNumber].CheckWall(lpObj->X, lpObj->Y, lpObj->MTX, lpObj->MTY) == TRUE )

  00215	0f bf 96 26 01
	00 00		 movsx	 edx, WORD PTR [esi+294]
  0021c	0f bf 86 24 01
	00 00		 movsx	 eax, WORD PTR [esi+292]
  00223	0f bf 8e 06 01
	00 00		 movsx	 ecx, WORD PTR [esi+262]
  0022a	52		 push	 edx
  0022b	0f bf 96 04 01
	00 00		 movsx	 edx, WORD PTR [esi+260]
  00232	50		 push	 eax
  00233	51		 push	 ecx
  00234	0f b6 8e 09 01
	00 00		 movzx	 ecx, BYTE PTR [esi+265]
  0023b	69 c9 08 07 05
	00		 imul	 ecx, 329480		; 00050708H
  00241	52		 push	 edx
  00242	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00248	e8 00 00 00 00	 call	 ?CheckWall@MapClass@@QAEHHHHH@Z ; MapClass::CheckWall
  0024d	83 f8 01	 cmp	 eax, 1
  00250	75 4a		 jne	 SHORT $LN7@MonsterBas

; 670  : 						{
; 671  : 							lpObj->m_ActState.Move = 1;

  00252	83 8e b4 01 00
	00 04		 or	 DWORD PTR [esi+436], 4

; 672  : 							lpObj->NextActionTime = 400;
; 673  : 							lpObj->Dir = GetPathPacketDirPos(lpTargetObj->X - lpObj->X, lpTargetObj->Y-lpObj->Y);

  00259	0f bf 8e 06 01
	00 00		 movsx	 ecx, WORD PTR [esi+262]
  00260	c7 86 1c 02 00
	00 90 01 00 00	 mov	 DWORD PTR [esi+540], 400 ; 00000190H
  0026a	0f bf 87 06 01
	00 00		 movsx	 eax, WORD PTR [edi+262]
  00271	0f bf 97 04 01
	00 00		 movsx	 edx, WORD PTR [edi+260]
  00278	2b c1		 sub	 eax, ecx
  0027a	50		 push	 eax
  0027b	0f bf 86 04 01
	00 00		 movsx	 eax, WORD PTR [esi+260]
  00282	2b d0		 sub	 edx, eax
  00284	52		 push	 edx
  00285	e8 00 00 00 00	 call	 ?GetPathPacketDirPos@@YAEHH@Z ; GetPathPacketDirPos
  0028a	83 c4 08	 add	 esp, 8
  0028d	5f		 pop	 edi
  0028e	88 86 08 01 00
	00		 mov	 BYTE PTR [esi+264], al
  00294	5e		 pop	 esi
  00295	5b		 pop	 ebx

; 707  : 
; 708  : 			break;
; 709  : 	}
; 710  : }

  00296	8b e5		 mov	 esp, ebp
  00298	5d		 pop	 ebp
  00299	c2 04 00	 ret	 4
$LN7@MonsterBas:

; 674  : 						}
; 675  : 						else
; 676  : 						{
; 677  : 							this->MonsterMoveAction(lpObj);
; 678  : 							lpObj->m_ActState.Emotion = 3;
; 679  : 							lpObj->m_ActState.EmotionCount = 10;
; 680  : 						}
; 681  : 					}
; 682  : 					else
; 683  : 					{
; 684  : 						this->MonsterMoveAction(lpObj);

  0029c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0029e	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  002a1	56		 push	 esi
  002a2	8b cb		 mov	 ecx, ebx
  002a4	ff d0		 call	 eax

; 685  : 						lpObj->m_ActState.Emotion = 3;

  002a6	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  002ac	81 e1 3f ff ff
	ff		 and	 ecx, -193		; ffffff3fH
  002b2	83 c9 30	 or	 ecx, 48			; 00000030H
  002b5	89 8e b4 01 00
	00		 mov	 DWORD PTR [esi+436], ecx
  002bb	5f		 pop	 edi

; 686  : 						lpObj->m_ActState.EmotionCount = 10;

  002bc	c6 86 b5 01 00
	00 0a		 mov	 BYTE PTR [esi+437], 10	; 0000000aH
  002c3	5e		 pop	 esi
  002c4	5b		 pop	 ebx

; 707  : 
; 708  : 			break;
; 709  : 	}
; 710  : }

  002c5	8b e5		 mov	 esp, ebp
  002c7	5d		 pop	 ebp
  002c8	c2 04 00	 ret	 4
$LN26@MonsterBas:

; 577  : 	{
; 578  : 		case 0:
; 579  : 			{
; 580  : 				if ( lpObj->m_ActState.Attack != 0 )

  002cb	bf f4 01 00 00	 mov	 edi, 500		; 000001f4H
  002d0	a8 02		 test	 al, 2
  002d2	74 19		 je	 SHORT $LN25@MonsterBas

; 581  : 				{
; 582  : 					lpObj->m_ActState.Attack = 0;

  002d4	83 e0 fd	 and	 eax, -3			; fffffffdH

; 583  : 					lpObj->TargetNumber = -1;

  002d7	83 ca ff	 or	 edx, -1
  002da	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
  002e0	66 89 96 d4 02
	00 00		 mov	 WORD PTR [esi+724], dx

; 584  : 					lpObj->NextActionTime = 500;

  002e7	89 be 1c 02 00
	00		 mov	 DWORD PTR [esi+540], edi
$LN25@MonsterBas:

; 585  : 				}
; 586  : 
; 587  : 				int actcode1 = rand() % 2;

  002ed	e8 00 00 00 00	 call	 _rand
  002f2	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  002f7	79 05		 jns	 SHORT $LN34@MonsterBas
  002f9	48		 dec	 eax
  002fa	83 c8 fe	 or	 eax, -2			; fffffffeH
  002fd	40		 inc	 eax
$LN34@MonsterBas:

; 588  : 
; 589  : 				if ( actcode1 == 0 )

  002fe	75 0f		 jne	 SHORT $LN24@MonsterBas

; 590  : 				{
; 591  : 					lpObj->m_ActState.Rest = 1;

  00300	83 8e b4 01 00
	00 01		 or	 DWORD PTR [esi+436], 1

; 592  : 					lpObj->NextActionTime = 500;

  00307	89 be 1c 02 00
	00		 mov	 DWORD PTR [esi+540], edi
  0030d	eb 1d		 jmp	 SHORT $LN33@MonsterBas
$LN24@MonsterBas:

; 593  : 				}
; 594  : 				else if ( lpObj->m_MoveRange > 0 )

  0030f	66 83 be 1e 03
	00 00 00	 cmp	 WORD PTR [esi+798], 0
  00317	7e 13		 jle	 SHORT $LN33@MonsterBas

; 595  : 				{
; 596  : 					if ( lpObj->m_SkillHarden == 0 )

  00319	83 be 98 02 00
	00 00		 cmp	 DWORD PTR [esi+664], 0
  00320	75 0a		 jne	 SHORT $LN33@MonsterBas

; 597  : 					{
; 598  : 						this->MonsterMoveAction(lpObj);

  00322	8b 03		 mov	 eax, DWORD PTR [ebx]
  00324	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  00327	56		 push	 esi
  00328	8b cb		 mov	 ecx, ebx
  0032a	ff d2		 call	 edx
$LN33@MonsterBas:

; 599  : 					}
; 600  : 				}
; 601  : 
; 602  : 				if ( lpObj->m_bIsMonsterAttackFirst != false )

  0032c	83 be 28 0f 00
	00 00		 cmp	 DWORD PTR [esi+3880], 0
  00333	74 32		 je	 SHORT $LN19@MonsterBas

; 603  : 				{
; 604  : 					lpObj->TargetNumber = gObjMonsterSearchEnemy(lpObj, OBJ_USER);

  00335	6a 01		 push	 1
  00337	56		 push	 esi
  00338	e8 00 00 00 00	 call	 ?gObjMonsterSearchEnemy@@YAHPAUOBJECTSTRUCT@@E@Z ; gObjMonsterSearchEnemy
  0033d	83 c4 08	 add	 esp, 8
  00340	66 89 86 d4 02
	00 00		 mov	 WORD PTR [esi+724], ax

; 605  : 
; 606  : 					if ( lpObj->TargetNumber >= 0 )

  00347	66 85 c0	 test	 ax, ax
  0034a	78 1b		 js	 SHORT $LN19@MonsterBas

; 607  : 					{
; 608  : 						lpObj->m_ActState.EmotionCount = 30;

  0034c	c6 86 b5 01 00
	00 1e		 mov	 BYTE PTR [esi+437], 30	; 0000001eH

; 609  : 						lpObj->m_ActState.Emotion = 1;

  00353	8b 86 b4 01 00
	00		 mov	 eax, DWORD PTR [esi+436]
  00359	25 1f ff ff ff	 and	 eax, -225		; ffffff1fH
  0035e	83 c8 10	 or	 eax, 16			; 00000010H
  00361	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
$LN19@MonsterBas:
  00367	5f		 pop	 edi
  00368	5e		 pop	 esi
  00369	5b		 pop	 ebx

; 707  : 
; 708  : 			break;
; 709  : 	}
; 710  : }

  0036a	8b e5		 mov	 esp, ebp
  0036c	5d		 pop	 ebp
  0036d	c2 04 00	 ret	 4
?MonsterBaseAct@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z ENDP ; MonsterHerd::MonsterBaseAct
_TEXT	ENDS
PUBLIC	?MonsterDieAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z ; MonsterHerd::MonsterDieAction
; Function compile flags: /Ogtp
;	COMDAT ?MonsterDieAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?MonsterDieAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z PROC ; MonsterHerd::MonsterDieAction, COMDAT
; _this$ = ecx

; 716  : 	return;	// Here goes a MACRO
; 717  : }

  00000	c2 04 00	 ret	 4
?MonsterDieAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z ENDP ; MonsterHerd::MonsterDieAction
_TEXT	ENDS
PUBLIC	?MonsterRegenAction@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z ; MonsterHerd::MonsterRegenAction
EXTRN	?CreateFrustrum@@YAXHHH@Z:PROC			; CreateFrustrum
EXTRN	?gObjMonsterHitDamageInit@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterHitDamageInit
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?gObjViewportClose@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjViewportClose
EXTRN	?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolDestroy
EXTRN	?gObjClearViewport@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjClearViewport
EXTRN	?gObjTimeCheckSelfDefense@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjTimeCheckSelfDefense
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtp
;	COMDAT ?MonsterRegenAction@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iCount$ = -8						; size = 4
_cY$ = -1						; size = 1
_lpObj$ = 8						; size = 4
_cX$ = 11						; size = 1
?MonsterRegenAction@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z PROC ; MonsterHerd::MonsterRegenAction, COMDAT
; _this$ = ecx

; 721  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 722  : 	if ( lpObj == NULL )

  00008	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000b	33 db		 xor	 ebx, ebx
  0000d	3b f3		 cmp	 esi, ebx
  0000f	75 0a		 jne	 SHORT $LN13@MonsterReg
$LN11@MonsterReg:
  00011	5e		 pop	 esi

; 723  : 	{
; 724  : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 814  : 
; 815  : 	return TRUE;
; 816  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN13@MonsterReg:

; 725  : 	}
; 726  : 
; 727  : 	if ( lpObj->Connected < PLAYER_PLAYING || lpObj->Type != OBJ_MONSTER )

  0001b	80 7e 04 03	 cmp	 BYTE PTR [esi+4], 3
  0001f	72 f0		 jb	 SHORT $LN11@MonsterReg
  00021	66 83 7e 60 02	 cmp	 WORD PTR [esi+96], 2
  00026	75 e9		 jne	 SHORT $LN11@MonsterReg

; 728  : 	{
; 729  : 		return FALSE;
; 730  : 	}
; 731  : 
; 732  : 	MonsterHerd * lpMH = (MonsterHerd *)lpObj->m_lpMonsterHerd;

  00028	57		 push	 edi
  00029	8b be 2c 0f 00
	00		 mov	 edi, DWORD PTR [esi+3884]

; 733  : 
; 734  : 	if ( lpMH == NULL )

  0002f	3b fb		 cmp	 edi, ebx

; 735  : 	{
; 736  : 		return FALSE;

  00031	0f 84 07 01 00
	00		 je	 $LN8@MonsterReg

; 737  : 	}
; 738  : 
; 739  : 	_MONSTER_HERD_DATA * lpMHD = lpMH->GetMonsterData(lpObj->m_Index);

  00037	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00039	8b 07		 mov	 eax, DWORD PTR [edi]
  0003b	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  0003e	51		 push	 ecx
  0003f	8b cf		 mov	 ecx, edi
  00041	ff d2		 call	 edx

; 740  : 
; 741  : 	if ( lpMHD == NULL || lpMHD->m_bRegen == FALSE )

  00043	3b c3		 cmp	 eax, ebx
  00045	0f 84 f3 00 00
	00		 je	 $LN8@MonsterReg
  0004b	39 58 0c	 cmp	 DWORD PTR [eax+12], ebx
  0004e	0f 84 ea 00 00
	00		 je	 $LN8@MonsterReg

; 742  : 	{
; 743  : 		return FALSE;
; 744  : 	}
; 745  : 
; 746  : 	lpObj->Life = lpObj->AddLife + lpObj->MaxLife;

  00054	db 86 0c 01 00
	00		 fild	 DWORD PTR [esi+268]

; 747  : 	lpObj->Mana = lpObj->AddMana + lpObj->MaxMana;
; 748  : 	lpObj->Live = TRUE;

  0005a	c6 46 62 01	 mov	 BYTE PTR [esi+98], 1

; 749  : 	lpObj->m_PoisonBeattackCount = 0;

  0005e	66 89 9e 27 02
	00 00		 mov	 WORD PTR [esi+551], bx

; 750  : 	lpObj->m_ColdBeattackCount = 0;
; 751  : 	lpObj->m_ViewState = 0;

  00065	88 9e c2 01 00
	00		 mov	 BYTE PTR [esi+450], bl
  0006b	d8 86 c0 00 00
	00		 fadd	 DWORD PTR [esi+192]

; 752  : 	lpObj->Teleport = 0;

  00071	88 9e 00 02 00
	00		 mov	 BYTE PTR [esi+512], bl

; 753  : 
; 754  : 	for ( int i=0;i<MAX_SELF_DEFENSE;i++)
; 755  : 	{
; 756  : 		lpObj->SelfDefenseTime[i] = 0;
; 757  : 	}
; 758  : 
; 759  : 	gObjTimeCheckSelfDefense(lpObj);

  00077	56		 push	 esi
  00078	d9 9e bc 00 00
	00		 fstp	 DWORD PTR [esi+188]
  0007e	db 86 10 01 00
	00		 fild	 DWORD PTR [esi+272]
  00084	d8 86 d4 00 00
	00		 fadd	 DWORD PTR [esi+212]
  0008a	d9 9e d0 00 00
	00		 fstp	 DWORD PTR [esi+208]
  00090	89 9e 5c 02 00
	00		 mov	 DWORD PTR [esi+604], ebx
  00096	89 9e 60 02 00
	00		 mov	 DWORD PTR [esi+608], ebx
  0009c	89 9e 64 02 00
	00		 mov	 DWORD PTR [esi+612], ebx
  000a2	89 9e 68 02 00
	00		 mov	 DWORD PTR [esi+616], ebx
  000a8	89 9e 6c 02 00
	00		 mov	 DWORD PTR [esi+620], ebx
  000ae	e8 00 00 00 00	 call	 ?gObjTimeCheckSelfDefense@@YAXPAUOBJECTSTRUCT@@@Z ; gObjTimeCheckSelfDefense

; 760  : 	lpObj->m_ViewSkillState &= 0xFFFFFFFE;
; 761  : 	lpObj->m_ViewSkillState &= 0xFFFFFFFD;

  000b3	83 a6 c4 01 00
	00 fc		 and	 DWORD PTR [esi+452], -4	; fffffffcH

; 762  : 
; 763  : 	gObjClearViewport(lpObj);

  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 ?gObjClearViewport@@YAXPAUOBJECTSTRUCT@@@Z ; gObjClearViewport

; 764  : 	gObjViewportListProtocolDestroy(lpObj);

  000c0	56		 push	 esi
  000c1	e8 00 00 00 00	 call	 ?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolDestroy

; 765  : 	gObjViewportClose(lpObj);

  000c6	56		 push	 esi
  000c7	e8 00 00 00 00	 call	 ?gObjViewportClose@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportClose

; 766  : 
; 767  : 	lpObj->m_ActState.Attack = 0;

  000cc	83 a6 b4 01 00
	00 fd		 and	 DWORD PTR [esi+436], -3	; fffffffdH

; 768  : 	lpObj->m_ActState.EmotionCount = 0;

  000d3	88 9e b5 01 00
	00		 mov	 BYTE PTR [esi+437], bl

; 769  : 	lpObj->m_ActState.Escape = 0;
; 770  : 	lpObj->m_ActState.Move = 0;
; 771  : 	lpObj->m_ActState.Rest = 0;
; 772  : 	lpObj->m_ActState.Emotion = 0;

  000d9	81 a6 b4 01 00
	00 02 ff ff ff	 and	 DWORD PTR [esi+436], -254 ; ffffff02H
  000e3	83 c4 10	 add	 esp, 16			; 00000010H

; 773  : 	lpObj->TargetNumber = -1;

  000e6	83 c8 ff	 or	 eax, -1
  000e9	66 89 86 d4 02
	00 00		 mov	 WORD PTR [esi+724], ax

; 774  : 	lpObj->NextActionTime = 5000;

  000f0	c7 86 1c 02 00
	00 88 13 00 00	 mov	 DWORD PTR [esi+540], 5000 ; 00001388H

; 775  : 
; 776  : 	BYTE cX;
; 777  : 	BYTE cY;
; 778  : 	int iCount = 100;

  000fa	c7 45 f8 64 00
	00 00		 mov	 DWORD PTR _iCount$[ebp], 100 ; 00000064H
$LL4@MonsterReg:

; 782  : 	{
; 783  : 		if ( lpMH->GetRandomLocation(cX, cY) != FALSE )

  00101	8b 17		 mov	 edx, DWORD PTR [edi]
  00103	8b 52 24	 mov	 edx, DWORD PTR [edx+36]
  00106	ff 4d f8	 dec	 DWORD PTR _iCount$[ebp]
  00109	8d 45 ff	 lea	 eax, DWORD PTR _cY$[ebp]
  0010c	50		 push	 eax
  0010d	8d 4d 0b	 lea	 ecx, DWORD PTR _cX$[ebp]
  00110	51		 push	 ecx
  00111	8b cf		 mov	 ecx, edi
  00113	ff d2		 call	 edx
  00115	85 c0		 test	 eax, eax
  00117	75 30		 jne	 SHORT $LN1@MonsterReg

; 779  : 	BOOL bGetPosition = FALSE;
; 780  : 
; 781  : 	while ( iCount-- != 0 )

  00119	39 5d f8	 cmp	 DWORD PTR _iCount$[ebp], ebx
  0011c	75 e3		 jne	 SHORT $LL4@MonsterReg

; 784  : 		{
; 785  : 			bGetPosition = TRUE;
; 786  : 			break;
; 787  : 		}
; 788  : 	}
; 789  : 
; 790  : 	if ( bGetPosition == FALSE )
; 791  : 	{
; 792  : 		lpObj->Live = FALSE;

  0011e	88 5e 62	 mov	 BYTE PTR [esi+98], bl

; 793  : 		lpObj->m_State = 4;

  00121	c7 86 bc 01 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+444], 4

; 794  : 		lpObj->RegenTime = GetTickCount();

  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00131	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax

; 795  : 		lpObj->DieRegen = TRUE;

  00137	c6 86 02 02 00
	00 01		 mov	 BYTE PTR [esi+514], 1
$LN8@MonsterReg:

; 796  : 
; 797  : 		return FALSE;

  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	33 c0		 xor	 eax, eax
  00142	5b		 pop	 ebx

; 814  : 
; 815  : 	return TRUE;
; 816  : }

  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 04 00	 ret	 4
$LN1@MonsterReg:

; 798  : 	}
; 799  : 
; 800  : 	lpObj->X = cX;

  00149	0f b6 45 0b	 movzx	 eax, BYTE PTR _cX$[ebp]

; 801  : 	lpObj->Y = cY;

  0014d	0f b6 4d ff	 movzx	 ecx, BYTE PTR _cY$[ebp]

; 802  : 	lpObj->MTX = lpObj->X;
; 803  : 	lpObj->MTY = lpObj->Y;
; 804  : 	lpObj->TX = lpObj->X;
; 805  : 	lpObj->TY = lpObj->Y;
; 806  : 	lpObj->StartX = lpObj->X;
; 807  : 	lpObj->StartY = lpObj->Y;
; 808  : 
; 809  : 	gObjMonsterHitDamageInit(lpObj);

  00151	56		 push	 esi
  00152	66 89 86 04 01
	00 00		 mov	 WORD PTR [esi+260], ax
  00159	66 89 8e 06 01
	00 00		 mov	 WORD PTR [esi+262], cx
  00160	66 89 86 24 01
	00 00		 mov	 WORD PTR [esi+292], ax
  00167	66 89 8e 26 01
	00 00		 mov	 WORD PTR [esi+294], cx
  0016e	66 89 86 20 01
	00 00		 mov	 WORD PTR [esi+288], ax
  00175	66 89 8e 22 01
	00 00		 mov	 WORD PTR [esi+290], cx
  0017c	88 86 1a 01 00
	00		 mov	 BYTE PTR [esi+282], al
  00182	88 8e 1b 01 00
	00		 mov	 BYTE PTR [esi+283], cl
  00188	e8 00 00 00 00	 call	 ?gObjMonsterHitDamageInit@@YAXPAUOBJECTSTRUCT@@@Z ; gObjMonsterHitDamageInit

; 810  : 	CreateFrustrum(lpObj->X, lpObj->Y, lpObj->m_Index);

  0018d	8b 16		 mov	 edx, DWORD PTR [esi]
  0018f	0f bf 86 06 01
	00 00		 movsx	 eax, WORD PTR [esi+262]
  00196	0f bf 8e 04 01
	00 00		 movsx	 ecx, WORD PTR [esi+260]
  0019d	52		 push	 edx
  0019e	50		 push	 eax
  0019f	51		 push	 ecx
  001a0	e8 00 00 00 00	 call	 ?CreateFrustrum@@YAXHHH@Z ; CreateFrustrum
  001a5	83 c4 10	 add	 esp, 16			; 00000010H

; 811  : 
; 812  : 	lpObj->DieRegen = FALSE;
; 813  : 	lpObj->m_State = 1;

  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	5f		 pop	 edi
  001ae	88 9e 02 02 00
	00		 mov	 BYTE PTR [esi+514], bl
  001b4	89 86 bc 01 00
	00		 mov	 DWORD PTR [esi+444], eax
  001ba	5e		 pop	 esi
  001bb	5b		 pop	 ebx

; 814  : 
; 815  : 	return TRUE;
; 816  : }

  001bc	8b e5		 mov	 esp, ebp
  001be	5d		 pop	 ebp
  001bf	c2 04 00	 ret	 4
?MonsterRegenAction@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z ENDP ; MonsterHerd::MonsterRegenAction
_TEXT	ENDS
PUBLIC	??R?$less@H@std@@QBE_NABH0@Z			; std::less<int>::operator()
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xfunctional
;	COMDAT ??R?$less@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@H@std@@QBE_NABH0@Z PROC			; std::less<int>::operator(), COMDAT
; _this$ = ecx

; 124  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0000f	0f 9c c0	 setl	 al

; 126  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??R?$less@H@std@@QBE_NABH0@Z ENDP			; std::less<int>::operator()
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::size, COMDAT
; _this$ = ecx

; 869  : 		return (this->_Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 870  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator==
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator==, COMDAT
; _this$ = ecx

; 316  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 318  : 		if (this->_Getcont() == 0
; 319  : 			|| this->_Getcont() != _Right._Getcont())
; 320  : 			{	// report error
; 321  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 322  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 323  : 			}
; 324  : 
; 325  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 326  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 327  : 			&& this->_Getcont() == _Right._Getcont());
; 328  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 329  : 
; 330  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 331  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogtp
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 122  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 123  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Color
; Function compile flags: /Ogtp
;	COMDAT ?_Color@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Color, COMDAT

; 606  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 		return ((char&)(*_Pnode)._Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 20	 add	 eax, 32			; 00000020H

; 608  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Isnil
; Function compile flags: /Ogtp
;	COMDAT ?_Isnil@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Isnil, COMDAT

; 611  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 		return ((char&)(*_Pnode)._Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 21	 add	 eax, 33			; 00000021H

; 613  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Left
; Function compile flags: /Ogtp
;	COMDAT ?_Left@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Left, COMDAT

; 621  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 		return ((_Nodepref)(*_Pnode)._Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 623  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Parent
; Function compile flags: /Ogtp
;	COMDAT ?_Parent@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Parent, COMDAT

; 626  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 628  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Right
; Function compile flags: /Ogtp
;	COMDAT ?_Right@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Right, COMDAT

; 631  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 		return ((_Nodepref)(*_Pnode)._Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 633  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Myval
; Function compile flags: /Ogtp
;	COMDAT ?_Myval@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Myval, COMDAT

; 636  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 637  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 638  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Max
; Function compile flags: /Ogtp
;	COMDAT ?_Max@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Max, COMDAT

; 641  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 		while (!_Isnil(_Right(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000d	75 0c		 jne	 SHORT $LN1@Max
  0000f	90		 npad	 1
$LL2@Max:

; 643  : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN1@Max:

; 644  : 		return (_Pnode);
; 645  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Max@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Min
; Function compile flags: /Ogtp
;	COMDAT ?_Min@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Min, COMDAT

; 648  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 649  : 		while (!_Isnil(_Left(_Pnode)))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000c	75 0c		 jne	 SHORT $LN1@Min
  0000e	8b ff		 npad	 2
$LL2@Min:

; 650  : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN1@Min:

; 651  : 		return (_Pnode);
; 652  : 		}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Min@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator*
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 231  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 232  : 		if (this->_Getcont() == 0
; 233  : 			|| this->_Ptr == 0
; 234  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 235  : 			{	// report error
; 236  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 237  : 			_SCL_SECURE_OUT_OF_RANGE;
; 238  : 			}
; 239  : 
; 240  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 241  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 242  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 243  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 244  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 245  : 
; 246  : 		return (_Mytree::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 247  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 59   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 10		 mov	 edx, DWORD PTR [eax]
  00004	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00008	75 40		 jne	 SHORT $LN3@operator

; 60   : 			;	// end() shouldn't be incremented, don't move
; 61   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0000d	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00011	75 1a		 jne	 SHORT $LN34@operator

; 62   : 			_Ptr = _Mytree::_Min(
; 63   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree

  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00019	75 0f		 jne	 SHORT $LN17@operator
  0001b	eb 03 8d 49 00	 npad	 5
$LL18@operator:
  00020	8b ca		 mov	 ecx, edx
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN17@operator:
  0002a	89 08		 mov	 DWORD PTR [eax], ecx

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0002c	c3		 ret	 0
$LN34@operator:

; 64   : 		else
; 65   : 			{	// climb looking for right subtree
; 66   : 			_Nodeptr _Pnode;
; 67   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 68   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00030	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00034	75 12		 jne	 SHORT $LN1@operator
$LL2@operator:
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0003b	75 0b		 jne	 SHORT $LN1@operator

; 69   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003d	89 10		 mov	 DWORD PTR [eax], edx
  0003f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00042	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00046	74 ee		 je	 SHORT $LL2@operator
$LN1@operator:

; 70   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00048	89 10		 mov	 DWORD PTR [eax], edx
$LN3@operator:

; 71   : 			}
; 72   : 		return (*this);
; 73   : 		}

  0004a	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@@Z ; std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@@Z PROC ; std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@QAE@U?$less@H@1@@Z ENDP ; std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>
_TEXT	ENDS
PUBLIC	??$addressof@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@AAU10@@Z ; std::addressof<std::pair<int const ,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,_MONSTER_HERD_DATA> >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Kfn@$$CBHU_MONSTER_HERD_DATA@@@?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@@Z ; std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>::_Kfn<int const ,_MONSTER_HERD_DATA>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHU_MONSTER_HERD_DATA@@@?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHU_MONSTER_HERD_DATA@@@?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@@Z PROC ; std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>::_Kfn<int const ,_MONSTER_HERD_DATA>, COMDAT

; 66   : 		static const _Kty& _Kfn(const _STD pair<_Ty1, _Ty2>& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 		{	// extract key from element value
; 68   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 69   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHU_MONSTER_HERD_DATA@@@?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@@Z ENDP ; std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0>::_Kfn<int const ,_MONSTER_HERD_DATA>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node><std::pair<int const ,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?0U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node><std::pair<int const ,_MONSTER_HERD_DATA> >, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node><std::pair<int const ,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::max_size
_TEXT	ENDS
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 83   : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 84   : 		if (_Mytree::_Isnil(_Ptr))

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00008	74 06		 je	 SHORT $LN8@operator@2

; 85   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0000f	c3		 ret	 0
$LN8@operator@2:

; 86   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00016	75 17		 jne	 SHORT $LN40@operator@2

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

  00018	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001b	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0001f	75 30		 jne	 SHORT $LN21@operator@2
$LL22@operator@2:
  00021	8b d1		 mov	 edx, ecx
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0002a	74 f5		 je	 SHORT $LL22@operator@2

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  0002e	c3		 ret	 0
$LN40@operator@2:

; 89   : 		else
; 90   : 			{	// climb looking for left subtree
; 91   : 			_Nodeptr _Pnode;
; 92   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 93   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00036	75 11		 jne	 SHORT $LN3@operator@2
$LL4@operator@2:
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0003c	75 0b		 jne	 SHORT $LN3@operator@2

; 94   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003e	89 10		 mov	 DWORD PTR [eax], edx
  00040	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00043	80 7a 21 00	 cmp	 BYTE PTR [edx+33], 0
  00047	74 ef		 je	 SHORT $LL4@operator@2
$LN3@operator@2:

; 95   : 			if (_Mytree::_Isnil(_Ptr))

  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0004f	75 02		 jne	 SHORT $LN1@operator@2

; 87   : 			_Ptr = _Mytree::_Max(
; 88   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree

$LN21@operator@2:

; 96   : 				;	// begin() shouldn't be decremented, don't move
; 97   : 			else
; 98   : 				_Ptr = _Pnode;	// ==> parent if not head

  00051	89 10		 mov	 DWORD PTR [eax], edx
$LN1@operator@2:

; 99   : 			}
; 100  : 		return (*this);
; 101  : 		}

  00053	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
PUBLIC	??$forward@AAH@std@@YAAAHAAH@Z			; std::forward<int &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
PUBLIC	??$forward@AAU_MONSTER_HERD_DATA@@@std@@YAAAU_MONSTER_HERD_DATA@@AAU1@@Z ; std::forward<_MONSTER_HERD_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAU_MONSTER_HERD_DATA@@@std@@YAAAU_MONSTER_HERD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_MONSTER_HERD_DATA@@@std@@YAAAU_MONSTER_HERD_DATA@@AAU1@@Z PROC ; std::forward<_MONSTER_HERD_DATA &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_MONSTER_HERD_DATA@@@std@@YAAAU_MONSTER_HERD_DATA@@AAU1@@Z ENDP ; std::forward<_MONSTER_HERD_DATA &>
_TEXT	ENDS
PUBLIC	??$?0AAHAAU_MONSTER_HERD_DATA@@@?$_Pair_base@HU_MONSTER_HERD_DATA@@@std@@QAE@AAHAAU_MONSTER_HERD_DATA@@@Z ; std::_Pair_base<int,_MONSTER_HERD_DATA>::_Pair_base<int,_MONSTER_HERD_DATA><int &,_MONSTER_HERD_DATA &>
; Function compile flags: /Ogtp
;	COMDAT ??$?0AAHAAU_MONSTER_HERD_DATA@@@?$_Pair_base@HU_MONSTER_HERD_DATA@@@std@@QAE@AAHAAU_MONSTER_HERD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAU_MONSTER_HERD_DATA@@@?$_Pair_base@HU_MONSTER_HERD_DATA@@@std@@QAE@AAHAAU_MONSTER_HERD_DATA@@@Z PROC ; std::_Pair_base<int,_MONSTER_HERD_DATA>::_Pair_base<int,_MONSTER_HERD_DATA><int &,_MONSTER_HERD_DATA &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00020	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00023	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 164  : 		}

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??$?0AAHAAU_MONSTER_HERD_DATA@@@?$_Pair_base@HU_MONSTER_HERD_DATA@@@std@@QAE@AAHAAU_MONSTER_HERD_DATA@@@Z ENDP ; std::_Pair_base<int,_MONSTER_HERD_DATA>::_Pair_base<int,_MONSTER_HERD_DATA><int &,_MONSTER_HERD_DATA &>
_TEXT	ENDS
PUBLIC	??$forward@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@std@@YA$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@AAU10@@Z ; std::forward<std::pair<int,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@std@@YA$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@std@@YA$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@AAU10@@Z PROC ; std::forward<std::pair<int,_MONSTER_HERD_DATA> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@std@@YA$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	??$_Destroy@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@YAXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@@Z ; std::_Destroy<std::pair<int const ,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@YAXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@YAXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@@Z PROC ; std::_Destroy<std::pair<int const ,_MONSTER_HERD_DATA> >, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@YAXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@@Z ENDP ; std::_Destroy<std::pair<int const ,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &>
_TEXT	ENDS
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
PUBLIC	??$forward@U_MONSTER_HERD_DATA@@@std@@YA$$QAU_MONSTER_HERD_DATA@@AAU1@@Z ; std::forward<_MONSTER_HERD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@U_MONSTER_HERD_DATA@@@std@@YA$$QAU_MONSTER_HERD_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_MONSTER_HERD_DATA@@@std@@YA$$QAU_MONSTER_HERD_DATA@@AAU1@@Z PROC ; std::forward<_MONSTER_HERD_DATA>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_MONSTER_HERD_DATA@@@std@@YA$$QAU_MONSTER_HERD_DATA@@AAU1@@Z ENDP ; std::forward<_MONSTER_HERD_DATA>
_TEXT	ENDS
PUBLIC	??$?0HU_MONSTER_HERD_DATA@@@?$_Pair_base@$$CBHU_MONSTER_HERD_DATA@@@std@@QAE@$$QAH$$QAU_MONSTER_HERD_DATA@@@Z ; std::_Pair_base<int const ,_MONSTER_HERD_DATA>::_Pair_base<int const ,_MONSTER_HERD_DATA><int,_MONSTER_HERD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$?0HU_MONSTER_HERD_DATA@@@?$_Pair_base@$$CBHU_MONSTER_HERD_DATA@@@std@@QAE@$$QAH$$QAU_MONSTER_HERD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HU_MONSTER_HERD_DATA@@@?$_Pair_base@$$CBHU_MONSTER_HERD_DATA@@@std@@QAE@$$QAH$$QAU_MONSTER_HERD_DATA@@@Z PROC ; std::_Pair_base<int const ,_MONSTER_HERD_DATA>::_Pair_base<int const ,_MONSTER_HERD_DATA><int,_MONSTER_HERD_DATA>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00020	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00023	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 164  : 		}

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??$?0HU_MONSTER_HERD_DATA@@@?$_Pair_base@$$CBHU_MONSTER_HERD_DATA@@@std@@QAE@$$QAH$$QAU_MONSTER_HERD_DATA@@@Z ENDP ; std::_Pair_base<int const ,_MONSTER_HERD_DATA>::_Pair_base<int const ,_MONSTER_HERD_DATA><int,_MONSTER_HERD_DATA>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
PUBLIC	??$move@AA_N@std@@YA$$QA_NAA_N@Z		; std::move<bool &>
; Function compile flags: /Ogtp
;	COMDAT ??$move@AA_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_N@std@@YA$$QA_NAA_N@Z PROC			; std::move<bool &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AA_N@std@@YA$$QA_NAA_N@Z ENDP			; std::move<bool &>
_TEXT	ENDS
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
; Function compile flags: /Ogtp
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::empty
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::empty, COMDAT
; _this$ = ecx

; 879  : 		return (size() == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 08	 cmp	 DWORD PTR [ecx+8], eax
  00005	0f 94 c0	 sete	 al

; 880  : 		}

  00008	c3		 ret	 0
?empty@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::empty
_TEXT	ENDS
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator!=, COMDAT
; _this$ = ecx

; 334  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 336  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lmost
; Function compile flags: /Ogtp
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1759 : 		return (this->_Left(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1760 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 555  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx

; 556  : 		}

  0000a	c3		 ret	 0
??1?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Key
; Function compile flags: /Ogtp
;	COMDAT ?_Key@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Key, COMDAT

; 616  : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return ((key_type&)_Traits::_Kfn(_Myval(_Pnode)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 618  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Key@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAAAHPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Key
_TEXT	ENDS
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator*, COMDAT
; _this$ = ecx

; 396  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 397  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator*
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rmost
; Function compile flags: /Ogtp
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1784 : 		return (this->_Right(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1785 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Root
; Function compile flags: /Ogtp
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1789 : 		return (this->_Parent(this->_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1790 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1793 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1794 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	56		 push	 esi

; 1795 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000c	89 32		 mov	 DWORD PTR [edx], esi

; 1796 : 
; 1797 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  0000e	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00011	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  00015	75 03		 jne	 SHORT $LN5@Rrotate

; 1798 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Rrotate:

; 1799 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1800 : 
; 1801 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0d		 jne	 SHORT $LN4@Rrotate

; 1802 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN4@Rrotate:

; 1803 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0d		 jne	 SHORT $LN2@Rrotate

; 1804 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  00041	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00044	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@Rrotate:

; 1805 : 		else
; 1806 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 1807 : 
; 1808 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1809 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1810 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 250  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 251  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 252  : 		if (this->_Getcont() == 0
; 253  : 			|| this->_Ptr == 0
; 254  : 			|| _Mytree::_Isnil(this->_Ptr))
; 255  : 			{	// report error
; 256  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 257  : 			_SCL_SECURE_OUT_OF_RANGE;
; 258  : 			}
; 259  : 
; 260  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 261  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 262  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 263  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 264  : 
; 265  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 266  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 267  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct traits from _Parg and allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 483  : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??$?0AAHAAU_MONSTER_HERD_DATA@@@?$pair@HU_MONSTER_HERD_DATA@@@std@@QAE@AAHAAU_MONSTER_HERD_DATA@@@Z ; std::pair<int,_MONSTER_HERD_DATA>::pair<int,_MONSTER_HERD_DATA><int &,_MONSTER_HERD_DATA &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAHAAU_MONSTER_HERD_DATA@@@?$pair@HU_MONSTER_HERD_DATA@@@std@@QAE@AAHAAU_MONSTER_HERD_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAU_MONSTER_HERD_DATA@@@?$pair@HU_MONSTER_HERD_DATA@@@std@@QAE@AAHAAU_MONSTER_HERD_DATA@@@Z PROC ; std::pair<int,_MONSTER_HERD_DATA>::pair<int,_MONSTER_HERD_DATA><int &,_MONSTER_HERD_DATA &>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0001a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00020	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00023	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 248  : 		}

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??$?0AAHAAU_MONSTER_HERD_DATA@@@?$pair@HU_MONSTER_HERD_DATA@@@std@@QAE@AAHAAU_MONSTER_HERD_DATA@@@Z ENDP ; std::pair<int,_MONSTER_HERD_DATA>::pair<int,_MONSTER_HERD_DATA><int &,_MONSTER_HERD_DATA &>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T156346 = -12						; size = 12
$T156351 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 44		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 c7 71 1c
	07		 cmp	 ecx, 119304647		; 071c71c7H
  00015	77 14		 ja	 SHORT $LN1@Allocate
  00017	8d 04 c9	 lea	 eax, DWORD PTR [ecx+ecx*8]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00029	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T156351[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T156346[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T156351[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T156346[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T156346[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@@Z ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@@Z PROC ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@@Z ENDP ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::max_size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::max_size, COMDAT
; _this$ = ecx

; 874  : 		return (this->_Alval.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 875  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 146  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 277  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 278  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 279  : 		if (this->_Getcont() == 0
; 280  : 			|| this->_Ptr == 0)
; 281  : 			{	// report error
; 282  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 283  : 			_SCL_SECURE_OUT_OF_RANGE;
; 284  : 			}
; 285  : 
; 286  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 287  : 		--(*(_Mybase *)this);
; 288  : 		if (_Ptrsav == this->_Ptr)
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 295  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 296  : 
; 297  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 298  : 		--(*(_Mybase *)this);
; 299  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 300  : 
; 301  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 302  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator--

; 303  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 304  : 
; 305  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 306  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 164  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$_Pair_base@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	??$?0HU_MONSTER_HERD_DATA@@@?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@QAE@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ; std::pair<int const ,_MONSTER_HERD_DATA>::pair<int const ,_MONSTER_HERD_DATA><int,_MONSTER_HERD_DATA>
; Function compile flags: /Ogtp
;	COMDAT ??$?0HU_MONSTER_HERD_DATA@@@?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@QAE@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HU_MONSTER_HERD_DATA@@@?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@QAE@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z PROC ; std::pair<int const ,_MONSTER_HERD_DATA>::pair<int const ,_MONSTER_HERD_DATA><int,_MONSTER_HERD_DATA>, COMDAT
; _this$ = ecx

; 255  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00014	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0001d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00020	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00023	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 256  : 		}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??$?0HU_MONSTER_HERD_DATA@@@?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@QAE@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ENDP ; std::pair<int const ,_MONSTER_HERD_DATA>::pair<int const ,_MONSTER_HERD_DATA><int,_MONSTER_HERD_DATA>
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogtp
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	56		 push	 esi

; 103  : 	_Left = _Move(_Right);

  00009	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000c	8a 16		 mov	 dl, BYTE PTR [esi]
  0000e	88 10		 mov	 BYTE PTR [eax], dl

; 104  : 	_Right = _Move(_Tmp);

  00010	88 0e		 mov	 BYTE PTR [esi], cl
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator->
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator->, COMDAT
; _this$ = ecx

; 401  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 402  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 405  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 406  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 407  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 408  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 270  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 272  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 273  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 274  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lbound
; Function compile flags: /Ogtp
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1741 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1742 : 		_Nodeptr _Pnode = _Root();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00009	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  0000d	75 19		 jne	 SHORT $LN3@Lbound
  0000f	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00012	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Lbound:

; 1746 : 			if (_DEBUG_LT_PRED(this->comp, this->_Key(_Pnode), _Keyval))

  00014	39 51 0c	 cmp	 DWORD PTR [ecx+12], edx
  00017	7d 05		 jge	 SHORT $LN2@Lbound

; 1747 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00019	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1748 : 			else

  0001c	eb 04		 jmp	 SHORT $LN1@Lbound
$LN2@Lbound:

; 1749 : 				{	// _Pnode not less than _Keyval, remember it
; 1750 : 				_Wherenode = _Pnode;

  0001e	8b c1		 mov	 eax, ecx

; 1751 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00020	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN1@Lbound:

; 1743 : 		_Nodeptr _Wherenode = this->_Myhead;	// end() if search fails
; 1744 : 
; 1745 : 		while (!this->_Isnil(_Pnode))

  00022	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00026	74 ec		 je	 SHORT $LL4@Lbound
$LN3@Lbound:

; 1752 : 				}
; 1753 : 
; 1754 : 		return (_Wherenode);	// return best remembered candidate
; 1755 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lrotate
; Function compile flags: /Ogtp
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1763 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1764 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00009	56		 push	 esi

; 1765 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1766 : 
; 1767 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
  00011	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  00015	75 03		 jne	 SHORT $LN5@Lrotate

; 1768 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN5@Lrotate:

; 1769 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1770 : 
; 1771 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	5e		 pop	 esi
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	75 0c		 jne	 SHORT $LN4@Lrotate

; 1772 : 			_Root() = _Pnode;

  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN4@Lrotate:

; 1773 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0b		 jne	 SHORT $LN2@Lrotate

; 1774 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0003e	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  00040	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN2@Lrotate:

; 1775 : 		else
; 1776 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1777 : 
; 1778 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 1779 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1780 : 		}

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >, COMDAT
; _this$ = ecx

; 213  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 214  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
$T156588 = -12						; size = 12
$T156580 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 44		 je	 SHORT $LN1@allocate
  0000f	81 f9 c7 71 1c
	07		 cmp	 ecx, 119304647		; 071c71c7H
  00015	77 14		 ja	 SHORT $LN3@allocate
  00017	8d 04 c9	 lea	 eax, DWORD PTR [ecx+ecx*8]
  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  0002b	8d 4d 08	 lea	 ecx, DWORD PTR $T156580[ebp]
  0002e	51		 push	 ecx
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T156588[ebp]
  00032	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T156580[ebp], 0
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00043	8d 55 f4	 lea	 edx, DWORD PTR $T156588[ebp]
  00046	52		 push	 edx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T156588[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@@Z ; std::_Dest_val<std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,std::pair<int const ,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,std::pair<int const ,_MONSTER_HERD_DATA> >, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,std::pair<int const ,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>, COMDAT
; _this$ = ecx

; 227  : 		{	// construct from specified values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 228  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??0?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>
_TEXT	ENDS
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator--
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator--, COMDAT
; _this$ = ecx

; 418  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 419  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator--

; 420  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 421  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator--
_TEXT	ENDS
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &,bool>, COMDAT
; _this$ = ecx

; 247  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0000d	89 10		 mov	 DWORD PTR [eax], edx
  0000f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00011	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 248  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > > &,bool>
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Buynode
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?_Buynode@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
$T156678 = -16						; size = 12
$T156655 = -4						; size = 4
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 559  : 		{	// allocate a node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00007	6a 24		 push	 36			; 00000024H
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	33 c9		 xor	 ecx, ecx
  00012	83 c4 04	 add	 esp, 4
  00015	3b c1		 cmp	 eax, ecx
  00017	74 1a		 je	 SHORT $LN5@Buynode

; 561  : 
; 562  : 		this->_Left(_Wherenode) = this->_Myhead;

  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	89 10		 mov	 DWORD PTR [eax], edx

; 563  : 		this->_Parent(_Wherenode) = this->_Myhead;

  0001e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 564  : 		this->_Right(_Wherenode) = this->_Myhead;

  00024	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00027	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 565  : 		this->_Color(_Wherenode) = this->_Red;

  0002a	66 89 48 20	 mov	 WORD PTR [eax+32], cx
  0002e	5e		 pop	 esi

; 566  : 		this->_Isnil(_Wherenode) = false;
; 567  : 		return (_Wherenode);
; 568  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0

; 560  : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

$LN5@Buynode:
  00033	8d 45 fc	 lea	 eax, DWORD PTR $T156655[ebp]
  00036	89 4d fc	 mov	 DWORD PTR $T156655[ebp], ecx
  00039	50		 push	 eax
  0003a	8d 4d f0	 lea	 ecx, DWORD PTR $T156678[ebp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00042	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00047	8d 4d f0	 lea	 ecx, DWORD PTR $T156678[ebp]
  0004a	51		 push	 ecx
  0004b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T156678[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN27@Buynode:
$LN26@Buynode:
  00057	cc		 int	 3
?_Buynode@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??$construct@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::construct<std::pair<int,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z PROC ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::construct<std::pair<int,_MONSTER_HERD_DATA> >, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1f		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	89 11		 mov	 DWORD PTR [ecx], edx
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00017	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001a	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0001d	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00020	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00023	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00026	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@construct:

; 209  : 		}

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
??$construct@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ENDP ; std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >::construct<std::pair<int,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++, COMDAT
; _this$ = ecx

; 411  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 		_Myiter _Tmp = *this;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 413  : 		++*this;

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 414  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 415  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >, COMDAT
; _this$ = ecx

; 378  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 379  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@PBV?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> > >
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Erase
; Function compile flags: /Ogtp
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1610 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1611 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]

; 1612 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00009	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  0000d	8b d9		 mov	 ebx, ecx
  0000f	8b f7		 mov	 esi, edi
  00011	75 1e		 jne	 SHORT $LN1@Erase
$LL3@Erase:

; 1613 : 			{	// free subtrees, then node
; 1614 : 			_Erase(this->_Right(_Pnode));

  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	50		 push	 eax
  00017	8b cb		 mov	 ecx, ebx
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Erase

; 1615 : 			_Pnode = this->_Left(_Pnode);

  0001e	8b 36		 mov	 esi, DWORD PTR [esi]

; 1616 : 			_Dest_val(this->_Alval,
; 1617 : 				_STD addressof(this->_Myval(_Rootnode)));
; 1618 : 
; 1619 : 			this->_Alnod.deallocate(_Rootnode, 1);

  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e2		 je	 SHORT $LL3@Erase
$LN1@Erase:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 1620 : 			}
; 1621 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
$T156842 = -16						; size = 12
$T156826 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 542  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN15@Tree_val
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 545  : 
; 546  : 		this->_Left(this->_Myhead) = this->_Myhead;

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 547  : 		this->_Parent(this->_Myhead) = this->_Myhead;

  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 548  : 		this->_Right(this->_Myhead) = this->_Myhead;

  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 549  : 		this->_Color(this->_Myhead) = this->_Black;

  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al

; 550  : 		this->_Isnil(this->_Myhead) = true;

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 551  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 543  : 		this->_Mysize = 0;
; 544  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN15@Tree_val:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T156826[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T156842[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T156826[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T156842[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T156842[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN37@Tree_val:
$LN36@Tree_val:
  0006e	cc		 int	 3
??0?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
_TEXT	ENDS
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Insert
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1631 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 : 		if (max_size() - 1 <= this->_Mysize)

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	3d cb cc cc 0c	 cmp	 eax, 214748363		; 0ccccccbH
  0000b	72 16		 jb	 SHORT $LN17@Insert

; 1633 : 			{	// tree would get too big, fail
; 1634 : 			_Dest_val(this->_Alval,
; 1635 : 				_STD addressof(this->_Myval(_Newnode)));
; 1636 : 
; 1637 : 			this->_Alnod.deallocate(_Newnode, 1);

  0000d	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4

; 1638 : 
; 1639 : 			_Xlength_error("map/set<T> too long");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0001e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN377@Insert:
$LN17@Insert:

; 1640 : 			}
; 1641 : 		++this->_Mysize;

  00023	40		 inc	 eax
  00024	53		 push	 ebx
  00025	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1642 : 		_Newnode->_Parent = _Wherenode;

  00028	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0002b	57		 push	 edi
  0002c	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0002f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1643 : 
; 1644 : 		if (_Wherenode == this->_Myhead)

  00032	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00035	32 db		 xor	 bl, bl
  00037	3b c2		 cmp	 eax, edx
  00039	75 10		 jne	 SHORT $LN16@Insert

; 1645 : 			{	// first node in tree, just set head values
; 1646 : 			_Root() = _Newnode;

  0003b	89 7a 04	 mov	 DWORD PTR [edx+4], edi

; 1647 : 			_Lmost() = _Newnode;

  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	89 3a		 mov	 DWORD PTR [edx], edi

; 1648 : 			_Rmost() = _Newnode;

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00046	89 78 08	 mov	 DWORD PTR [eax+8], edi
  00049	eb 20		 jmp	 SHORT $LN11@Insert
$LN16@Insert:

; 1649 : 			}
; 1650 : 		else if (_Addleft)

  0004b	38 5d 0c	 cmp	 BYTE PTR __Addleft$[ebp], bl
  0004e	74 0d		 je	 SHORT $LN14@Insert

; 1651 : 			{	// add to left of _Wherenode
; 1652 : 			this->_Left(_Wherenode) = _Newnode;

  00050	89 38		 mov	 DWORD PTR [eax], edi

; 1653 : 			if (_Wherenode == _Lmost())

  00052	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00055	3b 02		 cmp	 eax, DWORD PTR [edx]
  00057	75 12		 jne	 SHORT $LN11@Insert

; 1654 : 				_Lmost() = _Newnode;

  00059	89 3a		 mov	 DWORD PTR [edx], edi

; 1655 : 			}
; 1656 : 		else

  0005b	eb 0e		 jmp	 SHORT $LN11@Insert
$LN14@Insert:

; 1657 : 			{	// add to right of _Wherenode
; 1658 : 			this->_Right(_Wherenode) = _Newnode;

  0005d	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1659 : 			if (_Wherenode == _Rmost())

  00060	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00063	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00066	75 03		 jne	 SHORT $LN11@Insert

; 1660 : 				_Rmost() = _Newnode;

  00068	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN11@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  0006b	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0006e	8b c7		 mov	 eax, edi
  00070	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00073	0f 85 97 01 00
	00		 jne	 $LN9@Insert
  00079	56		 push	 esi
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL10@Insert:

; 1665 : 			if (this->_Parent(_Pnode)
; 1666 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  00080	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00083	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00086	3b 16		 cmp	 edx, DWORD PTR [esi]
  00088	0f 85 c1 00 00
	00		 jne	 $LN8@Insert

; 1667 : 				{	// fixup red-red in left subtree
; 1668 : 				_Wherenode =
; 1669 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));

  0008e	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1670 : 				if (this->_Color(_Wherenode) == this->_Red)

  00091	38 5e 20	 cmp	 BYTE PTR [esi+32], bl
  00094	75 1c		 jne	 SHORT $LN7@Insert

; 1671 : 					{	// parent has two red children, blacken both
; 1672 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00096	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1673 : 					this->_Color(_Wherenode) = this->_Black;

  0009a	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1

; 1674 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1675 : 						= this->_Red;

  0009e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000a4	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1676 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000aa	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1677 : 					}
; 1678 : 				else

  000ad	e9 51 01 00 00	 jmp	 $LN316@Insert
$LN7@Insert:

; 1679 : 					{	// parent has red and black children
; 1680 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000b2	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000b5	75 3a		 jne	 SHORT $LN111@Insert

; 1681 : 						{	// rotate right child to left
; 1682 : 						_Pnode = this->_Parent(_Pnode);

  000b7	8b c2		 mov	 eax, edx

; 1683 : 						_Lrotate(_Pnode);

  000b9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000bc	8b 32		 mov	 esi, DWORD PTR [edx]
  000be	89 70 08	 mov	 DWORD PTR [eax+8], esi
  000c1	8b 32		 mov	 esi, DWORD PTR [edx]
  000c3	38 5e 21	 cmp	 BYTE PTR [esi+33], bl
  000c6	75 03		 jne	 SHORT $LN110@Insert
  000c8	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN110@Insert:
  000cb	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000ce	89 72 04	 mov	 DWORD PTR [edx+4], esi
  000d1	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000d4	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  000d7	75 05		 jne	 SHORT $LN109@Insert
  000d9	89 56 04	 mov	 DWORD PTR [esi+4], edx
  000dc	eb 0e		 jmp	 SHORT $LN106@Insert
$LN109@Insert:
  000de	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000e1	3b 06		 cmp	 eax, DWORD PTR [esi]
  000e3	75 04		 jne	 SHORT $LN107@Insert
  000e5	89 16		 mov	 DWORD PTR [esi], edx
  000e7	eb 03		 jmp	 SHORT $LN106@Insert
$LN107@Insert:
  000e9	89 56 08	 mov	 DWORD PTR [esi+8], edx
$LN106@Insert:
  000ec	89 02		 mov	 DWORD PTR [edx], eax
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN111@Insert:

; 1684 : 						}
; 1685 : 					this->_Color(this->_Parent(_Pnode)) =
; 1686 : 						this->_Black;	// propagate red up

  000f1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f4	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1687 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1688 : 						this->_Red;

  000f8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000fb	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000fe	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  00101	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00104	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00107	8b 32		 mov	 esi, DWORD PTR [edx]
  00109	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0010c	89 3a		 mov	 DWORD PTR [edx], edi
  0010e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00111	38 5f 21	 cmp	 BYTE PTR [edi+33], bl
  00114	75 03		 jne	 SHORT $LN173@Insert
  00116	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN173@Insert:
  00119	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0011c	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0011f	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00122	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  00125	75 0b		 jne	 SHORT $LN172@Insert
  00127	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0012a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0012d	e9 cb 00 00 00	 jmp	 $LN376@Insert

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN172@Insert:
  00132	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  00135	3b 57 08	 cmp	 edx, DWORD PTR [edi+8]
  00138	75 0b		 jne	 SHORT $LN170@Insert
  0013a	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0013d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  00140	e9 b8 00 00 00	 jmp	 $LN376@Insert

; 1689 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

$LN170@Insert:
  00145	89 37		 mov	 DWORD PTR [edi], esi
  00147	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 1690 : 					}
; 1691 : 				}
; 1692 : 			else

  0014a	e9 ae 00 00 00	 jmp	 $LN376@Insert
$LN8@Insert:

; 1693 : 				{	// fixup red-red in right subtree
; 1694 : 				_Wherenode =
; 1695 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));

  0014f	8b 36		 mov	 esi, DWORD PTR [esi]

; 1696 : 				if (this->_Color(_Wherenode) == this->_Red)

  00151	38 5e 20	 cmp	 BYTE PTR [esi+32], bl
  00154	75 1c		 jne	 SHORT $LN3@Insert

; 1697 : 					{	// parent has two red children, blacken both
; 1698 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  00156	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1699 : 					this->_Color(_Wherenode) = this->_Black;

  0015a	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1

; 1700 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1701 : 						this->_Red;

  0015e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00161	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00164	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1702 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  00167	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1703 : 					}
; 1704 : 				else

  0016d	e9 91 00 00 00	 jmp	 $LN316@Insert
$LN3@Insert:

; 1705 : 					{	// parent has red and black children
; 1706 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00172	3b 02		 cmp	 eax, DWORD PTR [edx]
  00174	75 3c		 jne	 SHORT $LN253@Insert

; 1707 : 						{	// rotate left child to right
; 1708 : 						_Pnode = this->_Parent(_Pnode);

  00176	8b c2		 mov	 eax, edx

; 1709 : 						_Rrotate(_Pnode);

  00178	8b 10		 mov	 edx, DWORD PTR [eax]
  0017a	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  0017d	89 30		 mov	 DWORD PTR [eax], esi
  0017f	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00182	38 5e 21	 cmp	 BYTE PTR [esi+33], bl
  00185	75 03		 jne	 SHORT $LN252@Insert
  00187	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN252@Insert:
  0018a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0018d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00190	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00193	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00196	75 05		 jne	 SHORT $LN251@Insert
  00198	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0019b	eb 0f		 jmp	 SHORT $LN248@Insert
$LN251@Insert:
  0019d	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  001a0	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  001a3	75 05		 jne	 SHORT $LN249@Insert
  001a5	89 56 08	 mov	 DWORD PTR [esi+8], edx
  001a8	eb 02		 jmp	 SHORT $LN248@Insert
$LN249@Insert:
  001aa	89 16		 mov	 DWORD PTR [esi], edx
$LN248@Insert:
  001ac	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001af	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN253@Insert:

; 1710 : 						}
; 1711 : 					this->_Color(this->_Parent(_Pnode)) =
; 1712 : 						this->_Black;	// propagate red up

  001b2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001b5	c6 42 20 01	 mov	 BYTE PTR [edx+32], 1

; 1713 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1714 : 						this->_Red;

  001b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001bc	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001bf	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1715 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  001c2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001c5	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001c8	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  001cb	8b 3e		 mov	 edi, DWORD PTR [esi]
  001cd	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  001d0	8b 3e		 mov	 edi, DWORD PTR [esi]
  001d2	38 5f 21	 cmp	 BYTE PTR [edi+33], bl
  001d5	75 03		 jne	 SHORT $LN315@Insert
  001d7	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN315@Insert:
  001da	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001dd	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  001e0	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  001e3	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  001e6	75 05		 jne	 SHORT $LN314@Insert
  001e8	89 77 04	 mov	 DWORD PTR [edi+4], esi
  001eb	eb 0e		 jmp	 SHORT $LN311@Insert
$LN314@Insert:
  001ed	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  001f0	3b 17		 cmp	 edx, DWORD PTR [edi]
  001f2	75 04		 jne	 SHORT $LN312@Insert
  001f4	89 37		 mov	 DWORD PTR [edi], esi
  001f6	eb 03		 jmp	 SHORT $LN311@Insert
$LN312@Insert:
  001f8	89 77 08	 mov	 DWORD PTR [edi+8], esi
$LN311@Insert:
  001fb	89 16		 mov	 DWORD PTR [esi], edx
$LN376@Insert:
  001fd	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00200	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN316@Insert:

; 1661 : 			}
; 1662 : 
; 1663 : 		for (_Nodeptr _Pnode = _Newnode;
; 1664 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00203	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00206	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00209	0f 84 71 fe ff
	ff		 je	 $LL10@Insert
  0020f	5e		 pop	 esi
$LN9@Insert:

; 1716 : 					}
; 1717 : 				}
; 1718 : 
; 1719 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00210	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00213	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1720 : 		return (iterator(_Newnode, this));

  00216	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00219	89 38		 mov	 DWORD PTR [eax], edi
  0021b	5f		 pop	 edi
  0021c	c6 41 20 01	 mov	 BYTE PTR [ecx+32], 1
  00220	5b		 pop	 ebx

; 1721 : 		}

  00221	5d		 pop	 ebp
  00222	c2 10 00	 ret	 16			; 00000010H
$LN375@Insert:
?_Insert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Insert
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@U?$pair@HU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,std::pair<int const ,_MONSTER_HERD_DATA>,std::pair<int,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@U?$pair@HU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@U?$pair@HU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@@Z PROC ; std::_Cons_val<std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,std::pair<int const ,_MONSTER_HERD_DATA>,std::pair<int,_MONSTER_HERD_DATA> >, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1f		 je	 SHORT $LN7@Cons_val
  0000a	8b 45 10	 mov	 eax, DWORD PTR __Src$[ebp]
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	89 11		 mov	 DWORD PTR [ecx], edx
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00017	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001a	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0001d	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00020	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00023	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00026	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN7@Cons_val:

; 281  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Cons_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@U?$pair@HU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@@Z ENDP ; std::_Cons_val<std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,std::pair<int const ,_MONSTER_HERD_DATA>,std::pair<int,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::begin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::begin, COMDAT
; _this$ = ecx

; 806  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (iterator(_Lmost(), this));

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 808  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::end, COMDAT
; _this$ = ecx

; 816  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 		return (iterator(this->_Myhead, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 818  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::end
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
$T157867 = -16						; size = 12
$T157809 = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 698  : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN20@Tree
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 699  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8

; 698  : 		{	// construct empty tree

$LN20@Tree:
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T157809[ebp]
  00049	50		 push	 eax
  0004a	8d 4d f0	 lea	 ecx, DWORD PTR $T157867[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T157809[ebp], 0
  00054	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00059	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005e	8d 4d f0	 lea	 ecx, DWORD PTR $T157867[ebp]
  00061	51		 push	 ecx
  00062	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T157867[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN43@Tree:
$LN42@Tree:
  0006e	cc		 int	 3
??0?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
_TEXT	ENDS
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
CONST	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv795 = -12						; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase, COMDAT
; _this$ = ecx

; 1195 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 		if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
; 1198 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1199 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1200 : 		++_Where;	// save successor iterator for return
; 1201 : 		_Orphan_ptr(*this, _Erasednode);
; 1202 : 
; 1203 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1204 : 		if (this->_Isnil(_Where._Mynode()))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	80 7b 21 00	 cmp	 BYTE PTR [ebx+33], 0
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00013	74 0a		 je	 SHORT $LN40@erase

; 1205 : 			_Xout_of_range("invalid map/set<T> iterator");

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN295@erase:
$LN40@erase:

; 1206 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1207 : 		++_Where;	// save successor iterator for return

  0001f	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00022	89 5d f8	 mov	 DWORD PTR __Erasednode$[ebp], ebx
  00025	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1211 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1212 : 		_Nodeptr _Pnode = _Erasednode;
; 1213 : 
; 1214 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0002a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0002c	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00030	74 05		 je	 SHORT $LN39@erase

; 1215 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00032	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 1216 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00035	eb 17		 jmp	 SHORT $LN291@erase
$LN39@erase:
  00037	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0003a	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0003e	74 04		 je	 SHORT $LN37@erase

; 1217 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00040	8b f9		 mov	 edi, ecx

; 1218 : 		else

  00042	eb 0a		 jmp	 SHORT $LN291@erase
$LN37@erase:

; 1219 : 			{	// two subtrees, must lift successor node to replace erased
; 1220 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

  00044	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 1221 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00047	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1222 : 			}
; 1223 : 
; 1224 : 		if (_Pnode == _Erasednode)

  0004a	3b c3		 cmp	 eax, ebx
  0004c	75 72		 jne	 SHORT $LN35@erase
$LN291@erase:

; 1225 : 			{	// at most one subtree, relink it
; 1226 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1227 : 			if (!this->_Isnil(_Fixnode))

  0004e	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  00052	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00055	75 03		 jne	 SHORT $LN34@erase

; 1228 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  00057	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN34@erase:

; 1229 : 
; 1230 : 			if (_Root() == _Erasednode)

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00060	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00063	75 05		 jne	 SHORT $LN33@erase

; 1231 : 				_Root() = _Fixnode;	// link down from root

  00065	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1232 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  00068	eb 0b		 jmp	 SHORT $LN30@erase
$LN33@erase:
  0006a	39 1e		 cmp	 DWORD PTR [esi], ebx
  0006c	75 04		 jne	 SHORT $LN31@erase

; 1233 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  0006e	89 3e		 mov	 DWORD PTR [esi], edi

; 1234 : 			else

  00070	eb 03		 jmp	 SHORT $LN30@erase
$LN31@erase:

; 1235 : 				this->_Right(_Fixnodeparent) =
; 1236 : 					_Fixnode;	// link down to right

  00072	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN30@erase:

; 1237 : 
; 1238 : 			if (_Lmost() == _Erasednode)

  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	39 18		 cmp	 DWORD PTR [eax], ebx
  0007a	75 1b		 jne	 SHORT $LN29@erase

; 1239 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1240 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1241 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree

  0007c	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  00080	74 04		 je	 SHORT $LN43@erase
  00082	8b c6		 mov	 eax, esi
  00084	eb 0c		 jmp	 SHORT $LN44@erase
$LN43@erase:
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Min
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	83 c4 04	 add	 esp, 4
$LN44@erase:
  00092	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00095	89 02		 mov	 DWORD PTR [edx], eax
$LN29@erase:

; 1242 : 
; 1243 : 			if (_Rmost() == _Erasednode)

  00097	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009a	89 4d f4	 mov	 DWORD PTR tv795[ebp], ecx
  0009d	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000a0	75 78		 jne	 SHORT $LN165@erase

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000a2	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  000a6	74 07		 je	 SHORT $LN45@erase
  000a8	8b c6		 mov	 eax, esi
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000ad	eb 6b		 jmp	 SHORT $LN165@erase
$LN45@erase:

; 1244 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1245 : 					? _Fixnodeparent	// largest is parent of erased node
; 1246 : 					: this->_Max(_Fixnode);	// largest in relinked subtree

  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Max
  000b5	8b 4d f4	 mov	 ecx, DWORD PTR tv795[ebp]
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1247 : 			}
; 1248 : 		else

  000be	eb 5a		 jmp	 SHORT $LN165@erase
$LN35@erase:

; 1249 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1250 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1251 : 				_Pnode;	// link left up

  000c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1252 : 			this->_Left(_Pnode) =
; 1253 : 				this->_Left(_Erasednode);	// link successor down

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c5	89 08		 mov	 DWORD PTR [eax], ecx

; 1254 : 
; 1255 : 			if (_Pnode == this->_Right(_Erasednode))

  000c7	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  000ca	75 04		 jne	 SHORT $LN26@erase

; 1256 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000cc	8b f0		 mov	 esi, eax

; 1257 : 			else

  000ce	eb 1a		 jmp	 SHORT $LN25@erase
$LN26@erase:

; 1258 : 				{	// successor further down, link in place of erased
; 1259 : 				_Fixnodeparent =
; 1260 : 					this->_Parent(_Pnode);	// parent is successor's
; 1261 : 				if (!this->_Isnil(_Fixnode))

  000d0	80 7f 21 00	 cmp	 BYTE PTR [edi+33], 0
  000d4	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d7	75 03		 jne	 SHORT $LN24@erase

; 1262 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000d9	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN24@erase:

; 1263 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000dc	89 3e		 mov	 DWORD PTR [esi], edi

; 1264 : 				this->_Right(_Pnode) =
; 1265 : 					this->_Right(_Erasednode);	// link next down

  000de	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000e1	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1267 : 					_Pnode;	// right up

  000e4	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000e7	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN25@erase:

; 1268 : 				}
; 1269 : 
; 1270 : 			if (_Root() == _Erasednode)

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f0	39 59 04	 cmp	 DWORD PTR [ecx+4], ebx
  000f3	75 05		 jne	 SHORT $LN23@erase

; 1271 : 				_Root() = _Pnode;	// link down from root

  000f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1272 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000f8	eb 0e		 jmp	 SHORT $LN20@erase
$LN23@erase:
  000fa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fd	39 19		 cmp	 DWORD PTR [ecx], ebx
  000ff	75 04		 jne	 SHORT $LN21@erase

; 1273 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1274 : 					_Pnode;	// link down to left

  00101	89 01		 mov	 DWORD PTR [ecx], eax

; 1275 : 			else

  00103	eb 03		 jmp	 SHORT $LN20@erase
$LN21@erase:

; 1276 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1277 : 					_Pnode;	// link down to right

  00105	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN20@erase:

; 1278 : 
; 1279 : 			this->_Parent(_Pnode) =
; 1280 : 				this->_Parent(_Erasednode);	// link successor up

  00108	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0010b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1281 : 			_STD swap(this->_Color(_Pnode),
; 1282 : 				this->_Color(_Erasednode));	// recolor it

  0010e	8a 53 20	 mov	 dl, BYTE PTR [ebx+32]
  00111	8a 48 20	 mov	 cl, BYTE PTR [eax+32]
  00114	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00117	88 4b 20	 mov	 BYTE PTR [ebx+32], cl
$LN165@erase:

; 1283 : 			}
; 1284 : 
; 1285 : 		if (this->_Color(_Erasednode) == this->_Black)

  0011a	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0011d	b3 01		 mov	 bl, 1
  0011f	38 58 20	 cmp	 BYTE PTR [eax+32], bl
  00122	0f 85 fa 00 00
	00		 jne	 $LN19@erase

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  00128	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	3b 7a 04	 cmp	 edi, DWORD PTR [edx+4]
  00131	0f 84 e8 00 00
	00		 je	 $LN16@erase
$LL18@erase:
  00137	38 5f 20	 cmp	 BYTE PTR [edi+32], bl
  0013a	0f 85 df 00 00
	00		 jne	 $LN16@erase

; 1290 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	3b f8		 cmp	 edi, eax
  00144	75 65		 jne	 SHORT $LN15@erase

; 1291 : 					{	// fixup left subtree
; 1292 : 					_Pnode = this->_Right(_Fixnodeparent);

  00146	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1293 : 					if (this->_Color(_Pnode) == this->_Red)

  00149	80 78 20 00	 cmp	 BYTE PTR [eax+32], 0
  0014d	75 13		 jne	 SHORT $LN14@erase

; 1294 : 						{	// rotate red up from right subtree
; 1295 : 						this->_Color(_Pnode) = this->_Black;

  0014f	88 58 20	 mov	 BYTE PTR [eax+32], bl

; 1296 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1297 : 						_Lrotate(_Fixnodeparent);

  00152	56		 push	 esi
  00153	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
  00157	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lrotate

; 1298 : 						_Pnode = this->_Right(_Fixnodeparent);

  0015c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN14@erase:

; 1299 : 						}
; 1300 : 
; 1301 : 					if (this->_Isnil(_Pnode))

  00162	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0

; 1302 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1303 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black

  00166	75 74		 jne	 SHORT $LN293@erase

; 1304 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00168	8b 10		 mov	 edx, DWORD PTR [eax]
  0016a	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  0016d	75 08		 jne	 SHORT $LN11@erase
  0016f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00172	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  00175	74 61		 je	 SHORT $LN294@erase
$LN11@erase:

; 1305 : 						{	// redden right subtree with black children
; 1306 : 						this->_Color(_Pnode) = this->_Red;
; 1307 : 						_Fixnode = _Fixnodeparent;
; 1308 : 						}
; 1309 : 					else
; 1310 : 						{	// must rearrange right subtree
; 1311 : 						if (this->_Color(this->_Right(_Pnode))
; 1312 : 							== this->_Black)

  00177	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017a	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  0017d	75 15		 jne	 SHORT $LN9@erase

; 1313 : 							{	// rotate red up from left sub-subtree
; 1314 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1315 : 							this->_Color(_Pnode) = this->_Red;
; 1316 : 							_Rrotate(_Pnode);

  00184	50		 push	 eax
  00185	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
  00189	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rrotate

; 1317 : 							_Pnode = this->_Right(_Fixnodeparent);

  0018e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN9@erase:

; 1318 : 							}
; 1319 : 
; 1320 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00194	8a 56 20	 mov	 dl, BYTE PTR [esi+32]
  00197	88 50 20	 mov	 BYTE PTR [eax+32], dl

; 1321 : 						this->_Color(_Fixnodeparent) = this->_Black;

  0019a	88 5e 20	 mov	 BYTE PTR [esi+32], bl

; 1322 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  0019d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1323 : 						_Lrotate(_Fixnodeparent);

  001a0	56		 push	 esi
  001a1	88 58 20	 mov	 BYTE PTR [eax+32], bl
  001a4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lrotate

; 1324 : 						break;	// tree now recolored/rebalanced

  001a9	eb 74		 jmp	 SHORT $LN16@erase
$LN15@erase:

; 1325 : 						}
; 1326 : 					}
; 1327 : 				else
; 1328 : 					{	// fixup right subtree
; 1329 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1330 : 					if (this->_Color(_Pnode) == this->_Red)

  001ab	80 78 20 00	 cmp	 BYTE PTR [eax+32], 0
  001af	75 12		 jne	 SHORT $LN7@erase

; 1331 : 						{	// rotate red up from left subtree
; 1332 : 						this->_Color(_Pnode) = this->_Black;

  001b1	88 58 20	 mov	 BYTE PTR [eax+32], bl

; 1333 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1334 : 						_Rrotate(_Fixnodeparent);

  001b4	56		 push	 esi
  001b5	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
  001b9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rrotate

; 1335 : 						_Pnode = this->_Left(_Fixnodeparent);

  001be	8b 06		 mov	 eax, DWORD PTR [esi]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@erase:

; 1336 : 						}
; 1337 : 					if (this->_Isnil(_Pnode))

  001c3	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0

; 1338 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1339 : 					else if (this->_Color(this->_Right(_Pnode)) ==

  001c7	75 13		 jne	 SHORT $LN293@erase

; 1340 : 						this->_Black
; 1341 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001c9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001cc	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001cf	75 1e		 jne	 SHORT $LN4@erase
  001d1	8b 10		 mov	 edx, DWORD PTR [eax]
  001d3	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001d6	75 17		 jne	 SHORT $LN4@erase
$LN294@erase:

; 1342 : 						{	// redden left subtree with black children
; 1343 : 						this->_Color(_Pnode) = this->_Red;

  001d8	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
$LN293@erase:

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001dc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1344 : 						_Fixnode = _Fixnodeparent;

  001df	8b fe		 mov	 edi, esi
  001e1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001e4	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001e7	0f 85 4a ff ff
	ff		 jne	 $LL18@erase

; 1286 : 			{	// erasing black link, must recolor/rebalance tree
; 1287 : 			for (; _Fixnode != _Root()
; 1288 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1289 : 				_Fixnodeparent = this->_Parent(_Fixnode))

  001ed	eb 30		 jmp	 SHORT $LN16@erase
$LN4@erase:

; 1345 : 						}
; 1346 : 					else
; 1347 : 						{	// must rearrange left subtree
; 1348 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  001ef	8b 10		 mov	 edx, DWORD PTR [eax]
  001f1	38 5a 20	 cmp	 BYTE PTR [edx+32], bl
  001f4	75 15		 jne	 SHORT $LN2@erase

; 1349 : 							{	// rotate red up from right sub-subtree
; 1350 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f9	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 1351 : 							this->_Color(_Pnode) = this->_Red;
; 1352 : 							_Lrotate(_Pnode);

  001fc	50		 push	 eax
  001fd	c6 40 20 00	 mov	 BYTE PTR [eax+32], 0
  00201	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Lrotate

; 1353 : 							_Pnode = this->_Left(_Fixnodeparent);

  00206	8b 06		 mov	 eax, DWORD PTR [esi]
  00208	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN2@erase:

; 1354 : 							}
; 1355 : 
; 1356 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  0020b	8a 56 20	 mov	 dl, BYTE PTR [esi+32]
  0020e	88 50 20	 mov	 BYTE PTR [eax+32], dl

; 1357 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00211	88 5e 20	 mov	 BYTE PTR [esi+32], bl

; 1358 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  00214	8b 00		 mov	 eax, DWORD PTR [eax]

; 1359 : 						_Rrotate(_Fixnodeparent);

  00216	56		 push	 esi
  00217	88 58 20	 mov	 BYTE PTR [eax+32], bl
  0021a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Rrotate
$LN16@erase:

; 1360 : 						break;	// tree now recolored/rebalanced
; 1361 : 						}
; 1362 : 					}
; 1363 : 
; 1364 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0021f	88 5f 20	 mov	 BYTE PTR [edi+32], bl
$LN19@erase:

; 1365 : 			}
; 1366 : 
; 1367 : 		_Dest_val(this->_Alval,
; 1368 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1369 : 
; 1370 : 		this->_Alnod.deallocate(_Erasednode, 1);

  00222	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  00225	51		 push	 ecx
  00226	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1371 : 
; 1372 : 		if (0 < this->_Mysize)

  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00231	83 c4 04	 add	 esp, 4
  00234	5f		 pop	 edi
  00235	5e		 pop	 esi
  00236	5b		 pop	 ebx
  00237	85 c0		 test	 eax, eax
  00239	74 04		 je	 SHORT $LN1@erase

; 1373 : 			--this->_Mysize;

  0023b	48		 dec	 eax
  0023c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@erase:

; 1374 : 
; 1375 : 		return (iterator(_Where._Ptr, this));	// return successor iterator

  0023f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00242	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]
  00245	89 10		 mov	 DWORD PTR [eax], edx

; 1376 : 		}

  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c2 08 00	 ret	 8
$LN292@erase:
?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::clear, COMDAT
; _this$ = ecx

; 1410 : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		this->_Orphan_ptr(*this, 0);
; 1413 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1414 : 
; 1415 : 		_Erase(_Root());

  00005	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00008	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0000b	80 7b 21 00	 cmp	 BYTE PTR [ebx+33], 0
  0000f	8b f3		 mov	 esi, ebx
  00011	75 1e		 jne	 SHORT $LN7@clear
$LL9@clear:
  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	51		 push	 ecx
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Erase
  0001e	8b 36		 mov	 esi, DWORD PTR [esi]
  00020	53		 push	 ebx
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  0002d	8b de		 mov	 ebx, esi
  0002f	74 e2		 je	 SHORT $LL9@clear
$LN7@clear:

; 1416 : 		_Root() = this->_Myhead;

  00031	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00034	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1417 : 		_Lmost() = this->_Myhead;

  00037	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003a	89 00		 mov	 DWORD PTR [eax], eax

; 1418 : 		_Rmost() = this->_Myhead;

  0003c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1419 : 		this->_Mysize = 0;

  00042	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 1420 : 		}

  0004c	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::clear
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::lower_bound
; Function compile flags: /Ogtp
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1449 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1450 : 		return (iterator(_Lbound(_Keyval), this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0000d	75 19		 jne	 SHORT $LN36@lower_boun
  0000f	8b 55 0c	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00012	8b 12		 mov	 edx, DWORD PTR [edx]
$LL6@lower_boun:
  00014	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  00017	7d 05		 jge	 SHORT $LN4@lower_boun
  00019	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001c	eb 04		 jmp	 SHORT $LN3@lower_boun
$LN4@lower_boun:
  0001e	8b c8		 mov	 ecx, eax
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$LN3@lower_boun:
  00022	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00026	74 ec		 je	 SHORT $LL6@lower_boun
$LN36@lower_boun:
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 1451 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Linsert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Linsert
; Function compile flags: /Ogtp
;	COMDAT ?_Linsert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@_N@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Node$ = 12						; size = 4
$T158487 = 16						; size = 4
$T158485 = 16						; size = 4
__Where$155456 = 16					; size = 4
__Leftish$ = 16						; size = 1
?_Linsert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@_N@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Linsert, COMDAT
; _this$ = ecx

; 944  : 		{	// try to insert node at _Node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 945  : 		const value_type& _Val = this->_Myval(_Node);
; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();
; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00010	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	b1 01		 mov	 cl, 1
  00019	57		 push	 edi
  0001a	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl
  0001d	75 2d		 jne	 SHORT $LN11@Linsert
  0001f	8b 7a 0c	 mov	 edi, DWORD PTR [edx+12]
$LL12@Linsert:

; 951  : 			{	// look for leaf to insert before (_Addleft) or after
; 952  : 			_Wherenode = _Trynode;
; 953  : 			if (_Leftish)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  00026	8b f0		 mov	 esi, eax
  00028	74 08		 je	 SHORT $LN10@Linsert

; 954  : 				_Addleft = !_DEBUG_LT_PRED(this->comp,

  0002a	39 78 0c	 cmp	 DWORD PTR [eax+12], edi
  0002d	0f 9d c1	 setge	 cl

; 955  : 					this->_Key(_Trynode),
; 956  : 					this->_Kfn(_Val));	// favor left end
; 957  : 			else

  00030	eb 06		 jmp	 SHORT $LN146@Linsert
$LN10@Linsert:

; 958  : 				_Addleft = _DEBUG_LT_PRED(this->comp,

  00032	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  00035	0f 9c c1	 setl	 cl
$LN146@Linsert:
  00038	88 4d fc	 mov	 BYTE PTR __Addleft$[ebp], cl

; 959  : 					this->_Kfn(_Val),
; 960  : 					this->_Key(_Trynode));	// favor right end
; 961  : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 962  : 				: this->_Right(_Trynode);

  0003b	84 c9		 test	 cl, cl
  0003d	74 04		 je	 SHORT $LN15@Linsert
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	eb 03		 jmp	 SHORT $LN16@Linsert
$LN15@Linsert:
  00043	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN16@Linsert:

; 945  : 		const value_type& _Val = this->_Myval(_Node);
; 946  : 
; 947  : 		_Nodeptr _Trynode = _Root();
; 948  : 		_Nodeptr _Wherenode = this->_Myhead;
; 949  : 		bool _Addleft = true;	// add to left of head if tree empty
; 950  : 		while (!this->_Isnil(_Trynode))

  00046	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0004a	74 d6		 je	 SHORT $LL12@Linsert
$LN11@Linsert:

; 963  : 			}
; 964  : 
; 965  : 		if (this->_Multi)
; 966  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));
; 967  : 		else
; 968  : 			{	// insert only if unique
; 969  : 			iterator _Where = iterator(_Wherenode, this);

  0004c	8b fe		 mov	 edi, esi
  0004e	89 7d 10	 mov	 DWORD PTR __Where$155456[ebp], edi

; 970  : 			if (!_Addleft)

  00051	84 c9		 test	 cl, cl
  00053	74 35		 je	 SHORT $LN99@Linsert

; 971  : 				;	// need to test if insert after is okay
; 972  : 			else if (_Where == begin())

  00055	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 973  : 				return (_Pairib(_Insert(true, _Wherenode, _Node), true));

  00058	8d 4d 10	 lea	 ecx, DWORD PTR $T158485[ebp]
  0005b	3b 30		 cmp	 esi, DWORD PTR [eax]
  0005d	75 20		 jne	 SHORT $LN4@Linsert
  0005f	52		 push	 edx
  00060	56		 push	 esi
  00061	6a 01		 push	 1
  00063	51		 push	 ecx
  00064	8b cb		 mov	 ecx, ebx
  00066	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Insert
  0006b	8b 10		 mov	 edx, DWORD PTR [eax]
  0006d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	89 10		 mov	 DWORD PTR [eax], edx
  00074	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  00078	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Linsert:

; 974  : 			else
; 975  : 				--_Where;	// need to test if insert before is okay

  0007f	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator--
  00084	8b 7d 10	 mov	 edi, DWORD PTR __Where$155456[ebp]
  00087	8b 55 0c	 mov	 edx, DWORD PTR __Node$[ebp]
$LN99@Linsert:

; 976  : 
; 977  : 			if (_DEBUG_LT_PRED(this->comp,

  0008a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 978  : 				this->_Key(_Where._Mynode()),
; 979  : 				this->_Kfn(_Val)))
; 980  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Node), true));

  0008d	52		 push	 edx
  0008e	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00091	7d 24		 jge	 SHORT $LN2@Linsert
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __Addleft$[ebp]
  00096	56		 push	 esi
  00097	51		 push	 ecx
  00098	8d 55 10	 lea	 edx, DWORD PTR $T158487[ebp]
  0009b	52		 push	 edx
  0009c	8b cb		 mov	 ecx, ebx
  0009e	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@1@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Insert
  000a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	89 08		 mov	 DWORD PTR [eax], ecx
  000ac	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000b0	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Linsert:

; 981  : 			else
; 982  : 				{	// duplicate, don't insert
; 983  : 				_Dest_val(this->_Alval,
; 984  : 					_STD addressof(this->_Myval(_Node)));
; 985  : 
; 986  : 				this->_Alnod.deallocate(_Node, 1);

  000b7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 987  : 
; 988  : 				return (_Pairib(_Where, false));

  000bc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000bf	83 c4 04	 add	 esp, 4
  000c2	89 38		 mov	 DWORD PTR [eax], edi
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000ca	5b		 pop	 ebx

; 989  : 				}
; 990  : 			}
; 991  : 		}

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 0c 00	 ret	 12			; 0000000cH
?_Linsert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Linsert
_TEXT	ENDS
PUBLIC	??$_Buynode@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Buynode<std::pair<int,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Buynode@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z
_TEXT	SEGMENT
$T158855 = -12						; size = 12
$T158810 = 8						; size = 4
__Val$ = 8						; size = 4
??$_Buynode@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z PROC ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Buynode<std::pair<int,_MONSTER_HERD_DATA> >, COMDAT
; _this$ = ecx

; 586  : 		_Nodeptr _Buynode(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

  00008	6a 24		 push	 36			; 00000024H
  0000a	8b f9		 mov	 edi, ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	8b f0		 mov	 esi, eax
  00013	33 c0		 xor	 eax, eax
  00015	83 c4 04	 add	 esp, 4
  00018	3b f0		 cmp	 esi, eax
  0001a	74 33		 je	 SHORT $LN12@Buynode@2
  0001c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001f	89 0e		 mov	 DWORD PTR [esi], ecx
  00021	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00024	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00027	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 589  : 
; 590  : 		_TRY_BEGIN
; 591  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Wherenode)),
; 592  : 			_STD forward<_Valty>(_Val));

  0002a	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  0002d	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00031	52		 push	 edx
  00032	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00035	50		 push	 eax
  00036	83 c7 0d	 add	 edi, 13			; 0000000dH
  00039	57		 push	 edi
  0003a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0003d	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@std@@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@2@U?$pair@HU_MONSTER_HERD_DATA@@@2@@std@@YAXAAV?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@0@PAU?$pair@$$CBHU_MONSTER_HERD_DATA@@@0@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@0@@Z ; std::_Cons_val<std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,std::pair<int const ,_MONSTER_HERD_DATA>,std::pair<int,_MONSTER_HERD_DATA> >
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	5f		 pop	 edi

; 593  : 		_CATCH_ALL
; 594  : 		this->_Alnod.deallocate(_Wherenode, 1);
; 595  : 		_RERAISE;
; 596  : 		_CATCH_END
; 597  : 
; 598  : 		return (_Wherenode);

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi

; 599  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4

; 587  : 		{	// allocate a node with defaults
; 588  : 		_Nodeptr _Wherenode = _Buynode();

$LN12@Buynode@2:
  0004f	8d 4d 08	 lea	 ecx, DWORD PTR $T158810[ebp]
  00052	51		 push	 ecx
  00053	8d 4d f4	 lea	 ecx, DWORD PTR $T158855[ebp]
  00056	89 45 08	 mov	 DWORD PTR $T158810[ebp], eax
  00059	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0005e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00063	8d 55 f4	 lea	 edx, DWORD PTR $T158855[ebp]
  00066	52		 push	 edx
  00067	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T158855[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN44@Buynode@2:
$LN43@Buynode@2:
  00073	cc		 int	 3
??$_Buynode@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Buynode<std::pair<int,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	?BeenAttacked@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z ; MonsterHerd::BeenAttacked
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\monsterherd.cpp
;	COMDAT ?BeenAttacked@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_it$154840 = 8						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?BeenAttacked@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z PROC ; MonsterHerd::BeenAttacked, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 263  : 	if ( lpObj == NULL )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000b	85 db		 test	 ebx, ebx
  0000d	0f 84 1a 01 00
	00		 je	 $LN15@BeenAttack

; 264  : 	{
; 265  : 		return;
; 266  : 	}
; 267  : 
; 268  : 	if ( lpObj->Connected < PLAYER_PLAYING || lpObj->Type != OBJ_MONSTER )

  00013	b0 03		 mov	 al, 3
  00015	38 43 04	 cmp	 BYTE PTR [ebx+4], al
  00018	0f 82 0f 01 00
	00		 jb	 $LN15@BeenAttack
  0001e	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  00023	0f 85 04 01 00
	00		 jne	 $LN15@BeenAttack

; 269  : 	{
; 270  : 		return;
; 271  : 	}
; 272  : 
; 273  : 	if ( lpTargetObj->Connected < PLAYER_PLAYING )

  00029	57		 push	 edi
  0002a	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  0002d	38 47 04	 cmp	 BYTE PTR [edi+4], al
  00030	0f 82 f6 00 00
	00		 jb	 $LN68@BeenAttack

; 274  : 	{
; 275  : 		return;
; 276  : 	}
; 277  : 
; 278  : 	if ( this->m_bHerdActive == 0 )

  00036	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  0003a	0f 84 ec 00 00
	00		 je	 $LN68@BeenAttack

; 279  : 	{
; 280  : 		return;
; 281  : 	}
; 282  : 
; 283  : 	for ( std::map<int, _MONSTER_HERD_DATA>::iterator it = this->m_mapMonsterHerd.begin(); it != this->m_mapMonsterHerd.end() ; it++)

  00040	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00043	56		 push	 esi
  00044	8b 30		 mov	 esi, DWORD PTR [eax]
  00046	89 75 08	 mov	 DWORD PTR _it$154840[ebp], esi
  00049	3b f0		 cmp	 esi, eax
  0004b	0f 84 da 00 00
	00		 je	 $LN69@BeenAttack
$LL67@BeenAttack:

; 284  : 	{
; 285  : 		_MONSTER_HERD_DATA * lpMHD = &it->second;
; 286  : 
; 287  : 		if (  OBJMAX_RANGE(lpMHD->m_iIndex)== FALSE )

  00051	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00054	85 c9		 test	 ecx, ecx
  00056	0f 88 b8 00 00
	00		 js	 $LN11@BeenAttack
  0005c	33 c0		 xor	 eax, eax
  0005e	81 f9 e7 1c 00
	00		 cmp	 ecx, 7399		; 00001ce7H
  00064	0f 9e c0	 setle	 al
  00067	85 c0		 test	 eax, eax
  00069	0f 84 a5 00 00
	00		 je	 $LN11@BeenAttack

; 288  : 		{
; 289  : 			continue;
; 290  : 		}
; 291  : 
; 292  : 		if ( gObj[lpMHD->m_iIndex].Live == FALSE || gObj[lpMHD->m_iIndex].m_State != 2 )

  0006f	8b c1		 mov	 eax, ecx
  00071	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  00077	80 b8 62 00 00
	00 00		 cmp	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+98], 0
  0007e	0f 84 90 00 00
	00		 je	 $LN11@BeenAttack
  00084	83 b8 bc 01 00
	00 02		 cmp	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+444], 2
  0008b	0f 85 83 00 00
	00		 jne	 $LN11@BeenAttack

; 293  : 		{
; 294  : 			continue;
; 295  : 		}
; 296  : 
; 297  : 		if ( gObj[lpMHD->m_iIndex].m_lpMonsterHerd != lpObj->m_lpMonsterHerd )

  00091	8b 90 2c 0f 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+3884]
  00097	3b 93 2c 0f 00
	00		 cmp	 edx, DWORD PTR [ebx+3884]
  0009d	75 75		 jne	 SHORT $LN11@BeenAttack

; 298  : 		{
; 299  : 			continue;
; 300  : 		}
; 301  : 
; 302  : 		if ( lpMHD->m_iIndex == lpObj->m_Index )

  0009f	3b 0b		 cmp	 ecx, DWORD PTR [ebx]
  000a1	74 71		 je	 SHORT $LN11@BeenAttack

; 303  : 		{
; 304  : 			continue;
; 305  : 		}
; 306  : 
; 307  : 		if ( gObj[lpMHD->m_iIndex].TargetNumber == -1 )

  000a3	66 83 b8 d4 02
	00 00 ff	 cmp	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+724], -1
  000ab	75 12		 jne	 SHORT $LN4@BeenAttack

; 308  : 		{
; 309  : 			if ( (rand()%100) < 70 )

  000ad	e8 00 00 00 00	 call	 _rand
  000b2	99		 cdq
  000b3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000b8	f7 f9		 idiv	 ecx
  000ba	83 fa 46	 cmp	 edx, 70			; 00000046H

; 310  : 			{
; 311  : 				gObj[lpMHD->m_iIndex].TargetNumber = lpTargetObj->m_Index;
; 312  : 				gObj[lpMHD->m_iIndex].m_ActState.Emotion = 1;
; 313  : 				gObj[lpMHD->m_iIndex].m_ActState.EmotionCount = 50;
; 314  : 				continue;

  000bd	eb 10		 jmp	 SHORT $LN70@BeenAttack
$LN4@BeenAttack:

; 315  : 			}
; 316  : 		}
; 317  : 		else if ( (rand()%100) < 30 )

  000bf	e8 00 00 00 00	 call	 _rand
  000c4	99		 cdq
  000c5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000ca	f7 f9		 idiv	 ecx
  000cc	83 fa 1e	 cmp	 edx, 30			; 0000001eH
$LN70@BeenAttack:
  000cf	7d 43		 jge	 SHORT $LN11@BeenAttack

; 318  : 		{
; 319  : 			gObj[lpMHD->m_iIndex].TargetNumber = lpTargetObj->m_Index;

  000d1	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000d4	66 8b 07	 mov	 ax, WORD PTR [edi]
  000d7	69 d2 64 15 00
	00		 imul	 edx, 5476		; 00001564H
  000dd	66 89 82 d4 02
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edx+724], ax

; 320  : 			gObj[lpMHD->m_iIndex].m_ActState.Emotion = 1;

  000e4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e7	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  000ed	8b 88 b4 01 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+436]
  000f3	8d 80 b4 01 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+436]
  000f9	81 e1 1f ff ff
	ff		 and	 ecx, -225		; ffffff1fH
  000ff	83 c9 10	 or	 ecx, 16			; 00000010H
  00102	89 08		 mov	 DWORD PTR [eax], ecx

; 321  : 			gObj[lpMHD->m_iIndex].m_ActState.EmotionCount = 50;

  00104	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00107	69 d2 64 15 00
	00		 imul	 edx, 5476		; 00001564H
  0010d	c6 82 b5 01 00
	00 32		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edx+437], 50 ; 00000032H
$LN11@BeenAttack:

; 279  : 	{
; 280  : 		return;
; 281  : 	}
; 282  : 
; 283  : 	for ( std::map<int, _MONSTER_HERD_DATA>::iterator it = this->m_mapMonsterHerd.begin(); it != this->m_mapMonsterHerd.end() ; it++)

  00114	8d 4d 08	 lea	 ecx, DWORD PTR _it$154840[ebp]
  00117	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++
  0011c	8b 75 08	 mov	 esi, DWORD PTR _it$154840[ebp]
  0011f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00122	3b 70 24	 cmp	 esi, DWORD PTR [eax+36]
  00125	0f 85 26 ff ff
	ff		 jne	 $LL67@BeenAttack
$LN69@BeenAttack:
  0012b	5e		 pop	 esi
$LN68@BeenAttack:
  0012c	5f		 pop	 edi
$LN15@BeenAttack:
  0012d	5b		 pop	 ebx

; 322  : 			continue;
; 323  : 		}
; 324  : 	}
; 325  : }

  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
?BeenAttacked@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z ENDP ; MonsterHerd::BeenAttacked
_TEXT	ENDS
PUBLIC	?OrderAttack@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0H@Z ; MonsterHerd::OrderAttack
; Function compile flags: /Ogtp
;	COMDAT ?OrderAttack@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_it$154882 = 12						; size = 4
_lpTargetObj$ = 12					; size = 4
_iAttackPercent$ = 16					; size = 4
?OrderAttack@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0H@Z PROC ; MonsterHerd::OrderAttack, COMDAT
; _this$ = ecx

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 332  : 	if ( lpObj == NULL )

  00004	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	85 d2		 test	 edx, edx
  0000c	0f 84 1b 01 00
	00		 je	 $LN13@OrderAttac

; 333  : 	{
; 334  : 		return;
; 335  : 	}
; 336  : 
; 337  : 	if ( lpObj->Connected < PLAYER_PLAYING || lpObj->Type != OBJ_MONSTER )

  00012	b0 03		 mov	 al, 3
  00014	38 42 04	 cmp	 BYTE PTR [edx+4], al
  00017	0f 82 10 01 00
	00		 jb	 $LN13@OrderAttac
  0001d	66 83 7a 60 02	 cmp	 WORD PTR [edx+96], 2
  00022	0f 85 05 01 00
	00		 jne	 $LN13@OrderAttac

; 338  : 	{
; 339  : 		return;
; 340  : 	}
; 341  : 
; 342  : 	if ( lpTargetObj->Connected < PLAYER_PLAYING )

  00028	57		 push	 edi
  00029	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  0002c	38 47 04	 cmp	 BYTE PTR [edi+4], al
  0002f	0f 82 f7 00 00
	00		 jb	 $LN67@OrderAttac

; 343  : 	{
; 344  : 		return;
; 345  : 	}
; 346  : 
; 347  : 	if ( this->m_bHerdActive == 0 )

  00035	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00039	0f 84 ed 00 00
	00		 je	 $LN67@OrderAttac

; 348  : 	{
; 349  : 		return;
; 350  : 	}
; 351  : 
; 352  : 	if ( ((iAttackPercent<0)?FALSE:(iAttackPercent>100)?FALSE:TRUE) == FALSE )

  0003f	8b 45 10	 mov	 eax, DWORD PTR _iAttackPercent$[ebp]
  00042	85 c0		 test	 eax, eax
  00044	0f 88 e2 00 00
	00		 js	 $LN67@OrderAttac
  0004a	53		 push	 ebx
  0004b	33 db		 xor	 ebx, ebx
  0004d	83 f8 64	 cmp	 eax, 100		; 00000064H
  00050	0f 9e c3	 setle	 bl
  00053	8b c3		 mov	 eax, ebx
  00055	85 c0		 test	 eax, eax
  00057	0f 84 ce 00 00
	00		 je	 $LN68@OrderAttac

; 353  : 	{
; 354  : 		return;
; 355  : 	}
; 356  : 
; 357  : 	for ( std::map<int, _MONSTER_HERD_DATA>::iterator it = this->m_mapMonsterHerd.begin(); it != this->m_mapMonsterHerd.end() ; it++)

  0005d	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00060	56		 push	 esi
  00061	8b 30		 mov	 esi, DWORD PTR [eax]
  00063	89 75 0c	 mov	 DWORD PTR _it$154882[ebp], esi
  00066	3b f0		 cmp	 esi, eax
  00068	0f 84 bc 00 00
	00		 je	 $LN69@OrderAttac
  0006e	b3 32		 mov	 bl, 50			; 00000032H
  00070	eb 03		 jmp	 SHORT $LN40@OrderAttac
$LL66@OrderAttac:
  00072	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
$LN40@OrderAttac:

; 358  : 	{
; 359  : 		_MONSTER_HERD_DATA * lpMHD = &it->second;
; 360  : 
; 361  : 		if ( OBJMAX_RANGE(lpMHD->m_iIndex)  == FALSE )

  00075	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00078	85 c9		 test	 ecx, ecx
  0007a	0f 88 93 00 00
	00		 js	 $LN8@OrderAttac
  00080	33 c0		 xor	 eax, eax
  00082	81 f9 e7 1c 00
	00		 cmp	 ecx, 7399		; 00001ce7H
  00088	0f 9e c0	 setle	 al
  0008b	85 c0		 test	 eax, eax
  0008d	0f 84 80 00 00
	00		 je	 $LN8@OrderAttac

; 362  : 		{
; 363  : 			continue;
; 364  : 		}
; 365  : 
; 366  : 		if ( gObj[lpMHD->m_iIndex].Live == FALSE || gObj[lpMHD->m_iIndex].m_State != 2 )

  00093	8b c1		 mov	 eax, ecx
  00095	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  0009b	80 b8 62 00 00
	00 00		 cmp	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+98], 0
  000a2	74 6f		 je	 SHORT $LN8@OrderAttac
  000a4	83 b8 bc 01 00
	00 02		 cmp	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+444], 2
  000ab	75 66		 jne	 SHORT $LN8@OrderAttac

; 367  : 		{
; 368  : 			continue;
; 369  : 		}
; 370  : 
; 371  : 		if ( gObj[lpMHD->m_iIndex].m_lpMonsterHerd != lpObj->m_lpMonsterHerd )

  000ad	8b 80 2c 0f 00
	00		 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+3884]
  000b3	3b 82 2c 0f 00
	00		 cmp	 eax, DWORD PTR [edx+3884]
  000b9	75 58		 jne	 SHORT $LN8@OrderAttac

; 372  : 		{
; 373  : 			continue;
; 374  : 		}
; 375  : 
; 376  : 		if ( lpMHD->m_iIndex == lpObj->m_Index )

  000bb	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  000bd	74 54		 je	 SHORT $LN8@OrderAttac

; 377  : 		{
; 378  : 			continue;
; 379  : 		}
; 380  : 
; 381  : 		if ( (rand()%100) < iAttackPercent )

  000bf	e8 00 00 00 00	 call	 _rand
  000c4	99		 cdq
  000c5	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000ca	f7 f9		 idiv	 ecx
  000cc	3b 55 10	 cmp	 edx, DWORD PTR _iAttackPercent$[ebp]
  000cf	7d 42		 jge	 SHORT $LN8@OrderAttac

; 382  : 		{
; 383  : 			gObj[lpMHD->m_iIndex].TargetNumber = lpTargetObj->m_Index;

  000d1	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000d4	66 8b 07	 mov	 ax, WORD PTR [edi]
  000d7	69 d2 64 15 00
	00		 imul	 edx, 5476		; 00001564H
  000dd	66 89 82 d4 02
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edx+724], ax

; 384  : 			gObj[lpMHD->m_iIndex].m_ActState.Emotion = 1;

  000e4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e7	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  000ed	8b 88 b4 01 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+436]
  000f3	8d 80 b4 01 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+436]
  000f9	81 e1 1f ff ff
	ff		 and	 ecx, -225		; ffffff1fH
  000ff	83 c9 10	 or	 ecx, 16			; 00000010H
  00102	89 08		 mov	 DWORD PTR [eax], ecx

; 385  : 			gObj[lpMHD->m_iIndex].m_ActState.EmotionCount = 50;

  00104	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00107	69 d2 64 15 00
	00		 imul	 edx, 5476		; 00001564H
  0010d	88 9a b5 01 00
	00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edx+437], bl
$LN8@OrderAttac:

; 353  : 	{
; 354  : 		return;
; 355  : 	}
; 356  : 
; 357  : 	for ( std::map<int, _MONSTER_HERD_DATA>::iterator it = this->m_mapMonsterHerd.begin(); it != this->m_mapMonsterHerd.end() ; it++)

  00113	8d 4d 0c	 lea	 ecx, DWORD PTR _it$154882[ebp]
  00116	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >,std::_Iterator_base0>::operator++
  0011b	8b 75 0c	 mov	 esi, DWORD PTR _it$154882[ebp]
  0011e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00121	3b 70 24	 cmp	 esi, DWORD PTR [eax+36]
  00124	0f 85 48 ff ff
	ff		 jne	 $LL66@OrderAttac
$LN69@OrderAttac:
  0012a	5e		 pop	 esi
$LN68@OrderAttac:
  0012b	5b		 pop	 ebx
$LN67@OrderAttac:
  0012c	5f		 pop	 edi
$LN13@OrderAttac:

; 386  : 
; 387  : 			continue;
; 388  : 		}
; 389  : 	}
; 390  : }

  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 0c 00	 ret	 12			; 0000000cH
?OrderAttack@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0H@Z ENDP ; MonsterHerd::OrderAttack
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T159196 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase, COMDAT
; _this$ = ecx

; 1379 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1380 : 		if (_First == begin() && _Last == end())

  00004	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00010	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00012	75 1c		 jne	 SHORT $LN97@erase@2
  00014	3b d0		 cmp	 edx, eax
  00016	75 18		 jne	 SHORT $LN97@erase@2

; 1381 : 			{	// erase all
; 1382 : 			clear();

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::clear

; 1383 : 			return (begin());

  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1389 : 			return (iterator(_First._Ptr, this));

  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	89 08		 mov	 DWORD PTR [eax], ecx
  00029	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN97@erase@2:

; 1384 : 			}
; 1385 : 		else
; 1386 : 			{	// partial erase, one at a time
; 1387 : 			while (_First != _Last)

  00030	3b ca		 cmp	 ecx, edx
  00032	74 5e		 je	 SHORT $LN1@erase@2
$LL2@erase@2:

; 1388 : 				erase(_First++);

  00034	80 79 21 00	 cmp	 BYTE PTR [ecx+33], 0
  00038	8b d1		 mov	 edx, ecx
  0003a	75 42		 jne	 SHORT $LN59@erase@2
  0003c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0003f	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00043	75 1a		 jne	 SHORT $LN99@erase@2
  00045	8b c8		 mov	 ecx, eax
  00047	8b 01		 mov	 eax, DWORD PTR [ecx]
  00049	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0004d	75 0b		 jne	 SHORT $LN73@erase@2
  0004f	90		 npad	 1
$LL74@erase@2:
  00050	8b c8		 mov	 ecx, eax
  00052	8b 01		 mov	 eax, DWORD PTR [ecx]
  00054	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00058	74 f6		 je	 SHORT $LL74@erase@2
$LN73@erase@2:
  0005a	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  0005d	eb 1f		 jmp	 SHORT $LN59@erase@2
$LN99@erase@2:
  0005f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00062	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00066	75 13		 jne	 SHORT $LN57@erase@2
$LL58@erase@2:
  00068	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0006b	75 0e		 jne	 SHORT $LN57@erase@2
  0006d	8b c8		 mov	 ecx, eax
  0006f	89 4d 0c	 mov	 DWORD PTR __First$[ebp], ecx
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00075	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00079	74 ed		 je	 SHORT $LL58@erase@2
$LN57@erase@2:
  0007b	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN59@erase@2:
  0007e	52		 push	 edx
  0007f	8d 55 fc	 lea	 edx, DWORD PTR $T159196[ebp]
  00082	52		 push	 edx
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0008d	3b 4d 10	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00090	75 a2		 jne	 SHORT $LL2@erase@2
$LN1@erase@2:

; 1389 : 			return (iterator(_First._Ptr, this));

  00092	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00095	89 08		 mov	 DWORD PTR [eax], ecx
  00097	5e		 pop	 esi

; 1390 : 			}
; 1391 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::find
; Function compile flags: /Ogtp
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
$T159532 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::find, COMDAT
; _this$ = ecx

; 1423 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1424 : 		iterator _Where = lower_bound(_Keyval);

  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000a	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00012	75 18		 jne	 SHORT $LN9@find
  00014	56		 push	 esi
  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL10@find:
  00017	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  0001a	7d 05		 jge	 SHORT $LN8@find
  0001c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001f	eb 04		 jmp	 SHORT $LN7@find
$LN8@find:
  00021	8b d0		 mov	 edx, eax
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@find:
  00025	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00029	74 ec		 je	 SHORT $LL10@find
  0002b	5e		 pop	 esi
$LN9@find:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0002c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002f	89 55 0c	 mov	 DWORD PTR __Where$[ebp], edx
  00032	3b d0		 cmp	 edx, eax
  00034	74 18		 je	 SHORT $LN3@find
  00036	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00038	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  0003b	7c 11		 jl	 SHORT $LN3@find
  0003d	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  00040	8b 10		 mov	 edx, DWORD PTR [eax]
  00042	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00045	89 10		 mov	 DWORD PTR [eax], edx
  00047	5f		 pop	 edi

; 1429 : 		}

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN3@find:

; 1425 : 		return (_Where == end()
; 1426 : 			|| _DEBUG_LT_PRED(this->comp,
; 1427 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1428 : 					? end() : _Where);

  0004e	89 45 fc	 mov	 DWORD PTR $T159532[ebp], eax
  00051	8d 45 fc	 lea	 eax, DWORD PTR $T159532[ebp]
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00059	89 10		 mov	 DWORD PTR [eax], edx
  0005b	5f		 pop	 edi

; 1429 : 		}

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::find
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T159756 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1865 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1866 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T159756[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase

; 1867 : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??$insert@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::insert<std::pair<int,_MONSTER_HERD_DATA> >
; Function compile flags: /Ogtp
;	COMDAT ??$insert@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::insert<std::pair<int,_MONSTER_HERD_DATA> >, COMDAT
; _this$ = ecx

; 753  : 		_Pairib insert(_Valty&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 754  : 		{	// try to insert node with value _Val, favoring right side
; 755  : 		return (_Linsert(this->_Buynode(_STD forward<_Valty>(_Val)),
; 756  : 			false));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Buynode<std::pair<int,_MONSTER_HERD_DATA> >
  00012	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00015	50		 push	 eax
  00016	57		 push	 edi
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Linsert
  0001e	8b c7		 mov	 eax, edi
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 757  : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??$insert@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::insert<std::pair<int,_MONSTER_HERD_DATA> >
_TEXT	ENDS
PUBLIC	?AddMonster@MonsterHerd@@UAEHHHH@Z		; MonsterHerd::AddMonster
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\monsterherd.cpp
;	COMDAT ?AddMonster@MonsterHerd@@UAEHHHH@Z
_TEXT	SEGMENT
$T159849 = -40						; size = 20
_pMonsterData$154133 = -20				; size = 16
$T159850 = -12						; size = 8
_cX$ = -2						; size = 1
_cY$ = -1						; size = 1
_iMonsterType$ = 8					; size = 4
_bRegen$ = 12						; size = 4
_bAttackFirst$ = 16					; size = 4
?AddMonster@MonsterHerd@@UAEHHHH@Z PROC			; MonsterHerd::AddMonster, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 67   : 	if ( this->m_bHasInfo == 0 )

  00009	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  0000d	75 09		 jne	 SHORT $LN5@AddMonster
$LN29@AddMonster:

; 68   : 	{
; 69   : 		return false;

  0000f	33 c0		 xor	 eax, eax
  00011	5f		 pop	 edi

; 132  : 
; 133  : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN5@AddMonster:

; 70   : 	}
; 71   : 
; 72   : 	int iIndex;
; 73   : 	BYTE btMapNumber = this->m_iMapNumber;
; 74   : 	BYTE cX=0;
; 75   : 	BYTE cY=0;
; 76   : 
; 77   : 	if (this->GetRandomLocation(cX, cY) == FALSE )

  00018	8b 07		 mov	 eax, DWORD PTR [edi]
  0001a	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0001d	8d 4d ff	 lea	 ecx, DWORD PTR _cY$[ebp]
  00020	51		 push	 ecx
  00021	8d 55 fe	 lea	 edx, DWORD PTR _cX$[ebp]
  00024	52		 push	 edx
  00025	8b cf		 mov	 ecx, edi
  00027	c6 45 fe 00	 mov	 BYTE PTR _cX$[ebp], 0
  0002b	c6 45 ff 00	 mov	 BYTE PTR _cY$[ebp], 0
  0002f	ff d0		 call	 eax
  00031	85 c0		 test	 eax, eax

; 78   : 	{
; 79   : 		return false;

  00033	74 da		 je	 SHORT $LN29@AddMonster

; 80   : 	}
; 81   : 
; 82   : 	iIndex = gObjAddMonster(this->m_iMapNumber);

  00035	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00038	53		 push	 ebx
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0003f	0f bf d8	 movsx	 ebx, ax
  00042	83 c4 04	 add	 esp, 4

; 83   : 
; 84   : 	if ( iIndex >= 0 )

  00045	85 db		 test	 ebx, ebx
  00047	0f 88 2e 01 00
	00		 js	 $LN3@AddMonster

; 85   : 	{
; 86   : 		gObj[iIndex].m_PosNum = -1;
; 87   : 		gObj[iIndex].X = cX;
; 88   : 		gObj[iIndex].Y = cY;

  0004d	0f b6 4d ff	 movzx	 ecx, BYTE PTR _cY$[ebp]
  00051	0f b6 45 fe	 movzx	 eax, BYTE PTR _cX$[ebp]
  00055	56		 push	 esi
  00056	8b f3		 mov	 esi, ebx
  00058	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  0005e	83 ca ff	 or	 edx, -1
  00061	66 89 96 10 02
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+528], dx
  00068	66 89 8e 06 01
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+262], cx
  0006f	66 89 86 04 01
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+260], ax

; 89   : 		gObj[iIndex].MapNumber = this->m_iMapNumber;

  00076	8a 57 08	 mov	 dl, BYTE PTR [edi+8]
  00079	88 96 09 01 00
	00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+265], dl

; 90   : 		gObj[iIndex].TX = gObj[iIndex].X;
; 91   : 		gObj[iIndex].TY = gObj[iIndex].Y;
; 92   : 		gObj[iIndex].m_OldX = gObj[iIndex].X;
; 93   : 		gObj[iIndex].m_OldY = gObj[iIndex].Y;
; 94   : 		gObj[iIndex].StartX = gObj[iIndex].X;
; 95   : 		gObj[iIndex].StartY = gObj[iIndex].Y;
; 96   : 
; 97   : 		LPMONSTER_ATTRIBUTE iAttr = gMAttr.GetAttr(iMonsterType);

  0007f	8b 55 08	 mov	 edx, DWORD PTR _iMonsterType$[ebp]
  00082	66 89 8e 22 01
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+290], cx
  00089	66 89 8e 1e 01
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+286], cx
  00090	88 8e 1b 01 00
	00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+283], cl
  00096	52		 push	 edx
  00097	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  0009c	66 89 86 20 01
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+288], ax
  000a3	66 89 86 1c 01
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+284], ax
  000aa	88 86 1a 01 00
	00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+282], al
  000b0	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 98   : 
; 99   : 		if ( iAttr == NULL )

  000b5	85 c0		 test	 eax, eax
  000b7	75 14		 jne	 SHORT $LN2@AddMonster

; 100  : 		{
; 101  : 			gObjDel(iIndex);

  000b9	53		 push	 ebx
  000ba	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  000bf	83 c4 04	 add	 esp, 4
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx

; 102  : 			return false;

  000c4	33 c0		 xor	 eax, eax
  000c6	5f		 pop	 edi

; 132  : 
; 133  : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 0c 00	 ret	 12			; 0000000cH
$LN2@AddMonster:

; 103  : 		}
; 104  : 
; 105  : 		gObj[iIndex].Level = iAttr->m_Level;
; 106  : 		gObjSetMonster(iIndex, iMonsterType);

  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _iMonsterType$[ebp]
  000d0	66 8b 40 1c	 mov	 ax, WORD PTR [eax+28]
  000d4	51		 push	 ecx
  000d5	53		 push	 ebx
  000d6	66 89 86 9c 00
	00 00		 mov	 WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+156], ax
  000dd	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  000e2	83 c4 08	 add	 esp, 8

; 107  : 		gObj[iIndex].MaxRegenTime = 1000;

  000e5	c7 86 0c 02 00
	00 e8 03 00 00	 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+524], 1000 ; 000003e8H

; 108  : 		gObj[iIndex].Dir = rand() % 8;

  000ef	e8 00 00 00 00	 call	 _rand
  000f4	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  000f9	79 05		 jns	 SHORT $LN28@AddMonster
  000fb	48		 dec	 eax
  000fc	83 c8 f8	 or	 eax, -8			; fffffff8H
  000ff	40		 inc	 eax
$LN28@AddMonster:

; 109  : 		gObj[iIndex].m_bIsInMonsterHerd = 1;
; 110  : 		gObj[iIndex].m_bIsMonsterAttackFirst = bAttackFirst;

  00100	8b 55 10	 mov	 edx, DWORD PTR _bAttackFirst$[ebp]
  00103	88 86 08 01 00
	00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+264], al
  00109	c7 86 24 0f 00
	00 01 00 00 00	 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+3876], 1
  00113	89 96 28 0f 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+3880], edx

; 111  : 		gObj[iIndex].m_lpMonsterHerd = this;

  00119	89 be 2c 0f 00
	00		 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[esi+3884], edi

; 112  : 
; 113  : 		EnterCriticalSection(&this->m_critMonsterHerd);

  0011f	8d 77 30	 lea	 esi, DWORD PTR [edi+48]
  00122	56		 push	 esi
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 114  : 
; 115  : 		_MONSTER_HERD_DATA pMonsterData;
; 116  : 		pMonsterData.m_iIndex = iIndex;
; 117  : 		pMonsterData.m_iType = iMonsterType;
; 118  : 		pMonsterData.m_iX = cX;
; 119  : 		pMonsterData.m_iX = cY;	// #error Apply Deathway Fix, change btXMap for btYMap

  00129	8a 45 ff	 mov	 al, BYTE PTR _cY$[ebp]

; 120  : 		pMonsterData.m_bRegen = bRegen;
; 121  : 
; 122  : 		this->m_mapMonsterHerd.insert( std::pair<int, _MONSTER_HERD_DATA>(iIndex, pMonsterData) );

  0012c	8b 4d 08	 mov	 ecx, DWORD PTR _iMonsterType$[ebp]
  0012f	88 45 f4	 mov	 BYTE PTR _pMonsterData$154133[ebp+8], al
  00132	8b 45 0c	 mov	 eax, DWORD PTR _bRegen$[ebp]
  00135	89 45 e8	 mov	 DWORD PTR $T159849[ebp+16], eax
  00138	6a 00		 push	 0
  0013a	8d 45 d8	 lea	 eax, DWORD PTR $T159849[ebp]
  0013d	c6 45 f5 ff	 mov	 BYTE PTR _pMonsterData$154133[ebp+9], 255 ; 000000ffH
  00141	8b 55 f4	 mov	 edx, DWORD PTR _pMonsterData$154133[ebp+8]
  00144	89 4d e0	 mov	 DWORD PTR $T159849[ebp+8], ecx
  00147	50		 push	 eax
  00148	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0014b	89 5d d8	 mov	 DWORD PTR $T159849[ebp], ebx
  0014e	89 5d dc	 mov	 DWORD PTR $T159849[ebp+4], ebx
  00151	89 55 e4	 mov	 DWORD PTR $T159849[ebp+12], edx
  00154	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_MONSTER_HERD_DATA@@@std@@@?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@1@$$QAU?$pair@HU_MONSTER_HERD_DATA@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Buynode<std::pair<int,_MONSTER_HERD_DATA> >
  00159	50		 push	 eax
  0015a	8d 4d f4	 lea	 ecx, DWORD PTR $T159850[ebp]
  0015d	51		 push	 ecx
  0015e	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00161	e8 00 00 00 00	 call	 ?_Linsert@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@std@@_N@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@2@_N@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::_Linsert

; 123  : 
; 124  : 		LeaveCriticalSection(&this->m_critMonsterHerd);

  00166	56		 push	 esi
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0016d	5e		 pop	 esi
  0016e	5b		 pop	 ebx

; 129  : 	}
; 130  : 
; 131  : 	return TRUE;

  0016f	b8 01 00 00 00	 mov	 eax, 1
  00174	5f		 pop	 edi

; 132  : 
; 133  : }

  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 0c 00	 ret	 12			; 0000000cH
$LN3@AddMonster:
  0017b	5b		 pop	 ebx

; 125  : 	}
; 126  : 	else
; 127  : 	{
; 128  : 		return FALSE;

  0017c	33 c0		 xor	 eax, eax
  0017e	5f		 pop	 edi

; 132  : 
; 133  : }

  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 0c 00	 ret	 12			; 0000000cH
?AddMonster@MonsterHerd@@UAEHHHH@Z ENDP			; MonsterHerd::AddMonster
_TEXT	ENDS
PUBLIC	?Stop@MonsterHerd@@UAEXXZ			; MonsterHerd::Stop
; Function compile flags: /Ogtp
;	COMDAT ?Stop@MonsterHerd@@UAEXXZ
_TEXT	SEGMENT
$T159907 = -4						; size = 4
?Stop@MonsterHerd@@UAEXXZ PROC				; MonsterHerd::Stop, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 195  : 	this->m_bHerdActive = 0;
; 196  : 
; 197  : 	if ( this->m_mapMonsterHerd.empty() == false )

  00007	83 7f 28 00	 cmp	 DWORD PTR [edi+40], 0
  0000b	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  00012	0f 84 9b 00 00
	00		 je	 $LN4@Stop

; 198  : 	{
; 199  : 		EnterCriticalSection(&this->m_critMonsterHerd);

  00018	53		 push	 ebx
  00019	8d 5f 30	 lea	 ebx, DWORD PTR [edi+48]
  0001c	53		 push	 ebx
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 200  : 
; 201  : 		if ( this->m_mapMonsterHerd.empty() != false )

  00023	83 7f 28 00	 cmp	 DWORD PTR [edi+40], 0
  00027	75 0d		 jne	 SHORT $LN5@Stop

; 202  : 		{
; 203  : 			LeaveCriticalSection(&this->m_critMonsterHerd);

  00029	53		 push	 ebx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00030	5b		 pop	 ebx
  00031	5f		 pop	 edi

; 215  : 		}
; 216  : 	}
; 217  : 
; 218  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN5@Stop:

; 204  : 		}
; 205  : 		else
; 206  : 		{
; 207  : 			for ( std::map<int, _MONSTER_HERD_DATA>::iterator _Iter = this->m_mapMonsterHerd.begin() ; _Iter != this->m_mapMonsterHerd.end() ; _Iter++)

  00036	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00039	56		 push	 esi
  0003a	8b 30		 mov	 esi, DWORD PTR [eax]
  0003c	3b f0		 cmp	 esi, eax
  0003e	74 57		 je	 SHORT $LN1@Stop
$LL39@Stop:

; 208  : 			{
; 209  : 				_MONSTER_HERD_DATA & pMH_DATA = _Iter->second;
; 210  : 				gObjDel(pMH_DATA.m_iIndex);

  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00049	83 c4 04	 add	 esp, 4
  0004c	80 7e 21 00	 cmp	 BYTE PTR [esi+33], 0
  00050	75 40		 jne	 SHORT $LN120@Stop

; 204  : 		}
; 205  : 		else
; 206  : 		{
; 207  : 			for ( std::map<int, _MONSTER_HERD_DATA>::iterator _Iter = this->m_mapMonsterHerd.begin() ; _Iter != this->m_mapMonsterHerd.end() ; _Iter++)

  00052	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00055	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00059	75 16		 jne	 SHORT $LN117@Stop
  0005b	8b f0		 mov	 esi, eax
  0005d	8b 06		 mov	 eax, DWORD PTR [esi]
  0005f	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00063	75 2d		 jne	 SHORT $LN120@Stop
$LL54@Stop:
  00065	8b f0		 mov	 esi, eax
  00067	8b 06		 mov	 eax, DWORD PTR [esi]
  00069	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0006d	74 f6		 je	 SHORT $LL54@Stop
  0006f	eb 21		 jmp	 SHORT $LN120@Stop
$LN117@Stop:
  00071	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00074	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  00078	75 16		 jne	 SHORT $LN37@Stop
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL38@Stop:
  00080	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00083	75 0b		 jne	 SHORT $LN37@Stop
  00085	8b f0		 mov	 esi, eax
  00087	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008a	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0008e	74 f0		 je	 SHORT $LL38@Stop
$LN37@Stop:
  00090	8b f0		 mov	 esi, eax
$LN120@Stop:
  00092	3b 77 24	 cmp	 esi, DWORD PTR [edi+36]
  00095	75 a9		 jne	 SHORT $LL39@Stop
$LN1@Stop:

; 211  : 			}
; 212  : 
; 213  : 			this->m_mapMonsterHerd.erase( this->m_mapMonsterHerd.begin(), this->m_mapMonsterHerd.end() );

  00097	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	50		 push	 eax
  0009d	51		 push	 ecx
  0009e	8d 4d fc	 lea	 ecx, DWORD PTR $T159907[ebp]
  000a1	51		 push	 ecx
  000a2	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  000a5	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase

; 214  : 			LeaveCriticalSection(&this->m_critMonsterHerd);

  000aa	53		 push	 ebx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
$LN4@Stop:
  000b3	5f		 pop	 edi

; 215  : 		}
; 216  : 	}
; 217  : 
; 218  : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?Stop@MonsterHerd@@UAEXXZ ENDP				; MonsterHerd::Stop
_TEXT	ENDS
PUBLIC	?GetMonsterData@MonsterHerd@@UAEPAU_MONSTER_HERD_DATA@@H@Z ; MonsterHerd::GetMonsterData
; Function compile flags: /Ogtp
;	COMDAT ?GetMonsterData@MonsterHerd@@UAEPAU_MONSTER_HERD_DATA@@H@Z
_TEXT	SEGMENT
_it$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?GetMonsterData@MonsterHerd@@UAEPAU_MONSTER_HERD_DATA@@H@Z PROC ; MonsterHerd::GetMonsterData, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 224  : 	if ( OBJMAX_RANGE(iIndex) == FALSE )

  00004	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00007	85 c0		 test	 eax, eax
  00009	78 0e		 js	 SHORT $LN32@GetMonster
  0000b	33 c9		 xor	 ecx, ecx
  0000d	3d e7 1c 00 00	 cmp	 eax, 7399		; 00001ce7H
  00012	0f 9e c1	 setle	 cl
  00015	85 c9		 test	 ecx, ecx
  00017	75 08		 jne	 SHORT $LN5@GetMonster
$LN32@GetMonster:

; 225  : 	{
; 226  : 		return NULL;

  00019	33 c0		 xor	 eax, eax

; 257  : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN5@GetMonster:

; 227  : 	}
; 228  : 
; 229  : 	LPOBJ lpOBJ = &gObj[iIndex];

  00021	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  00027	05 00 00 00 00	 add	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 230  : 
; 231  : 	if ( lpOBJ->Connected < PLAYER_PLAYING || lpOBJ->Type != OBJ_MONSTER )

  0002c	80 78 04 03	 cmp	 BYTE PTR [eax+4], 3
  00030	72 e7		 jb	 SHORT $LN32@GetMonster
  00032	66 83 78 60 02	 cmp	 WORD PTR [eax+96], 2
  00037	75 e0		 jne	 SHORT $LN32@GetMonster

; 232  : 	{
; 233  : 		return NULL;
; 234  : 	}
; 235  : 
; 236  : 	MonsterHerd * lpMH = (MonsterHerd *)lpOBJ->m_lpMonsterHerd;

  00039	56		 push	 esi
  0003a	8b b0 2c 0f 00
	00		 mov	 esi, DWORD PTR [eax+3884]

; 237  : 
; 238  : 	if ( lpMH == NULL )

  00040	85 f6		 test	 esi, esi
  00042	75 09		 jne	 SHORT $LN2@GetMonster

; 239  : 	{
; 240  : 		return NULL;

  00044	33 c0		 xor	 eax, eax
  00046	5e		 pop	 esi

; 257  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN2@GetMonster:
  0004d	53		 push	 ebx
  0004e	57		 push	 edi

; 241  : 	}
; 242  : 
; 243  : 	_MONSTER_HERD_DATA * lpMHD_RETURN = NULL;
; 244  : 
; 245  : 	EnterCriticalSection(&lpMH->m_critMonsterHerd);

  0004f	8d 7e 30	 lea	 edi, DWORD PTR [esi+48]
  00052	57		 push	 edi
  00053	33 db		 xor	 ebx, ebx
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 246  : 	
; 247  : 	std::map<int, _MONSTER_HERD_DATA>::iterator it = lpMH->m_mapMonsterHerd.find(iIndex);

  0005b	8d 45 08	 lea	 eax, DWORD PTR _iIndex$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d fc	 lea	 ecx, DWORD PTR _it$[ebp]
  00062	51		 push	 ecx
  00063	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00066	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::find

; 248  : 
; 249  : 	if ( it != lpMH->m_mapMonsterHerd.end() )

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _it$[ebp]
  0006e	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  00071	74 03		 je	 SHORT $LN1@GetMonster

; 250  : 	{
; 251  : 		lpMHD_RETURN = &it->second;

  00073	8d 58 10	 lea	 ebx, DWORD PTR [eax+16]
$LN1@GetMonster:

; 252  : 	}
; 253  : 
; 254  : 	LeaveCriticalSection(&lpMH->m_critMonsterHerd);

  00076	57		 push	 edi
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0007d	5f		 pop	 edi

; 255  : 
; 256  : 	return lpMHD_RETURN;

  0007e	8b c3		 mov	 eax, ebx
  00080	5b		 pop	 ebx
  00081	5e		 pop	 esi

; 257  : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?GetMonsterData@MonsterHerd@@UAEPAU_MONSTER_HERD_DATA@@H@Z ENDP ; MonsterHerd::GetMonsterData
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T160501 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >, COMDAT
; _this$ = ecx

; 790  : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 791  : 		_Tidy();

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T160501[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase

; 792  : 		}

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
__ehhandler$??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
PUBLIC	??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ ; std::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >::~map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T160688 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >::~map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	8d 45 ec	 lea	 eax, DWORD PTR $T160688[ebp]
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase
  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004d	83 c4 04	 add	 esp, 4
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
__ehhandler$??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >::~map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >
PUBLIC	??_7MonsterHerd@@6B@				; MonsterHerd::`vftable'
PUBLIC	??1MonsterHerd@@UAE@XZ				; MonsterHerd::~MonsterHerd
PUBLIC	??_R4MonsterHerd@@6B@				; MonsterHerd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMonsterHerd@@@8				; MonsterHerd `RTTI Type Descriptor'
PUBLIC	??_R3MonsterHerd@@8				; MonsterHerd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MonsterHerd@@8				; MonsterHerd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MonsterHerd@@8			; MonsterHerd::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	??_EMonsterHerd@@UAEPAXI@Z:PROC			; MonsterHerd::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MonsterHerd@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@MonsterHerd@@8 DD FLAT:??_R0?AVMonsterHerd@@@8 ; MonsterHerd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_R2MonsterHerd@@8
rdata$r	SEGMENT
??_R2MonsterHerd@@8 DD FLAT:??_R1A@?0A@EA@MonsterHerd@@8 ; MonsterHerd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MonsterHerd@@8
rdata$r	SEGMENT
??_R3MonsterHerd@@8 DD 00H				; MonsterHerd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMonsterHerd@@@8
_DATA	SEGMENT
??_R0?AVMonsterHerd@@@8 DD FLAT:??_7type_info@@6B@	; MonsterHerd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMonsterHerd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MonsterHerd@@6B@
rdata$r	SEGMENT
??_R4MonsterHerd@@6B@ DD 00H				; MonsterHerd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMonsterHerd@@@8
	DD	FLAT:??_R3MonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_7MonsterHerd@@6B@
CONST	SEGMENT
??_7MonsterHerd@@6B@ DD FLAT:??_R4MonsterHerd@@6B@	; MonsterHerd::`vftable'
	DD	FLAT:??_EMonsterHerd@@UAEPAXI@Z
	DD	FLAT:?SetTotalInfo@MonsterHerd@@UAEHHHHH@Z
	DD	FLAT:?AddMonster@MonsterHerd@@UAEHHHH@Z
	DD	FLAT:?SetRadius@MonsterHerd@@UAEXH@Z
	DD	FLAT:?SetPosition@MonsterHerd@@UAEXEE@Z
	DD	FLAT:?Start@MonsterHerd@@UAEHXZ
	DD	FLAT:?Stop@MonsterHerd@@UAEXXZ
	DD	FLAT:?CheckInRadius@MonsterHerd@@UAEHH@Z
	DD	FLAT:?GetCurrentLocation@MonsterHerd@@UAEHAAE0@Z
	DD	FLAT:?GetRandomLocation@MonsterHerd@@UAEHAAE0@Z
	DD	FLAT:?CheckLocation@MonsterHerd@@UAEHAAE0@Z
	DD	FLAT:?MoveHerd@MonsterHerd@@UAEHEE@Z
	DD	FLAT:?MonsterHerdItemDrop@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z
	DD	FLAT:?GetMonsterData@MonsterHerd@@UAEPAU_MONSTER_HERD_DATA@@H@Z
	DD	FLAT:?BeenAttacked@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z
	DD	FLAT:?OrderAttack@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0H@Z
	DD	FLAT:?MonsterBaseAct@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
	DD	FLAT:?MonsterMoveAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
	DD	FLAT:?MonsterAttackAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z
	DD	FLAT:?MonsterDieAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
	DD	FLAT:?MonsterRegenAction@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1MonsterHerd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MonsterHerd@@UAE@XZ$2
__ehfuncinfo$??1MonsterHerd@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1MonsterHerd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\monsterherd.cpp
xdata$x	ENDS
;	COMDAT ??1MonsterHerd@@UAE@XZ
_TEXT	SEGMENT
$T160922 = -20						; size = 4
$T160937 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MonsterHerd@@UAE@XZ PROC				; MonsterHerd::~MonsterHerd, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1MonsterHerd@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 29   : 	DeleteCriticalSection(&this->m_critMonsterHerd);

  00028	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  0002b	50		 push	 eax
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7MonsterHerd@@6B@
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 30   : }

  00038	83 c6 20	 add	 esi, 32			; 00000020H
  0003b	89 75 f0	 mov	 DWORD PTR $T160937[ebp], esi
  0003e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	50		 push	 eax
  00044	51		 push	 ecx
  00045	8d 4d ec	 lea	 ecx, DWORD PTR $T160922[ebp]
  00048	51		 push	 ecx
  00049	8b ce		 mov	 ecx, esi
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00052	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::erase
  00057	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00060	83 c4 04	 add	 esp, 4
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1MonsterHerd@@UAE@XZ$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR $T160937[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_val@V?$_Tmap_traits@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >::~_Tree_val<std::_Tmap_traits<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> >,0> >
__ehhandler$??1MonsterHerd@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1MonsterHerd@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1MonsterHerd@@UAE@XZ ENDP				; MonsterHerd::~MonsterHerd
PUBLIC	??0?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ ; std::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\map
;	COMDAT ??0?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T161089 = -16						; size = 12
$T160990 = -4						; size = 4
??0?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >, COMDAT
; _this$ = ecx

; 106  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	6a 24		 push	 36			; 00000024H
  0000b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	74 26		 je	 SHORT $LN25@map
  0001e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002c	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0002f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00032	b0 01		 mov	 al, 1
  00034	88 41 20	 mov	 BYTE PTR [ecx+32], al
  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	88 42 21	 mov	 BYTE PTR [edx+33], al

; 107  : 		}

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0

; 106  : 		{	// construct empty map from defaults

$LN25@map:
  00044	8d 45 fc	 lea	 eax, DWORD PTR $T160990[ebp]
  00047	50		 push	 eax
  00048	8d 4d f0	 lea	 ecx, DWORD PTR $T161089[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T160990[ebp], 0
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR $T161089[ebp]
  0005f	51		 push	 ecx
  00060	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T161089[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@map:
$LN48@map:
  0006c	cc		 int	 3
??0?$map@HU_MONSTER_HERD_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_HERD_DATA@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >::map<int,_MONSTER_HERD_DATA,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_HERD_DATA> > >
_TEXT	ENDS
PUBLIC	??0MonsterHerd@@QAE@XZ				; MonsterHerd::MonsterHerd
EXTRN	__imp__InitializeCriticalSection@4:PROC
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\monsterherd.cpp
;	COMDAT ??0MonsterHerd@@QAE@XZ
_TEXT	SEGMENT
$T161309 = -16						; size = 12
$T161163 = -4						; size = 4
??0MonsterHerd@@QAE@XZ PROC				; MonsterHerd::MonsterHerd, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7MonsterHerd@@6B@
  00010	33 ff		 xor	 edi, edi
  00012	6a 24		 push	 36			; 00000024H
  00014	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b c7		 cmp	 eax, edi
  00021	74 47		 je	 SHORT $LN28@MonsterHer
  00023	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00026	89 00		 mov	 DWORD PTR [eax], eax
  00028	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0002b	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0002e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00031	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00034	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00037	b0 01		 mov	 al, 1
  00039	88 41 20	 mov	 BYTE PTR [ecx+32], al
  0003c	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  0003f	88 42 21	 mov	 BYTE PTR [edx+33], al

; 16   : 	this->m_iMapNumber =-1;
; 17   : 	this->m_iCUR_X =0;
; 18   : 	this->m_iCUR_Y =0;
; 19   : 	this->m_iRADIUS =0;
; 20   : 	this->m_bHerdActive =0;
; 21   : 	this->m_bHasInfo=0;
; 22   : 	
; 23   : 	InitializeCriticalSection(&this->m_critMonsterHerd);

  00042	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  00045	50		 push	 eax
  00046	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1
  0004d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00050	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00053	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00056	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00059	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
  00062	5f		 pop	 edi

; 24   : }

  00063	8b c6		 mov	 eax, esi
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0

; 15   : {

$LN28@MonsterHer:
  0006a	8d 4d fc	 lea	 ecx, DWORD PTR $T161163[ebp]
  0006d	51		 push	 ecx
  0006e	8d 4d f0	 lea	 ecx, DWORD PTR $T161309[ebp]
  00071	89 7d fc	 mov	 DWORD PTR $T161163[ebp], edi
  00074	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00079	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0007e	8d 55 f0	 lea	 edx, DWORD PTR $T161309[ebp]
  00081	52		 push	 edx
  00082	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T161309[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00089	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN53@MonsterHer:
$LN52@MonsterHer:
  0008e	cc		 int	 3
??0MonsterHerd@@QAE@XZ ENDP				; MonsterHerd::MonsterHerd
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GMonsterHerd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMonsterHerd@@UAEPAXI@Z PROC				; MonsterHerd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1MonsterHerd@@UAE@XZ	; MonsterHerd::~MonsterHerd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GMonsterHerd@@UAEPAXI@Z ENDP				; MonsterHerd::`scalar deleting destructor'
_TEXT	ENDS
END
