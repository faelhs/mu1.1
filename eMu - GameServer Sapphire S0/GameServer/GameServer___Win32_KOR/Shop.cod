; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\Shop.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CShop@@6B@					; CShop::`vftable'
PUBLIC	??1CShop@@UAE@XZ				; CShop::~CShop
PUBLIC	??_R4CShop@@6B@					; CShop::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCShop@@@8				; CShop `RTTI Type Descriptor'
PUBLIC	??_R3CShop@@8					; CShop::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CShop@@8					; CShop::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CShop@@8				; CShop::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECShop@@UAEPAXI@Z:PROC			; CShop::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CShop@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\shop.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CShop@@8 DD FLAT:??_R0?AVCShop@@@8	; CShop::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CShop@@8
rdata$r	ENDS
;	COMDAT ??_R2CShop@@8
rdata$r	SEGMENT
??_R2CShop@@8 DD FLAT:??_R1A@?0A@EA@CShop@@8		; CShop::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CShop@@8
rdata$r	SEGMENT
??_R3CShop@@8 DD 00H					; CShop::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CShop@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCShop@@@8
_DATA	SEGMENT
??_R0?AVCShop@@@8 DD FLAT:??_7type_info@@6B@		; CShop `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCShop@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CShop@@6B@
rdata$r	SEGMENT
??_R4CShop@@6B@ DD 00H					; CShop::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCShop@@@8
	DD	FLAT:??_R3CShop@@8
rdata$r	ENDS
;	COMDAT ??_7CShop@@6B@
CONST	SEGMENT
??_7CShop@@6B@ DD FLAT:??_R4CShop@@6B@			; CShop::`vftable'
	DD	FLAT:??_ECShop@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CShop@@UAE@XZ
_TEXT	SEGMENT
??1CShop@@UAE@XZ PROC					; CShop::~CShop, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CShop@@6B@

; 23   : 	return;
; 24   : }

  00006	c3		 ret	 0
??1CShop@@UAE@XZ ENDP					; CShop::~CShop
_TEXT	ENDS
PUBLIC	?Init@CShop@@QAEXXZ				; CShop::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CShop@@QAEXXZ
_TEXT	SEGMENT
?Init@CShop@@QAEXXZ PROC				; CShop::Init, COMDAT
; _this$ = ecx

; 28   : 	this->SendItemDataLen = 0;

  00000	33 c0		 xor	 eax, eax

; 29   : 	this->ItemCount = 0;
; 30   : 	memset(this->ShopInventoryMap, 0, sizeof(this->ShopInventoryMap));

  00002	6a 78		 push	 120			; 00000078H
  00004	89 81 00 53 00
	00		 mov	 DWORD PTR [ecx+21248], eax
  0000a	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
  0000d	50		 push	 eax
  0000e	83 c1 04	 add	 ecx, 4
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : }

  0001a	c3		 ret	 0
?Init@CShop@@QAEXXZ ENDP				; CShop::Init
_TEXT	ENDS
PUBLIC	?InentoryMapCheck@CShop@@QAEHHHHH@Z		; CShop::InentoryMapCheck
; Function compile flags: /Ogtp
;	COMDAT ?InentoryMapCheck@CShop@@QAEHHHHH@Z
_TEXT	SEGMENT
_blank$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
?InentoryMapCheck@CShop@@QAEHHHHH@Z PROC		; CShop::InentoryMapCheck, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 105  : 	int x;
; 106  : 	int y;
; 107  : 	int blank = 0;
; 108  : 
; 109  : 	if ( (sx+width) > 8 )

  00004	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 10	 mov	 ebx, DWORD PTR _width$[ebp]
  0000b	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _blank$[ebp], 0
  00015	83 fa 08	 cmp	 edx, 8
  00018	7e 0a		 jle	 SHORT $LN16@InentoryMa

; 110  : 		return -1;

  0001a	83 c8 ff	 or	 eax, -1
  0001d	5b		 pop	 ebx

; 141  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 10 00	 ret	 16			; 00000010H
$LN16@InentoryMa:

; 111  : 
; 112  : 	if ( (sy+height) > 15 )

  00024	8b 55 0c	 mov	 edx, DWORD PTR _sy$[ebp]
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	8b 7d 14	 mov	 edi, DWORD PTR _height$[ebp]
  0002c	8d 34 3a	 lea	 esi, DWORD PTR [edx+edi]
  0002f	83 fe 0f	 cmp	 esi, 15			; 0000000fH

; 113  : 		return -1;

  00032	7f 67		 jg	 SHORT $LN7@InentoryMa

; 114  : 
; 115  : 	for(y=0;y<height;y++)

  00034	85 ff		 test	 edi, edi
  00036	7e 51		 jle	 SHORT $LN4@InentoryMa
  00038	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  0003b	8d 54 08 04	 lea	 edx, DWORD PTR [eax+ecx+4]
  0003f	8b f7		 mov	 esi, edi
$LL14@InentoryMa:

; 116  : 	{
; 117  : 		for(x=0;x<width;x++)

  00041	33 c0		 xor	 eax, eax
  00043	85 db		 test	 ebx, ebx
  00045	7e 10		 jle	 SHORT $LN13@InentoryMa
$LL11@InentoryMa:

; 118  : 		{
; 119  : 			if ( this->ShopInventoryMap[( sy + y) * 8 + (sx + x)] )

  00047	80 3c 02 00	 cmp	 BYTE PTR [edx+eax], 0
  0004b	75 07		 jne	 SHORT $LN23@InentoryMa

; 116  : 	{
; 117  : 		for(x=0;x<width;x++)

  0004d	40		 inc	 eax
  0004e	3b c3		 cmp	 eax, ebx
  00050	7c f5		 jl	 SHORT $LL11@InentoryMa

; 118  : 		{
; 119  : 			if ( this->ShopInventoryMap[( sy + y) * 8 + (sx + x)] )

  00052	eb 03		 jmp	 SHORT $LN13@InentoryMa
$LN23@InentoryMa:

; 120  : 			{
; 121  : 				blank++;

  00054	ff 45 fc	 inc	 DWORD PTR _blank$[ebp]
$LN13@InentoryMa:

; 114  : 
; 115  : 	for(y=0;y<height;y++)

  00057	83 c2 08	 add	 edx, 8
  0005a	4e		 dec	 esi
  0005b	75 e4		 jne	 SHORT $LL14@InentoryMa

; 122  : 				break;
; 123  : 			}
; 124  : 		}
; 125  : 	}
; 126  : 
; 127  : 	if ( blank == 0 )

  0005d	39 75 fc	 cmp	 DWORD PTR _blank$[ebp], esi
  00060	75 39		 jne	 SHORT $LN7@InentoryMa

; 128  : 	{
; 129  : 		for(y=0;y<height;y++)

  00062	85 ff		 test	 edi, edi
  00064	7e 23		 jle	 SHORT $LN4@InentoryMa
  00066	8b 55 08	 mov	 edx, DWORD PTR _sx$[ebp]
  00069	8b 45 0c	 mov	 eax, DWORD PTR _sy$[ebp]
  0006c	8d 14 c2	 lea	 edx, DWORD PTR [edx+eax*8]
  0006f	8d 74 0a 04	 lea	 esi, DWORD PTR [edx+ecx+4]
$LL6@InentoryMa:

; 130  : 		{
; 131  : 			for(x=0;x<width;x++)

  00073	85 db		 test	 ebx, ebx
  00075	7e 0c		 jle	 SHORT $LN5@InentoryMa
  00077	53		 push	 ebx
  00078	6a 01		 push	 1
  0007a	56		 push	 esi
  0007b	e8 00 00 00 00	 call	 _memset
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@InentoryMa:

; 128  : 	{
; 129  : 		for(y=0;y<height;y++)

  00083	83 c6 08	 add	 esi, 8
  00086	4f		 dec	 edi
  00087	75 ea		 jne	 SHORT $LL6@InentoryMa
$LN4@InentoryMa:

; 132  : 			{
; 133  : 				this->ShopInventoryMap[( sy + y) * 8 + (sx + x)] = 1;
; 134  : 			}
; 135  : 		}
; 136  : 
; 137  : 		return (sx + sy*8);

  00089	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00094	5b		 pop	 ebx

; 141  : }

  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 10 00	 ret	 16			; 00000010H
$LN7@InentoryMa:
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi

; 138  : 	}
; 139  : 
; 140  : 	return -1;

  0009d	83 c8 ff	 or	 eax, -1
  000a0	5b		 pop	 ebx

; 141  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 10 00	 ret	 16			; 00000010H
?InentoryMapCheck@CShop@@QAEHHHHH@Z ENDP		; CShop::InentoryMapCheck
_TEXT	ENDS
PUBLIC	??0CShop@@QAE@XZ				; CShop::CShop
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
; Function compile flags: /Ogtp
;	COMDAT ??0CShop@@QAE@XZ
_TEXT	SEGMENT
??0CShop@@QAE@XZ PROC					; CShop::CShop, COMDAT
; _this$ = ecx

; 16   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b d9		 mov	 ebx, ecx
  00004	57		 push	 edi
  00005	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CShop@@6B@
  0000b	8d b3 80 00 00
	00		 lea	 esi, DWORD PTR [ebx+128]
  00011	bf 77 00 00 00	 mov	 edi, 119		; 00000077H
$LL4@CShop:
  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  0001d	81 c6 a8 00 00
	00		 add	 esi, 168		; 000000a8H
  00023	4f		 dec	 edi
  00024	79 f0		 jns	 SHORT $LL4@CShop

; 17   : 	return;
; 18   : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	8b c3		 mov	 eax, ebx
  0002a	5b		 pop	 ebx
  0002b	c3		 ret	 0
??0CShop@@QAE@XZ ENDP					; CShop::CShop
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCShop@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCShop@@UAEPAXI@Z PROC				; CShop::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CShop@@UAE@XZ	; CShop::~CShop
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCShop@@UAEPAXI@Z ENDP				; CShop::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BB@FOBLMGCK@error?9L2?5?3?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_08LFHMEAP@Shop?4cpp?$AA@			; `string'
PUBLIC	?InsertItem@CShop@@QAEHHHHHHHHH@Z		; CShop::InsertItem
EXTRN	?ItemByteConvert@@YAXPAEVCItem@@@Z:PROC		; ItemByteConvert
EXTRN	?Value@CItem@@QAEXXZ:PROC			; CItem::Value
EXTRN	?Convert@CItem@@QAEXHEEEEEEE@Z:PROC		; CItem::Convert
EXTRN	?ItemGetDurability@@YAHHHHH@Z:PROC		; ItemGetDurability
EXTRN	?ItemGetSize@@YAXHAAH0@Z:PROC			; ItemGetSize
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0BB@FOBLMGCK@error?9L2?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BB@FOBLMGCK@error?9L2?5?3?5?$CFs?5?$CFd?$AA@ DB 'error-L2 : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFHMEAP@Shop?4cpp?$AA@
CONST	SEGMENT
??_C@_08LFHMEAP@Shop?4cpp?$AA@ DB 'Shop.cpp', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?InsertItem@CShop@@QAEHHHHHHHHH@Z
_TEXT	SEGMENT
tv225 = -12						; size = 4
_width$ = -8						; size = 4
_blank$ = -4						; size = 4
tv314 = 8						; size = 4
_type$ = 8						; size = 4
_height$ = 12						; size = 4
_index$ = 12						; size = 4
_level$ = 16						; size = 4
_dur$ = 20						; size = 4
_op1$ = 24						; size = 4
_op2$ = 28						; size = 4
_op3$ = 32						; size = 4
_exc$ = 36						; size = 4
?InsertItem@CShop@@QAEHHHHHHHHH@Z PROC			; CShop::InsertItem, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 35   : 	int itemp;
; 36   : 	int width;
; 37   : 	int height;
; 38   : 	int x;
; 39   : 	int y;
; 40   : 	int blank;
; 41   : 
; 42   : 	blank = -1;
; 43   : 	itemp = type * MAX_SUBTYPE_ITEMS + index;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _index$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  0000f	8b c1		 mov	 eax, ecx
  00011	c1 e0 09	 shl	 eax, 9
  00014	56		 push	 esi
  00015	03 c2		 add	 eax, edx
  00017	57		 push	 edi
  00018	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _blank$[ebp], -1
  0001f	89 45 f4	 mov	 DWORD PTR tv225[ebp], eax

; 44   : 	
; 45   : 	if ( itemp < 0 )

  00022	79 2c		 jns	 SHORT $LN14@InsertItem

; 46   : 	{
; 47   : 		MsgBox(lMsg.Get(MSGGET(2, 53)), __FILE__, __LINE__, type, index);

  00024	52		 push	 edx
  00025	51		 push	 ecx
  00026	6a 2f		 push	 47			; 0000002fH
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_08LFHMEAP@Shop?4cpp?$AA@
  0002d	68 35 02 00 00	 push	 565			; 00000235H
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00037	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00042	83 c4 14	 add	 esp, 20			; 00000014H

; 57   : 		return FALSE;

  00045	33 c0		 xor	 eax, eax

; 99   : 
; 100  : 	return TRUE;
; 101  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 20 00	 ret	 32			; 00000020H
$LN14@InsertItem:

; 48   : 		return false;
; 49   : 	}
; 50   : 	
; 51   : 	ItemGetSize(itemp, width, height);

  00050	8d 4d 0c	 lea	 ecx, DWORD PTR _height$[ebp]
  00053	51		 push	 ecx
  00054	8d 55 f8	 lea	 edx, DWORD PTR _width$[ebp]
  00057	52		 push	 edx
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?ItemGetSize@@YAXHAAH0@Z ; ItemGetSize
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 52   : 
; 53   : 	if ( width < 0 || height < 0 )

  00061	83 7d f8 00	 cmp	 DWORD PTR _width$[ebp], 0
  00065	0f 8c 27 01 00
	00		 jl	 $LN12@InsertItem
  0006b	83 7d 0c 00	 cmp	 DWORD PTR _height$[ebp], 0
  0006f	0f 8c 1d 01 00
	00		 jl	 $LN12@InsertItem

; 58   : 	}
; 59   : 
; 60   : 	for ( y=0;y<15;y++)

  00075	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00078	33 ff		 xor	 edi, edi
  0007a	89 45 08	 mov	 DWORD PTR tv314[ebp], eax
  0007d	8d 49 00	 npad	 3
$LL23@InsertItem:

; 61   : 	{
; 62   : 		for (int x=0;x<8;x++)

  00080	33 f6		 xor	 esi, esi
$LL25@InsertItem:

; 63   : 		{
; 64   : 			if ( this->ShopInventoryMap[x + y*8] == 0 )

  00082	8b 4d 08	 mov	 ecx, DWORD PTR tv314[ebp]
  00085	80 3c 31 00	 cmp	 BYTE PTR [ecx+esi], 0
  00089	75 18		 jne	 SHORT $LN7@InsertItem

; 65   : 			{
; 66   : 				blank = this->InentoryMapCheck(x, y, width, height);

  0008b	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0008e	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  00091	52		 push	 edx
  00092	50		 push	 eax
  00093	57		 push	 edi
  00094	56		 push	 esi
  00095	8b cb		 mov	 ecx, ebx
  00097	e8 00 00 00 00	 call	 ?InentoryMapCheck@CShop@@QAEHHHHH@Z ; CShop::InentoryMapCheck
  0009c	89 45 fc	 mov	 DWORD PTR _blank$[ebp], eax

; 67   : 
; 68   : 				if ( blank >= 0 )

  0009f	85 c0		 test	 eax, eax
  000a1	79 38		 jns	 SHORT $skiploop$155164
$LN7@InsertItem:

; 61   : 	{
; 62   : 		for (int x=0;x<8;x++)

  000a3	46		 inc	 esi
  000a4	83 fe 08	 cmp	 esi, 8
  000a7	7c d9		 jl	 SHORT $LL25@InsertItem

; 58   : 	}
; 59   : 
; 60   : 	for ( y=0;y<15;y++)

  000a9	83 45 08 08	 add	 DWORD PTR tv314[ebp], 8
  000ad	47		 inc	 edi
  000ae	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  000b1	7c cd		 jl	 SHORT $LL23@InsertItem

; 69   : 				{
; 70   : 					goto skiploop;
; 71   : 				}
; 72   : 			}
; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	if ( blank < 0 )

  000b3	83 7d fc 00	 cmp	 DWORD PTR _blank$[ebp], 0
  000b7	7d 1f		 jge	 SHORT $LN22@InsertItem

; 77   : 	{
; 78   : 		MsgBox("error-L2 : %s %d", __FILE__, __LINE__);

  000b9	6a 4e		 push	 78			; 0000004eH
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_08LFHMEAP@Shop?4cpp?$AA@
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FOBLMGCK@error?9L2?5?3?5?$CFs?5?$CFd?$AA@
  000c5	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	33 c0		 xor	 eax, eax

; 99   : 
; 100  : 	return TRUE;
; 101  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 20 00	 ret	 32			; 00000020H
$LN22@InsertItem:

; 69   : 				{
; 70   : 					goto skiploop;
; 71   : 				}
; 72   : 			}
; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	if ( blank < 0 )

  000d8	8b 45 fc	 mov	 eax, DWORD PTR _blank$[ebp]
$skiploop$155164:

; 79   : 		return FALSE;
; 80   : 	}
; 81   : 
; 82   : skiploop:
; 83   : 
; 84   : 	this->m_item[blank].m_Level = level;

  000db	69 c0 a8 00 00
	00		 imul	 eax, 168		; 000000a8H

; 85   : 
; 86   : 	if ( dur == 0 )

  000e1	83 7d 14 00	 cmp	 DWORD PTR _dur$[ebp], 0
  000e5	8d 34 18	 lea	 esi, DWORD PTR [eax+ebx]
  000e8	8b 45 10	 mov	 eax, DWORD PTR _level$[ebp]
  000eb	66 89 86 88 00
	00 00		 mov	 WORD PTR [esi+136], ax
  000f2	75 14		 jne	 SHORT $LN24@InsertItem

; 87   : 	{
; 88   : 		dur = ItemGetDurability(ITEMGET(type, index), level, 0, 0);

  000f4	8b 4d f4	 mov	 ecx, DWORD PTR tv225[ebp]
  000f7	6a 00		 push	 0
  000f9	6a 00		 push	 0
  000fb	50		 push	 eax
  000fc	51		 push	 ecx
  000fd	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  00102	83 c4 10	 add	 esp, 16			; 00000010H
  00105	89 45 14	 mov	 DWORD PTR _dur$[ebp], eax
$LN24@InsertItem:

; 89   : 	}
; 90   : 
; 91   : 	this->m_item[blank].m_Durability = dur;
; 92   : 	this->m_item[blank].Convert(itemp, op1, op2, op3, exc, 0, 0, CURRENT_DB_VERSION);

  00108	8b 55 24	 mov	 edx, DWORD PTR _exc$[ebp]
  0010b	db 45 14	 fild	 DWORD PTR _dur$[ebp]
  0010e	8b 45 20	 mov	 eax, DWORD PTR _op3$[ebp]
  00111	8b 4d 1c	 mov	 ecx, DWORD PTR _op2$[ebp]
  00114	6a 03		 push	 3
  00116	d9 9e a4 00 00
	00		 fstp	 DWORD PTR [esi+164]
  0011c	6a 00		 push	 0
  0011e	6a 00		 push	 0
  00120	52		 push	 edx
  00121	8b 55 18	 mov	 edx, DWORD PTR _op1$[ebp]
  00124	50		 push	 eax
  00125	8b 45 f4	 mov	 eax, DWORD PTR tv225[ebp]
  00128	51		 push	 ecx
  00129	52		 push	 edx
  0012a	83 ee 80	 sub	 esi, -128		; ffffff80H
  0012d	50		 push	 eax
  0012e	8b ce		 mov	 ecx, esi
  00130	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEE@Z ; CItem::Convert

; 93   : 	this->m_item[blank].Value();

  00135	8b ce		 mov	 ecx, esi
  00137	e8 00 00 00 00	 call	 ?Value@CItem@@QAEXXZ	; CItem::Value

; 94   : 	this->SendItemData[this->SendItemDataLen] = blank;

  0013c	8b 8b 00 53 00
	00		 mov	 ecx, DWORD PTR [ebx+21248]
  00142	8a 55 fc	 mov	 dl, BYTE PTR _blank$[ebp]
  00145	88 94 0b 40 4f
	00 00		 mov	 BYTE PTR [ebx+ecx+20288], dl

; 95   : 	this->SendItemDataLen++;

  0014c	ff 83 00 53 00
	00		 inc	 DWORD PTR [ebx+21248]
  00152	8b 83 00 53 00
	00		 mov	 eax, DWORD PTR [ebx+21248]

; 96   : 	ItemByteConvert((LPBYTE)&this->SendItemData[this->SendItemDataLen], this->m_item[blank]);

  00158	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  0015e	8d 84 18 40 4f
	00 00		 lea	 eax, DWORD PTR [eax+ebx+20288]
  00165	8b fc		 mov	 edi, esp
  00167	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0016c	50		 push	 eax
  0016d	f3 a5		 rep movsd
  0016f	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 97   : 	this->SendItemDataLen += 7;

  00174	83 83 00 53 00
	00 07		 add	 DWORD PTR [ebx+21248], 7

; 98   : 	this->ItemCount++;

  0017b	b8 01 00 00 00	 mov	 eax, 1
  00180	81 c4 ac 00 00
	00		 add	 esp, 172		; 000000acH
  00186	01 43 7c	 add	 DWORD PTR [ebx+124], eax

; 99   : 
; 100  : 	return TRUE;
; 101  : }

  00189	5f		 pop	 edi
  0018a	5e		 pop	 esi
  0018b	5b		 pop	 ebx
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 20 00	 ret	 32			; 00000020H
$LN12@InsertItem:

; 54   : 	{
; 55   : 		// Error in getting item size in shop %s %d
; 56   : 		MsgBox(lMsg.Get(MSGGET(2, 54)), __FILE__, __LINE__);

  00192	6a 38		 push	 56			; 00000038H
  00194	68 00 00 00 00	 push	 OFFSET ??_C@_08LFHMEAP@Shop?4cpp?$AA@
  00199	68 36 02 00 00	 push	 566			; 00000236H
  0019e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001a3	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 99   : 
; 100  : 	return TRUE;
; 101  : }

  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	33 c0		 xor	 eax, eax
  001b5	5b		 pop	 ebx
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c2 20 00	 ret	 32			; 00000020H
?InsertItem@CShop@@QAEHHHHHHHHH@Z ENDP			; CShop::InsertItem
_TEXT	ENDS
PUBLIC	??_C@_0BE@LCGMGNMN@error?9L3?5?3?5?$CFs?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BI@IEDKKFGG@Shop?5data?5load?5error?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?LoadShopItem@CShop@@QAEHPAD@Z			; CShop::LoadShopItem
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0BE@LCGMGNMN@error?9L3?5?3?5?$CFs?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@LCGMGNMN@error?9L3?5?3?5?$CFs?5?$CFs?5?$CFd?$AA@ DB 'error-L3 :'
	DB	' %s %s %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IEDKKFGG@Shop?5data?5load?5error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BI@IEDKKFGG@Shop?5data?5load?5error?5?$CFs?$AA@ DB 'Shop data load'
	DB	' error %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadShopItem@CShop@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_dur$ = -16						; size = 4
_op1$ = -12						; size = 4
_op2$ = -8						; size = 4
_op3$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadShopItem@CShop@@QAEHPAD@Z PROC			; CShop::LoadShopItem, COMDAT
; _this$ = ecx

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 145  : 	int Token;
; 146  : 	int type;
; 147  : 	int index;
; 148  : 	int level;
; 149  : 	int dur;
; 150  : 	int op1;
; 151  : 	int op2;
; 152  : 	int op3;
; 153  : 	int exc;
; 154  : 
; 155  : 	this->Init();

  0000a	e8 00 00 00 00	 call	 ?Init@CShop@@QAEXXZ	; CShop::Init

; 156  : 
; 157  : 	SMDFile = fopen(filename, "r");

  0000f	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00012	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 _fopen
  0001d	83 c4 08	 add	 esp, 8
  00020	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 158  : 
; 159  : 	if ( SMDFile == NULL )

  00025	85 c0		 test	 eax, eax
  00027	75 17		 jne	 SHORT $LN10@LoadShopIt

; 160  : 	{
; 161  : 		MsgBox("Shop data load error %s", filename);

  00029	56		 push	 esi
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IEDKKFGG@Shop?5data?5load?5error?5?$CFs?$AA@
  0002f	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00034	83 c4 08	 add	 esp, 8

; 162  : 		return FALSE;

  00037	33 c0		 xor	 eax, eax
  00039	5e		 pop	 esi

; 208  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN10@LoadShopIt:

; 163  : 	}
; 164  : 
; 165  : 	while ( true )
; 166  : 	{
; 167  : 		Token = GetToken();

  00040	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 168  : 
; 169  : 		if ( Token == 2 )

  00045	83 f8 02	 cmp	 eax, 2
  00048	0f 84 e3 00 00
	00		 je	 $LN13@LoadShopIt
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
$LL5@LoadShopIt:

; 170  : 		{
; 171  : 			break;
; 172  : 		}
; 173  : 
; 174  : 		if ( Token == 1 )

  00050	83 f8 01	 cmp	 eax, 1
  00053	0f 85 c8 00 00
	00		 jne	 $LN12@LoadShopIt

; 175  : 		{
; 176  : 			type = TokenNumber;

  00059	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0005f	e8 00 00 00 00	 call	 __ftol2_sse
  00064	8b f0		 mov	 esi, eax

; 177  : 
; 178  : 			Token = GetToken();

  00066	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 179  : 			index = TokenNumber;

  0006b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00071	e8 00 00 00 00	 call	 __ftol2_sse
  00076	8b f8		 mov	 edi, eax

; 180  : 
; 181  : 			Token = GetToken();

  00078	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 182  : 			level = TokenNumber;

  0007d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00083	e8 00 00 00 00	 call	 __ftol2_sse
  00088	8b d8		 mov	 ebx, eax

; 183  : 
; 184  : 			Token = GetToken();

  0008a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 185  : 			dur = TokenNumber;

  0008f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00095	e8 00 00 00 00	 call	 __ftol2_sse
  0009a	89 45 f0	 mov	 DWORD PTR _dur$[ebp], eax

; 186  : 
; 187  : 			Token = GetToken();

  0009d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 188  : 			op1 = TokenNumber;

  000a2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a8	e8 00 00 00 00	 call	 __ftol2_sse
  000ad	89 45 f4	 mov	 DWORD PTR _op1$[ebp], eax

; 189  : 
; 190  : 			Token = GetToken();

  000b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 191  : 			op2 = TokenNumber;

  000b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000bb	e8 00 00 00 00	 call	 __ftol2_sse
  000c0	89 45 f8	 mov	 DWORD PTR _op2$[ebp], eax

; 192  : 
; 193  : 			Token = GetToken();

  000c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 194  : 			op3 = TokenNumber;

  000c8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ce	e8 00 00 00 00	 call	 __ftol2_sse
  000d3	89 45 fc	 mov	 DWORD PTR _op3$[ebp], eax

; 195  : 
; 196  : 			Token = GetToken();

  000d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 197  : 			exc = TokenNumber;

  000db	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e1	e8 00 00 00 00	 call	 __ftol2_sse

; 198  : 
; 199  : 			if (this->InsertItem(type, index, level, dur, op1, op2, op3, exc) == FALSE )

  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _op2$[ebp]
  000e9	8b 55 f4	 mov	 edx, DWORD PTR _op1$[ebp]
  000ec	50		 push	 eax
  000ed	8b 45 fc	 mov	 eax, DWORD PTR _op3$[ebp]
  000f0	50		 push	 eax
  000f1	8b 45 f0	 mov	 eax, DWORD PTR _dur$[ebp]
  000f4	51		 push	 ecx
  000f5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f8	52		 push	 edx
  000f9	50		 push	 eax
  000fa	53		 push	 ebx
  000fb	57		 push	 edi
  000fc	56		 push	 esi
  000fd	e8 00 00 00 00	 call	 ?InsertItem@CShop@@QAEHHHHHHHHH@Z ; CShop::InsertItem
  00102	85 c0		 test	 eax, eax
  00104	75 1b		 jne	 SHORT $LN12@LoadShopIt

; 200  : 			{
; 201  : 				MsgBox("error-L3 : %s %s %d", filename, __FILE__, __LINE__);

  00106	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  00109	68 c9 00 00 00	 push	 201			; 000000c9H
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_08LFHMEAP@Shop?4cpp?$AA@
  00113	51		 push	 ecx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LCGMGNMN@error?9L3?5?3?5?$CFs?5?$CFs?5?$CFd?$AA@
  00119	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0011e	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@LoadShopIt:

; 168  : 
; 169  : 		if ( Token == 2 )

  00121	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00126	83 f8 02	 cmp	 eax, 2
  00129	0f 85 21 ff ff
	ff		 jne	 $LL5@LoadShopIt
  0012f	5f		 pop	 edi
  00130	5b		 pop	 ebx
$LN13@LoadShopIt:

; 202  : 			}
; 203  : 		}
; 204  : 	}
; 205  : 
; 206  : 	fclose(SMDFile);

  00131	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 _fclose
  0013d	83 c4 04	 add	 esp, 4

; 207  : 	return true;

  00140	b8 01 00 00 00	 mov	 eax, 1
  00145	5e		 pop	 esi

; 208  : }

  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 04 00	 ret	 4
?LoadShopItem@CShop@@QAEHPAD@Z ENDP			; CShop::LoadShopItem
_TEXT	ENDS
PUBLIC	??_C@_0BD@MDFFBEMA@?4?4?2data?2Shop12?4txt?$AA@	; `string'
PUBLIC	??_C@_0BD@EFMBGGGO@?4?4?2data?2Shop11?4txt?$AA@	; `string'
PUBLIC	??_C@_0BD@IOJNLFML@?4?4?2data?2Shop10?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@EGKOHFJI@?4?4?2data?2Shop9?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@INPCKGDN@?4?4?2data?2Shop8?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@HMKEBEOI@?4?4?2data?2Shop7?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@LHPIMHEN@?4?4?2data?2Shop6?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@DBGMLFOD@?4?4?2data?2Shop5?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@PKDAGGEG@?4?4?2data?2Shop4?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@OHDFFGPO@?4?4?2data?2Shop3?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@CMGJIFFL@?4?4?2data?2Shop2?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@KKPNPHPF@?4?4?2data?2Shop1?4txt?$AA@	; `string'
PUBLIC	??_C@_0BC@GBKBCEFA@?4?4?2data?2Shop0?4txt?$AA@	; `string'
PUBLIC	?ShopDataLoad@@YAHXZ				; ShopDataLoad
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
;	COMDAT ??_C@_0BD@MDFFBEMA@?4?4?2data?2Shop12?4txt?$AA@
CONST	SEGMENT
??_C@_0BD@MDFFBEMA@?4?4?2data?2Shop12?4txt?$AA@ DB '..\data\Shop12.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFMBGGGO@?4?4?2data?2Shop11?4txt?$AA@
CONST	SEGMENT
??_C@_0BD@EFMBGGGO@?4?4?2data?2Shop11?4txt?$AA@ DB '..\data\Shop11.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOJNLFML@?4?4?2data?2Shop10?4txt?$AA@
CONST	SEGMENT
??_C@_0BD@IOJNLFML@?4?4?2data?2Shop10?4txt?$AA@ DB '..\data\Shop10.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EGKOHFJI@?4?4?2data?2Shop9?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@EGKOHFJI@?4?4?2data?2Shop9?4txt?$AA@ DB '..\data\Shop9.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@INPCKGDN@?4?4?2data?2Shop8?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@INPCKGDN@?4?4?2data?2Shop8?4txt?$AA@ DB '..\data\Shop8.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HMKEBEOI@?4?4?2data?2Shop7?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@HMKEBEOI@?4?4?2data?2Shop7?4txt?$AA@ DB '..\data\Shop7.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LHPIMHEN@?4?4?2data?2Shop6?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@LHPIMHEN@?4?4?2data?2Shop6?4txt?$AA@ DB '..\data\Shop6.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DBGMLFOD@?4?4?2data?2Shop5?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@DBGMLFOD@?4?4?2data?2Shop5?4txt?$AA@ DB '..\data\Shop5.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PKDAGGEG@?4?4?2data?2Shop4?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@PKDAGGEG@?4?4?2data?2Shop4?4txt?$AA@ DB '..\data\Shop4.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHDFFGPO@?4?4?2data?2Shop3?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@OHDFFGPO@?4?4?2data?2Shop3?4txt?$AA@ DB '..\data\Shop3.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CMGJIFFL@?4?4?2data?2Shop2?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@CMGJIFFL@?4?4?2data?2Shop2?4txt?$AA@ DB '..\data\Shop2.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KKPNPHPF@?4?4?2data?2Shop1?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@KKPNPHPF@?4?4?2data?2Shop1?4txt?$AA@ DB '..\data\Shop1.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GBKBCEFA@?4?4?2data?2Shop0?4txt?$AA@
CONST	SEGMENT
??_C@_0BC@GBKBCEFA@?4?4?2data?2Shop0?4txt?$AA@ DB '..\data\Shop0.txt', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ShopDataLoad@@YAHXZ
_TEXT	SEGMENT
?ShopDataLoad@@YAHXZ PROC				; ShopDataLoad, COMDAT

; 212  : 	ShopC[0].LoadShopItem("..\\data\\Shop0.txt");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GBKBCEFA@?4?4?2data?2Shop0?4txt?$AA@
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A ; ShopC
  0000a	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 213  : 	ShopC[1].LoadShopItem("..\\data\\Shop1.txt");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KKPNPHPF@?4?4?2data?2Shop1?4txt?$AA@
  00014	b9 04 53 00 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+21252
  00019	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 214  : 	ShopC[2].LoadShopItem("..\\data\\Shop2.txt");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CMGJIFFL@?4?4?2data?2Shop2?4txt?$AA@
  00023	b9 08 a6 00 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+42504
  00028	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 215  : 	ShopC[3].LoadShopItem("..\\data\\Shop3.txt");

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OHDFFGPO@?4?4?2data?2Shop3?4txt?$AA@
  00032	b9 0c f9 00 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+63756
  00037	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 216  : 	ShopC[4].LoadShopItem("..\\data\\Shop4.txt");

  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PKDAGGEG@?4?4?2data?2Shop4?4txt?$AA@
  00041	b9 10 4c 01 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+85008
  00046	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 217  : 	ShopC[5].LoadShopItem("..\\data\\Shop5.txt");

  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DBGMLFOD@?4?4?2data?2Shop5?4txt?$AA@
  00050	b9 14 9f 01 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+106260
  00055	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 218  : 	ShopC[6].LoadShopItem("..\\data\\Shop6.txt");

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LHPIMHEN@?4?4?2data?2Shop6?4txt?$AA@
  0005f	b9 18 f2 01 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+127512
  00064	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 219  : 	ShopC[7].LoadShopItem("..\\data\\Shop7.txt");

  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HMKEBEOI@?4?4?2data?2Shop7?4txt?$AA@
  0006e	b9 1c 45 02 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+148764
  00073	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 220  : 	ShopC[8].LoadShopItem("..\\data\\Shop8.txt");

  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@INPCKGDN@?4?4?2data?2Shop8?4txt?$AA@
  0007d	b9 20 98 02 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+170016
  00082	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 221  : 	ShopC[9].LoadShopItem("..\\data\\Shop9.txt");

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EGKOHFJI@?4?4?2data?2Shop9?4txt?$AA@
  0008c	b9 24 eb 02 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+191268
  00091	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 222  : 	ShopC[10].LoadShopItem("..\\data\\Shop10.txt");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IOJNLFML@?4?4?2data?2Shop10?4txt?$AA@
  0009b	b9 28 3e 03 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+212520
  000a0	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 223  : 	ShopC[11].LoadShopItem("..\\data\\Shop11.txt");

  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EFMBGGGO@?4?4?2data?2Shop11?4txt?$AA@
  000aa	b9 2c 91 03 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+233772
  000af	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 224  : 	ShopC[12].LoadShopItem("..\\data\\Shop12.txt");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MDFFBEMA@?4?4?2data?2Shop12?4txt?$AA@
  000b9	b9 30 e4 03 00	 mov	 ecx, OFFSET ?ShopC@@3PAVCShop@@A+255024
  000be	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem

; 225  : 	// ---
; 226  : 	LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 209)));

  000c3	68 d1 01 00 00	 push	 465			; 000001d1H
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000cd	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000d2	50		 push	 eax
  000d3	6a 00		 push	 0
  000d5	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000da	83 c4 08	 add	 esp, 8

; 227  : 
; 228  : 	return TRUE;

  000dd	b8 01 00 00 00	 mov	 eax, 1

; 229  : }

  000e2	c3		 ret	 0
?ShopDataLoad@@YAHXZ ENDP				; ShopDataLoad
_TEXT	ENDS
EXTRN	_atexit:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??__EShopC@@YAXXZ
text$yc	SEGMENT
??__EShopC@@YAXXZ PROC					; `dynamic initializer for 'ShopC'', COMDAT

; 12   : CShop ShopC[MAX_SHOP];

  00000	68 00 00 00 00	 push	 OFFSET ??1CShop@@UAE@XZ	; CShop::~CShop
  00005	68 00 00 00 00	 push	 OFFSET ??0CShop@@QAE@XZ	; CShop::CShop
  0000a	6a 0d		 push	 13			; 0000000dH
  0000c	68 04 53 00 00	 push	 21252			; 00005304H
  00011	68 00 00 00 00	 push	 OFFSET ?ShopC@@3PAVCShop@@A ; ShopC
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__FShopC@@YAXXZ ; `dynamic atexit destructor for 'ShopC''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__EShopC@@YAXXZ ENDP					; `dynamic initializer for 'ShopC''
text$yc	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??__FShopC@@YAXXZ
text$yd	SEGMENT
??__FShopC@@YAXXZ PROC					; `dynamic atexit destructor for 'ShopC'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1CShop@@UAE@XZ	; CShop::~CShop
  00005	6a 0d		 push	 13			; 0000000dH
  00007	68 04 53 00 00	 push	 21252			; 00005304H
  0000c	68 00 00 00 00	 push	 OFFSET ?ShopC@@3PAVCShop@@A ; ShopC
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00016	c3		 ret	 0
??__FShopC@@YAXXZ ENDP					; `dynamic atexit destructor for 'ShopC''
text$yd	ENDS
PUBLIC	?ShopC@@3PAVCShop@@A				; ShopC
_BSS	SEGMENT
?ShopC@@3PAVCShop@@A DB 043734H DUP (?)			; ShopC
_BSS	ENDS
CRT$XCU	SEGMENT
_ShopC$initializer$ DD FLAT:??__EShopC@@YAXXZ
CRT$XCU	ENDS
END
