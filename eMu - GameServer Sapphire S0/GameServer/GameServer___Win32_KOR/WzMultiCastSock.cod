; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\WzMultiCastSock.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	??0CWzMultiCastSock@@QAE@XZ			; CWzMultiCastSock::CWzMultiCastSock
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\wzmulticastsock.cpp
;	COMDAT ??0CWzMultiCastSock@@QAE@XZ
_TEXT	SEGMENT
_wsadata$ = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
??0CWzMultiCastSock@@QAE@XZ PROC			; CWzMultiCastSock::CWzMultiCastSock, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi

; 12   : 	WSADATA wsadata;
; 13   : 
; 14   : 	WSAStartup(0x101, &wsadata);

  00014	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _wsadata$[ebp]
  0001a	50		 push	 eax
  0001b	68 01 01 00 00	 push	 257			; 00000101H
  00020	8b f1		 mov	 esi, ecx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8

; 15   : 	this->m_skSocket = INVALID_SOCKET;
; 16   : 	this->m_iIPINFO_COUNT = 0;

  00028	33 c0		 xor	 eax, eax

; 17   : 	this->m_lpfnCALLBACK_RECVNOTIFY = NULL;
; 18   : 	this->m_lpfnCALLBACK_ERRORNOTIFY = NULL;
; 19   : 	memset(this->m_stIPINFO_LIST, 0, sizeof(this->m_stIPINFO_LIST));

  0002a	68 80 02 00 00	 push	 640			; 00000280H
  0002f	50		 push	 eax
  00030	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00033	51		 push	 ecx
  00034	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  0003a	89 86 94 02 00
	00		 mov	 DWORD PTR [esi+660], eax
  00040	89 86 a8 03 00
	00		 mov	 DWORD PTR [esi+936], eax
  00046	89 86 ac 03 00
	00		 mov	 DWORD PTR [esi+940], eax
  0004c	e8 00 00 00 00	 call	 _memset

; 20   : }

  00051	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	8b c6		 mov	 eax, esi
  00059	33 cd		 xor	 ecx, ebp
  0005b	5e		 pop	 esi
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
??0CWzMultiCastSock@@QAE@XZ ENDP			; CWzMultiCastSock::CWzMultiCastSock
_TEXT	ENDS
PUBLIC	??1CWzMultiCastSock@@QAE@XZ			; CWzMultiCastSock::~CWzMultiCastSock
EXTRN	__imp__WSACleanup@0:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__shutdown@8:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1CWzMultiCastSock@@QAE@XZ
_TEXT	SEGMENT
??1CWzMultiCastSock@@QAE@XZ PROC			; CWzMultiCastSock::~CWzMultiCastSock, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 25   : 	shutdown(this->m_skSocket, SD_RECEIVE);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	6a 00		 push	 0
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__shutdown@8

; 26   : 	closesocket(this->m_skSocket);

  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	51		 push	 ecx
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
  00017	5e		 pop	 esi

; 27   : 	WSACleanup();

  00018	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__WSACleanup@0
??1CWzMultiCastSock@@QAE@XZ ENDP			; CWzMultiCastSock::~CWzMultiCastSock
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ	; CWzMultiCastSock::DoEnumIpAddress
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	__imp__gethostbyname@4:PROC
EXTRN	__imp__gethostname@8:PROC
; Function compile flags: /Ogtp
;	COMDAT ?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ
_TEXT	SEGMENT
_buf$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ PROC		; CWzMultiCastSock::DoEnumIpAddress, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f1		 mov	 esi, ecx

; 33   : 	this->m_iIPINFO_COUNT = 0;
; 34   : 	memset(this->m_stIPINFO_LIST, 0, sizeof(this->m_stIPINFO_LIST));

  00017	68 80 02 00 00	 push	 640			; 00000280H
  0001c	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0001f	6a 00		 push	 0
  00021	50		 push	 eax
  00022	c7 86 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+660], 0
  0002c	e8 00 00 00 00	 call	 _memset
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 35   : 
; 36   : 	char buf[128];
; 37   : 	gethostname(buf, sizeof(buf));

  00034	68 80 00 00 00	 push	 128			; 00000080H
  00039	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gethostname@8

; 38   : 	hostent * lpHostent = gethostbyname(buf);

  00046	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  0004c	52		 push	 edx
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gethostbyname@4
  00053	8b f8		 mov	 edi, eax

; 39   : 	in_addr * lpaddr;
; 40   : 
; 41   : 	switch ( lpHostent->h_addrtype )

  00055	0f bf 47 08	 movsx	 eax, WORD PTR [edi+8]
  00059	83 e8 02	 sub	 eax, 2
  0005c	75 65		 jne	 SHORT $LN14@DoEnumIpAd

; 42   : 	{
; 43   : 		case 2:
; 44   : 			while ( lpaddr = (in_addr *)(*lpHostent->h_addr_list++)  )

  0005e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	53		 push	 ebx
  00064	85 c9		 test	 ecx, ecx
  00066	74 56		 je	 SHORT $LN13@DoEnumIpAd
  00068	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__inet_ntoa@4
  0006e	8b ff		 npad	 2
$LL3@DoEnumIpAd:
  00070	83 47 0c 04	 add	 DWORD PTR [edi+12], 4

; 45   : 			{
; 46   : 				this->m_stIPINFO_LIST[this->m_iIPINFO_COUNT].m_bInUsed = TRUE;

  00074	8b 86 94 02 00
	00		 mov	 eax, DWORD PTR [esi+660]
  0007a	8d 54 80 05	 lea	 edx, DWORD PTR [eax+eax*4+5]
  0007e	c7 04 96 01 00
	00 00		 mov	 DWORD PTR [esi+edx*4], 1

; 47   : 				strcpy(this->m_stIPINFO_LIST[this->m_iIPINFO_COUNT++].m_szIPADDR, inet_ntoa(*lpaddr));

  00085	8b 01		 mov	 eax, DWORD PTR [ecx]
  00087	50		 push	 eax
  00088	ff d3		 call	 ebx
  0008a	8b 8e 94 02 00
	00		 mov	 ecx, DWORD PTR [esi+660]
  00090	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00093	41		 inc	 ecx
  00094	8d 54 96 18	 lea	 edx, DWORD PTR [esi+edx*4+24]
  00098	89 8e 94 02 00
	00		 mov	 DWORD PTR [esi+660], ecx
  0009e	8b ca		 mov	 ecx, edx
  000a0	2b c8		 sub	 ecx, eax
$LL9@DoEnumIpAd:
  000a2	8a 10		 mov	 dl, BYTE PTR [eax]
  000a4	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000a7	40		 inc	 eax
  000a8	84 d2		 test	 dl, dl
  000aa	75 f6		 jne	 SHORT $LL9@DoEnumIpAd

; 48   : 
; 49   : 				if ( this->m_iIPINFO_COUNT >= MAX_MULTICAST_SOCK )

  000ac	83 be 94 02 00
	00 20		 cmp	 DWORD PTR [esi+660], 32	; 00000020H
  000b3	7d 0d		 jge	 SHORT $LN15@DoEnumIpAd

; 42   : 	{
; 43   : 		case 2:
; 44   : 			while ( lpaddr = (in_addr *)(*lpHostent->h_addr_list++)  )

  000b5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	85 c9		 test	 ecx, ecx
  000bc	75 b2		 jne	 SHORT $LL3@DoEnumIpAd
$LN13@DoEnumIpAd:
  000be	83 47 0c 04	 add	 DWORD PTR [edi+12], 4
$LN15@DoEnumIpAd:
  000c2	5b		 pop	 ebx
$LN14@DoEnumIpAd:

; 50   : 					break;
; 51   : 			}
; 52   : 	}
; 53   : 
; 54   : 	return this->m_iIPINFO_COUNT;
; 55   : }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	8b 86 94 02 00
	00		 mov	 eax, DWORD PTR [esi+660]
  000cc	5f		 pop	 edi
  000cd	33 cd		 xor	 ecx, ebp
  000cf	5e		 pop	 esi
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ ENDP		; CWzMultiCastSock::DoEnumIpAddress
_TEXT	ENDS
PUBLIC	?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z ; CWzMultiCastSock::GetEnummedIpAddress
; Function compile flags: /Ogtp
;	COMDAT ?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z
_TEXT	SEGMENT
_iIPINDEX$ = 8						; size = 4
_lpszOutputIpAddress$ = 12				; size = 4
?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z PROC	; CWzMultiCastSock::GetEnummedIpAddress, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 61   : 	if ( iIPINDEX < 0 || iIPINDEX >= MAX_MULTICAST_SOCK )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIPINDEX$[ebp]
  00006	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00009	77 34		 ja	 SHORT $LN3@GetEnummed

; 63   : 
; 64   : 	if ( this->m_stIPINFO_LIST[iIPINDEX].m_bInUsed == TRUE )

  0000b	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0000e	83 7c 81 14 01	 cmp	 DWORD PTR [ecx+eax*4+20], 1
  00013	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00016	75 27		 jne	 SHORT $LN3@GetEnummed

; 65   : 	{
; 66   : 		if ( lpszOutputIpAddress != NULL )

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _lpszOutputIpAddress$[ebp]
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 20		 je	 SHORT $LN3@GetEnummed

; 67   : 		{
; 68   : 			memcpy(lpszOutputIpAddress, this->m_stIPINFO_LIST[iIPINDEX].m_szIPADDR, sizeof(this->m_stIPINFO_LIST[iIPINDEX].m_szIPADDR));

  0001f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00022	89 11		 mov	 DWORD PTR [ecx], edx
  00024	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00027	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0002a	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0002d	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00030	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00033	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 69   : 			return TRUE;

  00036	b8 01 00 00 00	 mov	 eax, 1

; 70   : 		}
; 71   : 	}
; 72   : 
; 73   : 	return FALSE;
; 74   : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN3@GetEnummed:

; 62   : 		return FALSE;

  0003f	33 c0		 xor	 eax, eax

; 70   : 		}
; 71   : 	}
; 72   : 
; 73   : 	return FALSE;
; 74   : }

  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z ENDP	; CWzMultiCastSock::GetEnummedIpAddress
_TEXT	ENDS
PUBLIC	?EndMultiCast@CWzMultiCastSock@@QAEXXZ		; CWzMultiCastSock::EndMultiCast
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__TerminateThread@8:PROC
; Function compile flags: /Ogtp
;	COMDAT ?EndMultiCast@CWzMultiCastSock@@QAEXXZ
_TEXT	SEGMENT
?EndMultiCast@CWzMultiCastSock@@QAEXXZ PROC		; CWzMultiCastSock::EndMultiCast, COMDAT
; _this$ = ecx

; 185  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 186  : 	if ( this->m_skSocket != INVALID_SOCKET )

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	83 f8 ff	 cmp	 eax, -1
  00008	74 0d		 je	 SHORT $LN2@EndMultiCa

; 187  : 	{
; 188  : 		closesocket(this->m_skSocket);

  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 189  : 		this->m_skSocket = INVALID_SOCKET;

  00011	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN2@EndMultiCa:

; 190  : 	}
; 191  : 
; 192  : 	if ( this->m_hWorkerThread != INVALID_HANDLE_VALUE )

  00017	8b 86 a0 03 00
	00		 mov	 eax, DWORD PTR [esi+928]
  0001d	83 f8 ff	 cmp	 eax, -1
  00020	74 20		 je	 SHORT $LN1@EndMultiCa

; 193  : 	{
; 194  : 		TerminateThread(this->m_hWorkerThread, 0);

  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TerminateThread@8

; 195  : 		CloseHandle(this->m_hWorkerThread);

  0002b	8b 86 a0 03 00
	00		 mov	 eax, DWORD PTR [esi+928]
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 196  : 		this->m_hWorkerThread = INVALID_HANDLE_VALUE;

  00038	c7 86 a0 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+928], -1
$LN1@EndMultiCa:
  00042	5e		 pop	 esi

; 197  : 	}
; 198  : }

  00043	c3		 ret	 0
?EndMultiCast@CWzMultiCastSock@@QAEXXZ ENDP		; CWzMultiCastSock::EndMultiCast
_TEXT	ENDS
PUBLIC	?SaveLastError@CWzMultiCastSock@@IAEXH@Z	; CWzMultiCastSock::SaveLastError
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SaveLastError@CWzMultiCastSock@@IAEXH@Z
_TEXT	SEGMENT
_iErrorNo$ = 8						; size = 4
?SaveLastError@CWzMultiCastSock@@IAEXH@Z PROC		; CWzMultiCastSock::SaveLastError, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 238  : 	if ( iErrorNo == 0 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iErrorNo$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 c0		 test	 eax, eax
  0000c	75 06		 jne	 SHORT $LN3@SaveLastEr

; 239  : 	{
; 240  : 		this->m_uLastErrorNum = WSAGetLastError();

  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
$LN3@SaveLastEr:

; 241  : 	}
; 242  : 	else
; 243  : 	{
; 244  : 		this->m_uLastErrorNum = iErrorNo;
; 245  : 	}
; 246  : 
; 247  : 	memset(this->m_szLastErrorMessage, 0, sizeof(this->m_szLastErrorMessage));

  00014	68 04 01 00 00	 push	 260			; 00000104H
  00019	8d be 9c 02 00
	00		 lea	 edi, DWORD PTR [esi+668]
  0001f	6a 00		 push	 0
  00021	57		 push	 edi
  00022	89 86 98 02 00
	00		 mov	 DWORD PTR [esi+664], eax
  00028	e8 00 00 00 00	 call	 _memset

; 248  : 	FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, NULL, this->m_uLastErrorNum, LANG_NEUTRAL,
; 249  : 		this->m_szLastErrorMessage, sizeof(this->m_szLastErrorMessage),
; 250  : 		NULL);

  0002d	8b 86 98 02 00
	00		 mov	 eax, DWORD PTR [esi+664]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	6a 00		 push	 0
  00038	68 04 01 00 00	 push	 260			; 00000104H
  0003d	57		 push	 edi
  0003e	6a 00		 push	 0
  00040	50		 push	 eax
  00041	6a 00		 push	 0
  00043	68 00 10 00 00	 push	 4096			; 00001000H
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FormatMessageA@28

; 251  : 
; 252  : 	if ( this->m_lpfnCALLBACK_ERRORNOTIFY )

  0004e	8b 86 ac 03 00
	00		 mov	 eax, DWORD PTR [esi+940]
  00054	85 c0		 test	 eax, eax
  00056	74 0e		 je	 SHORT $LN1@SaveLastEr

; 253  : 	{
; 254  : 		this->m_lpfnCALLBACK_ERRORNOTIFY(this, this->m_uLastErrorNum, this->m_szLastErrorMessage);

  00058	8b 8e 98 02 00
	00		 mov	 ecx, DWORD PTR [esi+664]
  0005e	57		 push	 edi
  0005f	51		 push	 ecx
  00060	56		 push	 esi
  00061	ff d0		 call	 eax
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SaveLastEr:
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 255  : 	}
; 256  : }

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?SaveLastError@CWzMultiCastSock@@IAEXH@Z ENDP		; CWzMultiCastSock::SaveLastError
_TEXT	ENDS
PUBLIC	?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z ; CWzMultiCastSock::SavePrivateErrorMessage
; Function compile flags: /Ogtp
;	COMDAT ?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z
_TEXT	SEGMENT
_lpszErrorMessage$ = 8					; size = 4
?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z PROC ; CWzMultiCastSock::SavePrivateErrorMessage, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 261  : 	this->m_uLastErrorNum = 0;
; 262  : 	strcpy(this->m_szLastErrorMessage, lpszErrorMessage);

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpszErrorMessage$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d b9 9c 02 00
	00		 lea	 edi, DWORD PTR [ecx+668]
  0000e	8b f7		 mov	 esi, edi
  00010	c7 81 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+664], 0
  0001a	2b f0		 sub	 esi, eax
  0001c	8d 64 24 00	 npad	 4
$LL4@SavePrivat:
  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	88 14 06	 mov	 BYTE PTR [esi+eax], dl
  00025	40		 inc	 eax
  00026	84 d2		 test	 dl, dl
  00028	75 f6		 jne	 SHORT $LL4@SavePrivat

; 263  : 
; 264  : 	if ( this->m_lpfnCALLBACK_ERRORNOTIFY )

  0002a	8b 81 ac 03 00
	00		 mov	 eax, DWORD PTR [ecx+940]
  00030	85 c0		 test	 eax, eax
  00032	74 0e		 je	 SHORT $LN1@SavePrivat

; 265  : 	{
; 266  : 		this->m_lpfnCALLBACK_ERRORNOTIFY(this, this->m_uLastErrorNum, this->m_szLastErrorMessage);

  00034	8b 91 98 02 00
	00		 mov	 edx, DWORD PTR [ecx+664]
  0003a	57		 push	 edi
  0003b	52		 push	 edx
  0003c	51		 push	 ecx
  0003d	ff d0		 call	 eax
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SavePrivat:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 267  : 	}
; 268  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z ENDP ; CWzMultiCastSock::SavePrivateErrorMessage
_TEXT	ENDS
PUBLIC	??_C@_0CG@POBBELLP@RecvThreadProc?$CI?$CJ?5ERROR?5?3?5iRecvLe@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z	; CWzMultiCastSock::RecvThreadProc
EXTRN	__imp__recvfrom@24:PROC
;	COMDAT ??_C@_0CG@POBBELLP@RecvThreadProc?$CI?$CJ?5ERROR?5?3?5iRecvLe@
CONST	SEGMENT
??_C@_0CG@POBBELLP@RecvThreadProc?$CI?$CJ?5ERROR?5?3?5iRecvLe@ DB 'RecvTh'
	DB	'readProc() ERROR : iRecvLen < 0', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z
_TEXT	SEGMENT
_isockaddr_len$ = -1048					; size = 4
_sockaddr$ = -1044					; size = 16
_cBUFFER$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_lpParam$ = 8						; size = 4
?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z PROC		; CWzMultiCastSock::RecvThreadProc, COMDAT

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 04 00
	00		 sub	 esp, 1048		; 00000418H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _lpParam$[ebp]
  00017	57		 push	 edi

; 273  : 	char cBUFFER[1024];
; 274  : 	sockaddr_in sockaddr;
; 275  : 	int isockaddr_len = 16;
; 276  : 	CWzMultiCastSock * lpCMSock = (CWzMultiCastSock *)lpParam;
; 277  : 
; 278  : 	while ( true )
; 279  : 	{
; 280  : 		int iRecvLen = recvfrom(lpCMSock->m_skSocket, cBUFFER, sizeof(cBUFFER), 0,
; 281  : 			(::sockaddr *)&sockaddr, &isockaddr_len);

  00018	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__recvfrom@24
  0001e	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _isockaddr_len$[ebp]
  00024	50		 push	 eax
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _sockaddr$[ebp]
  0002d	51		 push	 ecx
  0002e	6a 00		 push	 0
  00030	68 00 04 00 00	 push	 1024			; 00000400H
  00035	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _cBUFFER$[ebp]
  0003b	52		 push	 edx
  0003c	50		 push	 eax
  0003d	c7 85 e8 fb ff
	ff 10 00 00 00	 mov	 DWORD PTR _isockaddr_len$[ebp], 16 ; 00000010H
  00047	ff d7		 call	 edi

; 282  : 
; 283  : 		if ( iRecvLen == -1 )

  00049	83 f8 ff	 cmp	 eax, -1
  0004c	0f 84 95 00 00
	00		 je	 $LN15@RecvThread
$LL10@RecvThread:

; 289  : 		}
; 290  : 
; 291  : 		if ( iRecvLen < 0 )

  00052	85 c0		 test	 eax, eax
  00054	0f 88 9b 00 00
	00		 js	 $LN16@RecvThread

; 295  : 			lpCMSock->m_skSocket = INVALID_SOCKET;
; 296  : 			break;
; 297  : 		}
; 298  : 
; 299  : 		int iSize = 0;
; 300  : 		BYTE btHeadCode = 0;
; 301  : 		BYTE btSubCode = 0;
; 302  : 
; 303  : 		switch ( (BYTE)cBUFFER[0] )

  0005a	0f b6 8d fc fb
	ff ff		 movzx	 ecx, BYTE PTR _cBUFFER$[ebp]
  00061	81 e9 c1 00 00
	00		 sub	 ecx, 193		; 000000c1H
  00067	74 25		 je	 SHORT $LN4@RecvThread
  00069	49		 dec	 ecx
  0006a	75 51		 jne	 SHORT $LN3@RecvThread

; 314  : 				}
; 315  : 				break;
; 316  : 			case 0xC2:
; 317  : 				iSize = ((BYTE)cBUFFER[1] << 8 )+ ((BYTE)cBUFFER[2]);
; 318  : 				btHeadCode = (BYTE)cBUFFER[3];
; 319  : 				btSubCode = (BYTE)cBUFFER[4];
; 320  : 
; 321  : 				if ( lpCMSock->m_lpfnCALLBACK_RECVNOTIFY )

  0006c	8b 8e a8 03 00
	00		 mov	 ecx, DWORD PTR [esi+936]
  00072	85 c9		 test	 ecx, ecx
  00074	74 47		 je	 SHORT $LN3@RecvThread

; 322  : 				{
; 323  : 					lpCMSock->m_lpfnCALLBACK_RECVNOTIFY(lpCMSock, sockaddr.sin_addr.S_un.S_addr,
; 324  : 						btHeadCode, btSubCode, cBUFFER, iRecvLen);

  00076	50		 push	 eax
  00077	0f b6 85 00 fc
	ff ff		 movzx	 eax, BYTE PTR _cBUFFER$[ebp+4]
  0007e	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _cBUFFER$[ebp]
  00084	52		 push	 edx
  00085	0f b6 95 ff fb
	ff ff		 movzx	 edx, BYTE PTR _cBUFFER$[ebp+3]
  0008c	eb 20		 jmp	 SHORT $LN17@RecvThread
$LN4@RecvThread:

; 304  : 		{
; 305  : 			case 0xC1:
; 306  : 				iSize = (BYTE)cBUFFER[1];
; 307  : 				btHeadCode = (BYTE)cBUFFER[2];
; 308  : 				btSubCode = (BYTE)cBUFFER[3];
; 309  : 
; 310  : 				if ( lpCMSock->m_lpfnCALLBACK_RECVNOTIFY )

  0008e	8b 8e a8 03 00
	00		 mov	 ecx, DWORD PTR [esi+936]
  00094	85 c9		 test	 ecx, ecx
  00096	74 25		 je	 SHORT $LN3@RecvThread

; 311  : 				{
; 312  : 					lpCMSock->m_lpfnCALLBACK_RECVNOTIFY(lpCMSock, sockaddr.sin_addr.S_un.S_addr,
; 313  : 						btHeadCode, btSubCode, cBUFFER, iRecvLen);

  00098	50		 push	 eax
  00099	0f b6 85 ff fb
	ff ff		 movzx	 eax, BYTE PTR _cBUFFER$[ebp+3]
  000a0	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _cBUFFER$[ebp]
  000a6	52		 push	 edx
  000a7	0f b6 95 fe fb
	ff ff		 movzx	 edx, BYTE PTR _cBUFFER$[ebp+2]
$LN17@RecvThread:
  000ae	50		 push	 eax
  000af	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _sockaddr$[ebp+4]
  000b5	52		 push	 edx
  000b6	50		 push	 eax
  000b7	56		 push	 esi
  000b8	ff d1		 call	 ecx
  000ba	83 c4 18	 add	 esp, 24			; 00000018H
$LN3@RecvThread:

; 273  : 	char cBUFFER[1024];
; 274  : 	sockaddr_in sockaddr;
; 275  : 	int isockaddr_len = 16;
; 276  : 	CWzMultiCastSock * lpCMSock = (CWzMultiCastSock *)lpParam;
; 277  : 
; 278  : 	while ( true )
; 279  : 	{
; 280  : 		int iRecvLen = recvfrom(lpCMSock->m_skSocket, cBUFFER, sizeof(cBUFFER), 0,
; 281  : 			(::sockaddr *)&sockaddr, &isockaddr_len);

  000bd	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _isockaddr_len$[ebp]
  000c3	51		 push	 ecx
  000c4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c6	8d 95 ec fb ff
	ff		 lea	 edx, DWORD PTR _sockaddr$[ebp]
  000cc	52		 push	 edx
  000cd	6a 00		 push	 0
  000cf	68 00 04 00 00	 push	 1024			; 00000400H
  000d4	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	ff d7		 call	 edi

; 282  : 
; 283  : 		if ( iRecvLen == -1 )

  000de	83 f8 ff	 cmp	 eax, -1
  000e1	0f 85 6b ff ff
	ff		 jne	 $LL10@RecvThread
$LN15@RecvThread:

; 284  : 		{
; 285  : 			lpCMSock->SaveLastError(0);

  000e7	6a 00		 push	 0
  000e9	8b ce		 mov	 ecx, esi
  000eb	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 286  : 			closesocket(lpCMSock->m_skSocket);

  000f0	8b 16		 mov	 edx, DWORD PTR [esi]
  000f2	52		 push	 edx

; 287  : 			lpCMSock->m_skSocket = INVALID_SOCKET;
; 288  : 			break;

  000f3	eb 0f		 jmp	 SHORT $LN18@RecvThread
$LN16@RecvThread:

; 292  : 		{
; 293  : 			lpCMSock->SavePrivateErrorMessage("RecvThreadProc() ERROR : iRecvLen < 0");

  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@POBBELLP@RecvThreadProc?$CI?$CJ?5ERROR?5?3?5iRecvLe@
  000fa	8b ce		 mov	 ecx, esi
  000fc	e8 00 00 00 00	 call	 ?SavePrivateErrorMessage@CWzMultiCastSock@@IAEXPAD@Z ; CWzMultiCastSock::SavePrivateErrorMessage

; 294  : 			closesocket(lpCMSock->m_skSocket);

  00101	8b 06		 mov	 eax, DWORD PTR [esi]
  00103	50		 push	 eax
$LN18@RecvThread:
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 325  : 				}
; 326  : 		}
; 327  : 	}
; 328  : 
; 329  : 	return FALSE;
; 330  : }

  0010a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010d	5f		 pop	 edi
  0010e	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00114	33 cd		 xor	 ecx, ebp
  00116	33 c0		 xor	 eax, eax
  00118	5e		 pop	 esi
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 04 00	 ret	 4
?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z ENDP		; CWzMultiCastSock::RecvThreadProc
_TEXT	ENDS
PUBLIC	??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z	; CWzMultiCastSock::StartMultiCast
EXTRN	__beginthreadex:PROC
EXTRN	__imp__setsockopt@20:PROC
EXTRN	__imp__inet_addr@4:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__htonl@4:PROC
EXTRN	__imp__socket@12:PROC
;	COMDAT ??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@
CONST	SEGMENT
??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@ DB '227.100.100.100', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z
_TEXT	SEGMENT
_szText$154200 = -48					; size = 16
_addr$ = -32						; size = 4
_mreq$ = -28						; size = 8
_sockaddr$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_lpszIPADDR$ = 8					; size = 4
?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z PROC	; CWzMultiCastSock::StartMultiCast, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 80   : 	if ( this->m_skSocket != INVALID_SOCKET )

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	57		 push	 edi
  00016	83 f8 ff	 cmp	 eax, -1
  00019	74 0d		 je	 SHORT $LN14@StartMulti

; 81   : 	{
; 82   : 		closesocket(this->m_skSocket);

  0001b	50		 push	 eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 83   : 		this->m_skSocket = INVALID_SOCKET;

  00022	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN14@StartMulti:

; 84   : 	}
; 85   : 
; 86   : 	if ( !lpszIPADDR )

  00028	8b 45 08	 mov	 eax, DWORD PTR _lpszIPADDR$[ebp]
  0002b	85 c0		 test	 eax, eax
  0002d	75 40		 jne	 SHORT $LN10@StartMulti

; 87   : 	{
; 88   : 		int iCOUNT = this->DoEnumIpAddress();

  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?DoEnumIpAddress@CWzMultiCastSock@@QAEHXZ ; CWzMultiCastSock::DoEnumIpAddress

; 89   : 
; 90   : 		if ( iCOUNT > 0 )

  00036	85 c0		 test	 eax, eax
  00038	0f 8e b0 00 00
	00		 jle	 $LN8@StartMulti

; 91   : 		{
; 92   : 			char szText[16];
; 93   : 			BOOL bRES = FALSE;
; 94   : 
; 95   : 			bRES = this->GetEnummedIpAddress(0, szText);

  0003e	8d 45 d0	 lea	 eax, DWORD PTR _szText$154200[ebp]
  00041	50		 push	 eax
  00042	6a 00		 push	 0
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?GetEnummedIpAddress@CWzMultiCastSock@@QAEHHPAD@Z ; CWzMultiCastSock::GetEnummedIpAddress

; 96   : 
; 97   : 			if ( bRES )

  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 9b 00 00
	00		 je	 $LN8@StartMulti

; 98   : 			{
; 99   : 				memcpy(this->m_szIPADDR_JOIN, szText, sizeof(szText));

  00053	8b 4d d0	 mov	 ecx, DWORD PTR _szText$154200[ebp]
  00056	8b 55 d4	 mov	 edx, DWORD PTR _szText$154200[ebp+4]
  00059	8b 45 d8	 mov	 eax, DWORD PTR _szText$154200[ebp+8]
  0005c	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0005f	89 0f		 mov	 DWORD PTR [edi], ecx
  00061	8b 4d dc	 mov	 ecx, DWORD PTR _szText$154200[ebp+12]
  00064	89 57 04	 mov	 DWORD PTR [edi+4], edx
  00067	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0006a	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx

; 100  : 				this->m_szIPADDR_JOIN[15] = 0;
; 101  : 			}
; 102  : 			else
; 103  : 			{
; 104  : 				return FALSE;
; 105  : 			}
; 106  : 		}
; 107  : 		else
; 108  : 		{
; 109  : 			return FALSE;
; 110  : 		}
; 111  : 	}
; 112  : 	else

  0006d	eb 19		 jmp	 SHORT $LN16@StartMulti
$LN10@StartMulti:

; 113  : 	{
; 114  : 		memcpy(this->m_szIPADDR_JOIN, lpszIPADDR, sizeof(this->m_szIPADDR_JOIN));

  0006f	8b 10		 mov	 edx, DWORD PTR [eax]
  00071	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00074	89 17		 mov	 DWORD PTR [edi], edx
  00076	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00079	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  0007c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0007f	89 57 08	 mov	 DWORD PTR [edi+8], edx
  00082	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00085	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN16@StartMulti:

; 115  : 		this->m_szIPADDR_JOIN[15] = 0;
; 116  : 	}
; 117  : 
; 118  : 	this->m_skSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

  00088	6a 11		 push	 17			; 00000011H
  0008a	6a 02		 push	 2
  0008c	6a 02		 push	 2
  0008e	c6 46 13 00	 mov	 BYTE PTR [esi+19], 0
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  00098	89 06		 mov	 DWORD PTR [esi], eax

; 119  : 
; 120  : 	if ( this->m_skSocket == INVALID_SOCKET )

  0009a	83 f8 ff	 cmp	 eax, -1

; 121  : 	{
; 122  : 		this->m_skSocket = INVALID_SOCKET;
; 123  : 		return FALSE;

  0009d	74 49		 je	 SHORT $LN18@StartMulti

; 124  : 	}
; 125  : 
; 126  : 	sockaddr_in sockaddr;
; 127  : 
; 128  : 	sockaddr.sin_addr.S_un.S_addr = htonl(0);

  0009f	6a 00		 push	 0
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htonl@4

; 129  : 	sockaddr.sin_family = AF_INET;

  000a7	b9 02 00 00 00	 mov	 ecx, 2

; 130  : 	sockaddr.sin_port = htons(37769);

  000ac	68 89 93 00 00	 push	 37769			; 00009389H
  000b1	89 45 f0	 mov	 DWORD PTR _sockaddr$[ebp+4], eax
  000b4	66 89 4d ec	 mov	 WORD PTR _sockaddr$[ebp], cx
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4

; 131  : 	
; 132  : 	int iERR = bind(this->m_skSocket, (::sockaddr *)&sockaddr, 16);

  000be	6a 10		 push	 16			; 00000010H
  000c0	8d 55 ec	 lea	 edx, DWORD PTR _sockaddr$[ebp]
  000c3	66 89 45 ee	 mov	 WORD PTR _sockaddr$[ebp+2], ax
  000c7	8b 06		 mov	 eax, DWORD PTR [esi]
  000c9	52		 push	 edx
  000ca	50		 push	 eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12

; 133  : 
; 134  : 	if ( iERR == -1 )

  000d1	83 f8 ff	 cmp	 eax, -1
  000d4	75 2c		 jne	 SHORT $LN3@StartMulti

; 135  : 	{
; 136  : 		this->SaveLastError(0);

  000d6	6a 00		 push	 0
  000d8	8b ce		 mov	 ecx, esi
  000da	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 137  : 		closesocket(this->m_skSocket);

  000df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e1	51		 push	 ecx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$LN18@StartMulti:

; 138  : 		this->m_skSocket = INVALID_SOCKET;

  000e8	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN8@StartMulti:
  000ee	5f		 pop	 edi

; 139  : 
; 140  : 		return FALSE;

  000ef	33 c0		 xor	 eax, eax
  000f1	5e		 pop	 esi

; 171  : 
; 172  : 	return TRUE;
; 173  : }

  000f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f5	33 cd		 xor	 ecx, ebp
  000f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
$LN3@StartMulti:
  00102	53		 push	 ebx

; 141  : 	}
; 142  : 
; 143  : 	ip_mreq mreq;
; 144  : 	memset(&mreq, 0, sizeof(mreq));
; 145  : 	mreq.imr_multiaddr.S_un.S_addr = inet_addr("227.100.100.100");

  00103	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__inet_addr@4
  00109	33 c0		 xor	 eax, eax
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@
  00110	89 45 e4	 mov	 DWORD PTR _mreq$[ebp], eax
  00113	89 45 e8	 mov	 DWORD PTR _mreq$[ebp+4], eax
  00116	ff d3		 call	 ebx

; 146  : 	mreq.imr_interface.S_un.S_addr = inet_addr(this->m_szIPADDR_JOIN);

  00118	57		 push	 edi
  00119	89 45 e4	 mov	 DWORD PTR _mreq$[ebp], eax
  0011c	ff d3		 call	 ebx

; 147  : 	iERR = setsockopt(this->m_skSocket, IPPROTO_IP, 12, (char *)&mreq, sizeof(mreq));

  0011e	6a 08		 push	 8
  00120	8d 55 e4	 lea	 edx, DWORD PTR _mreq$[ebp]
  00123	52		 push	 edx
  00124	6a 0c		 push	 12			; 0000000cH
  00126	89 45 e8	 mov	 DWORD PTR _mreq$[ebp+4], eax
  00129	8b 06		 mov	 eax, DWORD PTR [esi]
  0012b	6a 00		 push	 0
  0012d	50		 push	 eax
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20

; 148  : 
; 149  : 	if ( iERR == -1 )

  00134	83 f8 ff	 cmp	 eax, -1

; 150  : 	{
; 151  : 		this->SaveLastError(0);
; 152  : 		closesocket(this->m_skSocket);
; 153  : 		this->m_skSocket = INVALID_SOCKET;
; 154  : 
; 155  : 		return FALSE;

  00137	74 1e		 je	 SHORT $LN17@StartMulti

; 156  : 	}
; 157  : 
; 158  : 	DWORD addr = inet_addr(this->m_szIPADDR_JOIN);

  00139	57		 push	 edi
  0013a	ff d3		 call	 ebx

; 159  : 	iERR = setsockopt(this->m_skSocket, IPPROTO_IP, 9, (char *)&addr, sizeof(addr));

  0013c	6a 04		 push	 4
  0013e	8d 55 e0	 lea	 edx, DWORD PTR _addr$[ebp]
  00141	52		 push	 edx
  00142	6a 09		 push	 9
  00144	89 45 e0	 mov	 DWORD PTR _addr$[ebp], eax
  00147	8b 06		 mov	 eax, DWORD PTR [esi]
  00149	6a 00		 push	 0
  0014b	50		 push	 eax
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20

; 160  : 
; 161  : 	if ( iERR == -1 )

  00152	83 f8 ff	 cmp	 eax, -1
  00155	75 2d		 jne	 SHORT $LN1@StartMulti
$LN17@StartMulti:

; 162  : 	{
; 163  : 		this->SaveLastError(0);

  00157	6a 00		 push	 0
  00159	8b ce		 mov	 ecx, esi
  0015b	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 164  : 		closesocket(this->m_skSocket);

  00160	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00162	51		 push	 ecx
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
  00169	5b		 pop	 ebx
  0016a	5f		 pop	 edi

; 165  : 		this->m_skSocket = INVALID_SOCKET;

  0016b	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 166  : 
; 167  : 		return FALSE;

  00171	33 c0		 xor	 eax, eax
  00173	5e		 pop	 esi

; 171  : 
; 172  : 	return TRUE;
; 173  : }

  00174	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00177	33 cd		 xor	 ecx, ebp
  00179	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 04 00	 ret	 4
$LN1@StartMulti:

; 168  : 	}
; 169  : 
; 170  : 	this->m_hWorkerThread = (HANDLE)_beginthreadex(NULL, 0, (unsigned int (__stdcall*)(void *))CWzMultiCastSock::RecvThreadProc, this, NULL, &this->m_idWorkerThread);

  00184	8d 96 a4 03 00
	00		 lea	 edx, DWORD PTR [esi+932]
  0018a	52		 push	 edx
  0018b	6a 00		 push	 0
  0018d	56		 push	 esi
  0018e	68 00 00 00 00	 push	 OFFSET ?RecvThreadProc@CWzMultiCastSock@@KGIPAX@Z ; CWzMultiCastSock::RecvThreadProc
  00193	6a 00		 push	 0
  00195	6a 00		 push	 0
  00197	e8 00 00 00 00	 call	 __beginthreadex

; 171  : 
; 172  : 	return TRUE;
; 173  : }

  0019c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019f	83 c4 18	 add	 esp, 24			; 00000018H
  001a2	5b		 pop	 ebx
  001a3	89 86 a0 03 00
	00		 mov	 DWORD PTR [esi+928], eax
  001a9	5f		 pop	 edi
  001aa	33 cd		 xor	 ecx, ebp
  001ac	b8 01 00 00 00	 mov	 eax, 1
  001b1	5e		 pop	 esi
  001b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c2 04 00	 ret	 4
?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z ENDP	; CWzMultiCastSock::StartMultiCast
_TEXT	ENDS
PUBLIC	?ReStartMultiCast@CWzMultiCastSock@@QAEHXZ	; CWzMultiCastSock::ReStartMultiCast
; Function compile flags: /Ogtp
;	COMDAT ?ReStartMultiCast@CWzMultiCastSock@@QAEHXZ
_TEXT	SEGMENT
?ReStartMultiCast@CWzMultiCastSock@@QAEHXZ PROC		; CWzMultiCastSock::ReStartMultiCast, COMDAT
; _this$ = ecx

; 177  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 178  : 	this->EndMultiCast();

  00003	e8 00 00 00 00	 call	 ?EndMultiCast@CWzMultiCastSock@@QAEXXZ ; CWzMultiCastSock::EndMultiCast

; 179  : 	return this->StartMultiCast(this->m_szIPADDR_JOIN);

  00008	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000b	50		 push	 eax
  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?StartMultiCast@CWzMultiCastSock@@QAEHPAD@Z ; CWzMultiCastSock::StartMultiCast
  00013	5e		 pop	 esi

; 180  : }	

  00014	c3		 ret	 0
?ReStartMultiCast@CWzMultiCastSock@@QAEHXZ ENDP		; CWzMultiCastSock::ReStartMultiCast
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SendData@CWzMultiCastSock@@QAEHPADH@Z		; CWzMultiCastSock::SendData
EXTRN	__imp__sendto@24:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SendData@CWzMultiCastSock@@QAEHPADH@Z
_TEXT	SEGMENT
_sockaddr$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_lpBUFFER$ = 8						; size = 4
_iBUFSIZE$ = 12						; size = 4
?SendData@CWzMultiCastSock@@QAEHPADH@Z PROC		; CWzMultiCastSock::SendData, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _lpBUFFER$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 203  : 	if ( !lpBUFFER )

  00017	85 ff		 test	 edi, edi

; 204  : 		return FALSE;

  00019	74 59		 je	 SHORT $LN7@SendData

; 205  : 
; 206  : 	sockaddr_in sockaddr;
; 207  : 	
; 208  : 	sockaddr.sin_family = AF_INET;

  0001b	b8 02 00 00 00	 mov	 eax, 2

; 209  : 	sockaddr.sin_addr.S_un.S_addr = inet_addr("227.100.100.100");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CLENKLPL@227?4100?4100?4100?$AA@
  00025	66 89 45 ec	 mov	 WORD PTR _sockaddr$[ebp], ax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4

; 210  : 	sockaddr.sin_port = htons(37769);

  0002f	68 89 93 00 00	 push	 37769			; 00009389H
  00034	89 45 f0	 mov	 DWORD PTR _sockaddr$[ebp+4], eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4

; 211  : 
; 212  : 	int iSENDBYTES = sendto(this->m_skSocket, lpBUFFER, iBUFSIZE, 0, (::sockaddr *)&sockaddr, 16);

  0003d	8b 55 0c	 mov	 edx, DWORD PTR _iBUFSIZE$[ebp]
  00040	6a 10		 push	 16			; 00000010H
  00042	8d 4d ec	 lea	 ecx, DWORD PTR _sockaddr$[ebp]
  00045	51		 push	 ecx
  00046	6a 00		 push	 0
  00048	52		 push	 edx
  00049	66 89 45 ee	 mov	 WORD PTR _sockaddr$[ebp+2], ax
  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
  0004f	57		 push	 edi
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24

; 213  : 
; 214  : 	if ( iSENDBYTES == -1 )

  00057	83 f8 ff	 cmp	 eax, -1
  0005a	75 2c		 jne	 SHORT $LN6@SendData

; 215  : 	{
; 216  : 		this->SaveLastError(0);

  0005c	6a 00		 push	 0
  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 217  : 		closesocket(this->m_skSocket);

  00065	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00067	51		 push	 ecx
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 218  : 		this->m_skSocket = INVALID_SOCKET;

  0006e	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN7@SendData:

; 219  : 
; 220  : 		return FALSE;

  00074	5f		 pop	 edi
  00075	33 c0		 xor	 eax, eax
  00077	5e		 pop	 esi

; 230  : 	}
; 231  : 
; 232  : 	return TRUE;
; 233  : }

  00078	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN6@SendData:

; 221  : 	}
; 222  : 
; 223  : 	if ( iSENDBYTES < -1 )

  00088	7d 2c		 jge	 SHORT $LN1@SendData

; 224  : 	{
; 225  : 		this->SaveLastError(0);

  0008a	6a 00		 push	 0
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ?SaveLastError@CWzMultiCastSock@@IAEXH@Z ; CWzMultiCastSock::SaveLastError

; 226  : 		closesocket(this->m_skSocket);

  00093	8b 16		 mov	 edx, DWORD PTR [esi]
  00095	52		 push	 edx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
  0009c	5f		 pop	 edi

; 227  : 		this->m_skSocket = INVALID_SOCKET;

  0009d	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 228  : 
; 229  : 		return FALSE;

  000a3	33 c0		 xor	 eax, eax
  000a5	5e		 pop	 esi

; 230  : 	}
; 231  : 
; 232  : 	return TRUE;
; 233  : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN1@SendData:
  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	5f		 pop	 edi
  000ba	33 cd		 xor	 ecx, ebp
  000bc	b8 01 00 00 00	 mov	 eax, 1
  000c1	5e		 pop	 esi
  000c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
?SendData@CWzMultiCastSock@@QAEHPADH@Z ENDP		; CWzMultiCastSock::SendData
_TEXT	ENDS
END
