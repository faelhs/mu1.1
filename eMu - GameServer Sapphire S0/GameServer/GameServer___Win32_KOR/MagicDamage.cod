; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\MagicDamage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CMagicDamage@@6B@				; CMagicDamage::`vftable'
PUBLIC	??0CMagicDamage@@QAE@XZ				; CMagicDamage::CMagicDamage
PUBLIC	??_R4CMagicDamage@@6B@				; CMagicDamage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMagicDamage@@@8			; CMagicDamage `RTTI Type Descriptor'
PUBLIC	??_R3CMagicDamage@@8				; CMagicDamage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMagicDamage@@8				; CMagicDamage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMagicDamage@@8			; CMagicDamage::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMagicDamage@@UAEPAXI@Z:PROC		; CMagicDamage::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMagicDamage@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\magicdamage.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMagicDamage@@8 DD FLAT:??_R0?AVCMagicDamage@@@8 ; CMagicDamage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_R2CMagicDamage@@8
rdata$r	SEGMENT
??_R2CMagicDamage@@8 DD FLAT:??_R1A@?0A@EA@CMagicDamage@@8 ; CMagicDamage::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMagicDamage@@8
rdata$r	SEGMENT
??_R3CMagicDamage@@8 DD 00H				; CMagicDamage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMagicDamage@@@8
_DATA	SEGMENT
??_R0?AVCMagicDamage@@@8 DD FLAT:??_7type_info@@6B@	; CMagicDamage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMagicDamage@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMagicDamage@@6B@
rdata$r	SEGMENT
??_R4CMagicDamage@@6B@ DD 00H				; CMagicDamage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMagicDamage@@@8
	DD	FLAT:??_R3CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_7CMagicDamage@@6B@
CONST	SEGMENT
??_7CMagicDamage@@6B@ DD FLAT:??_R4CMagicDamage@@6B@	; CMagicDamage::`vftable'
	DD	FLAT:??_ECMagicDamage@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMagicDamage@@QAE@XZ
_TEXT	SEGMENT
??0CMagicDamage@@QAE@XZ PROC				; CMagicDamage::CMagicDamage, COMDAT
; _this$ = ecx

; 15   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMagicDamage@@6B@

; 16   : 	return;
; 17   : }

  00008	c3		 ret	 0
??0CMagicDamage@@QAE@XZ ENDP				; CMagicDamage::CMagicDamage
_TEXT	ENDS
PUBLIC	??1CMagicDamage@@UAE@XZ				; CMagicDamage::~CMagicDamage
; Function compile flags: /Ogtp
;	COMDAT ??1CMagicDamage@@UAE@XZ
_TEXT	SEGMENT
??1CMagicDamage@@UAE@XZ PROC				; CMagicDamage::~CMagicDamage, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMagicDamage@@6B@

; 22   : 	return;
; 23   : }

  00006	c3		 ret	 0
??1CMagicDamage@@UAE@XZ ENDP				; CMagicDamage::~CMagicDamage
_TEXT	ENDS
PUBLIC	?Init@CMagicDamage@@QAEXXZ			; CMagicDamage::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CMagicDamage@@QAEXXZ
_TEXT	SEGMENT
?Init@CMagicDamage@@QAEXXZ PROC				; CMagicDamage::Init, COMDAT
; _this$ = ecx

; 26   : {

  00000	57		 push	 edi

; 27   : 	for ( int n=0; n< MAX_SKILL;n++)

  00001	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]

; 28   : 	{
; 29   : 		this->m_Damage[n] = -1;

  00004	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00009	83 c8 ff	 or	 eax, -1
  0000c	f3 ab		 rep stosd
  0000e	5f		 pop	 edi

; 30   : 	}
; 31   : }

  0000f	c3		 ret	 0
?Init@CMagicDamage@@QAEXXZ ENDP				; CMagicDamage::Init
_TEXT	ENDS
PUBLIC	??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@	; `string'
PUBLIC	?SetEx@CMagicDamage@@AAEXHHHHPAH@Z		; CMagicDamage::SetEx
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
CONST	SEGMENT
??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@ DB 'MagicDamage.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iSkillUseType$ = 12					; size = 4
_iSkillBrand$ = 16					; size = 4
_iKillCount$ = 20					; size = 4
_pReqStatus$ = 24					; size = 4
?SetEx@CMagicDamage@@AAEXHHHHPAH@Z PROC			; CMagicDamage::SetEx, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 159  : 	if ( iSkill <0 || iSkill > MAX_SKILL -1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 57		 ja	 SHORT $LN2@SetEx

; 162  : 		return;
; 163  : 	}
; 164  : 
; 165  : 	if ( this->m_Damage[iSkill] == -1 )

  0000d	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  00012	75 11		 jne	 SHORT $LN1@SetEx

; 166  : 	{
; 167  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  00014	68 a7 00 00 00	 push	 167			; 000000a7H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0001e	68 32 02 00 00	 push	 562			; 00000232H

; 168  : 		return;

  00023	eb 4e		 jmp	 SHORT $LN6@SetEx
$LN1@SetEx:

; 169  : 	}
; 170  : 
; 171  : 	this->m_iSkillUseType[iSkill] = iSkillUseType;

  00025	8b 55 0c	 mov	 edx, DWORD PTR _iSkillUseType$[ebp]
  00028	89 94 81 04 59
	00 00		 mov	 DWORD PTR [ecx+eax*4+22788], edx

; 172  : 	this->m_iSkillBrand[iSkill] = iSkillBrand;

  0002f	8b 55 10	 mov	 edx, DWORD PTR _iSkillBrand$[ebp]
  00032	89 94 81 04 5d
	00 00		 mov	 DWORD PTR [ecx+eax*4+23812], edx

; 173  : 	this->m_iKillCount[iSkill] = iKillCount;

  00039	8b 55 14	 mov	 edx, DWORD PTR _iKillCount$[ebp]
  0003c	89 94 81 04 61
	00 00		 mov	 DWORD PTR [ecx+eax*4+24836], edx

; 174  : 	memcpy(this->m_iRequireStatus[iSkill], pReqStatus, sizeof(this->m_iRequireStatus[0]));	// #error Deathway Fix

  00043	8d 84 40 41 19
	00 00		 lea	 eax, DWORD PTR [eax+eax*2+6465]
  0004a	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004d	8b 4d 18	 mov	 ecx, DWORD PTR _pReqStatus$[ebp]
  00050	8b 11		 mov	 edx, DWORD PTR [ecx]
  00052	89 10		 mov	 DWORD PTR [eax], edx
  00054	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00057	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0005a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0005d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 175  : }

  00060	5d		 pop	 ebp
  00061	c2 14 00	 ret	 20			; 00000014H
$LN2@SetEx:

; 160  : 	{
; 161  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00064	68 a1 00 00 00	 push	 161			; 000000a1H
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0006e	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SetEx:
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00078	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 175  : }

  00086	5d		 pop	 ebp
  00087	c2 14 00	 ret	 20			; 00000014H
?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ENDP			; CMagicDamage::SetEx
_TEXT	ENDS
PUBLIC	??_C@_08MAACMGJK@skill?3?$CFd?$AA@		; `string'
PUBLIC	?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z	; CMagicDamage::Set
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
;	COMDAT ??_C@_08MAACMGJK@skill?3?$CFd?$AA@
CONST	SEGMENT
??_C@_08MAACMGJK@skill?3?$CFd?$AA@ DB 'skill:%d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_skill$ = 12						; size = 4
_damage$ = 16						; size = 4
_rlevel$ = 20						; size = 4
_mana$ = 24						; size = 4
_bp$ = 28						; size = 4
_dis$ = 32						; size = 4
_Attr$ = 36						; size = 4
_iSkillType$ = 40					; size = 4
_ReqClass$ = 44						; size = 4
_rEnergy$ = 48						; size = 4
_rLeadership$ = 52					; size = 4
_rdelay$ = 56						; size = 4
?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z PROC		; CMagicDamage::Set, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 179  : 	if ( skill <0 || skill > MAX_SKILL -1 )

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _skill$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	81 ff ff 00 00
	00		 cmp	 edi, 255		; 000000ffH
  00010	0f 87 74 04 00
	00		 ja	 $LN101@Set

; 182  : 		return;
; 183  : 	}
; 184  : 
; 185  : 	if ( this->m_Damage[skill] != -1 )

  00016	83 7c be 04 ff	 cmp	 DWORD PTR [esi+edi*4+4], -1
  0001b	74 28		 je	 SHORT $LN100@Set

; 186  : 	{
; 187  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  0001d	68 bb 00 00 00	 push	 187			; 000000bbH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00027	68 32 02 00 00	 push	 562			; 00000232H
$LN115@Set:
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00031	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00041	5d		 pop	 ebp
  00042	c2 34 00	 ret	 52			; 00000034H
$LN100@Set:

; 188  : 		return;
; 189  : 	}
; 190  : 
; 191  : 	strcpy(this->m_Name[skill], name);

  00045	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  00048	8b cf		 mov	 ecx, edi
  0004a	6b c9 32	 imul	 ecx, 50			; 00000032H
  0004d	2b c8		 sub	 ecx, eax
  0004f	8d 94 31 04 04
	00 00		 lea	 edx, DWORD PTR [ecx+esi+1028]
$LL105@Set:
  00056	8a 08		 mov	 cl, BYTE PTR [eax]
  00058	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0005b	40		 inc	 eax
  0005c	84 c9		 test	 cl, cl
  0005e	75 f6		 jne	 SHORT $LL105@Set

; 192  : 	this->m_Damage[skill] = damage;

  00060	8b 55 10	 mov	 edx, DWORD PTR _damage$[ebp]

; 193  : 	this->m_rLevel[skill] = rlevel;

  00063	8b 45 14	 mov	 eax, DWORD PTR _rlevel$[ebp]

; 194  : 	this->m_Mana[skill] = mana;

  00066	66 8b 4d 18	 mov	 cx, WORD PTR _mana$[ebp]
  0006a	89 54 be 04	 mov	 DWORD PTR [esi+edi*4+4], edx

; 195  : 	this->m_Distance[skill] = dis;

  0006e	8a 55 20	 mov	 dl, BYTE PTR _dis$[ebp]
  00071	88 84 37 04 36
	00 00		 mov	 BYTE PTR [edi+esi+13828], al

; 196  : 	this->m_RequireLeadership[skill] = rLeadership;
; 197  : 	this->m_Delay[skill] = rdelay;
; 198  : 	this->m_BrainPower[skill] = bp;
; 199  : 	this->m_Attr[skill] = Attr;
; 200  : 	this->m_iSkillType[skill] = iSkillType;
; 201  : 	memcpy(this->m_RequireClass[skill], ReqClass, sizeof(this->m_RequireClass[0]));
; 202  : 	this->m_RequireEnergy[skill] = (rEnergy * rlevel * 4) / 100 + 20;

  00078	0f af 45 30	 imul	 eax, DWORD PTR _rEnergy$[ebp]
  0007c	66 89 8c 7e 04
	37 00 00	 mov	 WORD PTR [esi+edi*2+14084], cx
  00084	8b 4d 34	 mov	 ecx, DWORD PTR _rLeadership$[ebp]
  00087	88 94 37 04 39
	00 00		 mov	 BYTE PTR [edi+esi+14596], dl
  0008e	8b 55 38	 mov	 edx, DWORD PTR _rdelay$[ebp]
  00091	89 8c be 04 47
	00 00		 mov	 DWORD PTR [esi+edi*4+18180], ecx
  00098	66 8b 4d 1c	 mov	 cx, WORD PTR _bp$[ebp]
  0009c	89 94 be 04 4b
	00 00		 mov	 DWORD PTR [esi+edi*4+19204], edx
  000a3	8b 55 24	 mov	 edx, DWORD PTR _Attr$[ebp]
  000a6	66 89 8c 7e 04
	4f 00 00	 mov	 WORD PTR [esi+edi*2+20228], cx
  000ae	8b 4d 28	 mov	 ecx, DWORD PTR _iSkillType$[ebp]
  000b1	89 94 be 04 51
	00 00		 mov	 DWORD PTR [esi+edi*4+20740], edx
  000b8	89 8c be 04 55
	00 00		 mov	 DWORD PTR [esi+edi*4+21764], ecx
  000bf	8d 14 be	 lea	 edx, DWORD PTR [esi+edi*4]
  000c2	8d 8c 17 04 3e
	00 00		 lea	 ecx, DWORD PTR [edi+edx+15876]
  000c9	8b 55 2c	 mov	 edx, DWORD PTR _ReqClass$[ebp]
  000cc	53		 push	 ebx
  000cd	8b 1a		 mov	 ebx, DWORD PTR [edx]
  000cf	89 19		 mov	 DWORD PTR [ecx], ebx
  000d1	0f b6 52 04	 movzx	 edx, BYTE PTR [edx+4]
  000d5	03 c0		 add	 eax, eax
  000d7	88 51 04	 mov	 BYTE PTR [ecx+4], dl
  000da	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  000dd	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000e2	f7 e9		 imul	 ecx
  000e4	c1 fa 05	 sar	 edx, 5
  000e7	8b c2		 mov	 eax, edx
  000e9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ec	8d 4c 02 14	 lea	 ecx, DWORD PTR [edx+eax+20]

; 203  : 
; 204  : 	if ( skill == 13 ) // Blast
; 205  : 	{
; 206  : 		LogAdd(LOG_BLACK, "skill:%d", this->m_RequireEnergy[skill]);

  000f0	33 db		 xor	 ebx, ebx
  000f2	89 8c be 04 3a
	00 00		 mov	 DWORD PTR [esi+edi*4+14852], ecx
  000f9	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  000fc	75 15		 jne	 SHORT $LN99@Set
  000fe	8b 96 38 3a 00
	00		 mov	 edx, DWORD PTR [esi+14904]
  00104	52		 push	 edx
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_08MAACMGJK@skill?3?$CFd?$AA@
  0010a	53		 push	 ebx
  0010b	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN99@Set:

; 207  : 	}
; 208  : 
; 209  : 	// Set Level Requirements for Skills
; 210  : 	this->m_RequireLevel[skill] = 0;	// Required Level to use the skill

  00113	89 9c be 04 43
	00 00		 mov	 DWORD PTR [esi+edi*4+17156], ebx

; 211  : 
; 212  : 	if ( skill == 41 )	// Twisting Slash

  0011a	83 ff 29	 cmp	 edi, 41			; 00000029H
  0011d	75 17		 jne	 SHORT $LN98@Set

; 213  : 	{
; 214  : 		this->m_RequireLevel[skill] = 80;

  0011f	c7 86 a8 43 00
	00 50 00 00 00	 mov	 DWORD PTR [esi+17320], 80 ; 00000050H

; 264  : 	}
; 265  : 	else if ( skill == 41 )
; 266  : 	{
; 267  : 		this->m_RequireEnergy[skill] = 0;

  00129	89 9e a8 3a 00
	00		 mov	 DWORD PTR [esi+15016], ebx
$LN114@Set:
  0012f	5b		 pop	 ebx
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00132	5d		 pop	 ebp
  00133	c2 34 00	 ret	 52			; 00000034H
$LN98@Set:

; 215  : 	}
; 216  : 	else if ( skill == 42 )	// Rageful Blow

  00136	83 ff 2a	 cmp	 edi, 42			; 0000002aH
  00139	75 17		 jne	 SHORT $LN96@Set

; 268  : 	}
; 269  : 	else if ( skill == 42 )
; 270  : 	{
; 271  : 		this->m_RequireEnergy[skill] = 0;

  0013b	89 9e ac 3a 00
	00		 mov	 DWORD PTR [esi+15020], ebx
  00141	5b		 pop	 ebx
  00142	5f		 pop	 edi
  00143	c7 86 ac 43 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+17324], 170 ; 000000aaH
  0014d	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0014e	5d		 pop	 ebp
  0014f	c2 34 00	 ret	 52			; 00000034H
$LN96@Set:

; 217  : 	{
; 218  : 		this->m_RequireLevel[skill] = 170;
; 219  : 	}
; 220  : 	else if ( skill == 43 )	// Death Stab

  00152	83 ff 2b	 cmp	 edi, 43			; 0000002bH
  00155	75 17		 jne	 SHORT $LN94@Set

; 272  : 	}
; 273  : 	else if ( skill == 43 )
; 274  : 	{
; 275  : 		this->m_RequireEnergy[skill] = 0;

  00157	89 9e b0 3a 00
	00		 mov	 DWORD PTR [esi+15024], ebx
  0015d	5b		 pop	 ebx
  0015e	5f		 pop	 edi
  0015f	c7 86 b0 43 00
	00 a0 00 00 00	 mov	 DWORD PTR [esi+17328], 160 ; 000000a0H
  00169	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0016a	5d		 pop	 ebp
  0016b	c2 34 00	 ret	 52			; 00000034H
$LN94@Set:

; 221  : 	{
; 222  : 		this->m_RequireLevel[skill] = 160;
; 223  : 	}
; 224  : 	else if ( skill == 47 )	// Impale

  0016e	83 ff 2f	 cmp	 edi, 47			; 0000002fH
  00171	75 17		 jne	 SHORT $LN92@Set

; 276  : 	}
; 277  : 	else if ( skill == 47 )
; 278  : 	{
; 279  : 		this->m_RequireEnergy[skill] = 0;

  00173	89 9e c0 3a 00
	00		 mov	 DWORD PTR [esi+15040], ebx
  00179	5b		 pop	 ebx
  0017a	5f		 pop	 edi
  0017b	c7 86 c0 43 00
	00 1c 00 00 00	 mov	 DWORD PTR [esi+17344], 28 ; 0000001cH
  00185	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00186	5d		 pop	 ebp
  00187	c2 34 00	 ret	 52			; 00000034H
$LN92@Set:

; 225  : 	{
; 226  : 		this->m_RequireLevel[skill] = 28;
; 227  : 	}
; 228  : 	else if ( skill == 48 )	// Inner Strength

  0018a	83 ff 30	 cmp	 edi, 48			; 00000030H
  0018d	75 17		 jne	 SHORT $LN90@Set

; 280  : 	}
; 281  : 	else if ( skill == 48 )
; 282  : 	{
; 283  : 		this->m_RequireEnergy[skill] = 0;

  0018f	89 9e c4 3a 00
	00		 mov	 DWORD PTR [esi+15044], ebx
  00195	5b		 pop	 ebx
  00196	5f		 pop	 edi
  00197	c7 86 c4 43 00
	00 78 00 00 00	 mov	 DWORD PTR [esi+17348], 120 ; 00000078H
  001a1	5e		 pop	 esi

; 412  : 	}
; 413  : }

  001a2	5d		 pop	 ebp
  001a3	c2 34 00	 ret	 52			; 00000034H
$LN90@Set:

; 229  : 	{
; 230  : 		this->m_RequireLevel[skill] = 120;
; 231  : 	}
; 232  : 	else if ( skill == 52 )	

  001a6	83 ff 34	 cmp	 edi, 52			; 00000034H
  001a9	75 17		 jne	 SHORT $LN88@Set

; 296  : 	}
; 297  : 	else if ( skill == 52  )
; 298  : 	{
; 299  : 		this->m_RequireEnergy[skill] = 0;

  001ab	89 9e d4 3a 00
	00		 mov	 DWORD PTR [esi+15060], ebx
  001b1	5b		 pop	 ebx
  001b2	5f		 pop	 edi
  001b3	c7 86 d4 43 00
	00 82 00 00 00	 mov	 DWORD PTR [esi+17364], 130 ; 00000082H
  001bd	5e		 pop	 esi

; 412  : 	}
; 413  : }

  001be	5d		 pop	 ebp
  001bf	c2 34 00	 ret	 52			; 00000034H
$LN88@Set:

; 233  : 	{
; 234  : 		this->m_RequireLevel[skill] = 130;
; 235  : 	}
; 236  : 
; 237  : 	if ( skill == 30 )

  001c2	83 ff 1e	 cmp	 edi, 30			; 0000001eH
  001c5	75 0d		 jne	 SHORT $LN87@Set

; 238  : 	{
; 239  : 		this->m_RequireEnergy[skill] = 30;

  001c7	5b		 pop	 ebx
  001c8	89 be 7c 3a 00
	00		 mov	 DWORD PTR [esi+14972], edi
  001ce	5f		 pop	 edi
  001cf	5e		 pop	 esi

; 412  : 	}
; 413  : }

  001d0	5d		 pop	 ebp
  001d1	c2 34 00	 ret	 52			; 00000034H
$LN87@Set:

; 240  : 	}
; 241  : 	else if ( skill == 31 )

  001d4	83 ff 1f	 cmp	 edi, 31			; 0000001fH
  001d7	75 11		 jne	 SHORT $LN85@Set

; 242  : 	{
; 243  : 		this->m_RequireEnergy[skill] = 60;

  001d9	5b		 pop	 ebx
  001da	5f		 pop	 edi
  001db	c7 86 80 3a 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+14976], 60 ; 0000003cH
  001e5	5e		 pop	 esi

; 412  : 	}
; 413  : }

  001e6	5d		 pop	 ebp
  001e7	c2 34 00	 ret	 52			; 00000034H
$LN85@Set:

; 244  : 	}
; 245  : 	else if ( skill == 32 )

  001ea	83 ff 20	 cmp	 edi, 32			; 00000020H
  001ed	75 11		 jne	 SHORT $LN83@Set

; 246  : 	{
; 247  : 		this->m_RequireEnergy[skill] = 90;

  001ef	5b		 pop	 ebx
  001f0	5f		 pop	 edi
  001f1	c7 86 84 3a 00
	00 5a 00 00 00	 mov	 DWORD PTR [esi+14980], 90 ; 0000005aH
  001fb	5e		 pop	 esi

; 412  : 	}
; 413  : }

  001fc	5d		 pop	 ebp
  001fd	c2 34 00	 ret	 52			; 00000034H
$LN83@Set:

; 248  : 	}
; 249  : 	else if ( skill == 33 )

  00200	83 ff 21	 cmp	 edi, 33			; 00000021H
  00203	75 11		 jne	 SHORT $LN81@Set

; 250  : 	{
; 251  : 		this->m_RequireEnergy[skill] = 130;

  00205	5b		 pop	 ebx
  00206	5f		 pop	 edi
  00207	c7 86 88 3a 00
	00 82 00 00 00	 mov	 DWORD PTR [esi+14984], 130 ; 00000082H
  00211	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00212	5d		 pop	 ebp
  00213	c2 34 00	 ret	 52			; 00000034H
$LN81@Set:

; 252  : 	}
; 253  : 	else if ( skill == 34 )

  00216	83 ff 22	 cmp	 edi, 34			; 00000022H
  00219	75 11		 jne	 SHORT $LN79@Set

; 254  : 	{
; 255  : 		this->m_RequireEnergy[skill] = 170;

  0021b	5b		 pop	 ebx
  0021c	5f		 pop	 edi
  0021d	c7 86 8c 3a 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+14988], 170 ; 000000aaH
  00227	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00228	5d		 pop	 ebp
  00229	c2 34 00	 ret	 52			; 00000034H
$LN79@Set:

; 256  : 	}
; 257  : 	else if ( skill == 35 )

  0022c	83 ff 23	 cmp	 edi, 35			; 00000023H
  0022f	75 11		 jne	 SHORT $LN77@Set

; 258  : 	{
; 259  : 		this->m_RequireEnergy[skill] = 210;

  00231	5b		 pop	 ebx
  00232	5f		 pop	 edi
  00233	c7 86 90 3a 00
	00 d2 00 00 00	 mov	 DWORD PTR [esi+14992], 210 ; 000000d2H
  0023d	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0023e	5d		 pop	 ebp
  0023f	c2 34 00	 ret	 52			; 00000034H
$LN77@Set:

; 260  : 	}
; 261  : 	else if ( skill == 36 )

  00242	83 ff 24	 cmp	 edi, 36			; 00000024H
  00245	75 11		 jne	 SHORT $LN65@Set

; 262  : 	{
; 263  : 		this->m_RequireEnergy[skill] = 300;

  00247	5b		 pop	 ebx
  00248	5f		 pop	 edi
  00249	c7 86 94 3a 00
	00 2c 01 00 00	 mov	 DWORD PTR [esi+14996], 300 ; 0000012cH
  00253	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00254	5d		 pop	 ebp
  00255	c2 34 00	 ret	 52			; 00000034H
$LN65@Set:

; 284  : 	}
; 285  : 	else if ( skill == 49  )

  00258	83 ff 31	 cmp	 edi, 49			; 00000031H
  0025b	75 0d		 jne	 SHORT $LN63@Set

; 286  : 	{
; 287  : 		this->m_RequireEnergy[skill] = 0;

  0025d	89 9e c8 3a 00
	00		 mov	 DWORD PTR [esi+15048], ebx
  00263	5b		 pop	 ebx
  00264	5f		 pop	 edi
  00265	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00266	5d		 pop	 ebp
  00267	c2 34 00	 ret	 52			; 00000034H
$LN63@Set:

; 288  : 	}
; 289  : 	else if ( skill == 55  )

  0026a	83 ff 37	 cmp	 edi, 55			; 00000037H
  0026d	75 0d		 jne	 SHORT $LN61@Set

; 290  : 	{
; 291  : 		this->m_RequireEnergy[skill] = 0;

  0026f	89 9e e0 3a 00
	00		 mov	 DWORD PTR [esi+15072], ebx
  00275	5b		 pop	 ebx
  00276	5f		 pop	 edi
  00277	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00278	5d		 pop	 ebp
  00279	c2 34 00	 ret	 52			; 00000034H
$LN61@Set:

; 292  : 	}
; 293  : 	else if ( skill == 51  )

  0027c	83 ff 33	 cmp	 edi, 51			; 00000033H
  0027f	75 0d		 jne	 SHORT $LN57@Set

; 294  : 	{
; 295  : 		this->m_RequireEnergy[skill] = 0;

  00281	89 9e d0 3a 00
	00		 mov	 DWORD PTR [esi+15056], ebx
  00287	5b		 pop	 ebx
  00288	5f		 pop	 edi
  00289	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0028a	5d		 pop	 ebp
  0028b	c2 34 00	 ret	 52			; 00000034H
$LN57@Set:

; 300  : 	}
; 301  : 	else if ( skill == 24  )

  0028e	83 ff 18	 cmp	 edi, 24			; 00000018H
  00291	75 0d		 jne	 SHORT $LN55@Set

; 302  : 	{
; 303  : 		this->m_RequireEnergy[skill] = 0;

  00293	89 9e 64 3a 00
	00		 mov	 DWORD PTR [esi+14948], ebx
  00299	5b		 pop	 ebx
  0029a	5f		 pop	 edi
  0029b	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0029c	5d		 pop	 ebp
  0029d	c2 34 00	 ret	 52			; 00000034H
$LN55@Set:

; 304  : 	}
; 305  : 	else if ( skill == 17 )

  002a0	83 ff 11	 cmp	 edi, 17			; 00000011H
  002a3	75 0d		 jne	 SHORT $LN53@Set

; 306  : 	{
; 307  : 		this->m_RequireEnergy[skill] = 0;

  002a5	89 9e 48 3a 00
	00		 mov	 DWORD PTR [esi+14920], ebx
  002ab	5b		 pop	 ebx
  002ac	5f		 pop	 edi
  002ad	5e		 pop	 esi

; 412  : 	}
; 413  : }

  002ae	5d		 pop	 ebp
  002af	c2 34 00	 ret	 52			; 00000034H
$LN53@Set:

; 308  : 	}
; 309  : 	else if ( skill == 18 )

  002b2	83 ff 12	 cmp	 edi, 18			; 00000012H
  002b5	75 0d		 jne	 SHORT $LN51@Set

; 310  : 	{
; 311  : 		this->m_RequireEnergy[skill] = 0;

  002b7	89 9e 4c 3a 00
	00		 mov	 DWORD PTR [esi+14924], ebx
  002bd	5b		 pop	 ebx
  002be	5f		 pop	 edi
  002bf	5e		 pop	 esi

; 412  : 	}
; 413  : }

  002c0	5d		 pop	 ebp
  002c1	c2 34 00	 ret	 52			; 00000034H
$LN51@Set:

; 312  : 	}
; 313  : 	else if ( skill == 19 )

  002c4	83 ff 13	 cmp	 edi, 19			; 00000013H
  002c7	75 0d		 jne	 SHORT $LN49@Set

; 314  : 	{
; 315  : 		this->m_RequireEnergy[skill] = 0;

  002c9	89 9e 50 3a 00
	00		 mov	 DWORD PTR [esi+14928], ebx
  002cf	5b		 pop	 ebx
  002d0	5f		 pop	 edi
  002d1	5e		 pop	 esi

; 412  : 	}
; 413  : }

  002d2	5d		 pop	 ebp
  002d3	c2 34 00	 ret	 52			; 00000034H
$LN49@Set:

; 316  : 	}
; 317  : 	else if ( skill == 20  )

  002d6	83 ff 14	 cmp	 edi, 20			; 00000014H
  002d9	75 0d		 jne	 SHORT $LN47@Set

; 318  : 	{
; 319  : 		this->m_RequireEnergy[skill] = 0;

  002db	89 9e 54 3a 00
	00		 mov	 DWORD PTR [esi+14932], ebx
  002e1	5b		 pop	 ebx
  002e2	5f		 pop	 edi
  002e3	5e		 pop	 esi

; 412  : 	}
; 413  : }

  002e4	5d		 pop	 ebp
  002e5	c2 34 00	 ret	 52			; 00000034H
$LN47@Set:

; 320  : 	}
; 321  : 	else if ( skill == 21  )

  002e8	83 ff 15	 cmp	 edi, 21			; 00000015H
  002eb	75 0d		 jne	 SHORT $LN45@Set

; 322  : 	{
; 323  : 		this->m_RequireEnergy[skill] = 0;

  002ed	89 9e 58 3a 00
	00		 mov	 DWORD PTR [esi+14936], ebx
  002f3	5b		 pop	 ebx
  002f4	5f		 pop	 edi
  002f5	5e		 pop	 esi

; 412  : 	}
; 413  : }

  002f6	5d		 pop	 ebp
  002f7	c2 34 00	 ret	 52			; 00000034H
$LN45@Set:

; 324  : 	}
; 325  : 	else if ( skill == 22  )

  002fa	83 ff 16	 cmp	 edi, 22			; 00000016H
  002fd	75 0d		 jne	 SHORT $LN43@Set

; 326  : 	{
; 327  : 		this->m_RequireEnergy[skill] = 0;

  002ff	89 9e 5c 3a 00
	00		 mov	 DWORD PTR [esi+14940], ebx
  00305	5b		 pop	 ebx
  00306	5f		 pop	 edi
  00307	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00308	5d		 pop	 ebp
  00309	c2 34 00	 ret	 52			; 00000034H
$LN43@Set:

; 328  : 	}
; 329  : 	else if ( skill == 23  )

  0030c	83 ff 17	 cmp	 edi, 23			; 00000017H
  0030f	75 0d		 jne	 SHORT $LN41@Set

; 330  : 	{
; 331  : 		this->m_RequireEnergy[skill] = 0;

  00311	89 9e 60 3a 00
	00		 mov	 DWORD PTR [esi+14944], ebx
  00317	5b		 pop	 ebx
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0031a	5d		 pop	 ebp
  0031b	c2 34 00	 ret	 52			; 00000034H
$LN41@Set:

; 332  : 	}
; 333  : 	else if ( skill == 25  )

  0031e	83 ff 19	 cmp	 edi, 25			; 00000019H
  00321	75 0d		 jne	 SHORT $LN39@Set

; 334  : 	{
; 335  : 		this->m_RequireEnergy[skill] = 0;

  00323	89 9e 68 3a 00
	00		 mov	 DWORD PTR [esi+14952], ebx
  00329	5b		 pop	 ebx
  0032a	5f		 pop	 edi
  0032b	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0032c	5d		 pop	 ebp
  0032d	c2 34 00	 ret	 52			; 00000034H
$LN39@Set:

; 336  : 	}
; 337  : 	else if ( skill == 56  )

  00330	83 ff 38	 cmp	 edi, 56			; 00000038H
  00333	75 0d		 jne	 SHORT $LN37@Set

; 338  : 	{
; 339  : 		this->m_RequireEnergy[skill] = 0;

  00335	89 9e e4 3a 00
	00		 mov	 DWORD PTR [esi+15076], ebx
  0033b	5b		 pop	 ebx
  0033c	5f		 pop	 edi
  0033d	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0033e	5d		 pop	 ebp
  0033f	c2 34 00	 ret	 52			; 00000034H
$LN37@Set:

; 340  : 	}
; 341  : 	else if ( skill == 60  )

  00342	83 ff 3c	 cmp	 edi, 60			; 0000003cH
  00345	75 0d		 jne	 SHORT $LN35@Set

; 342  : 	{
; 343  : 		this->m_RequireEnergy[skill] = 0;

  00347	89 9e f4 3a 00
	00		 mov	 DWORD PTR [esi+15092], ebx
  0034d	5b		 pop	 ebx
  0034e	5f		 pop	 edi
  0034f	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00350	5d		 pop	 ebp
  00351	c2 34 00	 ret	 52			; 00000034H
$LN35@Set:

; 344  : 	}
; 345  : 	else if ( skill == 44  )

  00354	83 ff 2c	 cmp	 edi, 44			; 0000002cH
  00357	75 0d		 jne	 SHORT $LN33@Set

; 346  : 	{
; 347  : 		this->m_RequireEnergy[skill] = 0;

  00359	89 9e b4 3a 00
	00		 mov	 DWORD PTR [esi+15028], ebx
  0035f	5b		 pop	 ebx
  00360	5f		 pop	 edi
  00361	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00362	5d		 pop	 ebp
  00363	c2 34 00	 ret	 52			; 00000034H
$LN33@Set:

; 348  : 	}
; 349  : 	else if ( skill == 45  )

  00366	83 ff 2d	 cmp	 edi, 45			; 0000002dH
  00369	75 0d		 jne	 SHORT $LN31@Set

; 350  : 	{
; 351  : 		this->m_RequireEnergy[skill] = 0;

  0036b	89 9e b8 3a 00
	00		 mov	 DWORD PTR [esi+15032], ebx
  00371	5b		 pop	 ebx
  00372	5f		 pop	 edi
  00373	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00374	5d		 pop	 ebp
  00375	c2 34 00	 ret	 52			; 00000034H
$LN31@Set:

; 352  : 	}
; 353  : 	else if ( skill == 46  )

  00378	83 ff 2e	 cmp	 edi, 46			; 0000002eH
  0037b	75 0d		 jne	 SHORT $LN29@Set

; 354  : 	{
; 355  : 		this->m_RequireEnergy[skill] = 0;

  0037d	89 9e bc 3a 00
	00		 mov	 DWORD PTR [esi+15036], ebx
  00383	5b		 pop	 ebx
  00384	5f		 pop	 edi
  00385	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00386	5d		 pop	 ebp
  00387	c2 34 00	 ret	 52			; 00000034H
$LN29@Set:

; 356  : 	}
; 357  : 	else if ( skill == 57  )

  0038a	83 ff 39	 cmp	 edi, 57			; 00000039H
  0038d	75 0d		 jne	 SHORT $LN27@Set

; 358  : 	{
; 359  : 		this->m_RequireEnergy[skill] = 0;

  0038f	89 9e e8 3a 00
	00		 mov	 DWORD PTR [esi+15080], ebx
  00395	5b		 pop	 ebx
  00396	5f		 pop	 edi
  00397	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00398	5d		 pop	 ebp
  00399	c2 34 00	 ret	 52			; 00000034H
$LN27@Set:

; 360  : 	}
; 361  : 	else if ( skill == 73  )

  0039c	83 ff 49	 cmp	 edi, 73			; 00000049H
  0039f	75 0d		 jne	 SHORT $LN25@Set

; 362  : 	{
; 363  : 		this->m_RequireEnergy[skill] = 0;

  003a1	89 9e 28 3b 00
	00		 mov	 DWORD PTR [esi+15144], ebx
  003a7	5b		 pop	 ebx
  003a8	5f		 pop	 edi
  003a9	5e		 pop	 esi

; 412  : 	}
; 413  : }

  003aa	5d		 pop	 ebp
  003ab	c2 34 00	 ret	 52			; 00000034H
$LN25@Set:

; 364  : 	}
; 365  : 	else if ( skill == 74  )

  003ae	83 ff 4a	 cmp	 edi, 74			; 0000004aH
  003b1	75 0d		 jne	 SHORT $LN23@Set

; 366  : 	{
; 367  : 		this->m_RequireEnergy[skill] = 0;

  003b3	89 9e 2c 3b 00
	00		 mov	 DWORD PTR [esi+15148], ebx
  003b9	5b		 pop	 ebx
  003ba	5f		 pop	 edi
  003bb	5e		 pop	 esi

; 412  : 	}
; 413  : }

  003bc	5d		 pop	 ebp
  003bd	c2 34 00	 ret	 52			; 00000034H
$LN23@Set:

; 368  : 	}
; 369  : 	else if ( skill == 67  )

  003c0	83 ff 43	 cmp	 edi, 67			; 00000043H
  003c3	75 0d		 jne	 SHORT $LN21@Set

; 370  : 	{
; 371  : 		this->m_RequireEnergy[skill] = 0;

  003c5	89 9e 10 3b 00
	00		 mov	 DWORD PTR [esi+15120], ebx
  003cb	5b		 pop	 ebx
  003cc	5f		 pop	 edi
  003cd	5e		 pop	 esi

; 412  : 	}
; 413  : }

  003ce	5d		 pop	 ebp
  003cf	c2 34 00	 ret	 52			; 00000034H
$LN21@Set:

; 372  : 	}
; 373  : 	else if ( skill == 68  )

  003d2	83 ff 44	 cmp	 edi, 68			; 00000044H
  003d5	75 0d		 jne	 SHORT $LN19@Set

; 374  : 	{
; 375  : 		this->m_RequireEnergy[skill] = 0;

  003d7	89 9e 14 3b 00
	00		 mov	 DWORD PTR [esi+15124], ebx
  003dd	5b		 pop	 ebx
  003de	5f		 pop	 edi
  003df	5e		 pop	 esi

; 412  : 	}
; 413  : }

  003e0	5d		 pop	 ebp
  003e1	c2 34 00	 ret	 52			; 00000034H
$LN19@Set:

; 376  : 	}
; 377  : 	else if ( skill == 69  )

  003e4	83 ff 45	 cmp	 edi, 69			; 00000045H
  003e7	75 0d		 jne	 SHORT $LN17@Set

; 378  : 	{
; 379  : 		this->m_RequireEnergy[skill] = 0;

  003e9	89 9e 18 3b 00
	00		 mov	 DWORD PTR [esi+15128], ebx
  003ef	5b		 pop	 ebx
  003f0	5f		 pop	 edi
  003f1	5e		 pop	 esi

; 412  : 	}
; 413  : }

  003f2	5d		 pop	 ebp
  003f3	c2 34 00	 ret	 52			; 00000034H
$LN17@Set:

; 380  : 	}
; 381  : 	else if ( skill == 70  )

  003f6	83 ff 46	 cmp	 edi, 70			; 00000046H
  003f9	75 0d		 jne	 SHORT $LN15@Set

; 382  : 	{
; 383  : 		this->m_RequireEnergy[skill] = 0;

  003fb	89 9e 1c 3b 00
	00		 mov	 DWORD PTR [esi+15132], ebx
  00401	5b		 pop	 ebx
  00402	5f		 pop	 edi
  00403	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00404	5d		 pop	 ebp
  00405	c2 34 00	 ret	 52			; 00000034H
$LN15@Set:

; 384  : 	}
; 385  : 	else if ( skill == 71  )

  00408	83 ff 47	 cmp	 edi, 71			; 00000047H
  0040b	75 0d		 jne	 SHORT $LN13@Set

; 386  : 	{
; 387  : 		this->m_RequireEnergy[skill] = 0;

  0040d	89 9e 20 3b 00
	00		 mov	 DWORD PTR [esi+15136], ebx
  00413	5b		 pop	 ebx
  00414	5f		 pop	 edi
  00415	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00416	5d		 pop	 ebp
  00417	c2 34 00	 ret	 52			; 00000034H
$LN13@Set:

; 388  : 	}
; 389  : 	else if ( skill == 72  )

  0041a	83 ff 48	 cmp	 edi, 72			; 00000048H
  0041d	75 0d		 jne	 SHORT $LN11@Set

; 390  : 	{
; 391  : 		this->m_RequireEnergy[skill] = 0;

  0041f	89 9e 24 3b 00
	00		 mov	 DWORD PTR [esi+15140], ebx
  00425	5b		 pop	 ebx
  00426	5f		 pop	 edi
  00427	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00428	5d		 pop	 ebp
  00429	c2 34 00	 ret	 52			; 00000034H
$LN11@Set:

; 392  : 	}
; 393  : 	else if ( skill == 76  )

  0042c	83 ff 4c	 cmp	 edi, 76			; 0000004cH
  0042f	75 0d		 jne	 SHORT $LN9@Set

; 394  : 	{
; 395  : 		this->m_RequireEnergy[skill] = 0;

  00431	89 9e 34 3b 00
	00		 mov	 DWORD PTR [esi+15156], ebx
  00437	5b		 pop	 ebx
  00438	5f		 pop	 edi
  00439	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0043a	5d		 pop	 ebp
  0043b	c2 34 00	 ret	 52			; 00000034H
$LN9@Set:

; 396  : 	}
; 397  : 	else if ( skill == 77  )

  0043e	83 ff 4d	 cmp	 edi, 77			; 0000004dH
  00441	75 0d		 jne	 SHORT $LN7@Set

; 398  : 	{
; 399  : 		this->m_RequireEnergy[skill] = 0;

  00443	89 9e 38 3b 00
	00		 mov	 DWORD PTR [esi+15160], ebx
  00449	5b		 pop	 ebx
  0044a	5f		 pop	 edi
  0044b	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0044c	5d		 pop	 ebp
  0044d	c2 34 00	 ret	 52			; 00000034H
$LN7@Set:

; 400  : 	}
; 401  : 	else if ( skill == 78  )

  00450	83 ff 4e	 cmp	 edi, 78			; 0000004eH
  00453	75 0d		 jne	 SHORT $LN5@Set

; 402  : 	{
; 403  : 		this->m_RequireEnergy[skill] = 0;

  00455	89 9e 3c 3b 00
	00		 mov	 DWORD PTR [esi+15164], ebx
  0045b	5b		 pop	 ebx
  0045c	5f		 pop	 edi
  0045d	5e		 pop	 esi

; 412  : 	}
; 413  : }

  0045e	5d		 pop	 ebp
  0045f	c2 34 00	 ret	 52			; 00000034H
$LN5@Set:

; 404  : 	}
; 405  : 	else if ( skill == 79  )

  00462	83 ff 4f	 cmp	 edi, 79			; 0000004fH
  00465	75 0d		 jne	 SHORT $LN3@Set

; 406  : 	{
; 407  : 		this->m_RequireEnergy[skill] = 0;

  00467	89 9e 40 3b 00
	00		 mov	 DWORD PTR [esi+15168], ebx
  0046d	5b		 pop	 ebx
  0046e	5f		 pop	 edi
  0046f	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00470	5d		 pop	 ebp
  00471	c2 34 00	 ret	 52			; 00000034H
$LN3@Set:

; 408  : 	}
; 409  : 	else if ( skill == 62  )

  00474	83 ff 3e	 cmp	 edi, 62			; 0000003eH
  00477	0f 85 b2 fc ff
	ff		 jne	 $LN114@Set

; 410  : 	{
; 411  : 		this->m_RequireEnergy[skill] = 0;

  0047d	89 9e fc 3a 00
	00		 mov	 DWORD PTR [esi+15100], ebx
  00483	5b		 pop	 ebx
  00484	5f		 pop	 edi
  00485	5e		 pop	 esi

; 412  : 	}
; 413  : }

  00486	5d		 pop	 ebp
  00487	c2 34 00	 ret	 52			; 00000034H
$LN101@Set:

; 180  : 	{
; 181  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0048a	68 b5 00 00 00	 push	 181			; 000000b5H
  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00494	68 c9 01 00 00	 push	 457			; 000001c9H
  00499	e9 8e fb ff ff	 jmp	 $LN115@Set
?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z ENDP		; CMagicDamage::Set
_TEXT	ENDS
PUBLIC	?Get@CMagicDamage@@AAEHH@Z			; CMagicDamage::Get
; Function compile flags: /Ogtp
;	COMDAT ?Get@CMagicDamage@@AAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?Get@CMagicDamage@@AAEHH@Z PROC				; CMagicDamage::Get, COMDAT
; _this$ = ecx

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000e	77 1a		 ja	 SHORT $LN2@Get

; 421  : 	}
; 422  : 
; 423  : 	if ( this->m_Damage[skill] == -1 )

  00010	8b 44 86 04	 mov	 eax, DWORD PTR [esi+eax*4+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 38		 jne	 SHORT $LN4@Get

; 424  : 	{
; 425  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 a9 01 00 00	 push	 425			; 000001a9H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 426  : 		return this->m_Damage[0];

  00028	eb 0f		 jmp	 SHORT $LN6@Get
$LN2@Get:

; 418  : 	{
; 419  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 a3 01 00 00	 push	 419			; 000001a3H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@Get:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00043	50		 push	 eax
  00044	6a 00		 push	 0
  00046	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 420  : 		return this->m_Damage[0];

  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@Get:
  00051	5e		 pop	 esi

; 427  : 	}
; 428  : 
; 429  : 	return this->m_Damage[skill];
; 430  : }

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?Get@CMagicDamage@@AAEHH@Z ENDP				; CMagicDamage::Get
_TEXT	ENDS
PUBLIC	?SkillGet@CMagicDamage@@QAEHH@Z			; CMagicDamage::SkillGet
; Function compile flags: /Ogtp
;	COMDAT ?SkillGet@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGet@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::SkillGet, COMDAT
; _this$ = ecx

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 434  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000e	77 1a		 ja	 SHORT $LN2@SkillGet

; 438  : 	}
; 439  : 
; 440  : 	if ( this->m_Damage[skill] == -1 )

  00010	8b 44 86 04	 mov	 eax, DWORD PTR [esi+eax*4+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 38		 jne	 SHORT $LN4@SkillGet

; 441  : 	{
; 442  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 ba 01 00 00	 push	 442			; 000001baH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 443  : 		return this->m_Damage[0];

  00028	eb 0f		 jmp	 SHORT $LN6@SkillGet
$LN2@SkillGet:

; 435  : 	{
; 436  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 b4 01 00 00	 push	 436			; 000001b4H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGet:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00043	50		 push	 eax
  00044	6a 00		 push	 0
  00046	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 437  : 		return this->m_Damage[0];

  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@SkillGet:
  00051	5e		 pop	 esi

; 444  : 	}
; 445  : 
; 446  : 	return this->m_Damage[skill];
; 447  : }

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?SkillGet@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::SkillGet
_TEXT	ENDS
PUBLIC	?SkillGetMana@CMagicDamage@@QAEHH@Z		; CMagicDamage::SkillGetMana
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetMana@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetMana@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::SkillGetMana, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 451  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000e	77 40		 ja	 SHORT $LN2@SkillGetMa

; 455  : 	}
; 456  : 
; 457  : 	if ( this->m_Damage[skill] == -1 )

  00010	83 7c 86 04 ff	 cmp	 DWORD PTR [esi+eax*4+4], -1
  00015	75 2c		 jne	 SHORT $LN1@SkillGetMa

; 458  : 	{
; 459  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00017	68 cb 01 00 00	 push	 459			; 000001cbH
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00021	68 ca 01 00 00	 push	 458			; 000001caH
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00030	50		 push	 eax
  00031	6a 00		 push	 0
  00033	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 460  : 		return this->m_Damage[0];

  00038	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
  0003e	5e		 pop	 esi

; 464  : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
$LN1@SkillGetMa:

; 461  : 	}
; 462  : 
; 463  : 	return this->m_Mana[skill];

  00043	0f b7 84 46 04
	37 00 00	 movzx	 eax, WORD PTR [esi+eax*2+14084]
  0004b	5e		 pop	 esi

; 464  : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN2@SkillGetMa:

; 452  : 	{
; 453  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00050	68 c5 01 00 00	 push	 453			; 000001c5H
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0005a	68 c9 01 00 00	 push	 457			; 000001c9H
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00064	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00069	50		 push	 eax
  0006a	6a 00		 push	 0
  0006c	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 454  : 		return this->m_Mana[0];

  00071	0f b7 86 04 37
	00 00		 movzx	 eax, WORD PTR [esi+14084]
  00078	83 c4 10	 add	 esp, 16			; 00000010H
  0007b	5e		 pop	 esi

; 464  : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?SkillGetMana@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::SkillGetMana
_TEXT	ENDS
PUBLIC	?SkillGetBP@CMagicDamage@@QAEHH@Z		; CMagicDamage::SkillGetBP
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetBP@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetBP@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::SkillGetBP, COMDAT
; _this$ = ecx

; 467  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 468  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 24		 ja	 SHORT $LN2@SkillGetBP

; 472  : 	}
; 473  : 
; 474  : 	if ( this->m_Damage[skill] == -1 )

  0000d	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  00012	75 11		 jne	 SHORT $LN1@SkillGetBP

; 475  : 	{
; 476  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00014	68 dc 01 00 00	 push	 476			; 000001dcH
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0001e	68 ca 01 00 00	 push	 458			; 000001caH

; 477  : 		return 0;

  00023	eb 1b		 jmp	 SHORT $LN6@SkillGetBP
$LN1@SkillGetBP:

; 478  : 	}
; 479  : 
; 480  : 	return this->m_BrainPower[skill];

  00025	0f b7 84 41 04
	4f 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+20228]

; 481  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN2@SkillGetBP:

; 469  : 	{
; 470  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00031	68 d6 01 00 00	 push	 470			; 000001d6H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0003b	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGetBP:
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00045	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0004a	50		 push	 eax
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 471  : 		return 0;

  00055	33 c0		 xor	 eax, eax

; 481  : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?SkillGetBP@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::SkillGetBP
_TEXT	ENDS
PUBLIC	?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z	; CMagicDamage::SkillGetRequireEnergy
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::SkillGetRequireEnergy, COMDAT
; _this$ = ecx

; 484  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 485  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 1d		 ja	 SHORT $LN2@SkillGetRe

; 489  : 	}
; 490  : 
; 491  : 	if ( this->m_RequireEnergy[skill] == -1 )

  0000d	8b 84 81 04 3a
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+14852]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 38		 jne	 SHORT $LN4@SkillGetRe

; 492  : 	{
; 493  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 ed 01 00 00	 push	 493			; 000001edH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 494  : 		return -1;

  00028	eb 0f		 jmp	 SHORT $LN6@SkillGetRe
$LN2@SkillGetRe:

; 486  : 	{
; 487  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 e7 01 00 00	 push	 487			; 000001e7H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGetRe:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00043	50		 push	 eax
  00044	6a 00		 push	 0
  00046	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 488  : 		return -1;

  0004e	83 c8 ff	 or	 eax, -1
$LN4@SkillGetRe:

; 495  : 	}
; 496  : 
; 497  : 	return this->m_RequireEnergy[skill];
; 498  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::SkillGetRequireEnergy
_TEXT	ENDS
PUBLIC	?SkillGetRequireClass@CMagicDamage@@QAEHHHH@Z	; CMagicDamage::SkillGetRequireClass
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetRequireClass@CMagicDamage@@QAEHHHH@Z
_TEXT	SEGMENT
_Cclass$ = 8						; size = 4
_ChangeUP$ = 12						; size = 4
_skill$ = 16						; size = 4
?SkillGetRequireClass@CMagicDamage@@QAEHHHH@Z PROC	; CMagicDamage::SkillGetRequireClass, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 502  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 10	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 46		 ja	 SHORT $LN6@SkillGetRe@2

; 506  : 	}
; 507  : 
; 508  : 	if ( Cclass < 0 || Cclass > MAX_TYPE_PLAYER-1 )

  0000d	8b 55 08	 mov	 edx, DWORD PTR _Cclass$[ebp]
  00010	83 fa 04	 cmp	 edx, 4
  00013	77 2d		 ja	 SHORT $LN4@SkillGetRe@2

; 512  : 	}
; 513  : 
; 514  : 	int requireclass = this->m_RequireClass[skill][Cclass];

  00015	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00018	03 d0		 add	 edx, eax
  0001a	0f b6 84 0a 04
	3e 00 00	 movzx	 eax, BYTE PTR [edx+ecx+15876]

; 515  : 
; 516  : 	if ( requireclass == 0 )

  00022	85 c0		 test	 eax, eax
  00024	75 06		 jne	 SHORT $LN3@SkillGetRe@2
$LN11@SkillGetRe@2:

; 517  : 	{
; 518  : 		return FALSE;

  00026	33 c0		 xor	 eax, eax

; 530  : }

  00028	5d		 pop	 ebp
  00029	c2 0c 00	 ret	 12			; 0000000cH
$LN3@SkillGetRe@2:

; 519  : 	}
; 520  : 
; 521  : 	if ( requireclass > 1 )

  0002c	83 f8 01	 cmp	 eax, 1
  0002f	7e 08		 jle	 SHORT $LN1@SkillGetRe@2

; 522  : 	{
; 523  : 		if ( requireclass != (ChangeUP+1) )

  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _ChangeUP$[ebp]
  00034	41		 inc	 ecx
  00035	3b c1		 cmp	 eax, ecx

; 524  : 		{
; 525  : 			return FALSE;

  00037	75 ed		 jne	 SHORT $LN11@SkillGetRe@2
$LN1@SkillGetRe@2:

; 526  : 		}
; 527  : 	}
; 528  : 
; 529  : 	return TRUE;

  00039	b8 01 00 00 00	 mov	 eax, 1

; 530  : }

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
$LN4@SkillGetRe@2:

; 509  : 	{
; 510  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00042	68 fe 01 00 00	 push	 510			; 000001feH
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0004c	68 ca 01 00 00	 push	 458			; 000001caH

; 511  : 		return -1;

  00051	eb 0f		 jmp	 SHORT $LN10@SkillGetRe@2
$LN6@SkillGetRe@2:

; 503  : 	{
; 504  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00053	68 f8 01 00 00	 push	 504			; 000001f8H
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0005d	68 c9 01 00 00	 push	 457			; 000001c9H
$LN10@SkillGetRe@2:
  00062	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00067	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0006c	50		 push	 eax
  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00074	83 c4 10	 add	 esp, 16			; 00000010H

; 505  : 		return -1;

  00077	83 c8 ff	 or	 eax, -1

; 530  : }

  0007a	5d		 pop	 ebp
  0007b	c2 0c 00	 ret	 12			; 0000000cH
?SkillGetRequireClass@CMagicDamage@@QAEHHHH@Z ENDP	; CMagicDamage::SkillGetRequireClass
_TEXT	ENDS
PUBLIC	?GetSkillAttr@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillAttr
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillAttr@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillAttr@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillAttr, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 534  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 0b		 ja	 SHORT $LN1@GetSkillAt

; 537  : 	}
; 538  : 
; 539  : 	return this->m_Attr[skill];

  0000d	8b 84 81 04 51
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+20740]

; 540  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetSkillAt:

; 535  : 	{
; 536  : 		return -1;

  00018	83 c8 ff	 or	 eax, -1

; 540  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetSkillAttr@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillAttr
_TEXT	ENDS
PUBLIC	?CheckSkillAttr@CMagicDamage@@AAEHHH@Z		; CMagicDamage::CheckSkillAttr
; Function compile flags: /Ogtp
;	COMDAT ?CheckSkillAttr@CMagicDamage@@AAEHHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
_attr$ = 12						; size = 4
?CheckSkillAttr@CMagicDamage@@AAEHHH@Z PROC		; CMagicDamage::CheckSkillAttr, COMDAT
; _this$ = ecx

; 543  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 544  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 0b		 ja	 SHORT $LN1@CheckSkill

; 547  : 	}
; 548  : 
; 549  : 	return this->m_Attr[skill];

  0000d	8b 84 81 04 51
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+20740]

; 550  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
$LN1@CheckSkill:

; 545  : 	{
; 546  : 		return FALSE;

  00018	33 c0		 xor	 eax, eax

; 550  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?CheckSkillAttr@CMagicDamage@@AAEHHH@Z ENDP		; CMagicDamage::CheckSkillAttr
_TEXT	ENDS
PUBLIC	?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetskillRequireLeadership
; Function compile flags: /Ogtp
;	COMDAT ?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::GetskillRequireLeadership, COMDAT
; _this$ = ecx

; 553  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 554  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 1d		 ja	 SHORT $LN2@GetskillRe

; 558  : 	}
; 559  : 
; 560  : 	if ( this->m_RequireLeadership[skill] == -1 )

  0000d	8b 84 81 04 47
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+18180]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 38		 jne	 SHORT $LN4@GetskillRe

; 561  : 	{
; 562  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 32 02 00 00	 push	 562			; 00000232H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 563  : 		return -1;

  00028	eb 0f		 jmp	 SHORT $LN6@GetskillRe
$LN2@GetskillRe:

; 555  : 	{
; 556  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 2c 02 00 00	 push	 556			; 0000022cH
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@GetskillRe:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00043	50		 push	 eax
  00044	6a 00		 push	 0
  00046	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 557  : 		return -1;

  0004e	83 c8 ff	 or	 eax, -1
$LN4@GetskillRe:

; 564  : 	}
; 565  : 
; 566  : 	return this->m_RequireLeadership[skill];
; 567  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::GetskillRequireLeadership
_TEXT	ENDS
PUBLIC	?GetDelayTime@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetDelayTime
; Function compile flags: /Ogtp
;	COMDAT ?GetDelayTime@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetDelayTime@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetDelayTime, COMDAT
; _this$ = ecx

; 570  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 0b		 ja	 SHORT $LN1@GetDelayTi

; 575  : 	}
; 576  : 
; 577  : 	return this->m_Delay[skill];

  0000d	8b 84 81 04 4b
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+19204]

; 578  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetDelayTi:

; 572  : 	{
; 573  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 3d 02 00 00	 push	 573			; 0000023dH
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00039	83 c4 10	 add	 esp, 16			; 00000010H

; 574  : 		return 0;

  0003c	33 c0		 xor	 eax, eax

; 578  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?GetDelayTime@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetDelayTime
_TEXT	ENDS
PUBLIC	?GetSkillType@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillType
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillType@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?GetSkillType@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillType, COMDAT
; _this$ = ecx

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 0b		 ja	 SHORT $LN1@GetSkillTy

; 586  : 	}
; 587  : 	
; 588  : 	return this->m_iSkillType[iSkill];

  0000d	8b 84 81 04 55
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+21764]

; 589  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetSkillTy:

; 583  : 	{
; 584  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 48 02 00 00	 push	 584			; 00000248H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00039	83 c4 10	 add	 esp, 16			; 00000010H

; 585  : 		return 0;

  0003c	33 c0		 xor	 eax, eax

; 589  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?GetSkillType@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillType
_TEXT	ENDS
PUBLIC	?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z	; CMagicDamage::SkillGetRequireLevel
; Function compile flags: /Ogtp
;	COMDAT ?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::SkillGetRequireLevel, COMDAT
; _this$ = ecx

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 0b		 ja	 SHORT $LN1@SkillGetRe@3

; 597  : 	}
; 598  : 
; 599  : 	return this->m_RequireLevel[skill];

  0000d	8b 84 81 04 43
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+17156]

; 600  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@SkillGetRe@3:

; 594  : 	{
; 595  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 53 02 00 00	 push	 595			; 00000253H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00039	83 c4 10	 add	 esp, 16			; 00000010H

; 596  : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 600  : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::SkillGetRequireLevel
_TEXT	ENDS
PUBLIC	?CheckStatus@CMagicDamage@@QAEHHH@Z		; CMagicDamage::CheckStatus
; Function compile flags: /Ogtp
;	COMDAT ?CheckStatus@CMagicDamage@@QAEHHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iGuildStatus$ = 12					; size = 4
?CheckStatus@CMagicDamage@@QAEHHH@Z PROC		; CMagicDamage::CheckStatus, COMDAT
; _this$ = ecx

; 603  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 604  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 5f		 ja	 SHORT $LN10@CheckStatu

; 608  : 	}
; 609  : 
; 610  : 	if ( this->m_iSkillUseType[iSkill] == 0 )

  0000d	83 bc 81 04 59
	00 00 00	 cmp	 DWORD PTR [ecx+eax*4+22788], 0

; 611  : 	{
; 612  : 		return TRUE;

  00015	74 18		 je	 SHORT $LN14@CheckStatu

; 613  : 	}
; 614  : 
; 615  : 	if ( iGuildStatus == 0x80 )

  00017	8b 55 0c	 mov	 edx, DWORD PTR _iGuildStatus$[ebp]
  0001a	81 fa 80 00 00
	00		 cmp	 edx, 128		; 00000080H
  00020	75 16		 jne	 SHORT $LN8@CheckStatu

; 616  : 	{
; 617  : 		if ( this->m_iRequireStatus[iSkill][0] == 1 )

  00022	8d 84 40 41 19
	00 00		 lea	 eax, DWORD PTR [eax+eax*2+6465]
  00029	83 3c 81 01	 cmp	 DWORD PTR [ecx+eax*4], 1
  0002d	75 61		 jne	 SHORT $LN1@CheckStatu
$LN14@CheckStatu:

; 618  : 		{
; 619  : 			return TRUE;

  0002f	b8 01 00 00 00	 mov	 eax, 1

; 634  : 		}
; 635  : 	}
; 636  : 
; 637  : 	return FALSE;
; 638  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN8@CheckStatu:

; 620  : 		}
; 621  : 	}
; 622  : 	else if ( iGuildStatus == 0x40 )

  00038	83 fa 40	 cmp	 edx, 64			; 00000040H
  0003b	75 16		 jne	 SHORT $LN5@CheckStatu

; 623  : 	{
; 624  : 		if ( this->m_iRequireStatus[iSkill][1] == 1 )

  0003d	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00040	83 bc 91 08 65
	00 00 01	 cmp	 DWORD PTR [ecx+edx*4+25864], 1
  00048	75 46		 jne	 SHORT $LN1@CheckStatu

; 625  : 		{
; 626  : 			return TRUE;

  0004a	b8 01 00 00 00	 mov	 eax, 1

; 634  : 		}
; 635  : 	}
; 636  : 
; 637  : 	return FALSE;
; 638  : }

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
$LN5@CheckStatu:

; 627  : 		}
; 628  : 	}
; 629  : 	else if ( iGuildStatus == 0x20 )

  00053	83 fa 20	 cmp	 edx, 32			; 00000020H
  00056	75 38		 jne	 SHORT $LN1@CheckStatu

; 630  : 	{
; 631  : 		if ( this->m_iRequireStatus[iSkill][2] == 1 )

  00058	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005b	83 bc 81 0c 65
	00 00 01	 cmp	 DWORD PTR [ecx+eax*4+25868], 1
  00063	75 2b		 jne	 SHORT $LN1@CheckStatu

; 632  : 		{
; 633  : 			return TRUE;

  00065	8d 42 e1	 lea	 eax, DWORD PTR [edx-31]

; 634  : 		}
; 635  : 	}
; 636  : 
; 637  : 	return FALSE;
; 638  : }

  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
$LN10@CheckStatu:

; 605  : 	{
; 606  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0006c	68 5e 02 00 00	 push	 606			; 0000025eH
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00076	68 c9 01 00 00	 push	 457			; 000001c9H
  0007b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00080	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0008d	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@CheckStatu:

; 607  : 		return 0;

  00090	33 c0		 xor	 eax, eax

; 634  : 		}
; 635  : 	}
; 636  : 
; 637  : 	return FALSE;
; 638  : }

  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
?CheckStatus@CMagicDamage@@QAEHHH@Z ENDP		; CMagicDamage::CheckStatus
_TEXT	ENDS
PUBLIC	?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z	; CMagicDamage::CheckBrandOfSkill
; Function compile flags: /Ogtp
;	COMDAT ?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::CheckBrandOfSkill, COMDAT
; _this$ = ecx

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 642  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 12		 ja	 SHORT $LN2@CheckBrand

; 646  : 	}
; 647  : 
; 648  : 	if ( this->m_iSkillBrand[iSkill] > 0 )

  0000d	33 d2		 xor	 edx, edx
  0000f	39 94 81 04 5d
	00 00		 cmp	 DWORD PTR [ecx+eax*4+23812], edx
  00016	0f 9f c2	 setg	 dl
  00019	8b c2		 mov	 eax, edx

; 649  : 	{
; 650  : 		return TRUE;
; 651  : 	}
; 652  : 
; 653  : 	return FALSE;
; 654  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN2@CheckBrand:

; 643  : 	{
; 644  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0001f	68 84 02 00 00	 push	 644			; 00000284H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00029	68 c9 01 00 00	 push	 457			; 000001c9H
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00033	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00038	50		 push	 eax
  00039	6a 00		 push	 0
  0003b	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00040	83 c4 10	 add	 esp, 16			; 00000010H

; 645  : 		return 0;

  00043	33 c0		 xor	 eax, eax

; 649  : 	{
; 650  : 		return TRUE;
; 651  : 	}
; 652  : 
; 653  : 	return FALSE;
; 654  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::CheckBrandOfSkill
_TEXT	ENDS
PUBLIC	?CheckKillCount@CMagicDamage@@QAEHHH@Z		; CMagicDamage::CheckKillCount
; Function compile flags: /Ogtp
;	COMDAT ?CheckKillCount@CMagicDamage@@QAEHHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iKillCount$ = 12					; size = 4
?CheckKillCount@CMagicDamage@@QAEHHH@Z PROC		; CMagicDamage::CheckKillCount, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 658  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00006	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  0000c	77 0e		 ja	 SHORT $LN1@CheckKillC

; 662  : 	}
; 663  : 
; 664  : 	return iKillCount - this->m_iKillCount[iSkill];

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _iKillCount$[ebp]
  00011	2b 84 91 04 61
	00 00		 sub	 eax, DWORD PTR [ecx+edx*4+24836]

; 665  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
$LN1@CheckKillC:

; 659  : 	{
; 660  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0001c	68 94 02 00 00	 push	 660			; 00000294H
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00026	68 c9 01 00 00	 push	 457			; 000001c9H
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00030	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00035	50		 push	 eax
  00036	6a 00		 push	 0
  00038	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 661  : 		return -1;

  00040	83 c8 ff	 or	 eax, -1

; 665  : }

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?CheckKillCount@CMagicDamage@@QAEHHH@Z ENDP		; CMagicDamage::CheckKillCount
_TEXT	ENDS
PUBLIC	?GetSkillDistance@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillDistance
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillDistance@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillDistance@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillDistance, COMDAT
; _this$ = ecx

; 669  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 670  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 0c		 ja	 SHORT $LN1@GetSkillDi

; 674  : 	}
; 675  : 
; 676  : 	return this->m_Distance[skill];

  0000d	0f b6 84 08 04
	39 00 00	 movzx	 eax, BYTE PTR [eax+ecx+14596]

; 677  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetSkillDi:

; 671  : 	{
; 672  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 a0 02 00 00	 push	 672			; 000002a0H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00032	50		 push	 eax
  00033	6a 00		 push	 0
  00035	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 673  : 		return -1;

  0003d	83 c8 ff	 or	 eax, -1

; 677  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?GetSkillDistance@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillDistance
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMagicDamage@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMagicDamage@@UAEPAXI@Z PROC			; CMagicDamage::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMagicDamage@@UAE@XZ	; CMagicDamage::~CMagicDamage
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMagicDamage@@UAEPAXI@Z ENDP			; CMagicDamage::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	_filename$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LogSkillList@CMagicDamage@@QAEXPAD@Z		; CMagicDamage::LogSkillList
EXTRN	_fclose:PROC
EXTRN	?Set@CMagicInf@@QAEHEE@Z:PROC			; CMagicInf::Set
EXTRN	?DefMagicInf@@3PAVCMagicInf@@A:BYTE		; DefMagicInf
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LogSkillList@CMagicDamage@@QAEXPAD@Z
_TEXT	SEGMENT
_iSkillType$ = -136					; size = 4
_rDelay$ = -132						; size = 4
_rEnergy$ = -128					; size = 4
_this$GSCopy$ = -124					; size = 4
_rLeadership$ = -120					; size = 4
_attr$ = -116						; size = 4
_filename$GSCopy$ = -112				; size = 4
_mana$ = -108						; size = 4
_iSkillUseType$ = -104					; size = 4
_dis$ = -100						; size = 4
_iSkillBrand$ = -96					; size = 4
_iKillCount$ = -92					; size = 4
_bp$ = -88						; size = 4
_RequireStatus$ = -84					; size = 12
_RequireClass$ = -72					; size = 5
tv276 = -64						; size = 4
tv274 = -64						; size = 4
tv268 = -64						; size = 4
tv266 = -64						; size = 4
tv260 = -64						; size = 4
tv128 = -64						; size = 4
tv94 = -64						; size = 4
tv87 = -64						; size = 4
tv85 = -64						; size = 4
tv74 = -64						; size = 4
tv271 = -58						; size = 2
tv263 = -58						; size = 2
tv131 = -58						; size = 2
tv91 = -58						; size = 2
tv81 = -58						; size = 2
_name$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LogSkillList@CMagicDamage@@QAEXPAD@Z PROC		; CMagicDamage::LogSkillList, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]

; 82   : 
; 83   : 			Token = GetToken();

  00017	89 4d 84	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001a	89 75 90	 mov	 DWORD PTR _filename$GSCopy$[ebp], esi
  0001d	e8 00 00 00 00	 call	 ?Init@CMagicDamage@@QAEXXZ ; CMagicDamage::Init
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 _fopen
  0002d	83 c4 08	 add	 esp, 8
  00030	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax
  00035	85 c0		 test	 eax, eax
  00037	75 2a		 jne	 SHORT $LN5@LogSkillLi

; 36   : 	this->Init();
; 37   : 
; 38   : 
; 39   : 	SMDFile = fopen(filename, "r");
; 40   : 
; 41   : 	if ( SMDFile == NULL )
; 42   : 	{
; 43   : 		MsgBox(lMsg.Get(MSGGET(1, 199)), filename);

  00039	56		 push	 esi
  0003a	68 c7 01 00 00	 push	 455			; 000001c7H
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00044	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0004f	83 c4 08	 add	 esp, 8
  00052	5e		 pop	 esi

; 155  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN5@LogSkillLi:

; 44   : 		return;
; 45   : 	}
; 46   : 
; 47   : 	int Token;
; 48   : 	int n=0;
; 49   : 	int number;
; 50   : 	char name[50];
; 51   : 	int requireLevel;
; 52   : 	int damage;
; 53   : 	int mana;
; 54   : 	int bp=0;
; 55   : 	int dis;
; 56   : 	int rEnergy;
; 57   : 	int iSkillType;
; 58   : 	int rLeadership;
; 59   : 	int rDelay;
; 60   : 	int attr;
; 61   : 	int iSkillUseType;
; 62   : 	int iSkillBrand;
; 63   : 	int iKillCount;
; 64   : 	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};

  00063	33 c0		 xor	 eax, eax
  00065	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _RequireStatus$[ebp], 0
  0006c	89 45 b0	 mov	 DWORD PTR _RequireStatus$[ebp+4], eax
  0006f	89 45 b4	 mov	 DWORD PTR _RequireStatus$[ebp+8], eax

; 65   : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 66   : 
; 67   : 	while ( true )
; 68   : 	{
; 69   : 		Token = GetToken();

  00072	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 70   : 
; 71   : 		if ( Token == 2 )

  00077	83 f8 02	 cmp	 eax, 2
  0007a	0f 84 ad 02 00
	00		 je	 $LN12@LogSkillLi
  00080	53		 push	 ebx
  00081	57		 push	 edi
$LL4@LogSkillLi:

; 72   : 		{
; 73   : 			break;
; 74   : 		}
; 75   : 
; 76   : 		if ( Token == 1 )

  00082	83 f8 01	 cmp	 eax, 1
  00085	0f 85 92 02 00
	00		 jne	 $LN1@LogSkillLi

; 77   : 		{
; 78   : 			number = TokenNumber;

  0008b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00091	e8 00 00 00 00	 call	 __ftol2_sse
  00096	8b f0		 mov	 esi, eax

; 79   : 
; 80   : 			Token = GetToken();

  00098	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 81   : 			strcpy(name, TokenString);

  0009d	33 c0		 xor	 eax, eax
  0009f	90		 npad	 1
$LL8@LogSkillLi:
  000a0	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR _TokenString[eax]
  000a6	88 4c 05 c8	 mov	 BYTE PTR _name$[ebp+eax], cl
  000aa	40		 inc	 eax
  000ab	84 c9		 test	 cl, cl
  000ad	75 f1		 jne	 SHORT $LL8@LogSkillLi

; 82   : 
; 83   : 			Token = GetToken();

  000af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 84   : 			requireLevel = TokenNumber;

  000b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ba	e8 00 00 00 00	 call	 __ftol2_sse
  000bf	8b f8		 mov	 edi, eax

; 85   : 
; 86   : 			Token = GetToken();

  000c1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 87   : 			damage = TokenNumber;

  000c6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000cc	e8 00 00 00 00	 call	 __ftol2_sse
  000d1	8b d8		 mov	 ebx, eax

; 88   : 
; 89   : 			Token = GetToken();

  000d3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 90   : 			mana = TokenNumber;

  000d8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000de	e8 00 00 00 00	 call	 __ftol2_sse
  000e3	89 45 94	 mov	 DWORD PTR _mana$[ebp], eax

; 91   : 
; 92   : 			Token = GetToken();

  000e6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 93   : 			bp = TokenNumber;	// Agility Gauge

  000eb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000f1	e8 00 00 00 00	 call	 __ftol2_sse
  000f6	89 45 a8	 mov	 DWORD PTR _bp$[ebp], eax

; 94   : 
; 95   : 			Token = GetToken();

  000f9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 96   : 			dis = TokenNumber;

  000fe	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00104	e8 00 00 00 00	 call	 __ftol2_sse
  00109	89 45 9c	 mov	 DWORD PTR _dis$[ebp], eax

; 97   : 
; 98   : 			Token = GetToken();

  0010c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 99   : 			rDelay = TokenNumber;

  00111	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00117	e8 00 00 00 00	 call	 __ftol2_sse
  0011c	89 85 7c ff ff
	ff		 mov	 DWORD PTR _rDelay$[ebp], eax

; 100  : 
; 101  : 			Token = GetToken();

  00122	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 102  : 			rEnergy = TokenNumber;

  00127	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012d	e8 00 00 00 00	 call	 __ftol2_sse
  00132	89 45 80	 mov	 DWORD PTR _rEnergy$[ebp], eax

; 103  : 
; 104  : 			Token = GetToken();

  00135	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 105  : 			rLeadership = TokenNumber;

  0013a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00140	e8 00 00 00 00	 call	 __ftol2_sse
  00145	89 45 88	 mov	 DWORD PTR _rLeadership$[ebp], eax

; 106  : 
; 107  : 			Token = GetToken();

  00148	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 108  : 			attr = TokenNumber;

  0014d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00153	e8 00 00 00 00	 call	 __ftol2_sse
  00158	89 45 8c	 mov	 DWORD PTR _attr$[ebp], eax

; 109  : 
; 110  : 			Token = GetToken();

  0015b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 111  : 			iSkillType = TokenNumber;

  00160	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00166	e8 00 00 00 00	 call	 __ftol2_sse
  0016b	89 85 78 ff ff
	ff		 mov	 DWORD PTR _iSkillType$[ebp], eax

; 112  : 
; 113  : 			Token = GetToken();

  00171	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 			iSkillUseType = TokenNumber;

  00176	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0017c	e8 00 00 00 00	 call	 __ftol2_sse
  00181	89 45 98	 mov	 DWORD PTR _iSkillUseType$[ebp], eax

; 115  : 
; 116  : 			Token = GetToken();

  00184	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 			iSkillBrand = TokenNumber;

  00189	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0018f	e8 00 00 00 00	 call	 __ftol2_sse
  00194	89 45 a0	 mov	 DWORD PTR _iSkillBrand$[ebp], eax

; 118  : 
; 119  : 			Token = GetToken();

  00197	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 120  : 			iKillCount = TokenNumber;

  0019c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a2	e8 00 00 00 00	 call	 __ftol2_sse
  001a7	89 45 a4	 mov	 DWORD PTR _iKillCount$[ebp], eax

; 121  : 
; 122  : 			Token = GetToken();

  001aa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 			RequireStatus[0] = TokenNumber;

  001af	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b5	e8 00 00 00 00	 call	 __ftol2_sse
  001ba	89 45 ac	 mov	 DWORD PTR _RequireStatus$[ebp], eax

; 124  : 
; 125  : 			Token = GetToken();

  001bd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 126  : 			RequireStatus[1] = TokenNumber;

  001c2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c8	e8 00 00 00 00	 call	 __ftol2_sse
  001cd	89 45 b0	 mov	 DWORD PTR _RequireStatus$[ebp+4], eax

; 127  : 
; 128  : 			Token = GetToken();

  001d0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 129  : 			RequireStatus[2] = TokenNumber;

  001d5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001db	e8 00 00 00 00	 call	 __ftol2_sse
  001e0	89 45 b4	 mov	 DWORD PTR _RequireStatus$[ebp+8], eax

; 130  : 
; 131  : 			Token = GetToken();

  001e3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 			RequireClass[0] = TokenNumber;

  001e8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ee	d9 7d c6	 fnstcw	 WORD PTR tv131[ebp]
  001f1	0f b7 45 c6	 movzx	 eax, WORD PTR tv131[ebp]
  001f5	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001fa	89 45 c0	 mov	 DWORD PTR tv128[ebp], eax
  001fd	d9 6d c0	 fldcw	 WORD PTR tv128[ebp]
  00200	db 5d c0	 fistp	 DWORD PTR tv94[ebp]
  00203	0f b6 45 c0	 movzx	 eax, BYTE PTR tv94[ebp]
  00207	88 45 b8	 mov	 BYTE PTR _RequireClass$[ebp], al
  0020a	d9 6d c6	 fldcw	 WORD PTR tv131[ebp]

; 133  : 
; 134  : 			Token = GetToken();

  0020d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 135  : 			RequireClass[1] = TokenNumber;

  00212	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00218	d9 7d c6	 fnstcw	 WORD PTR tv91[ebp]
  0021b	0f b7 45 c6	 movzx	 eax, WORD PTR tv91[ebp]
  0021f	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00224	89 45 c0	 mov	 DWORD PTR tv87[ebp], eax
  00227	d9 6d c0	 fldcw	 WORD PTR tv87[ebp]
  0022a	db 5d c0	 fistp	 DWORD PTR tv85[ebp]
  0022d	0f b6 4d c0	 movzx	 ecx, BYTE PTR tv85[ebp]
  00231	88 4d b9	 mov	 BYTE PTR _RequireClass$[ebp+1], cl
  00234	d9 6d c6	 fldcw	 WORD PTR tv91[ebp]

; 136  : 
; 137  : 			Token = GetToken();

  00237	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 138  : 			RequireClass[2] = TokenNumber;

  0023c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00242	d9 7d c6	 fnstcw	 WORD PTR tv81[ebp]
  00245	0f b7 45 c6	 movzx	 eax, WORD PTR tv81[ebp]
  00249	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0024e	89 45 c0	 mov	 DWORD PTR tv74[ebp], eax
  00251	d9 6d c0	 fldcw	 WORD PTR tv74[ebp]
  00254	db 5d c0	 fistp	 DWORD PTR tv260[ebp]
  00257	8a 55 c0	 mov	 dl, BYTE PTR tv260[ebp]
  0025a	88 55 ba	 mov	 BYTE PTR _RequireClass$[ebp+2], dl
  0025d	d9 6d c6	 fldcw	 WORD PTR tv81[ebp]

; 139  : 
; 140  : 			Token = GetToken();

  00260	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 141  : 			RequireClass[3] = TokenNumber;

  00265	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026b	d9 7d c6	 fnstcw	 WORD PTR tv263[ebp]
  0026e	0f b7 45 c6	 movzx	 eax, WORD PTR tv263[ebp]
  00272	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00277	89 45 c0	 mov	 DWORD PTR tv266[ebp], eax
  0027a	d9 6d c0	 fldcw	 WORD PTR tv266[ebp]
  0027d	db 5d c0	 fistp	 DWORD PTR tv268[ebp]
  00280	0f b6 45 c0	 movzx	 eax, BYTE PTR tv268[ebp]
  00284	88 45 bb	 mov	 BYTE PTR _RequireClass$[ebp+3], al
  00287	d9 6d c6	 fldcw	 WORD PTR tv263[ebp]

; 142  : 
; 143  : 			Token = GetToken();

  0028a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 144  : 			RequireClass[4] = TokenNumber;
; 145  : 
; 146  : 
; 147  : 			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay);

  0028f	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _rDelay$[ebp]
  00295	52		 push	 edx
  00296	8d 55 b8	 lea	 edx, DWORD PTR _RequireClass$[ebp]
  00299	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029f	d9 7d c6	 fnstcw	 WORD PTR tv271[ebp]
  002a2	0f b7 45 c6	 movzx	 eax, WORD PTR tv271[ebp]
  002a6	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002ab	89 45 c0	 mov	 DWORD PTR tv274[ebp], eax
  002ae	8b 45 88	 mov	 eax, DWORD PTR _rLeadership$[ebp]
  002b1	50		 push	 eax
  002b2	d9 6d c0	 fldcw	 WORD PTR tv274[ebp]
  002b5	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _iSkillType$[ebp]
  002bb	db 5d c0	 fistp	 DWORD PTR tv276[ebp]
  002be	0f b6 4d c0	 movzx	 ecx, BYTE PTR tv276[ebp]
  002c2	88 4d bc	 mov	 BYTE PTR _RequireClass$[ebp+4], cl
  002c5	8b 4d 80	 mov	 ecx, DWORD PTR _rEnergy$[ebp]
  002c8	51		 push	 ecx
  002c9	d9 6d c6	 fldcw	 WORD PTR tv271[ebp]
  002cc	8b 4d 8c	 mov	 ecx, DWORD PTR _attr$[ebp]
  002cf	52		 push	 edx
  002d0	8b 55 9c	 mov	 edx, DWORD PTR _dis$[ebp]
  002d3	50		 push	 eax
  002d4	8b 45 a8	 mov	 eax, DWORD PTR _bp$[ebp]
  002d7	51		 push	 ecx
  002d8	8b 4d 94	 mov	 ecx, DWORD PTR _mana$[ebp]
  002db	52		 push	 edx
  002dc	50		 push	 eax
  002dd	51		 push	 ecx
  002de	57		 push	 edi
  002df	8b 7d 84	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
  002e2	53		 push	 ebx
  002e3	56		 push	 esi
  002e4	8d 55 c8	 lea	 edx, DWORD PTR _name$[ebp]
  002e7	52		 push	 edx
  002e8	8b cf		 mov	 ecx, edi
  002ea	e8 00 00 00 00	 call	 ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHH@Z ; CMagicDamage::Set

; 148  : 			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);

  002ef	8b 4d a4	 mov	 ecx, DWORD PTR _iKillCount$[ebp]
  002f2	8b 55 a0	 mov	 edx, DWORD PTR _iSkillBrand$[ebp]
  002f5	8d 45 ac	 lea	 eax, DWORD PTR _RequireStatus$[ebp]
  002f8	50		 push	 eax
  002f9	8b 45 98	 mov	 eax, DWORD PTR _iSkillUseType$[ebp]
  002fc	51		 push	 ecx
  002fd	52		 push	 edx
  002fe	50		 push	 eax
  002ff	56		 push	 esi
  00300	8b cf		 mov	 ecx, edi
  00302	e8 00 00 00 00	 call	 ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ; CMagicDamage::SetEx

; 149  : 			DefMagicInf[number].Set(number, 0);

  00307	8b ce		 mov	 ecx, esi
  00309	6a 00		 push	 0
  0030b	c1 e1 04	 shl	 ecx, 4
  0030e	56		 push	 esi
  0030f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  00315	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHEE@Z ; CMagicInf::Set
  0031a	8b 75 90	 mov	 esi, DWORD PTR _filename$GSCopy$[ebp]
$LN1@LogSkillLi:

; 65   : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 66   : 
; 67   : 	while ( true )
; 68   : 	{
; 69   : 		Token = GetToken();

  0031d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 70   : 
; 71   : 		if ( Token == 2 )

  00322	83 f8 02	 cmp	 eax, 2
  00325	0f 85 57 fd ff
	ff		 jne	 $LL4@LogSkillLi
  0032b	5f		 pop	 edi
  0032c	5b		 pop	 ebx
$LN12@LogSkillLi:

; 150  : 		}
; 151  : 	}
; 152  : 
; 153  : 	fclose(SMDFile);

  0032d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00333	51		 push	 ecx
  00334	e8 00 00 00 00	 call	 _fclose
  00339	83 c4 04	 add	 esp, 4

; 154  : 	LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 200)), filename);

  0033c	56		 push	 esi
  0033d	68 c8 01 00 00	 push	 456			; 000001c8H
  00342	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00347	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0034c	50		 push	 eax
  0034d	6a 00		 push	 0
  0034f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 155  : }

  00354	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00357	83 c4 0c	 add	 esp, 12			; 0000000cH
  0035a	33 cd		 xor	 ecx, ebp
  0035c	5e		 pop	 esi
  0035d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00362	8b e5		 mov	 esp, ebp
  00364	5d		 pop	 ebp
  00365	c2 04 00	 ret	 4
?LogSkillList@CMagicDamage@@QAEXPAD@Z ENDP		; CMagicDamage::LogSkillList
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EMagicDamageC@@YAXXZ
text$yc	SEGMENT
??__EMagicDamageC@@YAXXZ PROC				; `dynamic initializer for 'MagicDamageC'', COMDAT

; 12   : CMagicDamage MagicDamageC;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00005	e8 00 00 00 00	 call	 ??0CMagicDamage@@QAE@XZ	; CMagicDamage::CMagicDamage
  0000a	68 00 00 00 00	 push	 OFFSET ??__FMagicDamageC@@YAXXZ ; `dynamic atexit destructor for 'MagicDamageC''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EMagicDamageC@@YAXXZ ENDP				; `dynamic initializer for 'MagicDamageC''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FMagicDamageC@@YAXXZ
text$yd	SEGMENT
??__FMagicDamageC@@YAXXZ PROC				; `dynamic atexit destructor for 'MagicDamageC'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00005	e9 00 00 00 00	 jmp	 ??1CMagicDamage@@UAE@XZ	; CMagicDamage::~CMagicDamage
??__FMagicDamageC@@YAXXZ ENDP				; `dynamic atexit destructor for 'MagicDamageC''
text$yd	ENDS
PUBLIC	?MagicDamageC@@3VCMagicDamage@@A		; MagicDamageC
_BSS	SEGMENT
?MagicDamageC@@3VCMagicDamage@@A DB 07104H DUP (?)	; MagicDamageC
_BSS	ENDS
CRT$XCU	SEGMENT
_MagicDamageC$initializer$ DD FLAT:??__EMagicDamageC@@YAXXZ
CRT$XCU	ENDS
END
