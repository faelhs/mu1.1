; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\CallStackTrace.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?strrchr@@YAPADPADH@Z				; strrchr
EXTRN	_strrchr:PROC
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
;	COMDAT ?strrchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADPADH@Z PROC				; strrchr, COMDAT

; 219  : 	{ return (char*)strrchr((const char*)_Str, _Ch); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	e9 00 00 00 00	 jmp	 _strrchr
?strrchr@@YAPADPADH@Z ENDP				; strrchr
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetModuleBase@CCallStackTrace@@CGKPAXK@Z	; CCallStackTrace::GetModuleBase
EXTRN	__imp__SymLoadModule@24:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__VirtualQueryEx@16:PROC
EXTRN	__imp__SymGetModuleInfo@12:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\callstacktrace.cpp
;	COMDAT ?GetModuleBase@CCallStackTrace@@CGKPAXK@Z
_TEXT	SEGMENT
_memory_basic_information$ = -864			; size = 28
_imagehlp_module$ = -836				; size = 572
_module_file_name$ = -264				; size = 260
__$ArrayPad$ = -4					; size = 4
_hProcess$ = 8						; size = 4
_address$ = 12						; size = 4
?GetModuleBase@CCallStackTrace@@CGKPAXK@Z PROC		; CCallStackTrace::GetModuleBase, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 03 00
	00		 sub	 esp, 864		; 00000360H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _address$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _hProcess$[ebp]

; 255  : 	IMAGEHLP_MODULE imagehlp_module;
; 256  : 	MEMORY_BASIC_INFORMATION memory_basic_information;
; 257  : 	char module_file_name[260];
; 258  : 	DWORD module_file_name_length;
; 259  : 	HANDLE file_handle;
; 260  : 	char * image_name;
; 261  : 
; 262  : 	imagehlp_module.SizeOfStruct = sizeof(imagehlp_module);
; 263  : 
; 264  : 	if ( SymGetModuleInfo(hProcess, address, &imagehlp_module) == TRUE )

  0001b	8d 85 bc fc ff
	ff		 lea	 eax, DWORD PTR _imagehlp_module$[ebp]
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	c7 85 bc fc ff
	ff 3c 02 00 00	 mov	 DWORD PTR _imagehlp_module$[ebp], 572 ; 0000023cH
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SymGetModuleInfo@12
  00034	83 f8 01	 cmp	 eax, 1
  00037	75 18		 jne	 SHORT $LN6@GetModuleB

; 265  : 	{
; 266  : 		return imagehlp_module.BaseOfImage;

  00039	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _imagehlp_module$[ebp+4]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 297  : 
; 298  : 	return (DWORD)memory_basic_information.AllocationBase;
; 299  : }

  00041	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00044	33 cd		 xor	 ecx, ebp
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
$LN6@GetModuleB:

; 267  : 	}
; 268  : 
; 269  : 	if ( VirtualQueryEx(hProcess, (LPCVOID)address, &memory_basic_information, sizeof(memory_basic_information)) == FALSE )

  00051	6a 1c		 push	 28			; 0000001cH
  00053	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _memory_basic_information$[ebp]
  00059	51		 push	 ecx
  0005a	56		 push	 esi
  0005b	57		 push	 edi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualQueryEx@16
  00062	85 c0		 test	 eax, eax
  00064	75 12		 jne	 SHORT $LN5@GetModuleB
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 297  : 
; 298  : 	return (DWORD)memory_basic_information.AllocationBase;
; 299  : }

  00068	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006b	33 cd		 xor	 ecx, ebp
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
$LN5@GetModuleB:

; 270  : 	{
; 271  : 		return 0;
; 272  : 	}
; 273  : 
; 274  : 	module_file_name_length = GetModuleFileName((HMODULE)memory_basic_information.AllocationBase, module_file_name, sizeof(module_file_name));

  00078	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _memory_basic_information$[ebp+4]
  0007e	68 04 01 00 00	 push	 260			; 00000104H
  00083	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _module_file_name$[ebp]
  00089	52		 push	 edx
  0008a	50		 push	 eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  00091	8b f0		 mov	 esi, eax

; 275  : 
; 276  : 	if ( module_file_name_length )

  00093	85 f6		 test	 esi, esi
  00095	74 28		 je	 SHORT $LN4@GetModuleB

; 277  : 	{
; 278  : 		file_handle = CreateFile(module_file_name, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);

  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	6a 03		 push	 3
  0009d	6a 00		 push	 0
  0009f	6a 01		 push	 1
  000a1	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000a6	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _module_file_name$[ebp]
  000ac	51		 push	 ecx
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28

; 283  : 	}
; 284  : 
; 285  : 	image_name = NULL;
; 286  : 
; 287  : 	if ( module_file_name_length > 0 )

  000b3	85 f6		 test	 esi, esi
  000b5	74 0a		 je	 SHORT $LN2@GetModuleB

; 288  : 	{
; 289  : 		image_name = module_file_name;

  000b7	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _module_file_name$[ebp]

; 290  : 	}
; 291  : 	else

  000bd	eb 04		 jmp	 SHORT $LN1@GetModuleB
$LN4@GetModuleB:

; 279  : 	}
; 280  : 	else
; 281  : 	{
; 282  : 		file_handle = NULL;

  000bf	33 c0		 xor	 eax, eax
$LN2@GetModuleB:

; 292  : 	{
; 293  : 		image_name = NULL;

  000c1	33 c9		 xor	 ecx, ecx
$LN1@GetModuleB:

; 294  : 	}
; 295  : 
; 296  : 	SymLoadModule(hProcess, file_handle, image_name, 0, (DWORD)memory_basic_information.AllocationBase, 0);

  000c3	8b 95 a4 fc ff
	ff		 mov	 edx, DWORD PTR _memory_basic_information$[ebp+4]
  000c9	6a 00		 push	 0
  000cb	52		 push	 edx
  000cc	6a 00		 push	 0
  000ce	51		 push	 ecx
  000cf	50		 push	 eax
  000d0	57		 push	 edi
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SymLoadModule@24

; 297  : 
; 298  : 	return (DWORD)memory_basic_information.AllocationBase;
; 299  : }

  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _memory_basic_information$[ebp+4]
  000e0	5f		 pop	 edi
  000e1	33 cd		 xor	 ecx, ebp
  000e3	5e		 pop	 esi
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
?GetModuleBase@CCallStackTrace@@CGKPAXK@Z ENDP		; CCallStackTrace::GetModuleBase
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1551 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1552 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 09		 je	 SHORT $LN6@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL3@length:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@length
  00017	2b c2		 sub	 eax, edx

; 492  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000b	88 0a		 mov	 BYTE PTR [edx], cl

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2003 : 		{	// determine current pointer to buffer for mutable string

  00000	8b c1		 mov	 eax, ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00002	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00006	72 02		 jb	 SHORT $LN4@Myptr
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Myptr:

; 2006 : 		}

  0000a	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2009 : 		{	// determine current pointer to buffer for nonmutable string

  00000	8b c1		 mov	 eax, ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00002	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00006	72 02		 jb	 SHORT $LN4@Myptr@2
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Myptr@2:

; 2012 : 		}

  0000a	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 2d		 je	 SHORT $LN2@Inside
  0000b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00011	72 04		 jb	 SHORT $LN8@Inside
  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00017	8b c1		 mov	 eax, ecx
$LN9@Inside:
  00019	3b f0		 cmp	 esi, eax
  0001b	72 1b		 jb	 SHORT $LN2@Inside
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	72 04		 jb	 SHORT $LN12@Inside
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	eb 02		 jmp	 SHORT $LN13@Inside
$LN12@Inside:
  00026	8b c1		 mov	 eax, ecx
$LN13@Inside:
  00028	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002b	03 c8		 add	 ecx, eax
  0002d	3b ce		 cmp	 ecx, esi
  0002f	76 07		 jbe	 SHORT $LN2@Inside

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 1978 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN2@Inside:

; 1975 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 1978 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T166861 = -12						; size = 12
$T166866 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3a		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	83 f9 ff	 cmp	 ecx, -1
  00012	77 0d		 ja	 SHORT $LN1@Allocate
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001f	75 28		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00021	8d 45 08	 lea	 eax, DWORD PTR $T166866[ebp]
  00024	50		 push	 eax
  00025	8d 4d f4	 lea	 ecx, DWORD PTR $T166861[ebp]
  00028	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T166866[ebp], 0
  0002f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00034	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00039	8d 4d f4	 lea	 ecx, DWORD PTR $T166861[ebp]
  0003c	51		 push	 ecx
  0003d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T166861[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00044	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	56		 push	 esi
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0BB@IICGLAA@?$DMunknown?5symbol?$DO?$AA@	; `string'
PUBLIC	??_C@_09HDDDNNCJ@?1?1?5?$CFs?$CI?$CFi?$CJ?$AA@	; `string'
PUBLIC	??_C@_05GALAIONK@?$CFs?$CI?$CJ?5?$AA@		; `string'
PUBLIC	??_C@_0BE@IDPPGAOM@?$DMunknown?5module?$DO?5?3?5?$AA@ ; `string'
PUBLIC	??_C@_05LLGELLBM@?$CFs?5?3?5?$AA@		; `string'
PUBLIC	_output_buffer$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertAddress@CCallStackTrace@@AAEKPAXKPAD@Z	; CCallStackTrace::ConvertAddress
EXTRN	__imp__SymGetLineFromAddr@16:PROC
EXTRN	__imp__SymGetSymFromAddr@16:PROC
EXTRN	_sprintf:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IICGLAA@?$DMunknown?5symbol?$DO?$AA@
CONST	SEGMENT
??_C@_0BB@IICGLAA@?$DMunknown?5symbol?$DO?$AA@ DB '<unknown symbol>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDDDNNCJ@?1?1?5?$CFs?$CI?$CFi?$CJ?$AA@
CONST	SEGMENT
??_C@_09HDDDNNCJ@?1?1?5?$CFs?$CI?$CFi?$CJ?$AA@ DB '// %s(%i)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GALAIONK@?$CFs?$CI?$CJ?5?$AA@
CONST	SEGMENT
??_C@_05GALAIONK@?$CFs?$CI?$CJ?5?$AA@ DB '%s() ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IDPPGAOM@?$DMunknown?5module?$DO?5?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@IDPPGAOM@?$DMunknown?5module?$DO?5?3?5?$AA@ DB '<unknown module'
	DB	'> : ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05LLGELLBM@?$CFs?5?3?5?$AA@
CONST	SEGMENT
??_C@_05LLGELLBM@?$CFs?5?3?5?$AA@ DB '%s : ', 00H	; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\callstacktrace.cpp
CONST	ENDS
;	COMDAT ?ConvertAddress@CCallStackTrace@@AAEKPAXKPAD@Z
_TEXT	SEGMENT
_imagehlp_line$166557 = -888				; size = 20
_displacement$ = -868					; size = 4
_output_buffer$GSCopy$ = -864				; size = 4
_imagehlp_module$ = -860				; size = 572
_temp$ = -288						; size = 284
__$ArrayPad$ = -4					; size = 4
_hProcess$ = 8						; size = 4
_address$ = 12						; size = 4
_output_buffer$ = 16					; size = 4
?ConvertAddress@CCallStackTrace@@AAEKPAXKPAD@Z PROC	; CCallStackTrace::ConvertAddress, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 03 00
	00		 sub	 esp, 888		; 00000378H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 10	 mov	 esi, DWORD PTR _output_buffer$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _hProcess$[ebp]

; 84   : 	char* current_pointer = output_buffer;
; 85   : 	IMAGEHLP_MODULE imagehlp_module;
; 86   : 	memset(&imagehlp_module, 0, sizeof(imagehlp_module));

  0001c	68 3c 02 00 00	 push	 572			; 0000023cH
  00021	8d 85 a4 fc ff
	ff		 lea	 eax, DWORD PTR _imagehlp_module$[ebp]
  00027	6a 00		 push	 0
  00029	50		 push	 eax

; 114  : 	{
; 115  : 		current_pointer += sprintf(current_pointer, "%s() ", imagehlp_symbol->Name);

  0002a	89 b5 a0 fc ff
	ff		 mov	 DWORD PTR _output_buffer$GSCopy$[ebp], esi
  00030	e8 00 00 00 00	 call	 _memset
  00035	8b 5d 0c	 mov	 ebx, DWORD PTR _address$[ebp]
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR _imagehlp_module$[ebp]
  00041	51		 push	 ecx
  00042	53		 push	 ebx
  00043	57		 push	 edi
  00044	c7 85 a4 fc ff
	ff 3c 02 00 00	 mov	 DWORD PTR _imagehlp_module$[ebp], 572 ; 0000023cH
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SymGetModuleInfo@12
  00054	85 c0		 test	 eax, eax
  00056	74 3e		 je	 SHORT $LN7@ConvertAdd

; 87   : 	imagehlp_module.SizeOfStruct = sizeof(imagehlp_module);
; 88   : 
; 89   : 	if ( SymGetModuleInfo(hProcess, address, &imagehlp_module) != FALSE )
; 90   : 	{
; 91   : 		char * image_name = strrchr(imagehlp_module.ImageName, '\\');

  00058	8d 95 e0 fc ff
	ff		 lea	 edx, DWORD PTR _imagehlp_module$[ebp+60]
  0005e	6a 5c		 push	 92			; 0000005cH
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 _strrchr
  00066	83 c4 08	 add	 esp, 8

; 92   : 
; 93   : 		if ( image_name != NULL )

  00069	85 c0		 test	 eax, eax
  0006b	74 12		 je	 SHORT $LN6@ConvertAdd

; 94   : 			image_name += 1;

  0006d	40		 inc	 eax

; 97   : 
; 98   : 		current_pointer += sprintf(current_pointer, "%s : ", image_name);

  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_05LLGELLBM@?$CFs?5?3?5?$AA@
  00074	56		 push	 esi
  00075	e8 00 00 00 00	 call	 _sprintf
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 99   : 	}
; 100  : 	else

  0007d	eb 25		 jmp	 SHORT $LN12@ConvertAdd
$LN6@ConvertAdd:

; 95   : 		else
; 96   : 			image_name = imagehlp_module.ImageName;

  0007f	8d 85 e0 fc ff
	ff		 lea	 eax, DWORD PTR _imagehlp_module$[ebp+60]

; 97   : 
; 98   : 		current_pointer += sprintf(current_pointer, "%s : ", image_name);

  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_05LLGELLBM@?$CFs?5?3?5?$AA@
  0008b	56		 push	 esi
  0008c	e8 00 00 00 00	 call	 _sprintf
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH

; 99   : 	}
; 100  : 	else

  00094	eb 0e		 jmp	 SHORT $LN12@ConvertAdd
$LN7@ConvertAdd:

; 101  : 	{
; 102  : 		current_pointer += sprintf(current_pointer, "<unknown module> : ");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IDPPGAOM@?$DMunknown?5module?$DO?5?3?5?$AA@
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 _sprintf
  000a1	83 c4 08	 add	 esp, 8
$LN12@ConvertAdd:
  000a4	8b f0		 mov	 esi, eax
  000a6	03 b5 a0 fc ff
	ff		 add	 esi, DWORD PTR _output_buffer$GSCopy$[ebp]

; 103  : 	}
; 104  : 
; 105  : 	DWORD displacement;
; 106  : 	char temp[0x11c];
; 107  : 	IMAGEHLP_SYMBOL * imagehlp_symbol = (IMAGEHLP_SYMBOL *)temp;
; 108  : 	memset(imagehlp_symbol, 0, sizeof(temp));

  000ac	68 1c 01 00 00	 push	 284			; 0000011cH
  000b1	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp]
  000b7	6a 00		 push	 0
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memset
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  : 	imagehlp_symbol->SizeOfStruct = 24;
; 110  : 	imagehlp_symbol->Address = address;
; 111  : 	imagehlp_symbol->MaxNameLength = 0x104;
; 112  : 
; 113  : 	if ( SymGetSymFromAddr(hProcess, address, &displacement, imagehlp_symbol) != FALSE )

  000c2	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _temp$[ebp]
  000c8	51		 push	 ecx
  000c9	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR _displacement$[ebp]
  000cf	52		 push	 edx
  000d0	53		 push	 ebx
  000d1	57		 push	 edi
  000d2	c7 85 e0 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR _temp$[ebp], 24 ; 00000018H
  000dc	89 9d e4 fe ff
	ff		 mov	 DWORD PTR _temp$[ebp+4], ebx
  000e2	c7 85 f0 fe ff
	ff 04 01 00 00	 mov	 DWORD PTR _temp$[ebp+16], 260 ; 00000104H
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SymGetSymFromAddr@16
  000f2	85 c0		 test	 eax, eax
  000f4	74 79		 je	 SHORT $LN3@ConvertAdd

; 114  : 	{
; 115  : 		current_pointer += sprintf(current_pointer, "%s() ", imagehlp_symbol->Name);

  000f6	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _temp$[ebp+20]
  000fc	50		 push	 eax
  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_05GALAIONK@?$CFs?$CI?$CJ?5?$AA@
  00102	56		 push	 esi
  00103	e8 00 00 00 00	 call	 _sprintf
  00108	83 c4 0c	 add	 esp, 12			; 0000000cH

; 116  : 
; 117  : 		IMAGEHLP_LINE imagehlp_line;
; 118  : 		memset(&imagehlp_line, 0, sizeof(imagehlp_line));
; 119  : 		imagehlp_line.SizeOfStruct = sizeof(IMAGEHLP_LINE);
; 120  : 
; 121  : 		if ( SymGetLineFromAddr(hProcess, address, &displacement, &imagehlp_line) != FALSE )

  0010b	8d 8d 88 fc ff
	ff		 lea	 ecx, DWORD PTR _imagehlp_line$166557[ebp]
  00111	51		 push	 ecx
  00112	8d 95 9c fc ff
	ff		 lea	 edx, DWORD PTR _displacement$[ebp]
  00118	52		 push	 edx
  00119	03 f0		 add	 esi, eax
  0011b	33 c0		 xor	 eax, eax
  0011d	53		 push	 ebx
  0011e	89 85 88 fc ff
	ff		 mov	 DWORD PTR _imagehlp_line$166557[ebp], eax
  00124	57		 push	 edi
  00125	89 85 8c fc ff
	ff		 mov	 DWORD PTR _imagehlp_line$166557[ebp+4], eax
  0012b	89 85 90 fc ff
	ff		 mov	 DWORD PTR _imagehlp_line$166557[ebp+8], eax
  00131	89 85 94 fc ff
	ff		 mov	 DWORD PTR _imagehlp_line$166557[ebp+12], eax
  00137	89 85 98 fc ff
	ff		 mov	 DWORD PTR _imagehlp_line$166557[ebp+16], eax
  0013d	c7 85 88 fc ff
	ff 14 00 00 00	 mov	 DWORD PTR _imagehlp_line$166557[ebp], 20 ; 00000014H
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SymGetLineFromAddr@16
  0014d	85 c0		 test	 eax, eax
  0014f	74 2e		 je	 SHORT $LN1@ConvertAdd

; 122  : 		{
; 123  : 			current_pointer += sprintf(current_pointer, "// %s(%i)", imagehlp_line.FileName, imagehlp_line.LineNumber);

  00151	8b 85 90 fc ff
	ff		 mov	 eax, DWORD PTR _imagehlp_line$166557[ebp+8]
  00157	8b 8d 94 fc ff
	ff		 mov	 ecx, DWORD PTR _imagehlp_line$166557[ebp+12]
  0015d	50		 push	 eax
  0015e	51		 push	 ecx
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_09HDDDNNCJ@?1?1?5?$CFs?$CI?$CFi?$CJ?$AA@
  00164	56		 push	 esi
  00165	e8 00 00 00 00	 call	 _sprintf
  0016a	83 c4 10	 add	 esp, 16			; 00000010H

; 124  : 		}
; 125  : 	}
; 126  : 	else

  0016d	eb 0e		 jmp	 SHORT $LN13@ConvertAdd
$LN3@ConvertAdd:

; 127  : 	{
; 128  : 		current_pointer += sprintf(current_pointer, "<unknown symbol>");

  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IICGLAA@?$DMunknown?5symbol?$DO?$AA@
  00174	56		 push	 esi
  00175	e8 00 00 00 00	 call	 _sprintf
  0017a	83 c4 08	 add	 esp, 8
$LN13@ConvertAdd:
  0017d	03 f0		 add	 esi, eax
$LN1@ConvertAdd:

; 129  : 	}
; 130  : 	
; 131  : 	current_pointer += sprintf(current_pointer, "\r\n");

  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6?$AA@
  00184	56		 push	 esi
  00185	e8 00 00 00 00	 call	 _sprintf

; 132  : 	return current_pointer - output_buffer;

  0018a	2b b5 a0 fc ff
	ff		 sub	 esi, DWORD PTR _output_buffer$GSCopy$[ebp]

; 133  : }

  00190	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00193	83 c4 08	 add	 esp, 8
  00196	5f		 pop	 edi
  00197	03 c6		 add	 eax, esi
  00199	5e		 pop	 esi
  0019a	33 cd		 xor	 ecx, ebp
  0019c	5b		 pop	 ebx
  0019d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a2	8b e5		 mov	 esp, ebp
  001a4	5d		 pop	 ebp
  001a5	c2 0c 00	 ret	 12			; 0000000cH
?ConvertAddress@CCallStackTrace@@AAEKPAXKPAD@Z ENDP	; CCallStackTrace::ConvertAddress
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1436 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 
; 1439 : 		if (this->_Mysize <= _Off)
; 1440 : 
; 1441 : 			_DEBUG_ERROR("string subscript out of range");
; 1442 : 
; 1443 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1444 : 		_SCL_SECURE_VALIDATE_RANGE(_Off < this->_Mysize);
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		return (_Myptr()[_Off]);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 0b		 jb	 SHORT $LN5@operator
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000e	03 c1		 add	 eax, ecx

; 1448 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4

; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 
; 1439 : 		if (this->_Mysize <= _Off)
; 1440 : 
; 1441 : 			_DEBUG_ERROR("string subscript out of range");
; 1442 : 
; 1443 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1444 : 		_SCL_SECURE_VALIDATE_RANGE(_Off < this->_Mysize);
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		return (_Myptr()[_Off]);

$LN5@operator:
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 1448 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 22		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1c		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	83 c4 04	 add	 esp, 4
  00031	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00032	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00035	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003c	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 2000 : 		}

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1519 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
$T166963 = -12						; size = 12
$T166961 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 3a		 je	 SHORT $LN1@allocate
  0000f	83 f9 ff	 cmp	 ecx, -1
  00012	77 0d		 ja	 SHORT $LN3@allocate
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	75 28		 jne	 SHORT $LN1@allocate
$LN3@allocate:
  00021	8d 45 08	 lea	 eax, DWORD PTR $T166961[ebp]
  00024	50		 push	 eax
  00025	8d 4d f4	 lea	 ecx, DWORD PTR $T166963[ebp]
  00028	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T166961[ebp], 0
  0002f	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  00034	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00039	8d 4d f4	 lea	 ecx, DWORD PTR $T166963[ebp]
  0003c	51		 push	 ecx
  0003d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T166963[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00044	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@allocate:
$LN1@allocate:

; 188  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN12@allocate:
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??_C@_0CB@FIPEKLON@?6?$CK?9?9?9?9?9?$DO?5CallStack?5List?5?$DM?9?9?9?9?9?$CK?6@ ; `string'
PUBLIC	??_C@_0EK@LEGJPJDC@?6CallStack?5Trace?5Infomation?5?$CIDAT@ ; `string'
PUBLIC	??_C@_02DPNLHKJD@a?$CL?$AA@			; `string'
PUBLIC	??_C@_0BJ@LHLEGJPB@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d?4txt?$AA@ ; `string'
PUBLIC	??_C@_0O@GEMMNDNI@NO?5LOG?9ID?5?$CB?$CB?$CB?$AA@ ; `string'
PUBLIC	??_C@_05MBDEGLCK@ERROR?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Output@CCallStackTrace@@AAEXXZ			; CCallStackTrace::Output
EXTRN	_fclose:PROC
EXTRN	_fputc:PROC
EXTRN	_fprintf:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
;	COMDAT ??_C@_0CB@FIPEKLON@?6?$CK?9?9?9?9?9?$DO?5CallStack?5List?5?$DM?9?9?9?9?9?$CK?6@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0CB@FIPEKLON@?6?$CK?9?9?9?9?9?$DO?5CallStack?5List?5?$DM?9?9?9?9?9?$CK?6@ DB 0aH
	DB	'*-----> CallStack List <-----*', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@LEGJPJDC@?6CallStack?5Trace?5Infomation?5?$CIDAT@
CONST	SEGMENT
??_C@_0EK@LEGJPJDC@?6CallStack?5Trace?5Infomation?5?$CIDAT@ DB 0aH, 'Call'
	DB	'Stack Trace Infomation (DATE:%04d-%02d-%02d %02d:%02d:%02d / '
	DB	'ID:%s)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNLHKJD@a?$CL?$AA@
CONST	SEGMENT
??_C@_02DPNLHKJD@a?$CL?$AA@ DB 'a+', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LHLEGJPB@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d?4txt?$AA@
CONST	SEGMENT
??_C@_0BJ@LHLEGJPB@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d?4txt?$AA@ DB '%'
	DB	's\%s %04d-%02d-%02d.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GEMMNDNI@NO?5LOG?9ID?5?$CB?$CB?$CB?$AA@
CONST	SEGMENT
??_C@_0O@GEMMNDNI@NO?5LOG?9ID?5?$CB?$CB?$CB?$AA@ DB 'NO LOG-ID !!!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBDEGLCK@ERROR?$AA@
CONST	SEGMENT
??_C@_05MBDEGLCK@ERROR?$AA@ DB 'ERROR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\callstacktrace.cpp
CONST	ENDS
;	COMDAT ?Output@CCallStackTrace@@AAEXXZ
_TEXT	SEGMENT
_strSystime$ = -280					; size = 16
_szLogFileName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?Output@CCallStackTrace@@AAEXXZ PROC			; CCallStackTrace::Output, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	57		 push	 edi

; 48   : 	if ( !strcmp(this->m_szLogID, ""))

  00017	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0001f	8b c7		 mov	 eax, edi
$LL18@Output:
  00021	8a 10		 mov	 dl, BYTE PTR [eax]
  00023	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00025	75 1a		 jne	 SHORT $LN19@Output
  00027	84 d2		 test	 dl, dl
  00029	74 12		 je	 SHORT $LN20@Output
  0002b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00031	75 0e		 jne	 SHORT $LN19@Output
  00033	83 c0 02	 add	 eax, 2
  00036	83 c1 02	 add	 ecx, 2
  00039	84 d2		 test	 dl, dl
  0003b	75 e4		 jne	 SHORT $LL18@Output
$LN20@Output:
  0003d	33 c0		 xor	 eax, eax
  0003f	eb 05		 jmp	 SHORT $LN21@Output
$LN19@Output:
  00041	1b c0		 sbb	 eax, eax
  00043	83 d8 ff	 sbb	 eax, -1
$LN21@Output:
  00046	85 c0		 test	 eax, eax
  00048	75 22		 jne	 SHORT $LN5@Output

; 49   : 	{
; 50   : 		MessageBox(NULL, "NO LOG-ID !!!", "ERROR", 0);

  0004a	50		 push	 eax
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GEMMNDNI@NO?5LOG?9ID?5?$CB?$CB?$CB?$AA@
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 77   : }

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00061	33 cd		 xor	 ecx, ebp
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN5@Output:

; 51   : 		return;
; 52   : 	}
; 53   : 
; 54   : 	char szLogFileName[260];
; 55   : 	SYSTEMTIME strSystime;
; 56   : 
; 57   : 	GetLocalTime(&strSystime);

  0006c	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _strSystime$[ebp]
  00072	50		 push	 eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 58   : 
; 59   : 	wsprintf(szLogFileName, "%s\\%s %04d-%02d-%02d.txt", this->m_szLogDirectoryName, this->m_szLogFileName,
; 60   : 		strSystime.wYear, strSystime.wMonth, strSystime.wDay);

  00079	0f b7 8d ee fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp+6]
  00080	0f b7 95 ea fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$[ebp+2]
  00087	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp]
  0008e	51		 push	 ecx
  0008f	52		 push	 edx
  00090	50		 push	 eax
  00091	8d 8e 0c 01 00
	00		 lea	 ecx, DWORD PTR [esi+268]
  00097	51		 push	 ecx
  00098	8d 96 10 02 00
	00		 lea	 edx, DWORD PTR [esi+528]
  0009e	52		 push	 edx
  0009f	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szLogFileName$[ebp]
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LHLEGJPB@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d?4txt?$AA@
  000aa	50		 push	 eax
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 61   : 
; 62   : 	this->m_fLogFile = fopen(szLogFileName, "a+");

  000b1	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szLogFileName$[ebp]
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_02DPNLHKJD@a?$CL?$AA@
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _fopen
  000c2	83 c4 24	 add	 esp, 36			; 00000024H
  000c5	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 63   : 
; 64   : 	if ( this->m_fLogFile == NULL )

  000c8	85 c0		 test	 eax, eax
  000ca	0f 84 9e 00 00
	00		 je	 $LN6@Output

; 65   : 		return;
; 66   : 
; 67   : 	fprintf(this->m_fLogFile, "\nCallStack Trace Infomation (DATE:%04d-%02d-%02d %02d:%02d:%02d / ID:%s)\n",
; 68   : 		strSystime.wYear, strSystime.wMonth, strSystime.wDay, strSystime.wHour, strSystime.wMinute,
; 69   : 		strSystime.wSecond, this->m_szLogID);

  000d0	0f b7 95 f4 fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$[ebp+12]
  000d7	0f b7 8d f2 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp+10]
  000de	57		 push	 edi
  000df	52		 push	 edx
  000e0	0f b7 95 f0 fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$[ebp+8]
  000e7	51		 push	 ecx
  000e8	0f b7 8d ee fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp+6]
  000ef	52		 push	 edx
  000f0	0f b7 95 ea fe
	ff ff		 movzx	 edx, WORD PTR _strSystime$[ebp+2]
  000f7	51		 push	 ecx
  000f8	0f b7 8d e8 fe
	ff ff		 movzx	 ecx, WORD PTR _strSystime$[ebp]
  000ff	52		 push	 edx
  00100	51		 push	 ecx
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@LEGJPJDC@?6CallStack?5Trace?5Infomation?5?$CIDAT@
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 _fprintf

; 70   : 
; 71   : 	fprintf(this->m_fLogFile, "\n*-----> CallStack List <-----*\n", this->m_szLogID);	// #error, delete last argument

  0010c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0010f	57		 push	 edi
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@FIPEKLON@?6?$CK?9?9?9?9?9?$DO?5CallStack?5List?5?$DM?9?9?9?9?9?$CK?6@
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 _fprintf

; 72   : 
; 73   : 	for ( int iC=0;iC<this->m_strCallStackLog.size(); iC++)

  0011b	33 ff		 xor	 edi, edi
  0011d	83 c4 30	 add	 esp, 48			; 00000030H
  00120	39 be 40 04 00
	00		 cmp	 DWORD PTR [esi+1088], edi
  00126	76 3a		 jbe	 SHORT $LN1@Output
  00128	53		 push	 ebx
  00129	8d a4 24 00 00
	00 00		 npad	 7
$LL3@Output:

; 74   : 		fputc(this->m_strCallStackLog[iC], this->m_fLogFile);

  00130	83 be 44 04 00
	00 10		 cmp	 DWORD PTR [esi+1092], 16 ; 00000010H
  00137	72 08		 jb	 SHORT $LN14@Output
  00139	8b 86 30 04 00
	00		 mov	 eax, DWORD PTR [esi+1072]
  0013f	eb 06		 jmp	 SHORT $LN15@Output
$LN14@Output:
  00141	8d 86 30 04 00
	00		 lea	 eax, DWORD PTR [esi+1072]
$LN15@Output:
  00147	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0014a	0f be 14 38	 movsx	 edx, BYTE PTR [eax+edi]
  0014e	51		 push	 ecx
  0014f	52		 push	 edx
  00150	e8 00 00 00 00	 call	 _fputc
  00155	47		 inc	 edi
  00156	83 c4 08	 add	 esp, 8
  00159	3b be 40 04 00
	00		 cmp	 edi, DWORD PTR [esi+1088]
  0015f	72 cf		 jb	 SHORT $LL3@Output
  00161	5b		 pop	 ebx
$LN1@Output:

; 75   : 
; 76   : 	fclose(this->m_fLogFile);

  00162	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _fclose
  0016b	83 c4 04	 add	 esp, 4
$LN6@Output:

; 77   : }

  0016e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	5f		 pop	 edi
  00172	33 cd		 xor	 ecx, ebp
  00174	5e		 pop	 esi
  00175	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c3		 ret	 0
?Output@CCallStackTrace@@AAEXXZ ENDP			; CCallStackTrace::Output
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  00009	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00010	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00013	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 753  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 754  : 		_Tidy(true);

  00003	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00007	72 0b		 jb	 SHORT $LN11@basic_stri
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	83 c4 04	 add	 esp, 4
$LN11@basic_stri:
  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00022	c6 06 00	 mov	 BYTE PTR [esi], 0
  00025	5e		 pop	 esi

; 755  : 		}

  00026	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000c	57		 push	 edi
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0a		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001b	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0001e	2b c1		 sub	 eax, ecx
  00020	3b c7		 cmp	 eax, edi
  00022	73 02		 jae	 SHORT $LN2@erase

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00024	8b f8		 mov	 edi, eax
$LN2@erase:

; 1114 : 		if (0 < _Count)

  00026	85 ff		 test	 edi, edi
  00028	74 50		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	53		 push	 ebx
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b de		 mov	 ebx, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c7		 sub	 eax, edi
  00046	03 d9		 add	 ebx, ecx
  00048	50		 push	 eax
  00049	03 df		 add	 ebx, edi
  0004b	03 d1		 add	 edx, ecx
  0004d	53		 push	 ebx
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00054	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	2b c7		 sub	 eax, edi

; 1119 : 			_Eos(_Newsize);

  0005c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00060	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00063	5b		 pop	 ebx
  00064	72 0e		 jb	 SHORT $LN23@erase
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0006c	5f		 pop	 edi

; 1120 : 			}
; 1121 : 		return (*this);

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1122 : 		}

  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8

; 1119 : 			_Eos(_Newsize);

$LN23@erase:
  00074	8b ce		 mov	 ecx, esi
  00076	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  0007a	5f		 pop	 edi
  0007b	8b c6		 mov	 eax, esi
  0007d	5e		 pop	 esi

; 1122 : 		}

  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
$T167270 = -40						; size = 12
__Newres$ = -28						; size = 4
$T167253 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00038	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f0		 mov	 esi, eax
  0003f	eb 27		 jmp	 SHORT $LN39@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00041	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e6		 mul	 esi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b ca		 cmp	 ecx, edx
  00053	76 13		 jbe	 SHORT $LN39@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005a	2b c1		 sub	 eax, ecx

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  0005c	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]
  0005f	3b d8		 cmp	 ebx, eax
  00061	76 05		 jbe	 SHORT $LN39@Copy

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()

  00063	be fe ff ff ff	 mov	 esi, -2			; fffffffeH
$LN39@Copy:

; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00068	33 c0		 xor	 eax, eax

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0006a	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0006d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+12], eax
  00070	3b c8		 cmp	 ecx, eax
  00072	76 12		 jbe	 SHORT $LN47@Copy
  00074	83 f9 ff	 cmp	 ecx, -1
  00077	77 12		 ja	 SHORT $LN46@Copy
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007f	83 c4 04	 add	 esp, 4
  00082	85 c0		 test	 eax, eax
  00084	74 05		 je	 SHORT $LN46@Copy
$LN47@Copy:
  00086	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00089	eb 51		 jmp	 SHORT $LN19@Copy
$LN46@Copy:
  0008b	8d 4d e8	 lea	 ecx, DWORD PTR $T167253[ebp]
  0008e	51		 push	 ecx
  0008f	8d 4d d8	 lea	 ecx, DWORD PTR $T167270[ebp]
  00092	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T167253[ebp], 0
  00099	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0009e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  000a3	8d 55 d8	 lea	 edx, DWORD PTR $T167270[ebp]
  000a6	52		 push	 edx
  000a7	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T167270[ebp], OFFSET ??_7bad_alloc@std@@6B@
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN112@Copy:
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  000b3	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  000b6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	89 45 e4	 mov	 DWORD PTR __Newres$[ebp], eax
  000bc	40		 inc	 eax
  000bd	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  000c0	50		 push	 eax
  000c1	83 c1 18	 add	 ecx, 24			; 00000018H
  000c4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000c8	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000cd	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  000d0	b8 00 00 00 00	 mov	 eax, $LN107@Copy
  000d5	c3		 ret	 0
$LN107@Copy:
  000d6	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  000d9	8b 75 e4	 mov	 esi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  000dc	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000df	85 db		 test	 ebx, ebx
  000e1	74 1a		 je	 SHORT $LN78@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000e3	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  000e7	72 04		 jb	 SHORT $LN76@Copy
  000e9	8b 07		 mov	 eax, DWORD PTR [edi]
  000eb	eb 02		 jmp	 SHORT $LN77@Copy
$LN76@Copy:
  000ed	8b c7		 mov	 eax, edi
$LN77@Copy:
  000ef	53		 push	 ebx
  000f0	50		 push	 eax
  000f1	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _memcpy
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN78@Copy:

; 1946 : 		_Tidy(true);

  000fd	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00101	72 0b		 jb	 SHORT $LN88@Copy
  00103	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00105	51		 push	 ecx
  00106	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010b	83 c4 04	 add	 esp, 4
$LN88@Copy:

; 1947 : 		this->_Bx._Ptr = _Ptr;

  0010e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00111	c6 07 00	 mov	 BYTE PTR [edi], 0
  00114	89 07		 mov	 DWORD PTR [edi], eax

; 1948 : 		this->_Myres = _Newres;

  00116	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 1949 : 		_Eos(_Oldlen);

  00119	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  0011c	83 fe 10	 cmp	 esi, 16			; 00000010H
  0011f	72 02		 jb	 SHORT $LN102@Copy
  00121	8b f8		 mov	 edi, eax
$LN102@Copy:
  00123	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 1950 : 		}

  00127	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00131	59		 pop	 ecx
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  0013b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0013e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00142	72 0b		 jb	 SHORT $LN64@Copy
  00144	8b 16		 mov	 edx, DWORD PTR [esi]
  00146	52		 push	 edx
  00147	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0014c	83 c4 04	 add	 esp, 4
$LN64@Copy:

; 1940 : 			_RERAISE;

  0014f	6a 00		 push	 0
  00151	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00158	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0015f	6a 00		 push	 0
  00161	c6 06 00	 mov	 BYTE PTR [esi], 0
  00164	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN113@Copy:
$LN111@Copy:
  00169	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??_C@_07EIPNPBIJ@LOGDATA?$AA@			; `string'
PUBLIC	??_C@_0BC@ILOEJNOF@INSERT?5LOG?9ID?5?$CB?$CB?$CB?$AA@ ; `string'
PUBLIC	??_7CCallStackTrace@@6B@			; CCallStackTrace::`vftable'
PUBLIC	??0CCallStackTrace@@QAE@QAD00@Z			; CCallStackTrace::CCallStackTrace
PUBLIC	??_R4CCallStackTrace@@6B@			; CCallStackTrace::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCallStackTrace@@@8			; CCallStackTrace `RTTI Type Descriptor'
PUBLIC	??_R3CCallStackTrace@@8				; CCallStackTrace::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCallStackTrace@@8				; CCallStackTrace::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCallStackTrace@@8		; CCallStackTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	??_ECCallStackTrace@@UAEPAXI@Z:PROC		; CCallStackTrace::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CCallStackTrace@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R1A@?0A@EA@CCallStackTrace@@8 DD FLAT:??_R0?AVCCallStackTrace@@@8 ; CCallStackTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCallStackTrace@@8
rdata$r	ENDS
;	COMDAT ??_R2CCallStackTrace@@8
rdata$r	SEGMENT
??_R2CCallStackTrace@@8 DD FLAT:??_R1A@?0A@EA@CCallStackTrace@@8 ; CCallStackTrace::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCallStackTrace@@8
rdata$r	SEGMENT
??_R3CCallStackTrace@@8 DD 00H				; CCallStackTrace::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCallStackTrace@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCallStackTrace@@@8
_DATA	SEGMENT
??_R0?AVCCallStackTrace@@@8 DD FLAT:??_7type_info@@6B@	; CCallStackTrace `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCallStackTrace@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCallStackTrace@@6B@
rdata$r	SEGMENT
??_R4CCallStackTrace@@6B@ DD 00H			; CCallStackTrace::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCallStackTrace@@@8
	DD	FLAT:??_R3CCallStackTrace@@8
rdata$r	ENDS
;	COMDAT ??_C@_07EIPNPBIJ@LOGDATA?$AA@
CONST	SEGMENT
??_C@_07EIPNPBIJ@LOGDATA?$AA@ DB 'LOGDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ILOEJNOF@INSERT?5LOG?9ID?5?$CB?$CB?$CB?$AA@
CONST	SEGMENT
??_C@_0BC@ILOEJNOF@INSERT?5LOG?9ID?5?$CB?$CB?$CB?$AA@ DB 'INSERT LOG-ID !'
	DB	'!!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7CCallStackTrace@@6B@
CONST	SEGMENT
??_7CCallStackTrace@@6B@ DD FLAT:??_R4CCallStackTrace@@6B@ ; CCallStackTrace::`vftable'
	DD	FLAT:??_ECCallStackTrace@@UAEPAXI@Z
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\callstacktrace.cpp
CONST	ENDS
;	COMDAT ??0CCallStackTrace@@QAE@QAD00@Z
_TEXT	SEGMENT
_szLogID$ = 8						; size = 4
_szLogFileName$ = 12					; size = 4
_szLogDirectoryName$ = 16				; size = 4
??0CCallStackTrace@@QAE@QAD00@Z PROC			; CCallStackTrace::CCallStackTrace, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 13   : 	if ( !strcmp(szLogID, ""))

  00004	8b 75 08	 mov	 esi, DWORD PTR _szLogID$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CCallStackTrace@@6B@
  00010	c7 87 44 04 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+1092], 15 ; 0000000fH
  0001a	c7 87 40 04 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1088], 0
  00024	c6 87 30 04 00
	00 00		 mov	 BYTE PTR [edi+1072], 0
  0002b	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00030	8b ce		 mov	 ecx, esi
$LL41@CCallStack:
  00032	8a 01		 mov	 al, BYTE PTR [ecx]
  00034	3a 02		 cmp	 al, BYTE PTR [edx]
  00036	75 1a		 jne	 SHORT $LN42@CCallStack
  00038	84 c0		 test	 al, al
  0003a	74 12		 je	 SHORT $LN43@CCallStack
  0003c	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0003f	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00042	75 0e		 jne	 SHORT $LN42@CCallStack
  00044	83 c1 02	 add	 ecx, 2
  00047	83 c2 02	 add	 edx, 2
  0004a	84 c0		 test	 al, al
  0004c	75 e4		 jne	 SHORT $LL41@CCallStack
$LN43@CCallStack:
  0004e	33 c0		 xor	 eax, eax
  00050	eb 05		 jmp	 SHORT $LN44@CCallStack
$LN42@CCallStack:
  00052	1b c0		 sbb	 eax, eax
  00054	83 d8 ff	 sbb	 eax, -1
$LN44@CCallStack:
  00057	85 c0		 test	 eax, eax
  00059	75 1a		 jne	 SHORT $LN5@CCallStack

; 14   : 	{
; 15   : 		MessageBox(NULL, "INSERT LOG-ID !!!", "ERROR", MB_OK);

  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ILOEJNOF@INSERT?5LOG?9ID?5?$CB?$CB?$CB?$AA@
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 35   : }

  0006d	8b c7		 mov	 eax, edi
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp
  00072	c2 0c 00	 ret	 12			; 0000000cH
$LN5@CCallStack:

; 16   : 		return;
; 17   : 	}
; 18   : 
; 19   : 	strcpy(this->m_szLogID, szLogID);

  00075	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  00078	8b c6		 mov	 eax, esi
  0007a	2b d6		 sub	 edx, esi
  0007c	8d 64 24 00	 npad	 4
$LL8@CCallStack:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00085	40		 inc	 eax
  00086	84 c9		 test	 cl, cl
  00088	75 f6		 jne	 SHORT $LL8@CCallStack

; 20   : 
; 21   : 	////////////////////////////////
; 22   : 	if ( !strcmp(szLogFileName, ""))

  0008a	8b 75 0c	 mov	 esi, DWORD PTR _szLogFileName$[ebp]
  0008d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00092	8b ce		 mov	 ecx, esi
$LL45@CCallStack:
  00094	8a 01		 mov	 al, BYTE PTR [ecx]
  00096	3a 02		 cmp	 al, BYTE PTR [edx]
  00098	75 1a		 jne	 SHORT $LN46@CCallStack
  0009a	84 c0		 test	 al, al
  0009c	74 12		 je	 SHORT $LN47@CCallStack
  0009e	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000a1	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  000a4	75 0e		 jne	 SHORT $LN46@CCallStack
  000a6	83 c1 02	 add	 ecx, 2
  000a9	83 c2 02	 add	 edx, 2
  000ac	84 c0		 test	 al, al
  000ae	75 e4		 jne	 SHORT $LL45@CCallStack
$LN47@CCallStack:
  000b0	33 c0		 xor	 eax, eax
  000b2	eb 05		 jmp	 SHORT $LN48@CCallStack
$LN46@CCallStack:
  000b4	1b c0		 sbb	 eax, eax
  000b6	83 d8 ff	 sbb	 eax, -1
$LN48@CCallStack:
  000b9	85 c0		 test	 eax, eax
  000bb	75 19		 jne	 SHORT $LN4@CCallStack

; 23   : 		strcpy(this->m_szLogFileName, "LOGDATA");

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07EIPNPBIJ@LOGDATA?$AA@
  000c2	89 87 0c 01 00
	00		 mov	 DWORD PTR [edi+268], eax
  000c8	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07EIPNPBIJ@LOGDATA?$AA@+4
  000ce	89 8f 10 01 00
	00		 mov	 DWORD PTR [edi+272], ecx

; 24   : 	else

  000d4	eb 14		 jmp	 SHORT $LN3@CCallStack
$LN4@CCallStack:

; 25   : 		strcpy(this->m_szLogFileName, szLogFileName);

  000d6	8d 97 0c 01 00
	00		 lea	 edx, DWORD PTR [edi+268]
  000dc	8b c6		 mov	 eax, esi
  000de	2b d6		 sub	 edx, esi
$LL9@CCallStack:
  000e0	8a 08		 mov	 cl, BYTE PTR [eax]
  000e2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000e5	40		 inc	 eax
  000e6	84 c9		 test	 cl, cl
  000e8	75 f6		 jne	 SHORT $LL9@CCallStack
$LN3@CCallStack:

; 26   : 
; 27   : 	////////////////////////////////
; 28   : 	if ( !strcmp(szLogDirectoryName, ""))

  000ea	8b 75 10	 mov	 esi, DWORD PTR _szLogDirectoryName$[ebp]
  000ed	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000f2	8b c6		 mov	 eax, esi
$LL49@CCallStack:
  000f4	8a 10		 mov	 dl, BYTE PTR [eax]
  000f6	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000f8	75 1a		 jne	 SHORT $LN50@CCallStack
  000fa	84 d2		 test	 dl, dl
  000fc	74 12		 je	 SHORT $LN51@CCallStack
  000fe	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00101	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00104	75 0e		 jne	 SHORT $LN50@CCallStack
  00106	83 c0 02	 add	 eax, 2
  00109	83 c1 02	 add	 ecx, 2
  0010c	84 d2		 test	 dl, dl
  0010e	75 e4		 jne	 SHORT $LL49@CCallStack
$LN51@CCallStack:
  00110	33 c0		 xor	 eax, eax
  00112	eb 05		 jmp	 SHORT $LN52@CCallStack
$LN50@CCallStack:
  00114	1b c0		 sbb	 eax, eax
  00116	83 d8 ff	 sbb	 eax, -1
$LN52@CCallStack:
  00119	85 c0		 test	 eax, eax
  0011b	75 0c		 jne	 SHORT $LN2@CCallStack

; 29   : 		strcpy(this->m_szLogDirectoryName, "LOG");

  0011d	c7 87 10 02 00
	00 4c 4f 47 00	 mov	 DWORD PTR [edi+528], 4673356 ; 00474f4cH

; 30   : 	else

  00127	eb 14		 jmp	 SHORT $LN1@CCallStack
$LN2@CCallStack:

; 31   : 		strcpy(this->m_szLogDirectoryName, szLogDirectoryName);

  00129	8d 97 10 02 00
	00		 lea	 edx, DWORD PTR [edi+528]
  0012f	8b c6		 mov	 eax, esi
  00131	2b d6		 sub	 edx, esi
$LL10@CCallStack:
  00133	8a 08		 mov	 cl, BYTE PTR [eax]
  00135	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00138	40		 inc	 eax
  00139	84 c9		 test	 cl, cl
  0013b	75 f6		 jne	 SHORT $LL10@CCallStack
$LN1@CCallStack:

; 32   : 
; 33   : 	CreateDirectory(szLogDirectoryName, NULL);

  0013d	6a 00		 push	 0
  0013f	56		 push	 esi
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 34   : 	InitializeCriticalSection(&this->m_critLogToFile);

  00146	8d 97 18 04 00
	00		 lea	 edx, DWORD PTR [edi+1048]
  0014c	52		 push	 edx
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 35   : }

  00153	8b c7		 mov	 eax, edi
  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5d		 pop	 ebp
  00158	c2 0c 00	 ret	 12			; 0000000cH
??0CCallStackTrace@@QAE@QAD00@Z ENDP			; CCallStackTrace::CCallStackTrace
_TEXT	ENDS
PUBLIC	??1CCallStackTrace@@UAE@XZ			; CCallStackTrace::~CCallStackTrace
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1CCallStackTrace@@UAE@XZ
_TEXT	SEGMENT
??1CCallStackTrace@@UAE@XZ PROC				; CCallStackTrace::~CCallStackTrace, COMDAT
; _this$ = ecx

; 40   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 41   : 	DeleteCriticalSection(&this->m_critLogToFile);

  00003	8d 86 18 04 00
	00		 lea	 eax, DWORD PTR [esi+1048]
  00009	50		 push	 eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCallStackTrace@@6B@
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 42   : }

  00016	83 be 44 04 00
	00 10		 cmp	 DWORD PTR [esi+1092], 16 ; 00000010H
  0001d	72 0f		 jb	 SHORT $LN14@CCallStack@2
  0001f	8b 8e 30 04 00
	00		 mov	 ecx, DWORD PTR [esi+1072]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN14@CCallStack@2:
  0002e	33 c0		 xor	 eax, eax
  00030	c7 86 44 04 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+1092], 15 ; 0000000fH
  0003a	89 86 40 04 00
	00		 mov	 DWORD PTR [esi+1088], eax
  00040	88 86 30 04 00
	00		 mov	 BYTE PTR [esi+1072], al
  00046	5e		 pop	 esi
  00047	c3		 ret	 0
??1CCallStackTrace@@UAE@XZ ENDP				; CCallStackTrace::~CCallStackTrace
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  0000d	76 0a		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00014	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN49@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00019	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001c	3b c3		 cmp	 eax, ebx
  0001e	73 18		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  00020	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  0002a	33 c9		 xor	 ecx, ecx
  0002c	3b cb		 cmp	 ecx, ebx
  0002e	1b c0		 sbb	 eax, eax
  00030	5e		 pop	 esi
  00031	f7 d8		 neg	 eax
  00033	5b		 pop	 ebx

; 1970 : 		}

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00038	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  0003c	74 4e		 je	 SHORT $LN3@Grow
  0003e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00041	73 49		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00043	57		 push	 edi
  00044	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00047	3b df		 cmp	 ebx, edi
  00049	73 02		 jae	 SHORT $LN9@Grow
  0004b	8b fb		 mov	 edi, ebx
$LN9@Grow:
  0004d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00050	72 1d		 jb	 SHORT $LN30@Grow
  00052	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00054	85 ff		 test	 edi, edi
  00056	74 0b		 je	 SHORT $LN28@Grow
  00058	57		 push	 edi
  00059	53		 push	 ebx
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _memcpy
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN28@Grow:
  00063	53		 push	 ebx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0006c	83 c4 04	 add	 esp, 4
$LN30@Grow:
  0006f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00072	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00079	33 c9		 xor	 ecx, ecx
  0007b	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0007f	3b cb		 cmp	 ecx, ebx
  00081	5f		 pop	 edi
  00082	1b c0		 sbb	 eax, eax
  00084	5e		 pop	 esi
  00085	f7 d8		 neg	 eax
  00087	5b		 pop	 ebx

; 1970 : 		}

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  0008c	85 db		 test	 ebx, ebx
  0008e	75 0d		 jne	 SHORT $LN46@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  00090	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00093	83 f8 10	 cmp	 eax, 16			; 00000010H
  00096	72 02		 jb	 SHORT $LN44@Grow
  00098	8b 36		 mov	 esi, DWORD PTR [esi]
$LN44@Grow:
  0009a	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN46@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  0009d	33 c9		 xor	 ecx, ecx
  0009f	3b cb		 cmp	 ecx, ebx
  000a1	1b c0		 sbb	 eax, eax
  000a3	5e		 pop	 esi
  000a4	f7 d8		 neg	 eax
  000a6	5b		 pop	 ebx

; 1970 : 		}

  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN48@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GCCallStackTrace@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCallStackTrace@@UAEPAXI@Z PROC			; CCallStackTrace::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCallStackTrace@@UAE@XZ ; CCallStackTrace::~CCallStackTrace
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCCallStackTrace@@UAEPAXI@Z ENDP			; CCallStackTrace::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 799  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 800  : 		if (_Right.size() < _Roff)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	3b c1		 cmp	 eax, ecx
  00012	73 0a		 jae	 SHORT $LN4@append

; 801  : 			_Xran();	// _Roff off end

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00019	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN85@append:
$LN4@append:

; 802  : 		size_type _Num = _Right.size() - _Roff;
; 803  : 		if (_Num < _Count)

  0001e	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00021	2b c1		 sub	 eax, ecx
  00023	3b c3		 cmp	 eax, ebx
  00025	73 02		 jae	 SHORT $LN3@append

; 804  : 			_Count = _Num;	// trim _Count to size

  00027	8b d8		 mov	 ebx, eax
$LN3@append:

; 805  : 		if (npos - this->_Mysize <= _Count)

  00029	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002c	83 c9 ff	 or	 ecx, -1
  0002f	2b c8		 sub	 ecx, eax
  00031	3b cb		 cmp	 ecx, ebx
  00033	77 0a		 ja	 SHORT $LN2@append

; 806  : 			_Xlen();	// result too long

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0003a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN86@append:
$LN2@append:

; 807  : 
; 808  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	0f 84 9d 00 00
	00		 je	 $LN79@append
  00047	57		 push	 edi
  00048	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  0004b	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0004e	76 0a		 jbe	 SHORT $LN21@append
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00055	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN87@append:
$LN21@append:
  0005a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0005d	3b cf		 cmp	 ecx, edi
  0005f	73 1e		 jae	 SHORT $LN20@append
  00061	50		 push	 eax
  00062	57		 push	 edi
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0006a	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0006d	85 ff		 test	 edi, edi
  0006f	74 72		 je	 SHORT $LN81@append
$LN84@append:

; 809  : 			{	// make room and append new stuff
; 810  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 811  : 				_Right._Myptr() + _Roff, _Count);

  00071	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00076	39 42 14	 cmp	 DWORD PTR [edx+20], eax
  00079	72 2a		 jb	 SHORT $LN65@append
  0007b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0007d	eb 28		 jmp	 SHORT $LN66@append

; 807  : 
; 808  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

$LN20@append:
  0007f	85 ff		 test	 edi, edi
  00081	75 ee		 jne	 SHORT $LN84@append
  00083	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00086	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00089	72 0e		 jb	 SHORT $LN59@append
  0008b	8b 06		 mov	 eax, DWORD PTR [esi]
  0008d	5f		 pop	 edi
  0008e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 813  : 			}
; 814  : 		return (*this);

  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 815  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH

; 807  : 
; 808  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

$LN59@append:
  00099	5f		 pop	 edi
  0009a	8b c6		 mov	 eax, esi
  0009c	5e		 pop	 esi
  0009d	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a0	5b		 pop	 ebx

; 815  : 		}

  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH

; 809  : 			{	// make room and append new stuff
; 810  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 811  : 				_Right._Myptr() + _Roff, _Count);

$LN65@append:
  000a5	8b ca		 mov	 ecx, edx
$LN66@append:
  000a7	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  000aa	72 04		 jb	 SHORT $LN69@append
  000ac	8b 06		 mov	 eax, DWORD PTR [esi]
  000ae	eb 02		 jmp	 SHORT $LN70@append
$LN69@append:
  000b0	8b c6		 mov	 eax, esi
$LN70@append:
  000b2	03 4d 0c	 add	 ecx, DWORD PTR __Roff$[ebp]
  000b5	53		 push	 ebx
  000b6	51		 push	 ecx
  000b7	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000ba	03 c8		 add	 ecx, eax
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _memcpy
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 812  : 			_Eos(_Num);

  000c5	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c9	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000cc	72 0f		 jb	 SHORT $LN77@append
  000ce	8b 06		 mov	 eax, DWORD PTR [esi]
  000d0	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000d4	5f		 pop	 edi

; 813  : 			}
; 814  : 		return (*this);

  000d5	8b c6		 mov	 eax, esi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx

; 815  : 		}

  000d9	5d		 pop	 ebp
  000da	c2 0c 00	 ret	 12			; 0000000cH

; 812  : 			_Eos(_Num);

$LN77@append:
  000dd	8b c6		 mov	 eax, esi
  000df	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN81@append:
  000e3	5f		 pop	 edi
$LN79@append:

; 813  : 			}
; 814  : 		return (*this);

  000e4	8b c6		 mov	 eax, esi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx

; 815  : 		}

  000e8	5d		 pop	 ebp
  000e9	c2 0c 00	 ret	 12			; 0000000cH
$LN82@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Roff$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000d	57		 push	 edi
  0000e	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]
  00011	3b fb		 cmp	 edi, ebx
  00013	73 0a		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN83@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;
; 897  : 		if (_Count < _Num)

  0001f	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00022	2b fb		 sub	 edi, ebx
  00024	3b c7		 cmp	 eax, edi
  00026	73 02		 jae	 SHORT $LN4@assign

; 898  : 			_Num = _Count;	// trim _Num to size

  00028	8b f8		 mov	 edi, eax
$LN4@assign:

; 899  : 
; 900  : 		if (this == &_Right)

  0002a	3b f1		 cmp	 esi, ecx
  0002c	75 1f		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002e	6a ff		 push	 -1
  00030	03 fb		 add	 edi, ebx
  00032	57		 push	 edi
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003a	53		 push	 ebx
  0003b	6a 00		 push	 0
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00044	5f		 pop	 edi

; 906  : 			}
; 907  : 		return (*this);

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 908  : 		}

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  0004d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00050	76 0a		 jbe	 SHORT $LN20@assign
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00057	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN84@assign:
$LN20@assign:
  0005c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005f	3b c7		 cmp	 eax, edi
  00061	73 28		 jae	 SHORT $LN19@assign
  00063	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00066	50		 push	 eax
  00067	57		 push	 edi
  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00072	85 ff		 test	 edi, edi
  00074	74 68		 je	 SHORT $LN78@assign
$LN82@assign:

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00076	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007b	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  0007e	72 02		 jb	 SHORT $LN64@assign
  00080	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN64@assign:
  00082	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00085	72 2a		 jb	 SHORT $LN68@assign
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	eb 28		 jmp	 SHORT $LN69@assign

; 902  : 		else if (_Grow(_Num))

$LN19@assign:
  0008b	85 ff		 test	 edi, edi
  0008d	75 e7		 jne	 SHORT $LN82@assign
  0008f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00092	83 f8 10	 cmp	 eax, 16			; 00000010H
  00095	72 0e		 jb	 SHORT $LN58@assign
  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	5f		 pop	 edi
  0009a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 906  : 			}
; 907  : 		return (*this);

  0009d	8b c6		 mov	 eax, esi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx

; 908  : 		}

  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH

; 902  : 		else if (_Grow(_Num))

$LN58@assign:
  000a5	5f		 pop	 edi
  000a6	8b c6		 mov	 eax, esi
  000a8	5e		 pop	 esi
  000a9	c6 00 00	 mov	 BYTE PTR [eax], 0
  000ac	5b		 pop	 ebx

; 908  : 		}

  000ad	5d		 pop	 ebp
  000ae	c2 0c 00	 ret	 12			; 0000000cH

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$LN68@assign:
  000b1	8b c6		 mov	 eax, esi
$LN69@assign:
  000b3	57		 push	 edi
  000b4	03 cb		 add	 ecx, ebx
  000b6	51		 push	 ecx
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _memcpy
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  000c0	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000c4	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000c7	72 0f		 jb	 SHORT $LN76@assign
  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000cf	5f		 pop	 edi

; 906  : 			}
; 907  : 		return (*this);

  000d0	8b c6		 mov	 eax, esi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 908  : 		}

  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH

; 905  : 			_Eos(_Num);

$LN76@assign:
  000d8	8b c6		 mov	 eax, esi
  000da	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN78@assign:

; 906  : 			}
; 907  : 		return (*this);

  000de	5f		 pop	 edi
  000df	8b c6		 mov	 eax, esi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 908  : 		}

  000e3	5d		 pop	 ebp
  000e4	c2 0c 00	 ret	 12			; 0000000cH
$LN80@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 db		 test	 ebx, ebx
  0000c	74 59		 je	 SHORT $LN85@assign@2
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN12@assign@2
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN13@assign@2
$LN12@assign@2:
  0001a	8b c6		 mov	 eax, esi
$LN13@assign@2:
  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 47		 jb	 SHORT $LN85@assign@2
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN16@assign@2
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN17@assign@2
$LN16@assign@2:
  00029	8b c6		 mov	 eax, esi
$LN17@assign@2:
  0002b	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0002e	03 d0		 add	 edx, eax
  00030	3b d3		 cmp	 edx, ebx
  00032	76 33		 jbe	 SHORT $LN85@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 17		 jb	 SHORT $LN20@assign@2
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0003e	51		 push	 ecx
  0003f	2b d8		 sub	 ebx, eax
  00041	53		 push	 ebx
  00042	56		 push	 esi
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 926  : 		}

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

$LN20@assign@2:
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	8b c6		 mov	 eax, esi
  00055	51		 push	 ecx
  00056	2b d8		 sub	 ebx, eax
  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx

; 926  : 		}

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN85@assign@2:
  00067	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00068	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0006b	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0006e	76 0a		 jbe	 SHORT $LN27@assign@2
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00075	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN89@assign@2:
$LN27@assign@2:
  0007a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0007d	3b c7		 cmp	 eax, edi
  0007f	73 1a		 jae	 SHORT $LN26@assign@2
  00081	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00084	52		 push	 edx
  00085	57		 push	 edi
  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0008d	85 ff		 test	 edi, edi
  0008f	74 5b		 je	 SHORT $LN82@assign@2
$LN88@assign@2:

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00091	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00095	72 2a		 jb	 SHORT $LN72@assign@2
  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	eb 28		 jmp	 SHORT $LN73@assign@2

; 919  : 
; 920  : 		if (_Grow(_Count))

$LN26@assign@2:
  0009b	85 ff		 test	 edi, edi
  0009d	75 f2		 jne	 SHORT $LN88@assign@2
  0009f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000a2	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a5	72 0e		 jb	 SHORT $LN65@assign@2
  000a7	8b 06		 mov	 eax, DWORD PTR [esi]
  000a9	5f		 pop	 edi
  000aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 924  : 			}
; 925  : 		return (*this);

  000ad	8b c6		 mov	 eax, esi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx

; 926  : 		}

  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8

; 919  : 
; 920  : 		if (_Grow(_Count))

$LN65@assign@2:
  000b5	5f		 pop	 edi
  000b6	8b c6		 mov	 eax, esi
  000b8	5e		 pop	 esi
  000b9	c6 00 00	 mov	 BYTE PTR [eax], 0
  000bc	5b		 pop	 ebx

; 926  : 		}

  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

$LN72@assign@2:
  000c1	8b c6		 mov	 eax, esi
$LN73@assign@2:
  000c3	57		 push	 edi
  000c4	53		 push	 ebx
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _memcpy
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  000ce	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000d2	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000d5	72 0f		 jb	 SHORT $LN80@assign@2
  000d7	8b 06		 mov	 eax, DWORD PTR [esi]
  000d9	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000dd	5f		 pop	 edi

; 924  : 			}
; 925  : 		return (*this);

  000de	8b c6		 mov	 eax, esi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx

; 926  : 		}

  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8

; 923  : 			_Eos(_Count);

$LN80@assign@2:
  000e6	8b c6		 mov	 eax, esi
  000e8	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN82@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  000ec	5f		 pop	 edi
  000ed	8b c6		 mov	 eax, esi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx

; 926  : 		}

  000f1	5d		 pop	 ebp
  000f2	c2 08 00	 ret	 8
$LN86@assign@2:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 818  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 819  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 820  : 		if (_Count != 0)
; 821  : 			_DEBUG_POINTER(_Ptr);
; 822  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 823  : 
; 824  : 		if (_Inside(_Ptr))

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 d2		 test	 edx, edx
  0000c	74 59		 je	 SHORT $LN88@append@2
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN13@append@2
  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	eb 02		 jmp	 SHORT $LN14@append@2
$LN13@append@2:
  0001a	8b c6		 mov	 eax, esi
$LN14@append@2:
  0001c	3b d0		 cmp	 edx, eax
  0001e	72 47		 jb	 SHORT $LN88@append@2
  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN17@append@2
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	eb 02		 jmp	 SHORT $LN18@append@2
$LN17@append@2:
  00029	8b c6		 mov	 eax, esi
$LN18@append@2:
  0002b	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0002e	03 f8		 add	 edi, eax
  00030	3b fa		 cmp	 edi, edx
  00032	76 33		 jbe	 SHORT $LN88@append@2

; 825  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 17		 jb	 SHORT $LN21@append@2
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0003e	51		 push	 ecx
  0003f	2b d0		 sub	 edx, eax
  00041	52		 push	 edx
  00042	56		 push	 esi
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 836  : 		}

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8

; 825  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

$LN21@append@2:
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	8b c6		 mov	 eax, esi
  00055	51		 push	 ecx
  00056	2b d0		 sub	 edx, eax
  00058	52		 push	 edx
  00059	56		 push	 esi
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 836  : 		}

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN88@append@2:

; 826  : 		if (npos - this->_Mysize <= _Count)

  00067	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006a	83 c9 ff	 or	 ecx, -1
  0006d	53		 push	 ebx
  0006e	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00071	2b c8		 sub	 ecx, eax
  00073	3b cb		 cmp	 ecx, ebx
  00075	77 0a		 ja	 SHORT $LN2@append@2

; 827  : 			_Xlen();	// result too long

  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0007c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN92@append@2:
$LN2@append@2:

; 828  : 
; 829  : 		size_type _Num;
; 830  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00081	85 db		 test	 ebx, ebx
  00083	0f 84 89 00 00
	00		 je	 $LN85@append@2
  00089	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  0008c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0008f	76 0a		 jbe	 SHORT $LN31@append@2
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00096	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN93@append@2:
$LN31@append@2:
  0009b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0009e	3b cf		 cmp	 ecx, edi
  000a0	73 1a		 jae	 SHORT $LN30@append@2
  000a2	50		 push	 eax
  000a3	57		 push	 edi
  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  000ab	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000ae	85 ff		 test	 edi, edi
  000b0	74 60		 je	 SHORT $LN85@append@2
$LN91@append@2:

; 831  : 			{	// make room and append new stuff
; 832  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

  000b2	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000b6	72 2a		 jb	 SHORT $LN75@append@2
  000b8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ba	eb 28		 jmp	 SHORT $LN76@append@2

; 828  : 
; 829  : 		size_type _Num;
; 830  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

$LN30@append@2:
  000bc	85 ff		 test	 edi, edi
  000be	75 f2		 jne	 SHORT $LN91@append@2
  000c0	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000c3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000c6	72 0e		 jb	 SHORT $LN69@append@2
  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ca	5b		 pop	 ebx
  000cb	c6 00 00	 mov	 BYTE PTR [eax], 0
  000ce	5f		 pop	 edi

; 834  : 			}
; 835  : 		return (*this);

  000cf	8b c6		 mov	 eax, esi
  000d1	5e		 pop	 esi

; 836  : 		}

  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8

; 828  : 
; 829  : 		size_type _Num;
; 830  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

$LN69@append@2:
  000d6	5b		 pop	 ebx
  000d7	8b c6		 mov	 eax, esi
  000d9	5f		 pop	 edi
  000da	c6 00 00	 mov	 BYTE PTR [eax], 0
  000dd	5e		 pop	 esi

; 836  : 		}

  000de	5d		 pop	 ebp
  000df	c2 08 00	 ret	 8

; 831  : 			{	// make room and append new stuff
; 832  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

$LN75@append@2:
  000e2	8b c6		 mov	 eax, esi
$LN76@append@2:
  000e4	53		 push	 ebx
  000e5	52		 push	 edx
  000e6	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000e9	03 d0		 add	 edx, eax
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 _memcpy
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 833  : 			_Eos(_Num);

  000f4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000f8	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000fb	72 0f		 jb	 SHORT $LN83@append@2
  000fd	8b 06		 mov	 eax, DWORD PTR [esi]
  000ff	5b		 pop	 ebx
  00100	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00104	5f		 pop	 edi

; 834  : 			}
; 835  : 		return (*this);

  00105	8b c6		 mov	 eax, esi
  00107	5e		 pop	 esi

; 836  : 		}

  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8

; 833  : 			_Eos(_Num);

$LN83@append@2:
  0010c	8b c6		 mov	 eax, esi
  0010e	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN85@append@2:

; 834  : 			}
; 835  : 		return (*this);

  00112	5b		 pop	 ebx
  00113	5f		 pop	 edi
  00114	8b c6		 mov	 eax, esi
  00116	5e		 pop	 esi

; 836  : 		}

  00117	5d		 pop	 ebp
  00118	c2 08 00	 ret	 8
$LN89@append@2:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	8d 49 00	 npad	 3
$LL5@assign@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@assign@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 932  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 839  : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 840  : 		_DEBUG_POINTER(_Ptr);
; 841  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	8d 49 00	 npad	 3
$LL5@append@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL5@append@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 842  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 768  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 769  : 		return (assign(_Ptr));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	8d 49 00	 npad	 3
$LL7@operator@2:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@2
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 770  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 783  : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 784  : 		return (append(_Ptr));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b c6		 mov	 eax, esi
  00009	57		 push	 edi
  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	8d 49 00	 npad	 3
$LL7@operator@3:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL7@operator@3
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 785  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?TraceStack@CCallStackTrace@@AAEHH@Z		; CCallStackTrace::TraceStack
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__StackWalk@36:PROC
EXTRN	__imp__SymFunctionTableAccess@8:PROC
EXTRN	__imp__GetThreadContext@8:PROC
EXTRN	__imp__SymInitialize@12:PROC
EXTRN	__imp__SymSetOptions@4:PROC
EXTRN	__imp__SymGetOptions@0:PROC
EXTRN	__imp__GetCurrentThread@0:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__chkstk:PROC
EXTRN	__except_handler4:PROC
EXTRN	__local_unwind4:PROC
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?TraceStack@CCallStackTrace@@AAEHH@Z DD 0ffffffe4H
	DD	00H
	DD	0ffff7750H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN19@TraceStack
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\callstacktrace.cpp
xdata$x	ENDS
;	COMDAT ?TraceStack@CCallStackTrace@@AAEHH@Z
_TEXT	SEGMENT
_i$166583 = -34976					; size = 4
_addr_index$166591 = -34972				; size = 4
_address_count$166579 = -34968				; size = 4
_this$GSCopy$ = -34964					; size = 4
_context$166580 = -34960				; size = 716
_stackframe$166582 = -34244				; size = 164
_addresses$166578 = -34080				; size = 32768
_symbol$166595 = -1312					; size = 1284
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_bWriteInFile$ = 8					; size = 4
?TraceStack@CCallStackTrace@@AAEHH@Z PROC		; CCallStackTrace::TraceStack, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?TraceStack@CCallStackTrace@@AAEHH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 08	 sub	 esp, 8
  00019	b8 88 88 00 00	 mov	 eax, 34952		; 00008888H
  0001e	e8 00 00 00 00	 call	 __chkstk
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00030	53		 push	 ebx
  00031	56		 push	 esi
  00032	57		 push	 edi
  00033	50		 push	 eax
  00034	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00040	8b f1		 mov	 esi, ecx

; 147  : 	if ( strcmp(this->m_szLogID, "") == 0 )

  00042	89 b5 6c 77 ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
$LL35@TraceStack:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN36@TraceStack
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN37@TraceStack
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN36@TraceStack
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL35@TraceStack
$LN37@TraceStack:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN38@TraceStack
$LN36@TraceStack:
  00070	1b c0		 sbb	 eax, eax
  00072	83 d8 ff	 sbb	 eax, -1
$LN38@TraceStack:

; 148  : 	{
; 149  : 		MessageBox(NULL, "INSERT LOG-ID !!!", "ERROR", MB_OK);

  00075	6a 00		 push	 0

; 147  : 	if ( strcmp(this->m_szLogID, "") == 0 )

  00077	85 c0		 test	 eax, eax
  00079	75 19		 jne	 SHORT $LN15@TraceStack

; 148  : 	{
; 149  : 		MessageBox(NULL, "INSERT LOG-ID !!!", "ERROR", MB_OK);

  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_05MBDEGLCK@ERROR?$AA@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ILOEJNOF@INSERT?5LOG?9ID?5?$CB?$CB?$CB?$AA@
  00085	50		 push	 eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 150  : 		return -1;

  0008c	83 c8 ff	 or	 eax, -1
  0008f	e9 44 02 00 00	 jmp	 $LN22@TraceStack
$LN15@TraceStack:

; 151  : 	}
; 152  : 
; 153  : 	this->m_strCallStackLog = "";

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00099	8d 8e 30 04 00
	00		 lea	 ecx, DWORD PTR [esi+1072]
  0009f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 154  : 
; 155  : 	EnterCriticalSection(&this->m_critLogToFile);

  000a4	81 c6 18 04 00
	00		 add	 esi, 1048		; 00000418H
  000aa	56		 push	 esi
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 156  : 
; 157  : 	__try

  000b1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 158  : 	{
; 159  : 		HANDLE hProcess = GetCurrentProcess();

  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  000be	8b d8		 mov	 ebx, eax

; 160  : 		HANDLE hThread  = GetCurrentThread();

  000c0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetCurrentThread@0
  000c6	ff d7		 call	 edi
  000c8	8b f0		 mov	 esi, eax

; 161  : 		DWORD option = SymGetOptions();

  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SymGetOptions@0
  000d0	25 ed 00 00 00	 and	 eax, 237		; 000000edH

; 162  : 		option |= 0x10;
; 163  : 		option &= 0xFD;
; 164  : 		SymSetOptions(option|0x10);

  000d5	83 c8 10	 or	 eax, 16			; 00000010H
  000d8	50		 push	 eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SymSetOptions@4

; 165  : 
; 166  : 		if (SymInitialize(hProcess, NULL, TRUE) == FALSE )

  000df	6a 01		 push	 1
  000e1	6a 00		 push	 0
  000e3	53		 push	 ebx
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SymInitialize@12
  000ea	85 c0		 test	 eax, eax
  000ec	75 1b		 jne	 SHORT $LN13@TraceStack

; 167  : 		{
; 168  : 			return -1;

  000ee	6a fe		 push	 -2			; fffffffeH
  000f0	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  000f3	50		 push	 eax
$LN43@TraceStack:
  000f4	68 00 00 00 00	 push	 OFFSET ___security_cookie
  000f9	e8 00 00 00 00	 call	 __local_unwind4
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00101	83 c8 ff	 or	 eax, -1
  00104	e9 cf 01 00 00	 jmp	 $LN22@TraceStack
$LN13@TraceStack:

; 169  : 		}
; 170  : 
; 171  : 		DWORD addresses[0x2000]={0};

  00109	c7 85 e0 7a ff
	ff 00 00 00 00	 mov	 DWORD PTR _addresses$166578[ebp], 0
  00113	68 fc 7f 00 00	 push	 32764			; 00007ffcH
  00118	6a 00		 push	 0
  0011a	8d 8d e4 7a ff
	ff		 lea	 ecx, DWORD PTR _addresses$166578[ebp+4]
  00120	51		 push	 ecx
  00121	e8 00 00 00 00	 call	 _memset

; 172  : 		UINT address_count = 0;

  00126	c7 85 68 77 ff
	ff 00 00 00 00	 mov	 DWORD PTR _address_count$166579[ebp], 0

; 173  : 		CONTEXT context;
; 174  : 		memset(&context, 0, sizeof(context));

  00130	68 cc 02 00 00	 push	 716			; 000002ccH
  00135	6a 00		 push	 0
  00137	8d 95 70 77 ff
	ff		 lea	 edx, DWORD PTR _context$166580[ebp]
  0013d	52		 push	 edx
  0013e	e8 00 00 00 00	 call	 _memset
  00143	83 c4 18	 add	 esp, 24			; 00000018H

; 175  : 		context.ContextFlags = 0x10007;

  00146	c7 85 70 77 ff
	ff 07 00 01 00	 mov	 DWORD PTR _context$166580[ebp], 65543 ; 00010007H

; 176  : 
; 177  : 		if ( GetThreadContext(GetCurrentThread(), &context) == FALSE )

  00150	8d 85 70 77 ff
	ff		 lea	 eax, DWORD PTR _context$166580[ebp]
  00156	50		 push	 eax
  00157	ff d7		 call	 edi
  00159	50		 push	 eax
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadContext@8
  00160	85 c0		 test	 eax, eax
  00162	75 08		 jne	 SHORT $LN12@TraceStack

; 178  : 		{
; 179  : 			return -1;

  00164	6a fe		 push	 -2			; fffffffeH
  00166	8d 4d f0	 lea	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00169	51		 push	 ecx
  0016a	eb 88		 jmp	 SHORT $LN43@TraceStack
$LN12@TraceStack:

; 180  : 		}
; 181  : 
; 182  : 		STACKFRAME stackframe;
; 183  : 		memset(&stackframe, 0, sizeof(stackframe));

  0016c	68 a4 00 00 00	 push	 164			; 000000a4H
  00171	6a 00		 push	 0
  00173	8d 95 3c 7a ff
	ff		 lea	 edx, DWORD PTR _stackframe$166582[ebp]
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 _memset
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  : 		stackframe.Params[0] = 3;

  00182	b9 03 00 00 00	 mov	 ecx, 3
  00187	89 8d 70 7a ff
	ff		 mov	 DWORD PTR _stackframe$166582[ebp+52], ecx

; 185  : 		stackframe.Far = context.ContextFlags;

  0018d	8b 85 70 77 ff
	ff		 mov	 eax, DWORD PTR _context$166580[ebp]
  00193	89 85 80 7a ff
	ff		 mov	 DWORD PTR _stackframe$166582[ebp+68], eax

; 186  : 		stackframe.Far = context.Ebp;

  00199	8b 95 24 78 ff
	ff		 mov	 edx, DWORD PTR _context$166580[ebp+180]
  0019f	89 95 80 7a ff
	ff		 mov	 DWORD PTR _stackframe$166582[ebp+68], edx

; 187  : 		stackframe.Far = 3;

  001a5	89 8d 80 7a ff
	ff		 mov	 DWORD PTR _stackframe$166582[ebp+68], ecx

; 188  : 		stackframe.Far = context.Eip;

  001ab	8b 85 28 78 ff
	ff		 mov	 eax, DWORD PTR _context$166580[ebp+184]
  001b1	89 85 80 7a ff
	ff		 mov	 DWORD PTR _stackframe$166582[ebp+68], eax

; 189  : 		stackframe.Virtual = 3;

  001b7	89 8d 84 7a ff
	ff		 mov	 DWORD PTR _stackframe$166582[ebp+72], ecx

; 190  : 		
; 191  : 		for ( UINT i=0;i<512;i++ )

  001bd	33 ff		 xor	 edi, edi
$LN41@TraceStack:
  001bf	89 bd 60 77 ff
	ff		 mov	 DWORD PTR _i$166583[ebp], edi
  001c5	81 ff 00 02 00
	00		 cmp	 edi, 512		; 00000200H
  001cb	73 54		 jae	 SHORT $LN9@TraceStack

; 192  : 		{
; 193  : 			if ( StackWalk( 0x14C, hProcess, hThread, &stackframe, &context, NULL,
; 194  : 				SymFunctionTableAccess, (PGET_MODULE_BASE_ROUTINE)CCallStackTrace::GetModuleBase, NULL) == FALSE )

  001cd	6a 00		 push	 0
  001cf	68 00 00 00 00	 push	 OFFSET ?GetModuleBase@CCallStackTrace@@CGKPAXK@Z ; CCallStackTrace::GetModuleBase
  001d4	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__SymFunctionTableAccess@8
  001d9	50		 push	 eax
  001da	6a 00		 push	 0
  001dc	8d 8d 70 77 ff
	ff		 lea	 ecx, DWORD PTR _context$166580[ebp]
  001e2	51		 push	 ecx
  001e3	8d 95 3c 7a ff
	ff		 lea	 edx, DWORD PTR _stackframe$166582[ebp]
  001e9	52		 push	 edx
  001ea	56		 push	 esi
  001eb	53		 push	 ebx
  001ec	68 4c 01 00 00	 push	 332			; 0000014cH
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StackWalk@36
  001f7	85 c0		 test	 eax, eax

; 195  : 			{
; 196  : 				break;
; 197  : 			}
; 198  : 
; 199  : 			if ( stackframe.Far > 1 )

  001f9	8b 85 80 7a ff
	ff		 mov	 eax, DWORD PTR _stackframe$166582[ebp+68]

; 192  : 		{
; 193  : 			if ( StackWalk( 0x14C, hProcess, hThread, &stackframe, &context, NULL,
; 194  : 				SymFunctionTableAccess, (PGET_MODULE_BASE_ROUTINE)CCallStackTrace::GetModuleBase, NULL) == FALSE )

  001ff	74 20		 je	 SHORT $LN9@TraceStack

; 195  : 			{
; 196  : 				break;
; 197  : 			}
; 198  : 
; 199  : 			if ( stackframe.Far > 1 )

  00201	83 f8 01	 cmp	 eax, 1
  00204	7e 18		 jle	 SHORT $LN6@TraceStack

; 200  : 			{
; 201  : 				 if ( stackframe.Far )

  00206	85 c0		 test	 eax, eax
  00208	74 14		 je	 SHORT $LN6@TraceStack

; 202  : 				 {
; 203  : 					 addresses[address_count] = stackframe.Far;

  0020a	8b 8d 68 77 ff
	ff		 mov	 ecx, DWORD PTR _address_count$166579[ebp]
  00210	89 84 8d e0 7a
	ff ff		 mov	 DWORD PTR _addresses$166578[ebp+ecx*4], eax

; 204  : 					 address_count++;

  00217	41		 inc	 ecx
  00218	89 8d 68 77 ff
	ff		 mov	 DWORD PTR _address_count$166579[ebp], ecx
$LN6@TraceStack:

; 190  : 		
; 191  : 		for ( UINT i=0;i<512;i++ )

  0021e	47		 inc	 edi
  0021f	eb 9e		 jmp	 SHORT $LN41@TraceStack
$LN9@TraceStack:

; 205  : 				 }
; 206  : 			}
; 207  : 		}
; 208  : 
; 209  : 		for ( UINT addr_index =0 ;addr_index < stackframe.Far ; addr_index++ )

  00221	33 ff		 xor	 edi, edi
$LN42@TraceStack:
  00223	89 bd 64 77 ff
	ff		 mov	 DWORD PTR _addr_index$166591[ebp], edi
  00229	3b f8		 cmp	 edi, eax
  0022b	73 65		 jae	 SHORT $LN3@TraceStack

; 210  : 		{
; 211  : 			char symbol[0x504] ={0};

  0022d	c6 85 e0 fa ff
	ff 00		 mov	 BYTE PTR _symbol$166595[ebp], 0
  00234	68 03 05 00 00	 push	 1283			; 00000503H
  00239	6a 00		 push	 0
  0023b	8d 85 e1 fa ff
	ff		 lea	 eax, DWORD PTR _symbol$166595[ebp+1]
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 _memset
  00247	83 c4 0c	 add	 esp, 12			; 0000000cH

; 212  : 			DWORD symbol_size = this->ConvertAddress(hProcess, addresses[addr_index], symbol);

  0024a	8d 8d e0 fa ff
	ff		 lea	 ecx, DWORD PTR _symbol$166595[ebp]
  00250	51		 push	 ecx
  00251	8b 94 bd e0 7a
	ff ff		 mov	 edx, DWORD PTR _addresses$166578[ebp+edi*4]
  00258	52		 push	 edx
  00259	53		 push	 ebx
  0025a	8b b5 6c 77 ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00260	8b ce		 mov	 ecx, esi
  00262	e8 00 00 00 00	 call	 ?ConvertAddress@CCallStackTrace@@AAEKPAXKPAD@Z ; CCallStackTrace::ConvertAddress

; 213  : 			this->m_strCallStackLog += "\t";

  00267	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
  0026c	8d 8e 30 04 00
	00		 lea	 ecx, DWORD PTR [esi+1072]
  00272	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 214  : 			this->m_strCallStackLog += symbol;

  00277	8d 85 e0 fa ff
	ff		 lea	 eax, DWORD PTR _symbol$166595[ebp]
  0027d	50		 push	 eax
  0027e	8d 8e 30 04 00
	00		 lea	 ecx, DWORD PTR [esi+1072]
  00284	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 205  : 				 }
; 206  : 			}
; 207  : 		}
; 208  : 
; 209  : 		for ( UINT addr_index =0 ;addr_index < stackframe.Far ; addr_index++ )

  00289	47		 inc	 edi
  0028a	8b 85 80 7a ff
	ff		 mov	 eax, DWORD PTR _stackframe$166582[ebp+68]
  00290	eb 91		 jmp	 SHORT $LN42@TraceStack
$LN3@TraceStack:

; 218  : 		{
; 219  : 			if ( this->m_strCallStackLog.empty() == false )

  00292	8b b5 6c 77 ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]

; 215  : 		}
; 216  : 
; 217  : 		if ( bWriteInFile )

  00298	83 7d 08 00	 cmp	 DWORD PTR _bWriteInFile$[ebp], 0
  0029c	74 10		 je	 SHORT $LN1@TraceStack

; 218  : 		{
; 219  : 			if ( this->m_strCallStackLog.empty() == false )

  0029e	83 be 40 04 00
	00 00		 cmp	 DWORD PTR [esi+1088], 0
  002a5	74 07		 je	 SHORT $LN1@TraceStack

; 220  : 			{
; 221  : 				this->Output();

  002a7	8b ce		 mov	 ecx, esi
  002a9	e8 00 00 00 00	 call	 ?Output@CCallStackTrace@@AAEXXZ ; CCallStackTrace::Output
$LN1@TraceStack:

; 222  : 			}
; 223  : 		}
; 224  : 	}
; 225  : 	__finally

  002ae	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  002b5	e8 08 00 00 00	 call	 $LN21@TraceStack
  002ba	eb 06		 jmp	 SHORT $LN21@TraceStack
$LN19@TraceStack:
$LN44@TraceStack:
  002bc	8b b5 6c 77 ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN21@TraceStack:

; 226  : 	{
; 227  : 		LeaveCriticalSection(&this->m_critLogToFile);

  002c2	8d 8e 18 04 00
	00		 lea	 ecx, DWORD PTR [esi+1048]
  002c8	51		 push	 ecx
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 228  : 		return this->m_strCallStackLog.size();

  002cf	8b 86 40 04 00
	00		 mov	 eax, DWORD PTR [esi+1088]
  002d5	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]
$LN22@TraceStack:

; 229  : 	}
; 230  : 		/*
; 231  : Data           :     ebp Relative, [0xffffffe0], Local, Type: void *, hProcess
; 232  : Data           :     ebp Relative, [0xffffffdc], Local, Type: void *, hThread
; 233  : Data           :     ebp Relative, [0xffffffd8], Local, Type: unsigned long, option
; 234  : Data           :     ebp Relative, [0xffff7fd8], Local, Type: unsigned long[0x2000], addresses
; 235  : Data           :     ebp Relative, [0xffff7fd4], Local, Type: unsigned int, address_count
; 236  : 
; 237  : 
; 238  : Data           :     ebp Relative, [0xffff7d08], Local, Type: struct _CONTEXT, context
; 239  : Data           :     ebp Relative, [0xffff7c64], Local, Type: struct _tagSTACKFRAME, stackframe
; 240  : 
; 241  : 
; 242  : Data           :     ebp Relative, [0xffff7c60], Local, Type: unsigned int, i
; 243  : Data           :     ebp Relative, [0xffff7c5c], Local, Type: unsigned int, addr_index
; 244  : 
; 245  : 
; 246  : Data           :       ebp Relative, [0xffff7758], Local, Type: char[0x504], symbol
; 247  : Data           :       ebp Relative, [0xffff7754], Local, Type: unsigned long, symbol_size*/
; 248  : 
; 249  : }

  002d8	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  002db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e2	59		 pop	 ecx
  002e3	5f		 pop	 edi
  002e4	5e		 pop	 esi
  002e5	5b		 pop	 ebx
  002e6	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e9	33 cd		 xor	 ecx, ebp
  002eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f0	8b e5		 mov	 esp, ebp
  002f2	5d		 pop	 ebp
  002f3	c2 04 00	 ret	 4
?TraceStack@CCallStackTrace@@AAEHH@Z ENDP		; CCallStackTrace::TraceStack
_TEXT	ENDS
PUBLIC	?SaveCallStack@CCallStackTrace@@QAEHH@Z		; CCallStackTrace::SaveCallStack
; Function compile flags: /Ogtp
;	COMDAT ?SaveCallStack@CCallStackTrace@@QAEHH@Z
_TEXT	SEGMENT
_bWriteInFile$ = 8					; size = 4
?SaveCallStack@CCallStackTrace@@QAEHH@Z PROC		; CCallStackTrace::SaveCallStack, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 139  : }

  00003	5d		 pop	 ebp

; 138  : 	return this->TraceStack(bWriteInFile);

  00004	e9 00 00 00 00	 jmp	 ?TraceStack@CCallStackTrace@@AAEHH@Z ; CCallStackTrace::TraceStack
?SaveCallStack@CCallStackTrace@@QAEHH@Z ENDP		; CCallStackTrace::SaveCallStack
_TEXT	ENDS
END
