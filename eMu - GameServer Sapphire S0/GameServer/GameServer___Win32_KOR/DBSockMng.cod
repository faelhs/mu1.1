; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\DBSockMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7DBSockMng@@6B@				; DBSockMng::`vftable'
PUBLIC	??0DBSockMng@@QAE@XZ				; DBSockMng::DBSockMng
PUBLIC	??_R4DBSockMng@@6B@				; DBSockMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDBSockMng@@@8				; DBSockMng `RTTI Type Descriptor'
PUBLIC	??_R3DBSockMng@@8				; DBSockMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DBSockMng@@8				; DBSockMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DBSockMng@@8			; DBSockMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0wsJoinServerCli@@QAE@XZ:PROC			; wsJoinServerCli::wsJoinServerCli
EXTRN	??1wsJoinServerCli@@UAE@XZ:PROC			; wsJoinServerCli::~wsJoinServerCli
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EDBSockMng@@UAEPAXI@Z:PROC			; DBSockMng::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@DBSockMng@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\dbsockmng.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@DBSockMng@@8 DD FLAT:??_R0?AVDBSockMng@@@8 ; DBSockMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DBSockMng@@8
rdata$r	ENDS
;	COMDAT ??_R2DBSockMng@@8
rdata$r	SEGMENT
??_R2DBSockMng@@8 DD FLAT:??_R1A@?0A@EA@DBSockMng@@8	; DBSockMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DBSockMng@@8
rdata$r	SEGMENT
??_R3DBSockMng@@8 DD 00H				; DBSockMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DBSockMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDBSockMng@@@8
_DATA	SEGMENT
??_R0?AVDBSockMng@@@8 DD FLAT:??_7type_info@@6B@	; DBSockMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDBSockMng@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DBSockMng@@6B@
rdata$r	SEGMENT
??_R4DBSockMng@@6B@ DD 00H				; DBSockMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDBSockMng@@@8
	DD	FLAT:??_R3DBSockMng@@8
rdata$r	ENDS
;	COMDAT ??_7DBSockMng@@6B@
CONST	SEGMENT
??_7DBSockMng@@6B@ DD FLAT:??_R4DBSockMng@@6B@		; DBSockMng::`vftable'
	DD	FLAT:??_EDBSockMng@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0DBSockMng@@QAE@XZ
_TEXT	SEGMENT
??0DBSockMng@@QAE@XZ PROC				; DBSockMng::DBSockMng, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	68 00 00 00 00	 push	 OFFSET ??1wsJoinServerCli@@UAE@XZ ; wsJoinServerCli::~wsJoinServerCli
  00006	68 00 00 00 00	 push	 OFFSET ??0wsJoinServerCli@@QAE@XZ ; wsJoinServerCli::wsJoinServerCli
  0000b	8b f1		 mov	 esi, ecx
  0000d	6a 02		 push	 2
  0000f	68 28 00 19 00	 push	 1638440			; 00190028H
  00014	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00017	50		 push	 eax
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7DBSockMng@@6B@
  0001e	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z

; 25   : 	this->m_ActiveServer=DS_UNINITIALIZED;

  00023	c7 86 54 00 32
	00 ff ff ff ff	 mov	 DWORD PTR [esi+3276884], -1

; 26   : }

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
??0DBSockMng@@QAE@XZ ENDP				; DBSockMng::DBSockMng
_TEXT	ENDS
PUBLIC	??1DBSockMng@@UAE@XZ				; DBSockMng::~DBSockMng
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??1DBSockMng@@UAE@XZ
_TEXT	SEGMENT
??1DBSockMng@@UAE@XZ PROC				; DBSockMng::~DBSockMng, COMDAT
; _this$ = ecx

; 30   : 
; 31   : }

  00000	68 00 00 00 00	 push	 OFFSET ??1wsJoinServerCli@@UAE@XZ ; wsJoinServerCli::~wsJoinServerCli
  00005	6a 02		 push	 2
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DBSockMng@@6B@
  0000d	68 28 00 19 00	 push	 1638440			; 00190028H
  00012	83 c1 04	 add	 ecx, 4
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001b	c3		 ret	 0
??1DBSockMng@@UAE@XZ ENDP				; DBSockMng::~DBSockMng
_TEXT	ENDS
PUBLIC	??_C@_0BE@CLMPKIHE@ExDB?5Server?5Check?4?4?$AA@	; `string'
PUBLIC	?Connect@DBSockMng@@QAEXXZ			; DBSockMng::Connect
EXTRN	?GetConnect@MyWinsockBase@@QAEHXZ:PROC		; MyWinsockBase::GetConnect
EXTRN	?ExDataServerConnect@@YAHPADK@Z:PROC		; ExDataServerConnect
EXTRN	?ExDbIp@@3PADA:BYTE				; ExDbIp
EXTRN	?wsExDbCli@@3VwsJoinServerCli@@A:BYTE		; wsExDbCli
EXTRN	?DataServerLogin@@YAXXZ:PROC			; DataServerLogin
EXTRN	?Close@MyWinsockBase@@QAEHXZ:PROC		; MyWinsockBase::Close
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?Connect@wsJoinServerCli@@QAEHPADGK@Z:PROC	; wsJoinServerCli::Connect
EXTRN	?DataServerIp@@3PADA:BYTE			; DataServerIp
EXTRN	?DataServerPort@@3GA:WORD			; DataServerPort
EXTRN	?SetProtocolCore@wsJoinServerCli@@QAEHP6AXEPAEH@Z@Z:PROC ; wsJoinServerCli::SetProtocolCore
EXTRN	?DataServerProtocolCore@@YAXEPAEH@Z:PROC	; DataServerProtocolCore
EXTRN	?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z:PROC ; MyWinsockBase::CreateSocket
EXTRN	?ghWnd@@3PAUHWND__@@A:DWORD			; ghWnd
EXTRN	?GetSocket@MyWinsockBase@@QAEIXZ:PROC		; MyWinsockBase::GetSocket
;	COMDAT ??_C@_0BE@CLMPKIHE@ExDB?5Server?5Check?4?4?$AA@
CONST	SEGMENT
??_C@_0BE@CLMPKIHE@ExDB?5Server?5Check?4?4?$AA@ DB 'ExDB Server Check..', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Connect@DBSockMng@@QAEXXZ
_TEXT	SEGMENT
?Connect@DBSockMng@@QAEXXZ PROC				; DBSockMng::Connect, COMDAT
; _this$ = ecx

; 35   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 36   : 	
; 37   : 	if (this->wsCDBS[0].GetSocket()  == INVALID_SOCKET )

  00004	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00007	e8 00 00 00 00	 call	 ?GetSocket@MyWinsockBase@@QAEIXZ ; MyWinsockBase::GetSocket
  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	0f 85 9d 00 00
	00		 jne	 $LN4@Connect

; 38   : 	{
; 39   : 		int State;
; 40   : 		this->wsCDBS[0].CreateSocket(ghWnd);

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0001a	57		 push	 edi
  0001b	50		 push	 eax
  0001c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001f	e8 00 00 00 00	 call	 ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ; MyWinsockBase::CreateSocket

; 41   : 		this->wsCDBS[0].SetProtocolCore(DataServerProtocolCore);

  00024	68 00 00 00 00	 push	 OFFSET ?DataServerProtocolCore@@YAXEPAEH@Z ; DataServerProtocolCore
  00029	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002c	e8 00 00 00 00	 call	 ?SetProtocolCore@wsJoinServerCli@@QAEHP6AXEPAEH@Z@Z ; wsJoinServerCli::SetProtocolCore

; 42   : 		State=this->wsCDBS[0].Connect(DataServerIp, DataServerPort, WM_GM_DATA1_CLIENT_MSG_PROC);

  00031	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?DataServerPort@@3GA ; DataServerPort
  00038	68 0a 04 00 00	 push	 1034			; 0000040aH
  0003d	51		 push	 ecx
  0003e	68 00 00 00 00	 push	 OFFSET ?DataServerIp@@3PADA ; DataServerIp
  00043	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00046	e8 00 00 00 00	 call	 ?Connect@wsJoinServerCli@@QAEHPADGK@Z ; wsJoinServerCli::Connect
  0004b	5f		 pop	 edi

; 43   : 		if (State == 0)
; 44   : 		{
; 45   : 			LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 147)), DataServerIp, DataServerPort);

  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00051	85 c0		 test	 eax, eax
  00053	75 2c		 jne	 SHORT $LN5@Connect
  00055	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?DataServerPort@@3GA ; DataServerPort
  0005c	52		 push	 edx
  0005d	68 00 00 00 00	 push	 OFFSET ?DataServerIp@@3PADA ; DataServerIp
  00062	68 93 01 00 00	 push	 403			; 00000193H
  00067	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0006c	50		 push	 eax
  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00074	83 c4 10	 add	 esp, 16			; 00000010H

; 46   : 			this->wsCDBS[0].Close();

  00077	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0007a	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close

; 47   : 		}
; 48   : 		else

  0007f	eb 31		 jmp	 SHORT $LN4@Connect
$LN5@Connect:

; 49   : 		{
; 50   : 			LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 146)), DataServerIp, DataServerPort);	

  00081	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?DataServerPort@@3GA ; DataServerPort
  00088	50		 push	 eax
  00089	68 00 00 00 00	 push	 OFFSET ?DataServerIp@@3PADA ; DataServerIp
  0008e	68 92 01 00 00	 push	 402			; 00000192H
  00093	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00098	50		 push	 eax
  00099	6a 00		 push	 0
  0009b	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000a0	83 c4 10	 add	 esp, 16			; 00000010H

; 51   : 			this->m_ActiveServer=DS_0;

  000a3	c7 86 54 00 32
	00 00 00 00 00	 mov	 DWORD PTR [esi+3276884], 0

; 52   : 			DataServerLogin();

  000ad	e8 00 00 00 00	 call	 ?DataServerLogin@@YAXXZ	; DataServerLogin
$LN4@Connect:

; 53   : 		}
; 54   : 	}
; 55   : 
; 56   : 	if ( wsExDbCli.GetSocket()  == INVALID_SOCKET)

  000b2	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsExDbCli@@3VwsJoinServerCli@@A+4
  000b7	e8 00 00 00 00	 call	 ?GetSocket@MyWinsockBase@@QAEIXZ ; MyWinsockBase::GetSocket
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	83 f8 ff	 cmp	 eax, -1
  000c1	75 33		 jne	 SHORT $LN3@Connect

; 57   : 	{
; 58   : 		LogAdd(LOG_RED,  "ExDB Server Check..");

  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CLMPKIHE@ExDB?5Server?5Check?4?4?$AA@
  000c8	6a 01		 push	 1
  000ca	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 59   : 		wsExDbCli.CreateSocket(ghWnd);

  000cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  000d5	83 c4 08	 add	 esp, 8
  000d8	51		 push	 ecx
  000d9	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsExDbCli@@3VwsJoinServerCli@@A+4
  000de	e8 00 00 00 00	 call	 ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ; MyWinsockBase::CreateSocket

; 60   : 		ExDataServerConnect(ExDbIp, WM_GM_EXDATA_CLIENT_MSG_PROC);

  000e3	68 0e 04 00 00	 push	 1038			; 0000040eH
  000e8	68 00 00 00 00	 push	 OFFSET ?ExDbIp@@3PADA	; ExDbIp
  000ed	e8 00 00 00 00	 call	 ?ExDataServerConnect@@YAHPADK@Z ; ExDataServerConnect
  000f2	83 c4 08	 add	 esp, 8

; 68   : 		}
; 69   : 	}
; 70   : }

  000f5	c3		 ret	 0
$LN3@Connect:

; 61   : 	}
; 62   : 	else
; 63   : 	{
; 64   : 		if ( wsExDbCli.GetConnect() == 0 )

  000f6	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsExDbCli@@3VwsJoinServerCli@@A+4
  000fb	e8 00 00 00 00	 call	 ?GetConnect@MyWinsockBase@@QAEHXZ ; MyWinsockBase::GetConnect
  00100	85 c0		 test	 eax, eax
  00102	75 1e		 jne	 SHORT $LN1@Connect

; 65   : 		{
; 66   : 			LogAdd(LOG_RED,  "ExDB Server Check..");

  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CLMPKIHE@ExDB?5Server?5Check?4?4?$AA@
  00109	6a 01		 push	 1
  0010b	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 67   : 			ExDataServerConnect(ExDbIp, WM_GM_EXDATA_CLIENT_MSG_PROC);

  00110	68 0e 04 00 00	 push	 1038			; 0000040eH
  00115	68 00 00 00 00	 push	 OFFSET ?ExDbIp@@3PADA	; ExDbIp
  0011a	e8 00 00 00 00	 call	 ?ExDataServerConnect@@YAHPADK@Z ; ExDataServerConnect
  0011f	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Connect:

; 68   : 		}
; 69   : 	}
; 70   : }

  00122	c3		 ret	 0
?Connect@DBSockMng@@QAEXXZ ENDP				; DBSockMng::Connect
_TEXT	ENDS
PUBLIC	??_C@_0BB@FLBAPBOE@Active?5DB?5Change?$AA@	; `string'
PUBLIC	?ActiveChange@DBSockMng@@QAEXXZ			; DBSockMng::ActiveChange
;	COMDAT ??_C@_0BB@FLBAPBOE@Active?5DB?5Change?$AA@
CONST	SEGMENT
??_C@_0BB@FLBAPBOE@Active?5DB?5Change?$AA@ DB 'Active DB Change', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?ActiveChange@DBSockMng@@QAEXXZ
_TEXT	SEGMENT
?ActiveChange@DBSockMng@@QAEXXZ PROC			; DBSockMng::ActiveChange, COMDAT
; _this$ = ecx

; 74   : 	{
; 75   : 		int Status;
; 76   : 		if (this->m_ActiveServer==DS_0)

  00000	33 c0		 xor	 eax, eax
  00002	39 81 54 00 32
	00		 cmp	 DWORD PTR [ecx+3276884], eax

; 77   : 		{
; 78   : 			this->m_ActiveServer=DS_1;
; 79   : 			Status=1;
; 80   : 		}
; 81   : 		else
; 82   : 		{
; 83   : 			this->m_ActiveServer=DS_0;
; 84   : 			Status=0;
; 85   : 		}
; 86   : 		LogAdd(LOG_BLACK, "Active DB Change");

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FLBAPBOE@Active?5DB?5Change?$AA@
  0000d	0f 94 c0	 sete	 al
  00010	6a 00		 push	 0
  00012	89 81 54 00 32
	00		 mov	 DWORD PTR [ecx+3276884], eax
  00018	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0001d	83 c4 08	 add	 esp, 8

; 87   : 	}
; 88   : }

  00020	c3		 ret	 0
?ActiveChange@DBSockMng@@QAEXXZ ENDP			; DBSockMng::ActiveChange
_TEXT	ENDS
PUBLIC	?Send@DBSockMng@@QAEHPADH@Z			; DBSockMng::Send
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
; Function compile flags: /Ogtp
;	COMDAT ?Send@DBSockMng@@QAEHPADH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
?Send@DBSockMng@@QAEHPADH@Z PROC			; DBSockMng::Send, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 92   : 	if (this->m_ActiveServer >= 2)

  00006	8b 86 54 00 32
	00		 mov	 eax, DWORD PTR [esi+3276884]
  0000c	83 f8 02	 cmp	 eax, 2
  0000f	7c 07		 jl	 SHORT $LN3@Send
$LN6@Send:

; 93   : 	{
; 94   : 		return 0;

  00011	33 c0		 xor	 eax, eax
  00013	5e		 pop	 esi

; 106  : 
; 107  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
$LN3@Send:

; 95   : 	}
; 96   : 	if (this->m_ActiveServer < 0)

  00018	85 c0		 test	 eax, eax

; 97   : 	{
; 98   : 		return 0;

  0001a	78 f5		 js	 SHORT $LN6@Send

; 99   : 	}
; 100  : 	if ( this->wsCDBS[this->m_ActiveServer].DataSend((char*)buf, len) == 0)

  0001c	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  00022	53		 push	 ebx
  00023	8b 5d 08	 mov	 ebx, DWORD PTR _buf$[ebp]
  00026	57		 push	 edi
  00027	8b 7d 0c	 mov	 edi, DWORD PTR _len$[ebp]
  0002a	57		 push	 edi
  0002b	53		 push	 ebx
  0002c	8d 4c 30 04	 lea	 ecx, DWORD PTR [eax+esi+4]
  00030	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
  00035	85 c0		 test	 eax, eax
  00037	75 1e		 jne	 SHORT $LN1@Send

; 101  : 	{
; 102  : 		this->ActiveChange();

  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?ActiveChange@DBSockMng@@QAEXXZ ; DBSockMng::ActiveChange

; 103  : 		this->wsCDBS[this->m_ActiveServer].DataSend((char*)buf, len);

  00040	8b 86 54 00 32
	00		 mov	 eax, DWORD PTR [esi+3276884]
  00046	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  0004c	57		 push	 edi
  0004d	53		 push	 ebx
  0004e	8d 4c 30 04	 lea	 ecx, DWORD PTR [eax+esi+4]
  00052	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
$LN1@Send:

; 104  : 	}
; 105  : 	return 1;

  00057	5f		 pop	 edi
  00058	5b		 pop	 ebx
  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	5e		 pop	 esi

; 106  : 
; 107  : }

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?Send@DBSockMng@@QAEHPADH@Z ENDP			; DBSockMng::Send
_TEXT	ENDS
PUBLIC	?Send@DBSockMng@@QAEHHPADH@Z			; DBSockMng::Send
; Function compile flags: /Ogtp
;	COMDAT ?Send@DBSockMng@@QAEHHPADH@Z
_TEXT	SEGMENT
_server$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
?Send@DBSockMng@@QAEHHPADH@Z PROC			; DBSockMng::Send, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  : 	if (server >= 2)

  00003	8b 45 08	 mov	 eax, DWORD PTR _server$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	83 f8 02	 cmp	 eax, 2
  0000c	7c 07		 jl	 SHORT $LN3@Send@2
$LN6@Send@2:

; 113  : 	{
; 114  : 		return 0;

  0000e	33 c0		 xor	 eax, eax
  00010	5e		 pop	 esi

; 125  : }

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Send@2:

; 115  : 	}
; 116  : 	if (server < 0)

  00015	85 c0		 test	 eax, eax

; 117  : 	{
; 118  : 		return 0;

  00017	78 f5		 js	 SHORT $LN6@Send@2

; 119  : 	}
; 120  : 	if (this->wsCDBS[server].DataSend(buf, len) == 0)

  00019	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  0001c	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  00022	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00025	51		 push	 ecx
  00026	52		 push	 edx
  00027	8d 4c 30 04	 lea	 ecx, DWORD PTR [eax+esi+4]
  0002b	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
  00030	85 c0		 test	 eax, eax
  00032	75 07		 jne	 SHORT $LN1@Send@2

; 121  : 	{
; 122  : 		this->ActiveChange();

  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?ActiveChange@DBSockMng@@QAEXXZ ; DBSockMng::ActiveChange
$LN1@Send@2:

; 123  : 	}
; 124  : 	return 1;

  0003b	b8 01 00 00 00	 mov	 eax, 1
  00040	5e		 pop	 esi

; 125  : }

  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?Send@DBSockMng@@QAEHHPADH@Z ENDP			; DBSockMng::Send
_TEXT	ENDS
PUBLIC	?MsgProc@DBSockMng@@QAEHHIJ@Z			; DBSockMng::MsgProc
EXTRN	?DataRecv@wsJoinServerCli@@QAEHXZ:PROC		; wsJoinServerCli::DataRecv
EXTRN	?FDWRITE_MsgDataSend@wsJoinServerCli@@QAEHXZ:PROC ; wsJoinServerCli::FDWRITE_MsgDataSend
; Function compile flags: /Ogtp
;	COMDAT ?MsgProc@DBSockMng@@QAEHHIJ@Z
_TEXT	SEGMENT
_line$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?MsgProc@DBSockMng@@QAEHHIJ@Z PROC			; DBSockMng::MsgProc, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 130  : 	switch (lParam & 0xFFFF & 0xFFFF)

  00003	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  00006	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000b	48		 dec	 eax
  0000c	74 3e		 je	 SHORT $LN3@MsgProc
  0000e	48		 dec	 eax
  0000f	74 20		 je	 SHORT $LN2@MsgProc
  00011	83 e8 1e	 sub	 eax, 30			; 0000001eH
  00014	75 48		 jne	 SHORT $LN8@MsgProc

; 137  : 		break;
; 138  : 	case 32: // Close
; 139  : 		this->wsCDBS[line].Close();

  00016	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  00019	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  0001f	8d 4c 08 08	 lea	 ecx, DWORD PTR [eax+ecx+8]
  00023	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close

; 140  : 	}
; 141  : 	return 1;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 142  : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN2@MsgProc:

; 134  : 		break;
; 135  : 	case 2: // Send Data
; 136  : 		this->wsCDBS[line].FDWRITE_MsgDataSend();

  00031	8b 55 08	 mov	 edx, DWORD PTR _line$[ebp]
  00034	69 d2 28 00 19
	00		 imul	 edx, 1638440		; 00190028H
  0003a	8d 4c 0a 04	 lea	 ecx, DWORD PTR [edx+ecx+4]
  0003e	e8 00 00 00 00	 call	 ?FDWRITE_MsgDataSend@wsJoinServerCli@@QAEHXZ ; wsJoinServerCli::FDWRITE_MsgDataSend

; 140  : 	}
; 141  : 	return 1;

  00043	b8 01 00 00 00	 mov	 eax, 1

; 142  : }

  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
$LN3@MsgProc:

; 131  : 	{
; 132  : 	case 1: // Recv Data
; 133  : 		this->wsCDBS[line].DataRecv();

  0004c	8b 45 08	 mov	 eax, DWORD PTR _line$[ebp]
  0004f	69 c0 28 00 19
	00		 imul	 eax, 1638440		; 00190028H
  00055	8d 4c 08 04	 lea	 ecx, DWORD PTR [eax+ecx+4]
  00059	e8 00 00 00 00	 call	 ?DataRecv@wsJoinServerCli@@QAEHXZ ; wsJoinServerCli::DataRecv
$LN8@MsgProc:

; 140  : 	}
; 141  : 	return 1;

  0005e	b8 01 00 00 00	 mov	 eax, 1

; 142  : }

  00063	5d		 pop	 ebp
  00064	c2 0c 00	 ret	 12			; 0000000cH
?MsgProc@DBSockMng@@QAEHHIJ@Z ENDP			; DBSockMng::MsgProc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GDBSockMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GDBSockMng@@UAEPAXI@Z PROC				; DBSockMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1DBSockMng@@UAE@XZ	; DBSockMng::~DBSockMng
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GDBSockMng@@UAEPAXI@Z ENDP				; DBSockMng::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EcDBSMng@@YAXXZ
text$yc	SEGMENT
??__EcDBSMng@@YAXXZ PROC				; `dynamic initializer for 'cDBSMng'', COMDAT

; 21   : DBSockMng cDBSMng;	// DataServer Manager

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00005	e8 00 00 00 00	 call	 ??0DBSockMng@@QAE@XZ	; DBSockMng::DBSockMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__FcDBSMng@@YAXXZ ; `dynamic atexit destructor for 'cDBSMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EcDBSMng@@YAXXZ ENDP				; `dynamic initializer for 'cDBSMng''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FcDBSMng@@YAXXZ
text$yd	SEGMENT
??__FcDBSMng@@YAXXZ PROC				; `dynamic atexit destructor for 'cDBSMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00005	e9 00 00 00 00	 jmp	 ??1DBSockMng@@UAE@XZ	; DBSockMng::~DBSockMng
??__FcDBSMng@@YAXXZ ENDP				; `dynamic atexit destructor for 'cDBSMng''
text$yd	ENDS
PUBLIC	?cDBSMng@@3VDBSockMng@@A			; cDBSMng
_BSS	SEGMENT
?cDBSMng@@3VDBSockMng@@A DB 0320058H DUP (?)		; cDBSMng
_BSS	ENDS
CRT$XCU	SEGMENT
_cDBSMng$initializer$ DD FLAT:??__EcDBSMng@@YAXXZ
CRT$XCU	ENDS
END
