; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\TNotice.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_ARGB@@YAKEEEE@Z				; _ARGB
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\tnotice.h
;	COMDAT ?_ARGB@@YAKEEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
?_ARGB@@YAKEEEE@Z PROC					; _ARGB, COMDAT

; 8    : __inline DWORD _ARGB(BYTE a, BYTE r, BYTE g, BYTE b){ return a*16777216 + b*65536 + g*256 + r;}; // in tnotice.h : line 8

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _a$[ebp]
  00007	0f b6 4d 14	 movzx	 ecx, BYTE PTR _b$[ebp]
  0000b	0f b6 55 10	 movzx	 edx, BYTE PTR _g$[ebp]
  0000f	c1 e0 08	 shl	 eax, 8
  00012	03 c1		 add	 eax, ecx
  00014	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _r$[ebp]
  00018	c1 e0 08	 shl	 eax, 8
  0001b	03 c2		 add	 eax, edx
  0001d	c1 e0 08	 shl	 eax, 8
  00020	03 c1		 add	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_ARGB@@YAKEEEE@Z ENDP					; _ARGB
_TEXT	ENDS
PUBLIC	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z		; TNotice::MakeNoticeMsg
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	__imp__wsprintfA:PROC
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\tnotice.cpp
;	COMDAT ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z
_TEXT	SEGMENT
_lpNotice$ = 8						; size = 4
_btType$ = 12						; size = 1
_szNoticeMsg$ = 16					; size = 4
?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z PROC		; TNotice::MakeNoticeMsg, COMDAT

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 9    : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 10   : 	// ---
; 11   : 	pNotice->type  = btType;
; 12   : 	// ---
; 13   : 	wsprintf(pNotice->Notice, szNoticeMsg);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _szNoticeMsg$[ebp]
  00006	8a 45 0c	 mov	 al, BYTE PTR _btType$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _lpNotice$[ebp]
  0000e	51		 push	 ecx
  0000f	8d 77 0d	 lea	 esi, DWORD PTR [edi+13]
  00012	56		 push	 esi
  00013	88 47 03	 mov	 BYTE PTR [edi+3], al
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 14   : 	// ---
; 15   : 	PHeadSetB((LPBYTE)pNotice, 0x0D, strlen(pNotice->Notice) + sizeof(PMSG_NOTICE) - sizeof(pNotice->Notice) + 1 );

  0001c	8b c6		 mov	 eax, esi
  0001e	83 c4 08	 add	 esp, 8
  00021	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@MakeNotice:
  00024	8a 08		 mov	 cl, BYTE PTR [eax]
  00026	40		 inc	 eax
  00027	84 c9		 test	 cl, cl
  00029	75 f9		 jne	 SHORT $LL3@MakeNotice
  0002b	2b c2		 sub	 eax, edx
  0002d	83 c0 11	 add	 eax, 17			; 00000011H
  00030	50		 push	 eax
  00031	6a 0d		 push	 13			; 0000000dH
  00033	57		 push	 edi
  00034	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 16   : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ENDP		; TNotice::MakeNoticeMsg
_TEXT	ENDS
PUBLIC	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ		; TNotice::MakeNoticeMsgEx
EXTRN	_vsprintf:PROC
; Function compile flags: /Ogtp
;	COMDAT ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ
_TEXT	SEGMENT
_lpNotice$ = 8						; size = 4
_btType$ = 12						; size = 1
_szNoticeMsg$ = 16					; size = 4
?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ PROC		; TNotice::MakeNoticeMsgEx, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 21   : 	// ---
; 22   : 	pNotice->type = btType;
; 23   : 	// ---
; 24   : 	va_list pArguments;
; 25   : 	// ---
; 26   : 	va_start(pArguments, szNoticeMsg);
; 27   : 	// ---
; 28   : 	vsprintf((char*)pNotice->Notice, (char*)szNoticeMsg, pArguments);

  00003	8b 55 10	 mov	 edx, DWORD PTR _szNoticeMsg$[ebp]
  00006	8a 45 0c	 mov	 al, BYTE PTR _btType$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _lpNotice$[ebp]
  0000e	8d 4d 14	 lea	 ecx, DWORD PTR _szNoticeMsg$[ebp+4]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	8d 77 0d	 lea	 esi, DWORD PTR [edi+13]
  00016	56		 push	 esi
  00017	88 47 03	 mov	 BYTE PTR [edi+3], al
  0001a	e8 00 00 00 00	 call	 _vsprintf

; 29   : 	// ---
; 30   : 	va_end(pArguments);
; 31   : 	// ---
; 32   : 	PHeadSetB((LPBYTE)pNotice, 0x0D, strlen(pNotice->Notice)  + sizeof(PMSG_NOTICE) - sizeof(pNotice->Notice) + 1);

  0001f	8b c6		 mov	 eax, esi
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@MakeNotice@2:
  00027	8a 08		 mov	 cl, BYTE PTR [eax]
  00029	40		 inc	 eax
  0002a	84 c9		 test	 cl, cl
  0002c	75 f9		 jne	 SHORT $LL3@MakeNotice@2
  0002e	2b c2		 sub	 eax, edx
  00030	83 c0 11	 add	 eax, 17			; 00000011H
  00033	50		 push	 eax
  00034	6a 0d		 push	 13			; 0000000dH
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 33   : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ENDP		; TNotice::MakeNoticeMsgEx
_TEXT	ENDS
PUBLIC	?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z	; TNotice::SetNoticeProperty
; Function compile flags: /Ogtp
;	COMDAT ?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z
_TEXT	SEGMENT
_lpNotice$ = 8						; size = 4
_btType$ = 12						; size = 1
_dwColor$ = 16						; size = 4
_btCount$ = 20						; size = 1
_wDelay$ = 24						; size = 2
_btSpeed$ = 28						; size = 1
?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z PROC		; TNotice::SetNoticeProperty, COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *) lpNotice;
; 38   : 	// ---
; 39   : 	pNotice->type = btType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpNotice$[ebp]
  00006	8a 4d 0c	 mov	 cl, BYTE PTR _btType$[ebp]

; 40   : 	pNotice->dwColor = dwColor;

  00009	8b 55 10	 mov	 edx, DWORD PTR _dwColor$[ebp]
  0000c	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 41   : 	pNotice->btCount = btCount;

  0000f	8a 4d 14	 mov	 cl, BYTE PTR _btCount$[ebp]
  00012	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 42   : 	pNotice->wDelay = wDelay;

  00015	66 8b 55 18	 mov	 dx, WORD PTR _wDelay$[ebp]
  00019	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 43   : 	pNotice->btSpeed = btSpeed;

  0001c	8a 4d 1c	 mov	 cl, BYTE PTR _btSpeed$[ebp]
  0001f	66 89 50 06	 mov	 WORD PTR [eax+6], dx
  00023	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 44   : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z ENDP		; TNotice::SetNoticeProperty
_TEXT	ENDS
PUBLIC	?SendNoticeToAllUser@TNotice@@SAXPAX@Z		; TNotice::SendNoticeToAllUser
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
; Function compile flags: /Ogtp
;	COMDAT ?SendNoticeToAllUser@TNotice@@SAXPAX@Z
_TEXT	SEGMENT
_lpNotice$ = 8						; size = 4
?SendNoticeToAllUser@TNotice@@SAXPAX@Z PROC		; TNotice::SendNoticeToAllUser, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 48   : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 49   : 	// ---
; 50   : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpNotice$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	bf 00 19 00 00	 mov	 edi, 6400		; 00001900H
  0000e	be 60 c4 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046496
$LL5@SendNotice:

; 51   : 	{
; 52   : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00013	80 7e a4 03	 cmp	 BYTE PTR [esi-92], 3
  00017	75 15		 jne	 SHORT $LN4@SendNotice

; 53   : 		{
; 54   : 			if ( gObj[n].Type  == OBJ_USER )

  00019	66 83 3e 01	 cmp	 WORD PTR [esi], 1
  0001d	75 0f		 jne	 SHORT $LN4@SendNotice

; 55   : 			{
; 56   : 				DataSend(n, (unsigned char*)pNotice  , pNotice->h.size  );

  0001f	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SendNotice:

; 48   : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 49   : 	// ---
; 50   : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  0002e	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  00034	47		 inc	 edi
  00035	81 fe 00 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522496
  0003b	7c d6		 jl	 SHORT $LL5@SendNotice
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx

; 57   : 			}
; 58   : 		}
; 59   : 	}
; 60   : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?SendNoticeToAllUser@TNotice@@SAXPAX@Z ENDP		; TNotice::SendNoticeToAllUser
_TEXT	ENDS
PUBLIC	?SendNoticeToUser@TNotice@@SAXHPAX@Z		; TNotice::SendNoticeToUser
; Function compile flags: /Ogtp
;	COMDAT ?SendNoticeToUser@TNotice@@SAXHPAX@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_lpNotice$ = 12						; size = 4
?SendNoticeToUser@TNotice@@SAXHPAX@Z PROC		; TNotice::SendNoticeToUser, COMDAT

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : 	PMSG_NOTICE * pNotice = (PMSG_NOTICE *)lpNotice;
; 65   : 	// ---
; 66   : 	DataSend(aIndex, (unsigned char*)pNotice, pNotice->h.size);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lpNotice$[ebp]
  00006	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0000a	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  0000d	51		 push	 ecx
  0000e	50		 push	 eax
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 67   : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?SendNoticeToUser@TNotice@@SAXHPAX@Z ENDP		; TNotice::SendNoticeToUser
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AllSendServerMsg@TNotice@@SAXPAD@Z		; TNotice::AllSendServerMsg
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?AllSendServerMsg@TNotice@@SAXPAD@Z
_TEXT	SEGMENT
_pNotice$ = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_chatmsg$ = 8						; size = 4
?AllSendServerMsg@TNotice@@SAXPAD@Z PROC		; TNotice::AllSendServerMsg, COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _chatmsg$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi

; 71   : 	PMSG_NOTICE pNotice;
; 72   : 	// ---
; 73   : 	MakeNoticeMsg((TNotice *)&pNotice, 0,  chatmsg);

  00018	50		 push	 eax
  00019	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  0001f	6a 00		 push	 0
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 74   : 	// ---
; 75   : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  0002a	bf 00 19 00 00	 mov	 edi, 6400		; 00001900H

; 76   : 	{
; 77   : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  0002f	be 60 c4 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046496
$LL5@AllSendSer:
  00034	80 7e a4 03	 cmp	 BYTE PTR [esi-92], 3
  00038	75 1e		 jne	 SHORT $LN4@AllSendSer

; 78   : 		{
; 79   : 			if ( gObj[n].Type  == OBJ_USER )

  0003a	66 83 3e 01	 cmp	 WORD PTR [esi], 1
  0003e	75 18		 jne	 SHORT $LN4@AllSendSer

; 80   : 			{
; 81   : 				DataSend(n, (unsigned char*)&pNotice , pNotice.h.size );

  00040	0f b6 8d ed fe
	ff ff		 movzx	 ecx, BYTE PTR _pNotice$[ebp+1]
  00047	51		 push	 ecx
  00048	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$[ebp]
  0004e	52		 push	 edx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@AllSendSer:

; 74   : 	// ---
; 75   : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  00058	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  0005e	47		 inc	 edi
  0005f	81 fe 00 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522496
  00065	7c cd		 jl	 SHORT $LL5@AllSendSer

; 82   : 			}
; 83   : 		}
; 84   : 	}
; 85   : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	5f		 pop	 edi
  0006b	33 cd		 xor	 ecx, ebp
  0006d	5e		 pop	 esi
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?AllSendServerMsg@TNotice@@SAXPAD@Z ENDP		; TNotice::AllSendServerMsg
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GCServerMsgStringSend@TNotice@@SAXPADHE@Z	; TNotice::GCServerMsgStringSend
; Function compile flags: /Ogtp
;	COMDAT ?GCServerMsgStringSend@TNotice@@SAXPADHE@Z
_TEXT	SEGMENT
_pNotice$ = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_szMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
_type$ = 16						; size = 1
?GCServerMsgStringSend@TNotice@@SAXPADHE@Z PROC		; TNotice::GCServerMsgStringSend, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _szMsg$[ebp]

; 89   : 	PMSG_NOTICE pNotice;
; 90   : 	// ---
; 91   : 	MakeNoticeMsg(&pNotice, type, szMsg);

  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  0001a	50		 push	 eax
  0001b	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg

; 92   : 	// ---
; 93   : 	DataSend(aIndex, (unsigned char*)&pNotice, pNotice.h.size);

  00027	0f b6 95 ed fe
	ff ff		 movzx	 edx, BYTE PTR _pNotice$[ebp+1]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00031	52		 push	 edx
  00032	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00038	50		 push	 eax
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 94   : }

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00042	33 cd		 xor	 ecx, ebp
  00044	83 c4 18	 add	 esp, 24			; 00000018H
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?GCServerMsgStringSend@TNotice@@SAXPADHE@Z ENDP		; TNotice::GCServerMsgStringSend
_TEXT	ENDS
PUBLIC	??0TNotice@@QAE@E@Z				; TNotice::TNotice
; Function compile flags: /Ogtp
;	COMDAT ??0TNotice@@QAE@E@Z
_TEXT	SEGMENT
_btType$ = 8						; size = 1
??0TNotice@@QAE@E@Z PROC				; TNotice::TNotice, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   : 	this->m_Notice.btCount = 1;
; 99   : 	this->m_Notice.btSpeed = 20;
; 100  : 	this->m_Notice.dwColor = _ARGB(255, 255, 200, 80 );
; 101  : 	this->m_Notice.wDelay = 0;
; 102  : 	this->m_Notice.type = btType;

  00003	8a 55 08	 mov	 dl, BYTE PTR _btType$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0000e	c6 40 0c 14	 mov	 BYTE PTR [eax+12], 20	; 00000014H
  00012	c7 40 08 ff c8
	50 ff		 mov	 DWORD PTR [eax+8], -11482881 ; ff50c8ffH
  00019	66 89 48 06	 mov	 WORD PTR [eax+6], cx
  0001d	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 103  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0TNotice@@QAE@E@Z ENDP				; TNotice::TNotice
_TEXT	ENDS
PUBLIC	?SendToAllUser@TNotice@@QAAXPADZZ		; TNotice::SendToAllUser
; Function compile flags: /Ogtp
;	COMDAT ?SendToAllUser@TNotice@@QAAXPADZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szMsg$ = 12						; size = 4
?SendToAllUser@TNotice@@QAAXPADZZ PROC			; TNotice::SendToAllUser, COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 	va_list pArguments;
; 108  : 	// ---
; 109  : 	va_start(pArguments, szMsg);
; 110  : 	// ---
; 111  : 	vsprintf(this->m_Notice.Notice, (char*)szMsg, pArguments);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _szMsg$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 45 10	 lea	 eax, DWORD PTR _szMsg$[ebp+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	8d 73 0d	 lea	 esi, DWORD PTR [ebx+13]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _vsprintf

; 112  : 	// ---
; 113  : 	va_end(pArguments);
; 114  : 	// ---
; 115  : 	PHeadSetB((LPBYTE)&this->m_Notice, 0x0D, strlen(this->m_Notice.Notice)  + sizeof(PMSG_NOTICE) - sizeof(this->m_Notice.Notice) + 1);

  0001a	8b c6		 mov	 eax, esi
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL10@SendToAllU:
  00022	8a 08		 mov	 cl, BYTE PTR [eax]
  00024	40		 inc	 eax
  00025	84 c9		 test	 cl, cl
  00027	75 f9		 jne	 SHORT $LL10@SendToAllU
  00029	2b c2		 sub	 eax, edx
  0002b	83 c0 11	 add	 eax, 17			; 00000011H
  0002e	50		 push	 eax
  0002f	6a 0d		 push	 13			; 0000000dH
  00031	53		 push	 ebx
  00032	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 116  : 	// ---
; 117  : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  0003a	bf 00 19 00 00	 mov	 edi, 6400		; 00001900H
  0003f	be 60 c4 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046496
$LL5@SendToAllU:

; 118  : 	{
; 119  : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00044	80 7e a4 03	 cmp	 BYTE PTR [esi-92], 3
  00048	75 15		 jne	 SHORT $LN4@SendToAllU

; 120  : 		{
; 121  : 			if ( gObj[n].Type  == OBJ_USER )

  0004a	66 83 3e 01	 cmp	 WORD PTR [esi], 1
  0004e	75 0f		 jne	 SHORT $LN4@SendToAllU

; 122  : 			{
; 123  : 				DataSend(n, (LPBYTE)&this->m_Notice , this->m_Notice.h.size);

  00050	0f b6 53 01	 movzx	 edx, BYTE PTR [ebx+1]
  00054	52		 push	 edx
  00055	53		 push	 ebx
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SendToAllU:

; 116  : 	// ---
; 117  : 	for ( int n = OBJ_STARTUSERINDEX ; n < OBJMAX ; n++)

  0005f	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  00065	47		 inc	 edi
  00066	81 fe 00 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522496
  0006c	7c d6		 jl	 SHORT $LL5@SendToAllU
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 124  : 			}
; 125  : 		}
; 126  : 	}
; 127  : }

  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?SendToAllUser@TNotice@@QAAXPADZZ ENDP			; TNotice::SendToAllUser
_TEXT	ENDS
PUBLIC	?SendToUser@TNotice@@QAAXHPADZZ			; TNotice::SendToUser
; Function compile flags: /Ogtp
;	COMDAT ?SendToUser@TNotice@@QAAXHPADZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
_aIndex$ = 12						; size = 4
_szMsg$ = 16						; size = 4
?SendToUser@TNotice@@QAAXHPADZZ PROC			; TNotice::SendToUser, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 131  : 	va_list pArguments;
; 132  : 	// ---
; 133  : 	va_start(pArguments, szMsg);
; 134  : 	// ---
; 135  : 	vsprintf(this->m_Notice.Notice, (char*)szMsg, pArguments);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _szMsg$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0000a	57		 push	 edi
  0000b	8d 45 14	 lea	 eax, DWORD PTR _szMsg$[ebp+4]
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	8d 7e 0d	 lea	 edi, DWORD PTR [esi+13]
  00013	57		 push	 edi
  00014	e8 00 00 00 00	 call	 _vsprintf

; 136  : 	// ---
; 137  : 	va_end(pArguments);
; 138  : 	// ---
; 139  : 	PHeadSetB((LPBYTE)&this->m_Notice, 0x0D, strlen(this->m_Notice.Notice)  + sizeof(PMSG_NOTICE) - sizeof(this->m_Notice.Notice) + 1);

  00019	8b c7		 mov	 eax, edi
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@SendToUser:
  00021	8a 08		 mov	 cl, BYTE PTR [eax]
  00023	40		 inc	 eax
  00024	84 c9		 test	 cl, cl
  00026	75 f9		 jne	 SHORT $LL3@SendToUser
  00028	2b c2		 sub	 eax, edx
  0002a	83 c0 11	 add	 eax, 17			; 00000011H
  0002d	50		 push	 eax
  0002e	6a 0d		 push	 13			; 0000000dH
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 140  : 	// ---
; 141  : 	DataSend(aIndex, (LPBYTE)&this->m_Notice , this->m_Notice.h.size);

  00036	0f b6 56 01	 movzx	 edx, BYTE PTR [esi+1]
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0003d	52		 push	 edx
  0003e	56		 push	 esi
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00045	83 c4 18	 add	 esp, 24			; 00000018H
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi

; 142  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?SendToUser@TNotice@@QAAXHPADZZ ENDP			; TNotice::SendToUser
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MsgUser@@YAXHHPADZZ				; MsgUser
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
; Function compile flags: /Ogtp
;	COMDAT ?MsgUser@@YAXHHPADZZ
_TEXT	SEGMENT
_szBuffer$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_Type$ = 12						; size = 4
_Msg$ = 16						; size = 4
?MsgUser@@YAXHHPADZZ PROC				; MsgUser, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 146  : 	char szBuffer[1024];
; 147  : 	// ---
; 148  : 	va_list pArguments;
; 149  : 	// ---
; 150  : 	va_start(pArguments, Msg);
; 151  : 	// ---
; 152  : 	vsprintf(szBuffer, Msg, pArguments);

  00013	8b 4d 10	 mov	 ecx, DWORD PTR _Msg$[ebp]
  00016	8d 45 14	 lea	 eax, DWORD PTR _Msg$[ebp+4]
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _szBuffer$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 _vsprintf

; 153  : 	// ---
; 154  : 	va_end(pArguments);
; 155  : 	// ---
; 156  : 	GCServerMsgStringSend(szBuffer, aIndex, Type);

  00027	8b 45 0c	 mov	 eax, DWORD PTR _Type$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _szBuffer$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 157  : }

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003e	33 cd		 xor	 ecx, ebp
  00040	83 c4 18	 add	 esp, 24			; 00000018H
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?MsgUser@@YAXHHPADZZ ENDP				; MsgUser
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MsgAllUser@@YAXHPADZZ				; MsgAllUser
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?MsgAllUser@@YAXHPADZZ
_TEXT	SEGMENT
_szBuffer$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_iType$ = 8						; size = 4
_szMsg$ = 12						; size = 4
?MsgAllUser@@YAXHPADZZ PROC				; MsgAllUser, COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi

; 161  : 	char szBuffer[1024] = {0};

  00015	68 ff 03 00 00	 push	 1023			; 000003ffH
  0001a	8d 85 fd fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp+1]
  00020	6a 00		 push	 0
  00022	50		 push	 eax
  00023	c6 85 fc fb ff
	ff 00		 mov	 BYTE PTR _szBuffer$[ebp], 0
  0002a	e8 00 00 00 00	 call	 _memset

; 162  : 	// ---
; 163  : 	va_list pArguments;
; 164  : 	// ---
; 165  : 	va_start(pArguments, szMsg);
; 166  : 	// ---
; 167  : 	vsprintf(szBuffer, szMsg, pArguments);

  0002f	8b 55 0c	 mov	 edx, DWORD PTR _szMsg$[ebp]
  00032	8d 4d 10	 lea	 ecx, DWORD PTR _szMsg$[ebp+4]
  00035	51		 push	 ecx
  00036	52		 push	 edx
  00037	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _vsprintf
  00043	8b 7d 08	 mov	 edi, DWORD PTR _iType$[ebp]
  00046	83 c4 18	 add	 esp, 24			; 00000018H
  00049	be 00 00 00 00	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004e	8b ff		 npad	 2
$LL4@MsgAllUser:

; 172  : 	{
; 173  : 		if(gObj[i].Connected == PLAYER_PLAYING)

  00050	80 7e 04 03	 cmp	 BYTE PTR [esi+4], 3
  00054	75 13		 jne	 SHORT $LN3@MsgAllUser

; 174  : 		{
; 175  : 			GCServerMsgStringSend(szBuffer, gObj[i].m_Index, iType);

  00056	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00058	57		 push	 edi
  00059	51		 push	 ecx
  0005a	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _szBuffer$[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@MsgAllUser:

; 168  : 	// ---
; 169  : 	va_end(pArguments);
; 170  : 	// ---
; 171  : 	for(int i = 0; i < OBJMAX; i++)

  00069	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  0006f	81 fe a0 52 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522400
  00075	7c d9		 jl	 SHORT $LL4@MsgAllUser

; 176  : 		}
; 177  : 	}
; 178  : }

  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	5f		 pop	 edi
  0007b	33 cd		 xor	 ecx, ebp
  0007d	5e		 pop	 esi
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
?MsgAllUser@@YAXHPADZZ ENDP				; MsgAllUser
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ChatMsgSend@@YAXPADZZ				; ChatMsgSend
EXTRN	?DataSendAll@@YAXPAEH@Z:PROC			; DataSendAll
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ChatMsgSend@@YAXPADZZ
_TEXT	SEGMENT
_pMsg$ = -140						; size = 73
_szBuffer$ = -64					; size = 60
__$ArrayPad$ = -4					; size = 4
_Msg$ = 8						; size = 4
?ChatMsgSend@@YAXPADZZ PROC				; ChatMsgSend, COMDAT

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 182  : 	char szBuffer[60] = {0};

  00013	6a 3b		 push	 59			; 0000003bH
  00015	8d 45 c1	 lea	 eax, DWORD PTR _szBuffer$[ebp+1]
  00018	6a 00		 push	 0
  0001a	50		 push	 eax
  0001b	c6 45 c0 00	 mov	 BYTE PTR _szBuffer$[ebp], 0
  0001f	e8 00 00 00 00	 call	 _memset

; 183  : 	// ---
; 184  : 	PMSG_CHATDATA pMsg = {0};

  00024	6a 48		 push	 72			; 00000048H
  00026	8d 8d 75 ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+1]
  0002c	6a 00		 push	 0
  0002e	51		 push	 ecx
  0002f	c6 85 74 ff ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp], 0
  00036	e8 00 00 00 00	 call	 _memset

; 185  : 	// ---
; 186  : 	va_list pArguments;
; 187  : 	// ---
; 188  : 	va_start(pArguments, Msg);
; 189  : 	// ---
; 190  : 	vsprintf(szBuffer, Msg, pArguments);

  0003b	8b 45 08	 mov	 eax, DWORD PTR _Msg$[ebp]
  0003e	8d 55 0c	 lea	 edx, DWORD PTR _Msg$[ebp+4]
  00041	52		 push	 edx
  00042	50		 push	 eax
  00043	8d 4d c0	 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _vsprintf

; 191  : 	// ---
; 192  : 	va_end(pArguments);
; 193  : 	// ---
; 194  : 	memcpy(&pMsg.chatmsg, &szBuffer, strlen(szBuffer) + 1);	

  0004c	8d 45 c0	 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0004f	83 c4 24	 add	 esp, 36			; 00000024H
  00052	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@ChatMsgSen:
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 c9		 test	 cl, cl
  0005a	75 f9		 jne	 SHORT $LL3@ChatMsgSen
  0005c	2b c2		 sub	 eax, edx
  0005e	40		 inc	 eax
  0005f	50		 push	 eax
  00060	8d 55 c0	 lea	 edx, DWORD PTR _szBuffer$[ebp]
  00063	52		 push	 edx
  00064	8d 45 81	 lea	 eax, DWORD PTR _pMsg$[ebp+13]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _memcpy

; 195  : 	// ---
; 196  : 	PHeadSetB((LPBYTE)&pMsg, 0x00, sizeof(szBuffer) + 13);

  0006d	6a 49		 push	 73			; 00000049H
  0006f	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00075	6a 00		 push	 0
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 197  : 	// ---
; 198  : 	DataSendAll((LPBYTE)&pMsg, pMsg.h.size);

  0007d	0f b6 95 75 ff
	ff ff		 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00084	52		 push	 edx
  00085	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?DataSendAll@@YAXPAEH@Z	; DataSendAll

; 199  : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	83 c4 20	 add	 esp, 32			; 00000020H
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?ChatMsgSend@@YAXPADZZ ENDP				; ChatMsgSend
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ChatWisperServer@@YAXPADZZ			; ChatWisperServer
; Function compile flags: /Ogtp
;	COMDAT ?ChatWisperServer@@YAXPADZZ
_TEXT	SEGMENT
_pMsg$ = -140						; size = 73
_szBuffer$ = -64					; size = 60
__$ArrayPad$ = -4					; size = 4
_Msg$ = 8						; size = 4
?ChatWisperServer@@YAXPADZZ PROC			; ChatWisperServer, COMDAT

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 203  : 	char szBuffer[60] = {0};

  00013	6a 3b		 push	 59			; 0000003bH
  00015	8d 45 c1	 lea	 eax, DWORD PTR _szBuffer$[ebp+1]
  00018	6a 00		 push	 0
  0001a	50		 push	 eax
  0001b	c6 45 c0 00	 mov	 BYTE PTR _szBuffer$[ebp], 0
  0001f	e8 00 00 00 00	 call	 _memset

; 204  : 	// ---
; 205  : 	PMSG_CHATDATA pMsg = {0};

  00024	6a 48		 push	 72			; 00000048H
  00026	8d 8d 75 ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp+1]
  0002c	6a 00		 push	 0
  0002e	51		 push	 ecx
  0002f	c6 85 74 ff ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp], 0
  00036	e8 00 00 00 00	 call	 _memset

; 206  : 	// ---
; 207  : 	va_list pArguments;
; 208  : 	// ---
; 209  : 	va_start(pArguments, Msg);
; 210  : 	// ---
; 211  : 	vsprintf(szBuffer, Msg, pArguments);

  0003b	8b 45 08	 mov	 eax, DWORD PTR _Msg$[ebp]
  0003e	8d 55 0c	 lea	 edx, DWORD PTR _Msg$[ebp+4]
  00041	52		 push	 edx
  00042	50		 push	 eax
  00043	8d 4d c0	 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _vsprintf

; 212  : 	// ---
; 213  : 	va_end(pArguments);
; 214  : 	// ---
; 215  : 	memcpy(&pMsg.chatmsg, &szBuffer, strlen(szBuffer) + 1);

  0004c	8d 45 c0	 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0004f	83 c4 24	 add	 esp, 36			; 00000024H
  00052	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@ChatWisper:
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	40		 inc	 eax
  00058	84 c9		 test	 cl, cl
  0005a	75 f9		 jne	 SHORT $LL3@ChatWisper
  0005c	2b c2		 sub	 eax, edx
  0005e	40		 inc	 eax
  0005f	50		 push	 eax
  00060	8d 55 c0	 lea	 edx, DWORD PTR _szBuffer$[ebp]
  00063	52		 push	 edx
  00064	8d 45 81	 lea	 eax, DWORD PTR _pMsg$[ebp+13]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _memcpy

; 216  : 	// ---
; 217  : 	PHeadSetB((LPBYTE)&pMsg, 0x02, sizeof(szBuffer) + 13);

  0006d	6a 49		 push	 73			; 00000049H
  0006f	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00075	6a 02		 push	 2
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 218  : 	// ---
; 219  : 	DataSendAll((LPBYTE)&pMsg, pMsg.h.size);

  0007d	0f b6 95 75 ff
	ff ff		 movzx	 edx, BYTE PTR _pMsg$[ebp+1]
  00084	52		 push	 edx
  00085	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?DataSendAll@@YAXPAEH@Z	; DataSendAll

; 220  : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	83 c4 20	 add	 esp, 32			; 00000020H
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?ChatWisperServer@@YAXPADZZ ENDP			; ChatWisperServer
_TEXT	ENDS
END
