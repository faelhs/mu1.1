; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\wsGameServer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CwsGameServer@@6B@				; CwsGameServer::`vftable'
PUBLIC	??0CwsGameServer@@QAE@XZ			; CwsGameServer::CwsGameServer
PUBLIC	??_R4CwsGameServer@@6B@				; CwsGameServer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCwsGameServer@@@8			; CwsGameServer `RTTI Type Descriptor'
PUBLIC	??_R3CwsGameServer@@8				; CwsGameServer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CwsGameServer@@8				; CwsGameServer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CwsGameServer@@8			; CwsGameServer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MyWinsockBase@@8			; MyWinsockBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMyWinsockBase@@@8			; MyWinsockBase `RTTI Type Descriptor'
PUBLIC	??_R3MyWinsockBase@@8				; MyWinsockBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MyWinsockBase@@8				; MyWinsockBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MyWinsockBase@@8			; MyWinsockBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??0MyWinsockBase@@QAE@XZ:PROC			; MyWinsockBase::MyWinsockBase
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECwsGameServer@@UAEPAXI@Z:PROC		; CwsGameServer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@MyWinsockBase@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\wsgameserver.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@MyWinsockBase@@8 DD FLAT:??_R0?AVMyWinsockBase@@@8 ; MyWinsockBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R2MyWinsockBase@@8
rdata$r	SEGMENT
??_R2MyWinsockBase@@8 DD FLAT:??_R1A@?0A@EA@MyWinsockBase@@8 ; MyWinsockBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MyWinsockBase@@8
rdata$r	SEGMENT
??_R3MyWinsockBase@@8 DD 00H				; MyWinsockBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMyWinsockBase@@@8
_DATA	SEGMENT
??_R0?AVMyWinsockBase@@@8 DD FLAT:??_7type_info@@6B@	; MyWinsockBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMyWinsockBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@MyWinsockBase@@8
rdata$r	SEGMENT
??_R13?0A@EA@MyWinsockBase@@8 DD FLAT:??_R0?AVMyWinsockBase@@@8 ; MyWinsockBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CwsGameServer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CwsGameServer@@8 DD FLAT:??_R0?AVCwsGameServer@@@8 ; CwsGameServer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_R2CwsGameServer@@8
rdata$r	SEGMENT
??_R2CwsGameServer@@8 DD FLAT:??_R1A@?0A@EA@CwsGameServer@@8 ; CwsGameServer::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CwsGameServer@@8
rdata$r	SEGMENT
??_R3CwsGameServer@@8 DD 00H				; CwsGameServer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCwsGameServer@@@8
_DATA	SEGMENT
??_R0?AVCwsGameServer@@@8 DD FLAT:??_7type_info@@6B@	; CwsGameServer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCwsGameServer@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CwsGameServer@@6B@
rdata$r	SEGMENT
??_R4CwsGameServer@@6B@ DD 00H				; CwsGameServer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCwsGameServer@@@8
	DD	FLAT:??_R3CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_7CwsGameServer@@6B@
CONST	SEGMENT
??_7CwsGameServer@@6B@ DD FLAT:??_R4CwsGameServer@@6B@	; CwsGameServer::`vftable'
	DD	FLAT:??_ECwsGameServer@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CwsGameServer@@QAE@XZ
_TEXT	SEGMENT
??0CwsGameServer@@QAE@XZ PROC				; CwsGameServer::CwsGameServer, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00006	e8 00 00 00 00	 call	 ??0MyWinsockBase@@QAE@XZ ; MyWinsockBase::MyWinsockBase

; 19   : 	this->m_SendSec=0;

  0000b	33 c0		 xor	 eax, eax
  0000d	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 20   : 	this->m_SendSecTmp=0;

  00010	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00013	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CwsGameServer@@6B@

; 21   : }

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c3		 ret	 0
??0CwsGameServer@@QAE@XZ ENDP				; CwsGameServer::CwsGameServer
_TEXT	ENDS
PUBLIC	??1CwsGameServer@@UAE@XZ			; CwsGameServer::~CwsGameServer
EXTRN	??1MyWinsockBase@@QAE@XZ:PROC			; MyWinsockBase::~MyWinsockBase
; Function compile flags: /Ogtp
;	COMDAT ??1CwsGameServer@@UAE@XZ
_TEXT	SEGMENT
??1CwsGameServer@@UAE@XZ PROC				; CwsGameServer::~CwsGameServer, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CwsGameServer@@6B@

; 26   : 	// Empty
; 27   : }

  00006	83 c1 04	 add	 ecx, 4
  00009	e9 00 00 00 00	 jmp	 ??1MyWinsockBase@@QAE@XZ ; MyWinsockBase::~MyWinsockBase
??1CwsGameServer@@UAE@XZ ENDP				; CwsGameServer::~CwsGameServer
_TEXT	ENDS
PUBLIC	?SetSocketIndex@CwsGameServer@@QAEHIH@Z		; CwsGameServer::SetSocketIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetSocketIndex@CwsGameServer@@QAEHIH@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
_index$ = 12						; size = 4
?SetSocketIndex@CwsGameServer@@QAEHIH@Z PROC		; CwsGameServer::SetSocketIndex, COMDAT
; _this$ = ecx

; 31   : 	return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 32   : }

  00005	c2 08 00	 ret	 8
?SetSocketIndex@CwsGameServer@@QAEHIH@Z ENDP		; CwsGameServer::SetSocketIndex
_TEXT	ENDS
PUBLIC	??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CreateServer@CwsGameServer@@QAEHPADGKK@Z	; CwsGameServer::CreateServer
EXTRN	__imp__WSAAsyncSelect@16:PROC
EXTRN	__imp__listen@8:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__htonl@4:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@ DB 'Server WS'
	DB	'AAsyncSelect error %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@ DB 'Server listen er'
	DB	'ror %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@ DB 'Server bind error %'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@
CONST	SEGMENT
??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@ DB 'windows handle error', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CreateServer@CwsGameServer@@QAEHPADGKK@Z
_TEXT	SEGMENT
_addr$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ip_addr$ = 8						; size = 4
_port$ = 12						; size = 2
_WinServerMsg$ = 16					; size = 4
_WinClientMsg$ = 20					; size = 4
?CreateServer@CwsGameServer@@QAEHPADGKK@Z PROC		; CwsGameServer::CreateServer, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 36   : 	sockaddr_in addr;
; 37   : 	int nResult;
; 38   : 	
; 39   : 	if (this->m_hWnd == 0 )

  00013	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00017	75 20		 jne	 SHORT $LN4@CreateServ

; 40   : 	{
; 41   : 		MsgBox("windows handle error");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@
  0001e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00023	83 c4 04	 add	 esp, 4

; 42   : 		return 0;

  00026	33 c0		 xor	 eax, eax
  00028	5e		 pop	 esi

; 79   : 	return 1;
; 80   : }

  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 10 00	 ret	 16			; 00000010H
$LN4@CreateServ:

; 43   : 	}
; 44   : 
; 45   : 	memset(&addr, 0, sizeof(addr) );

  00039	33 c0		 xor	 eax, eax
  0003b	89 45 ec	 mov	 DWORD PTR _addr$[ebp], eax
  0003e	89 45 f0	 mov	 DWORD PTR _addr$[ebp+4], eax
  00041	89 45 f4	 mov	 DWORD PTR _addr$[ebp+8], eax
  00044	89 45 f8	 mov	 DWORD PTR _addr$[ebp+12], eax

; 46   : 
; 47   : 	addr.sin_family=AF_INET; // INET

  00047	b8 02 00 00 00	 mov	 eax, 2

; 48   : 	addr.sin_addr.S_un.S_addr=htonl(0);

  0004c	6a 00		 push	 0
  0004e	66 89 45 ec	 mov	 WORD PTR _addr$[ebp], ax
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htonl@4

; 49   : 	addr.sin_port=htons(port);

  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _port$[ebp]
  0005b	51		 push	 ecx
  0005c	89 45 f0	 mov	 DWORD PTR _addr$[ebp+4], eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4

; 50   : 
; 51   : 	nResult=bind(this->m_socket, (sockaddr*)&addr, 16);

  00065	6a 10		 push	 16			; 00000010H
  00067	8d 55 ec	 lea	 edx, DWORD PTR _addr$[ebp]
  0006a	66 89 45 ee	 mov	 WORD PTR _addr$[ebp+2], ax
  0006e	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00071	52		 push	 edx
  00072	50		 push	 eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12

; 52   : 
; 53   : 	if ( nResult == -1 )

  00079	83 f8 ff	 cmp	 eax, -1
  0007c	75 33		 jne	 SHORT $LN3@CreateServ

; 54   : 	{
; 55   : 		LogAdd(LOG_BLACK, "Server bind error %d", WSAGetLastError() );

  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@
  0008a	6a 00		 push	 0
  0008c	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 56   : 		closesocket(this->m_socket);

  00091	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
  00097	51		 push	 ecx
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 57   : 		return 0;

  0009e	33 c0		 xor	 eax, eax
  000a0	5e		 pop	 esi

; 79   : 	return 1;
; 80   : }

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 10 00	 ret	 16			; 00000010H
$LN3@CreateServ:

; 58   : 	}
; 59   : 
; 60   : 	nResult=listen(this->m_socket , 4);

  000b1	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000b4	6a 04		 push	 4
  000b6	52		 push	 edx
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__listen@8

; 61   : 
; 62   : 	if (nResult == -1)

  000bd	83 f8 ff	 cmp	 eax, -1

; 63   : 	{
; 64   : 		closesocket(this->m_socket );

  000c0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c3	75 30		 jne	 SHORT $LN2@CreateServ
  000c5	50		 push	 eax
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 65   : 		LogAdd(LOG_BLACK, "Server listen error %d", WSAGetLastError() );

  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  000d2	50		 push	 eax
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@
  000d8	6a 00		 push	 0
  000da	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : 		return 0;

  000e2	33 c0		 xor	 eax, eax
  000e4	5e		 pop	 esi

; 79   : 	return 1;
; 80   : }

  000e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e8	33 cd		 xor	 ecx, ebp
  000ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 10 00	 ret	 16			; 00000010H
$LN2@CreateServ:

; 67   : 	}
; 68   : 
; 69   : 	nResult=WSAAsyncSelect( this->m_socket , this->m_hWnd , WinServerMsg, FD_ACCEPT);

  000f5	8b 4d 10	 mov	 ecx, DWORD PTR _WinServerMsg$[ebp]
  000f8	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000fb	6a 08		 push	 8
  000fd	51		 push	 ecx
  000fe	52		 push	 edx
  000ff	50		 push	 eax
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16

; 70   : 
; 71   : 	if (nResult == -1)

  00106	83 f8 ff	 cmp	 eax, -1
  00109	75 33		 jne	 SHORT $LN1@CreateServ

; 72   : 	{
; 73   : 		closesocket(this->m_socket);

  0010b	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0010e	51		 push	 ecx
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 74   : 		LogAdd(LOG_BLACK, "Server WSAAsyncSelect error %d", WSAGetLastError());

  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0011b	50		 push	 eax
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@
  00121	6a 00		 push	 0
  00123	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH

; 75   : 		return 0;

  0012b	33 c0		 xor	 eax, eax
  0012d	5e		 pop	 esi

; 79   : 	return 1;
; 80   : }

  0012e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00131	33 cd		 xor	 ecx, ebp
  00133	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c2 10 00	 ret	 16			; 00000010H
$LN1@CreateServ:

; 76   : 	}
; 77   : 
; 78   : 	this->m_WinClientMsg  =WinClientMsg;

  0013e	8b 55 14	 mov	 edx, DWORD PTR _WinClientMsg$[ebp]

; 79   : 	return 1;
; 80   : }

  00141	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00144	89 56 2c	 mov	 DWORD PTR [esi+44], edx
  00147	33 cd		 xor	 ecx, ebp
  00149	b8 01 00 00 00	 mov	 eax, 1
  0014e	5e		 pop	 esi
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 10 00	 ret	 16			; 00000010H
?CreateServer@CwsGameServer@@QAEHPADGKK@Z ENDP		; CwsGameServer::CreateServer
_TEXT	ENDS
PUBLIC	_clientSocket$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z ; CwsGameServer::AcceptSocket
EXTRN	__imp__setsockopt@20:PROC
EXTRN	?AddIp@CIpCache@@QAEHPAD@Z:PROC			; CIpCache::AddIp
EXTRN	?IpCache@@3VCIpCache@@A:BYTE			; IpCache
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	__imp__accept@12:PROC
; Function compile flags: /Ogtp
;	COMDAT ?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z
_TEXT	SEGMENT
_clientSocket$GSCopy$ = -32				; size = 4
_Len$ = -28						; size = 4
_ling$ = -24						; size = 4
_cAddr$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_clientSocket$ = 8					; size = 4
_cInAddr$ = 12						; size = 4
?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z PROC	; CwsGameServer::AcceptSocket, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _clientSocket$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _cInAddr$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx

; 85   : 	SOCKET cSocket;
; 86   : 	sockaddr_in cAddr;
; 87   : 	int Len = 16;
; 88   : 	int nResult;
; 89   : 	WORD ling[2];
; 90   : 
; 91   : 	cSocket=accept(this->m_socket , (sockaddr*)&cAddr, &Len);

  0001b	8d 4d e4	 lea	 ecx, DWORD PTR _Len$[ebp]
  0001e	51		 push	 ecx
  0001f	8d 55 ec	 lea	 edx, DWORD PTR _cAddr$[ebp]

; 92   : 	
; 93   : 	if (cSocket != INVALID_SOCKET)
; 94   : 	{
; 95   : 		memcpy(&cInAddr, &cAddr.sin_addr.S_un.S_addr , sizeof(cInAddr));

  00022	89 45 e0	 mov	 DWORD PTR _clientSocket$GSCopy$[ebp], eax
  00025	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00028	52		 push	 edx
  00029	50		 push	 eax
  0002a	c7 45 e4 10 00
	00 00		 mov	 DWORD PTR _Len$[ebp], 16 ; 00000010H
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__accept@12
  00037	8b f0		 mov	 esi, eax
  00039	83 fe ff	 cmp	 esi, -1
  0003c	74 4d		 je	 SHORT $LN1@AcceptSock
  0003e	8b 45 f0	 mov	 eax, DWORD PTR _cAddr$[ebp+4]

; 96   : 
; 97   : 		if (IpCache.AddIp(inet_ntoa( cInAddr)) == 0)

  00041	50		 push	 eax
  00042	89 03		 mov	 DWORD PTR [ebx], eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  0004a	50		 push	 eax
  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  00050	e8 00 00 00 00	 call	 ?AddIp@CIpCache@@QAEHPAD@Z ; CIpCache::AddIp
  00055	85 c0		 test	 eax, eax
  00057	75 1c		 jne	 SHORT $LN2@AcceptSock
$LN6@AcceptSock:

; 98   : 		{
; 99   : 			closesocket( cSocket);

  00059	56		 push	 esi
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 100  : 			return 0;

  00062	33 c0		 xor	 eax, eax
  00064	5b		 pop	 ebx

; 119  : 
; 120  : 	return 1;
; 121  : }

  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
$LN2@AcceptSock:

; 101  : 		}
; 102  : 
; 103  : 		nResult=WSAAsyncSelect(cSocket, this->m_hWnd , this->m_WinClientMsg , FD_READ|FD_WRITE|FD_CLOSE);

  00075	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00078	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0007b	6a 23		 push	 35			; 00000023H
  0007d	51		 push	 ecx
  0007e	52		 push	 edx
  0007f	56		 push	 esi
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16

; 104  : 
; 105  : 		if ( nResult == -1 )

  00086	83 f8 ff	 cmp	 eax, -1

; 106  : 		{
; 107  : 			closesocket(cSocket);
; 108  : 			return 0;

  00089	74 ce		 je	 SHORT $LN6@AcceptSock
$LN1@AcceptSock:

; 109  : 		}
; 110  : 
; 111  : 	}
; 112  : 
; 113  : 	clientSocket=cSocket;

  0008b	8b 45 e0	 mov	 eax, DWORD PTR _clientSocket$GSCopy$[ebp]

; 114  : 
; 115  : 	ling[0]=0;
; 116  : 	ling[1]=0;
; 117  : 
; 118  : 	setsockopt( clientSocket, SOL_SOCKET, 0xFFFFFF7F, (char*)&ling, sizeof(ling));

  0008e	6a 04		 push	 4
  00090	89 30		 mov	 DWORD PTR [eax], esi
  00092	8d 45 e8	 lea	 eax, DWORD PTR _ling$[ebp]
  00095	50		 push	 eax
  00096	68 7f ff ff ff	 push	 -129			; ffffff7fH
  0009b	68 ff ff 00 00	 push	 65535			; 0000ffffH
  000a0	33 c9		 xor	 ecx, ecx
  000a2	56		 push	 esi
  000a3	89 4d e8	 mov	 DWORD PTR _ling$[ebp], ecx
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20

; 119  : 
; 120  : 	return 1;
; 121  : }

  000ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	33 cd		 xor	 ecx, ebp
  000b3	b8 01 00 00 00	 mov	 eax, 1
  000b8	5b		 pop	 ebx
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 08 00	 ret	 8
?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z ENDP	; CwsGameServer::AcceptSocket
_TEXT	ENDS
PUBLIC	?DataSendW@CwsGameServer@@QAEHHPADH@Z		; CwsGameServer::DataSendW
; Function compile flags: /Ogtp
;	COMDAT ?DataSendW@CwsGameServer@@QAEHHPADH@Z
_TEXT	SEGMENT
_uindex$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
?DataSendW@CwsGameServer@@QAEHHPADH@Z PROC		; CwsGameServer::DataSendW, COMDAT
; _this$ = ecx

; 125  : 	return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 126  : }

  00005	c2 0c 00	 ret	 12			; 0000000cH
?DataSendW@CwsGameServer@@QAEHHPADH@Z ENDP		; CwsGameServer::DataSendW
_TEXT	ENDS
PUBLIC	??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BB@OMKOBAGC@wsGameServer?4cpp?$AA@	; `string'
PUBLIC	?DataSocketSend@CwsGameServer@@QAEHIPADH@Z	; CwsGameServer::DataSocketSend
EXTRN	__imp__send@16:PROC
;	COMDAT ??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@ DB 'INVALID_SOCKET %'
	DB	's %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMKOBAGC@wsGameServer?4cpp?$AA@
CONST	SEGMENT
??_C@_0BB@OMKOBAGC@wsGameServer?4cpp?$AA@ DB 'wsGameServer.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DataSocketSend@CwsGameServer@@QAEHIPADH@Z
_TEXT	SEGMENT
_nLeft$ = 8						; size = 4
_socket$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
?DataSocketSend@CwsGameServer@@QAEHIPADH@Z PROC		; CwsGameServer::DataSocketSend, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 130  : 	int nResult, nDx, nLeft;
; 131  : 
; 132  : 	nDx=0;
; 133  : 
; 134  : 	if (socket == INVALID_SOCKET )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _socket$[ebp]
  00007	56		 push	 esi
  00008	33 f6		 xor	 esi, esi
  0000a	83 fb ff	 cmp	 ebx, -1
  0000d	75 20		 jne	 SHORT $LN7@DataSocket

; 135  : 	{
; 136  : 		LogAdd(LOG_BLACK, "INVALID_SOCKET %s %d", __FILE__, __LINE__);

  0000f	68 88 00 00 00	 push	 136			; 00000088H
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OMKOBAGC@wsGameServer?4cpp?$AA@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00024	83 c4 10	 add	 esp, 16			; 00000010H
  00027	5e		 pop	 esi

; 137  : 		return 0;

  00028	33 c0		 xor	 eax, eax
  0002a	5b		 pop	 ebx

; 166  : }

  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN7@DataSocket:
  0002f	57		 push	 edi

; 138  : 	}
; 139  : 
; 140  : 	nLeft = len;

  00030	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  00033	89 7d 08	 mov	 DWORD PTR _nLeft$[ebp], edi

; 141  : 
; 142  : 	while (nLeft > 0)

  00036	85 ff		 test	 edi, edi
  00038	7e 44		 jle	 SHORT $LN12@DataSocket
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL6@DataSocket:

; 143  : 	{
; 144  : 		nResult=send(socket, &buf[nDx], (len-nDx), 0);

  00040	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00043	6a 00		 push	 0
  00045	8b c7		 mov	 eax, edi
  00047	2b c6		 sub	 eax, esi
  00049	50		 push	 eax
  0004a	8d 14 0e	 lea	 edx, DWORD PTR [esi+ecx]
  0004d	52		 push	 edx
  0004e	53		 push	 ebx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__send@16

; 145  : 
; 146  : 		if (nResult == -1)

  00055	83 f8 ff	 cmp	 eax, -1
  00058	75 16		 jne	 SHORT $LN4@DataSocket

; 147  : 		{
; 148  : 			if (WSAGetLastError() != WSAEWOULDBLOCK)

  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00060	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00065	74 d9		 je	 SHORT $LL6@DataSocket

; 149  : 			{
; 150  : 				return 0;

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	33 c0		 xor	 eax, eax
  0006b	5b		 pop	 ebx

; 166  : }

  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
$LN4@DataSocket:

; 151  : 			}
; 152  : 		}
; 153  : 		else
; 154  : 		{
; 155  : 			nDx += nResult;
; 156  : 			nLeft -=nResult;

  00070	8b 4d 08	 mov	 ecx, DWORD PTR _nLeft$[ebp]
  00073	2b c8		 sub	 ecx, eax
  00075	03 f0		 add	 esi, eax
  00077	89 4d 08	 mov	 DWORD PTR _nLeft$[ebp], ecx

; 157  : 
; 158  : 			if ( nLeft <= 0)

  0007a	85 c9		 test	 ecx, ecx
  0007c	7f c2		 jg	 SHORT $LL6@DataSocket
$LN12@DataSocket:
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 159  : 			{
; 160  : 				break;
; 161  : 			}
; 162  : 		}
; 163  : 	}
; 164  : 
; 165  : 	return 1;

  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	5b		 pop	 ebx

; 166  : }

  00086	5d		 pop	 ebp
  00087	c2 0c 00	 ret	 12			; 0000000cH
?DataSocketSend@CwsGameServer@@QAEHIPADH@Z ENDP		; CwsGameServer::DataSocketSend
_TEXT	ENDS
PUBLIC	?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z	; CwsGameServer::FDWRITE_MsgDataSend
; Function compile flags: /Ogtp
;	COMDAT ?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z PROC	; CwsGameServer::FDWRITE_MsgDataSend, COMDAT
; _this$ = ecx

; 170  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 171  : }

  00002	c2 04 00	 ret	 4
?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z ENDP	; CwsGameServer::FDWRITE_MsgDataSend
_TEXT	ENDS
PUBLIC	?DataRecv@CwsGameServer@@QAEHI@Z		; CwsGameServer::DataRecv
; Function compile flags: /Ogtp
;	COMDAT ?DataRecv@CwsGameServer@@QAEHI@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
?DataRecv@CwsGameServer@@QAEHI@Z PROC			; CwsGameServer::DataRecv, COMDAT
; _this$ = ecx

; 176  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 177  : }

  00002	c2 04 00	 ret	 4
?DataRecv@CwsGameServer@@QAEHI@Z ENDP			; CwsGameServer::DataRecv
_TEXT	ENDS
PUBLIC	?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z	; CwsGameServer::SetSocketBuffer
; Function compile flags: /Ogtp
;	COMDAT ?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_socket$ = 12						; size = 4
_ip$ = 16						; size = 4
?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z PROC	; CwsGameServer::SetSocketBuffer, COMDAT
; _this$ = ecx

; 181  : 	return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 182  : }

  00005	c2 0c 00	 ret	 12			; 0000000cH
?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z ENDP	; CwsGameServer::SetSocketBuffer
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCwsGameServer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCwsGameServer@@UAEPAXI@Z PROC			; CwsGameServer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CwsGameServer@@UAE@XZ ; CwsGameServer::~CwsGameServer
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCwsGameServer@@UAEPAXI@Z ENDP			; CwsGameServer::`scalar deleting destructor'
_TEXT	ENDS
END
