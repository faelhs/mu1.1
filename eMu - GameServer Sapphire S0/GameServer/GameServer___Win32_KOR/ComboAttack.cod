; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\ComboAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CComboAttack@@6B@				; CComboAttack::`vftable'
PUBLIC	??0CComboAttack@@QAE@XZ				; CComboAttack::CComboAttack
PUBLIC	??_R4CComboAttack@@6B@				; CComboAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCComboAttack@@@8			; CComboAttack `RTTI Type Descriptor'
PUBLIC	??_R3CComboAttack@@8				; CComboAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CComboAttack@@8				; CComboAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CComboAttack@@8			; CComboAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECComboAttack@@UAEPAXI@Z:PROC		; CComboAttack::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CComboAttack@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\comboattack.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CComboAttack@@8 DD FLAT:??_R0?AVCComboAttack@@@8 ; CComboAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CComboAttack@@8
rdata$r	SEGMENT
??_R2CComboAttack@@8 DD FLAT:??_R1A@?0A@EA@CComboAttack@@8 ; CComboAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CComboAttack@@8
rdata$r	SEGMENT
??_R3CComboAttack@@8 DD 00H				; CComboAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCComboAttack@@@8
_DATA	SEGMENT
??_R0?AVCComboAttack@@@8 DD FLAT:??_7type_info@@6B@	; CComboAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCComboAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CComboAttack@@6B@
rdata$r	SEGMENT
??_R4CComboAttack@@6B@ DD 00H				; CComboAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCComboAttack@@@8
	DD	FLAT:??_R3CComboAttack@@8
rdata$r	ENDS
;	COMDAT ??_7CComboAttack@@6B@
CONST	SEGMENT
??_7CComboAttack@@6B@ DD FLAT:??_R4CComboAttack@@6B@	; CComboAttack::`vftable'
	DD	FLAT:??_ECComboAttack@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CComboAttack@@QAE@XZ
_TEXT	SEGMENT
??0CComboAttack@@QAE@XZ PROC				; CComboAttack::CComboAttack, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CComboAttack@@6B@

; 13   : 	return;
; 14   : }

  00008	c3		 ret	 0
??0CComboAttack@@QAE@XZ ENDP				; CComboAttack::CComboAttack
_TEXT	ENDS
PUBLIC	??1CComboAttack@@UAE@XZ				; CComboAttack::~CComboAttack
; Function compile flags: /Ogtp
;	COMDAT ??1CComboAttack@@UAE@XZ
_TEXT	SEGMENT
??1CComboAttack@@UAE@XZ PROC				; CComboAttack::~CComboAttack, COMDAT
; _this$ = ecx

; 17   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CComboAttack@@6B@

; 18   : 	return;
; 19   : }

  00006	c3		 ret	 0
??1CComboAttack@@UAE@XZ ENDP				; CComboAttack::~CComboAttack
_TEXT	ENDS
PUBLIC	?GetSkillPos@CComboAttack@@AAEHH@Z		; CComboAttack::GetSkillPos
; Function compile flags: /Ogtp
;	COMDAT ?GetSkillPos@CComboAttack@@AAEHH@Z
_TEXT	SEGMENT
_skillnum$ = 8						; size = 4
?GetSkillPos@CComboAttack@@AAEHH@Z PROC			; CComboAttack::GetSkillPos, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 23   : 	switch (skillnum)

  00003	8b 45 08	 mov	 eax, DWORD PTR _skillnum$[ebp]
  00006	83 c0 ed	 add	 eax, -19		; ffffffedH
  00009	83 f8 18	 cmp	 eax, 24			; 00000018H
  0000c	77 1d		 ja	 SHORT $LN1@GetSkillPo
  0000e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN8@GetSkillPo[eax]
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN9@GetSkillPo[eax*4]
$LN3@GetSkillPo:

; 24   : 	{
; 25   : 		case 19:
; 26   : 		case 20:
; 27   : 		case 21:
; 28   : 		case 22:
; 29   : 		case 23:
; 30   : 			return 0;

  0001c	33 c0		 xor	 eax, eax

; 39   : 			break;
; 40   : 	}
; 41   : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN2@GetSkillPo:

; 31   : 			break;
; 32   : 		case 41:
; 33   : 		case 42:
; 34   : 		case 43:
; 35   : 			return 1;

  00022	b8 01 00 00 00	 mov	 eax, 1

; 39   : 			break;
; 40   : 	}
; 41   : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN1@GetSkillPo:

; 36   : 			break;
; 37   : 		default:
; 38   : 			return -1;

  0002b	83 c8 ff	 or	 eax, -1

; 39   : 			break;
; 40   : 	}
; 41   : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
  00032	8b ff		 npad	 2
$LN9@GetSkillPo:
  00034	00 00 00 00	 DD	 $LN3@GetSkillPo
  00038	00 00 00 00	 DD	 $LN2@GetSkillPo
  0003c	00 00 00 00	 DD	 $LN1@GetSkillPo
$LN8@GetSkillPo:
  00040	00		 DB	 0
  00041	00		 DB	 0
  00042	00		 DB	 0
  00043	00		 DB	 0
  00044	00		 DB	 0
  00045	02		 DB	 2
  00046	02		 DB	 2
  00047	02		 DB	 2
  00048	02		 DB	 2
  00049	02		 DB	 2
  0004a	02		 DB	 2
  0004b	02		 DB	 2
  0004c	02		 DB	 2
  0004d	02		 DB	 2
  0004e	02		 DB	 2
  0004f	02		 DB	 2
  00050	02		 DB	 2
  00051	02		 DB	 2
  00052	02		 DB	 2
  00053	02		 DB	 2
  00054	02		 DB	 2
  00055	02		 DB	 2
  00056	01		 DB	 1
  00057	01		 DB	 1
  00058	01		 DB	 1
?GetSkillPos@CComboAttack@@AAEHH@Z ENDP			; CComboAttack::GetSkillPos
_TEXT	ENDS
PUBLIC	?CheckCombo@CComboAttack@@QAEHHH@Z		; CComboAttack::CheckCombo
EXTRN	?Init@ComboSkillData@@QAEXXZ:PROC		; ComboSkillData::Init
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
; Function compile flags: /Ogtp
;	COMDAT ?CheckCombo@CComboAttack@@QAEHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_skillnum$ = 12						; size = 4
?CheckCombo@CComboAttack@@QAEHHH@Z PROC			; CComboAttack::CheckCombo, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 46   : 	LPOBJ lpObj = &gObj[aIndex];

  00005	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00008	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  0000e	81 c6 00 00 00
	00		 add	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 47   : 	
; 48   : 	if ( lpObj->ComboSkillquestClear  != false )

  00014	80 be 89 00 00
	00 00		 cmp	 BYTE PTR [esi+137], 0
  0001b	57		 push	 edi
  0001c	0f 84 d9 00 00
	00		 je	 $LN1@CheckCombo

; 49   : 	{
; 50   : 		int sp = this->GetSkillPos(skillnum);

  00022	8b 5d 0c	 mov	 ebx, DWORD PTR _skillnum$[ebp]
  00025	53		 push	 ebx
  00026	e8 00 00 00 00	 call	 ?GetSkillPos@CComboAttack@@AAEHH@Z ; CComboAttack::GetSkillPos

; 51   : 
; 52   : 		if ( sp == 0 )

  0002b	33 c9		 xor	 ecx, ecx
  0002d	3b c1		 cmp	 eax, ecx
  0002f	75 26		 jne	 SHORT $LN10@CheckCombo

; 53   : 		{
; 54   : 			lpObj->comboSkill.ProgressIndex  = 0;

  00031	89 8e 94 00 00
	00		 mov	 DWORD PTR [esi+148], ecx

; 55   : 			lpObj->comboSkill.dwTime = GetTickCount() + 3000;

  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0003d	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  00042	5f		 pop	 edi
  00043	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 56   : 			lpObj->comboSkill.Skill[0]  = skillnum;

  00049	88 9e 90 00 00
	00		 mov	 BYTE PTR [esi+144], bl
  0004f	5e		 pop	 esi

; 95   : 		}
; 96   : 	}
; 97   : 
; 98   : 	return 0;

  00050	33 c0		 xor	 eax, eax
  00052	5b		 pop	 ebx

; 99   : }

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN10@CheckCombo:

; 57   : 		}
; 58   : 		else if ( sp == 1 )

  00057	83 f8 01	 cmp	 eax, 1
  0005a	0f 85 84 00 00
	00		 jne	 $LN8@CheckCombo

; 59   : 		{
; 60   : 			if ( lpObj->comboSkill.Skill[0]  == 0xFF )

  00060	80 be 90 00 00
	00 ff		 cmp	 BYTE PTR [esi+144], 255	; 000000ffH
  00067	75 14		 jne	 SHORT $LN7@CheckCombo
$LN14@CheckCombo:

; 61   : 			{
; 62   : 				lpObj->comboSkill.Init();

  00069	8d 8e 8c 00 00
	00		 lea	 ecx, DWORD PTR [esi+140]
$LN3@CheckCombo:
  0006f	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi

; 95   : 		}
; 96   : 	}
; 97   : 
; 98   : 	return 0;

  00076	33 c0		 xor	 eax, eax
  00078	5b		 pop	 ebx

; 99   : }

  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN7@CheckCombo:

; 63   : 				return 0;
; 64   : 			}
; 65   : 
; 66   : 			int Time =GetTickCount();

  0007d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  00083	ff d3		 call	 ebx

; 67   : 
; 68   : 			if (lpObj->comboSkill.dwTime < GetTickCount() )

  00085	ff d3		 call	 ebx
  00087	39 86 8c 00 00
	00		 cmp	 DWORD PTR [esi+140], eax

; 69   : 			{
; 70   : 				lpObj->comboSkill.Init();
; 71   : 				return 0;

  0008d	72 da		 jb	 SHORT $LN14@CheckCombo

; 72   : 			}
; 73   : 
; 74   : 			if ( lpObj->comboSkill.ProgressIndex == 0 )

  0008f	83 be 94 00 00
	00 00		 cmp	 DWORD PTR [esi+148], 0
  00096	75 29		 jne	 SHORT $LN5@CheckCombo

; 75   : 			{
; 76   : 				lpObj->comboSkill.ProgressIndex = 1;

  00098	c7 86 94 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+148], 1

; 77   : 				lpObj->comboSkill.dwTime = GetTickCount() + 3000;

  000a2	ff d3		 call	 ebx
  000a4	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  000a9	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 78   : 				lpObj->comboSkill.Skill[1] = skillnum;

  000af	8a 45 0c	 mov	 al, BYTE PTR _skillnum$[ebp]
  000b2	5f		 pop	 edi
  000b3	88 86 91 00 00
	00		 mov	 BYTE PTR [esi+145], al
  000b9	5e		 pop	 esi

; 95   : 		}
; 96   : 	}
; 97   : 
; 98   : 	return 0;

  000ba	33 c0		 xor	 eax, eax
  000bc	5b		 pop	 ebx

; 99   : }

  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN5@CheckCombo:

; 79   : 			}
; 80   : 			else if ( lpObj->comboSkill.Skill[1]  != skillnum )

  000c1	0f b6 8e 91 00
	00 00		 movzx	 ecx, BYTE PTR [esi+145]
  000c8	3b 4d 0c	 cmp	 ecx, DWORD PTR _skillnum$[ebp]

; 81   : 			{
; 82   : 				lpObj->comboSkill.Init();

  000cb	8d 8e 8c 00 00
	00		 lea	 ecx, DWORD PTR [esi+140]
  000d1	74 9c		 je	 SHORT $LN3@CheckCombo
  000d3	e8 00 00 00 00	 call	 ?Init@ComboSkillData@@QAEXXZ ; ComboSkillData::Init
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi

; 83   : 				return 1;

  000da	b8 01 00 00 00	 mov	 eax, 1
  000df	5b		 pop	 ebx

; 99   : }

  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
$LN8@CheckCombo:

; 84   : 			}
; 85   : 			else
; 86   : 			{
; 87   : 				lpObj->comboSkill.Init();
; 88   : 			}
; 89   : 		}
; 90   : 		else
; 91   : 		{
; 92   : 			lpObj->comboSkill.ProgressIndex= -1;

  000e4	c7 86 94 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+148], -1

; 93   : 			lpObj->comboSkill.dwTime = 0;

  000ee	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx

; 94   : 			lpObj->comboSkill.Skill[0] = -1;

  000f4	c6 86 90 00 00
	00 ff		 mov	 BYTE PTR [esi+144], 255	; 000000ffH
$LN1@CheckCombo:

; 95   : 		}
; 96   : 	}
; 97   : 
; 98   : 	return 0;

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	33 c0		 xor	 eax, eax
  000ff	5b		 pop	 ebx

; 99   : }

  00100	5d		 pop	 ebp
  00101	c2 08 00	 ret	 8
?CheckCombo@CComboAttack@@QAEHHH@Z ENDP			; CComboAttack::CheckCombo
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCComboAttack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCComboAttack@@UAEPAXI@Z PROC			; CComboAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CComboAttack@@UAE@XZ	; CComboAttack::~CComboAttack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCComboAttack@@UAEPAXI@Z ENDP			; CComboAttack::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgComboAttack@@YAXXZ
text$yc	SEGMENT
??__EgComboAttack@@YAXXZ PROC				; `dynamic initializer for 'gComboAttack'', COMDAT

; 8    : CComboAttack gComboAttack;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gComboAttack@@3VCComboAttack@@A ; gComboAttack
  00005	e8 00 00 00 00	 call	 ??0CComboAttack@@QAE@XZ	; CComboAttack::CComboAttack
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgComboAttack@@YAXXZ ; `dynamic atexit destructor for 'gComboAttack''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgComboAttack@@YAXXZ ENDP				; `dynamic initializer for 'gComboAttack''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgComboAttack@@YAXXZ
text$yd	SEGMENT
??__FgComboAttack@@YAXXZ PROC				; `dynamic atexit destructor for 'gComboAttack'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gComboAttack@@3VCComboAttack@@A ; gComboAttack
  00005	e9 00 00 00 00	 jmp	 ??1CComboAttack@@UAE@XZ	; CComboAttack::~CComboAttack
??__FgComboAttack@@YAXXZ ENDP				; `dynamic atexit destructor for 'gComboAttack''
text$yd	ENDS
PUBLIC	?gComboAttack@@3VCComboAttack@@A		; gComboAttack
_BSS	SEGMENT
?gComboAttack@@3VCComboAttack@@A DD 01H DUP (?)		; gComboAttack
_BSS	ENDS
CRT$XCU	SEGMENT
_gComboAttack$initializer$ DD FLAT:??__EgComboAttack@@YAXXZ
CRT$XCU	ENDS
END
