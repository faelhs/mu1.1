; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\Mercenary.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CMercenary@@6B@				; CMercenary::`vftable'
PUBLIC	??0CMercenary@@QAE@XZ				; CMercenary::CMercenary
PUBLIC	??_R4CMercenary@@6B@				; CMercenary::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMercenary@@@8				; CMercenary `RTTI Type Descriptor'
PUBLIC	??_R3CMercenary@@8				; CMercenary::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMercenary@@8				; CMercenary::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMercenary@@8			; CMercenary::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMercenary@@UAEPAXI@Z:PROC			; CMercenary::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMercenary@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\mercenary.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMercenary@@8 DD FLAT:??_R0?AVCMercenary@@@8 ; CMercenary::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMercenary@@8
rdata$r	ENDS
;	COMDAT ??_R2CMercenary@@8
rdata$r	SEGMENT
??_R2CMercenary@@8 DD FLAT:??_R1A@?0A@EA@CMercenary@@8	; CMercenary::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMercenary@@8
rdata$r	SEGMENT
??_R3CMercenary@@8 DD 00H				; CMercenary::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMercenary@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMercenary@@@8
_DATA	SEGMENT
??_R0?AVCMercenary@@@8 DD FLAT:??_7type_info@@6B@	; CMercenary `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMercenary@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMercenary@@6B@
rdata$r	SEGMENT
??_R4CMercenary@@6B@ DD 00H				; CMercenary::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMercenary@@@8
	DD	FLAT:??_R3CMercenary@@8
rdata$r	ENDS
;	COMDAT ??_7CMercenary@@6B@
CONST	SEGMENT
??_7CMercenary@@6B@ DD FLAT:??_R4CMercenary@@6B@	; CMercenary::`vftable'
	DD	FLAT:??_ECMercenary@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMercenary@@QAE@XZ
_TEXT	SEGMENT
??0CMercenary@@QAE@XZ PROC				; CMercenary::CMercenary, COMDAT
; _this$ = ecx

; 17   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMercenary@@6B@

; 18   : 	this->m_iMercenaryCount = 0;

  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 19   : }

  0000f	c3		 ret	 0
??0CMercenary@@QAE@XZ ENDP				; CMercenary::CMercenary
_TEXT	ENDS
PUBLIC	??1CMercenary@@UAE@XZ				; CMercenary::~CMercenary
; Function compile flags: /Ogtp
;	COMDAT ??1CMercenary@@UAE@XZ
_TEXT	SEGMENT
??1CMercenary@@UAE@XZ PROC				; CMercenary::~CMercenary, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMercenary@@6B@

; 24   : 	return;
; 25   : }

  00006	c3		 ret	 0
??1CMercenary@@UAE@XZ ENDP				; CMercenary::~CMercenary
_TEXT	ENDS
PUBLIC	?CreateMercenary@CMercenary@@QAEHHHEE@Z		; CMercenary::CreateMercenary
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
; Function compile flags: /Ogtp
;	COMDAT ?CreateMercenary@CMercenary@@QAEHHHEE@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iMercenaryTypeIndex$ = 12				; size = 4
_cTX$ = 16						; size = 1
_cTY$ = 20						; size = 1
?CreateMercenary@CMercenary@@QAEHHHEE@Z PROC		; CMercenary::CreateMercenary, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 	LPOBJ lpObj = &gObj[iIndex];
; 31   : 	int iMonsterIndex = -1;
; 32   : 	BYTE cX = cTX;
; 33   : 	BYTE cY = cTY;
; 34   : 
; 35   : 	BYTE btMapAttr = MapC[lpObj->MapNumber].GetAttr(cX, cY);

  00003	0f b6 45 14	 movzx	 eax, BYTE PTR _cTY$[ebp]
  00007	0f b6 4d 10	 movzx	 ecx, BYTE PTR _cTX$[ebp]
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00010	8b f7		 mov	 esi, edi
  00012	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	81 c6 00 00 00
	00		 add	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00020	0f b6 8e 09 01
	00 00		 movzx	 ecx, BYTE PTR [esi+265]
  00027	69 c9 08 07 05
	00		 imul	 ecx, 329480		; 00050708H
  0002d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00033	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 36   : 
; 37   : 	if ( lpObj->MapNumber != MAP_INDEX_CASTLESIEGE )

  00038	80 be 09 01 00
	00 1e		 cmp	 BYTE PTR [esi+265], 30	; 0000001eH
  0003f	74 21		 je	 SHORT $LN1@CreateMerc

; 38   : 	{
; 39   : 		::MsgOutput(iIndex, lMsg.Get(MSGGET(6, 91)));

  00041	68 5b 06 00 00	 push	 1627			; 0000065bH
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0004b	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00050	50		 push	 eax
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00057	83 c4 08	 add	 esp, 8
  0005a	5f		 pop	 edi

; 40   : 
; 41   : 		return FALSE;

  0005b	33 c0		 xor	 eax, eax
  0005d	5e		 pop	 esi

; 144  : }

  0005e	5d		 pop	 ebp
  0005f	c2 10 00	 ret	 16			; 00000010H
$LN1@CreateMerc:
  00062	5f		 pop	 edi

; 42   : 	}
; 43   : 
; 44   : #if GS_CASTLE == 1
; 45   : 
; 46   : 	if ( g_CastleSiegeSync.GetCastleState() != CASTLESIEGE_STATE_STARTSIEGE )
; 47   : 	{
; 48   : 		::MsgOutput(iIndex, lMsg.Get(MSGGET(6, 94)));
; 49   : 
; 50   : 		return FALSE;
; 51   : 	}
; 52   : 
; 53   : 
; 54   : 	if ( iMercenaryTypeIndex == 286 || iMercenaryTypeIndex == 287 )
; 55   : 	{
; 56   : 		if ( lpObj->m_btCsJoinSide != 1 )
; 57   : 		{
; 58   : 			::MsgOutput(iIndex, lMsg.Get(MSGGET(6, 92)));
; 59   : 
; 60   : 			return FALSE;
; 61   : 		}
; 62   : 	}
; 63   : 
; 64   : 	if ( lpObj->GuildStatus != 0x80 && lpObj->GuildStatus != 0x40 )
; 65   : 	{
; 66   : 		::MsgOutput(iIndex, lMsg.Get(MSGGET(6,93)));
; 67   : 
; 68   : 		return FALSE;
; 69   : 	}
; 70   : 
; 71   : 	if ( this->m_iMercenaryCount > MAX_MERCENARY_COUNT )
; 72   : 	{
; 73   : 		::MsgOutput(iIndex, lMsg.Get(MSGGET(6,95)));
; 74   : 
; 75   : 		return FALSE;
; 76   : 	}
; 77   : 
; 78   : 	iMonsterIndex = gObjAddMonster(lpObj->MapNumber);
; 79   : 
; 80   : 	if ( iMonsterIndex >= 0 )
; 81   : 	{
; 82   : 		MONSTER_ATTRIBUTE * MAttr = gMAttr.GetAttr(iMercenaryTypeIndex);
; 83   : 
; 84   : 		if ( MAttr == NULL )
; 85   : 		{
; 86   : 			gObjDel(iMonsterIndex);
; 87   : 			return FALSE;
; 88   : 		}
; 89   : 
; 90   : 		gObjSetMonster(iMonsterIndex, iMercenaryTypeIndex);
; 91   : 
; 92   : 		gObj[iMonsterIndex].Live = TRUE;
; 93   : 		gObj[iMonsterIndex].Life = MAttr->m_Hp;
; 94   : 		gObj[iMonsterIndex].MaxLife = MAttr->m_Hp;
; 95   : 		gObj[iMonsterIndex].m_PosNum = -1;
; 96   : 		gObj[iMonsterIndex].X = cX;
; 97   : 		gObj[iMonsterIndex].Y = cY;
; 98   : 		gObj[iMonsterIndex].MTX = cX;
; 99   : 		gObj[iMonsterIndex].MTY = cY;
; 100  : 		gObj[iMonsterIndex].TX = cX;
; 101  : 		gObj[iMonsterIndex].TY = cY;
; 102  : 		gObj[iMonsterIndex].m_OldX = cX;
; 103  : 		gObj[iMonsterIndex].m_OldY = cY;
; 104  : 		gObj[iMonsterIndex].StartX = cX;
; 105  : 		gObj[iMonsterIndex].StartY = cY;
; 106  : 		gObj[iMonsterIndex].MapNumber = lpObj->MapNumber;
; 107  : 		gObj[iMonsterIndex].m_MoveRange = 0;
; 108  : 		gObj[iMonsterIndex].Level = MAttr->m_Level;
; 109  : 		gObj[iMonsterIndex].Type = OBJ_MONSTER;
; 110  : 		gObj[iMonsterIndex].MaxRegenTime = 1000;
; 111  : 		gObj[iMonsterIndex].Dir = 1;
; 112  : 		gObj[iMonsterIndex].RegenTime = GetTickCount();
; 113  : 		gObj[iMonsterIndex].m_Attribute = 0;
; 114  : 		gObj[iMonsterIndex].DieRegen = 0;
; 115  : 		gObj[iMonsterIndex].m_btCsNpcType = OBJ_MONSTER;
; 116  : 		gObj[iMonsterIndex].m_btCsJoinSide = 1;
; 117  : 		
; 118  : 		MsgOutput(iIndex, lMsg.Get(MSGGET(6,96)));
; 119  : 
; 120  : 		this->m_iMercenaryCount++;
; 121  : 
; 122  : 		if ( lpObj->lpGuild )
; 123  : 		{
; 124  : 			LogAdd(LOG_BLACK, "[CastleSiege] Mercenary is summoned [%d] - [%d][%d] [%s][%s][%d] - (Guild : %s)",
; 125  : 				iMonsterIndex, iMercenaryTypeIndex, this->m_iMercenaryCount, 
; 126  : 				lpObj->AccountID, lpObj->Name, lpObj->GuildStatus, lpObj->lpGuild->Name);
; 127  : 		}
; 128  : 		else
; 129  : 		{
; 130  : 			LogAdd(LOG_BLACK, "[CastleSiege] Mercenary is summoned [%d] - [%d][%d] [%s][%s][%d]",
; 131  : 				iMonsterIndex, iMercenaryTypeIndex, this->m_iMercenaryCount, 
; 132  : 				lpObj->AccountID, lpObj->Name, lpObj->GuildStatus);
; 133  : 		}
; 134  : 	}
; 135  : 	else
; 136  : 	{
; 137  : 		MsgOutput(iIndex, lMsg.Get(MSGGET(6,97)));
; 138  : 		return FALSE;
; 139  : 	}
; 140  : 
; 141  : #endif
; 142  : 
; 143  : 	return TRUE;

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	5e		 pop	 esi

; 144  : }

  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
?CreateMercenary@CMercenary@@QAEHHHEE@Z ENDP		; CMercenary::CreateMercenary
_TEXT	ENDS
PUBLIC	??_C@_0CO@NHOFBALN@?$FLCastleSiege?$FN?5Mercenary?5is?5broke@ ; `string'
PUBLIC	?DeleteMercenary@CMercenary@@QAEHH@Z		; CMercenary::DeleteMercenary
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
;	COMDAT ??_C@_0CO@NHOFBALN@?$FLCastleSiege?$FN?5Mercenary?5is?5broke@
CONST	SEGMENT
??_C@_0CO@NHOFBALN@?$FLCastleSiege?$FN?5Mercenary?5is?5broke@ DB '[Castle'
	DB	'Siege] Mercenary is broken [%d] - [%d]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DeleteMercenary@CMercenary@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?DeleteMercenary@CMercenary@@QAEHH@Z PROC		; CMercenary::DeleteMercenary, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 149  : 	if ( iIndex < 0 || iIndex > OBJMAX-1 )

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00009	81 f9 e7 1c 00
	00		 cmp	 ecx, 7399		; 00001ce7H
  0000f	77 2e		 ja	 SHORT $LN2@DeleteMerc

; 152  : 	}
; 153  : 
; 154  : 	this->m_iMercenaryCount--;

  00011	ff 4e 04	 dec	 DWORD PTR [esi+4]
  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 155  : 
; 156  : 	LogAdd(LOG_BLACK, "[CastleSiege] Mercenary is broken [%d] - [%d]", iIndex, this->m_iMercenaryCount);

  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@NHOFBALN@?$FLCastleSiege?$FN?5Mercenary?5is?5broke@
  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 157  : 
; 158  : 	if ( this->m_iMercenaryCount < 0 )

  00028	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0002c	7d 07		 jge	 SHORT $LN1@DeleteMerc

; 159  : 	{
; 160  : 		this->m_iMercenaryCount = 0;

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN1@DeleteMerc:

; 161  : 	}
; 162  : 
; 163  : 	return TRUE;

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	5e		 pop	 esi

; 164  : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
$LN2@DeleteMerc:

; 150  : 	{
; 151  : 		return FALSE;

  0003f	33 c0		 xor	 eax, eax
  00041	5e		 pop	 esi

; 164  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?DeleteMercenary@CMercenary@@QAEHH@Z ENDP		; CMercenary::DeleteMercenary
_TEXT	ENDS
PUBLIC	?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z ; CMercenary::SearchEnemy
; Function compile flags: /Ogtp
;	COMDAT ?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CMercenary::SearchEnemy, COMDAT
; _this$ = ecx

; 169  : #if GS_CASTLE == 1
; 170  : 	int iTargetNumber = -1;
; 171  : 	int iAttackRange = 0;
; 172  : 
; 173  : 	lpObj->TargetNumber = -1;
; 174  : 
; 175  : 	if ( lpObj->Class == 286 )
; 176  : 		iAttackRange = 5;
; 177  : 	else if ( lpObj->Class == 287 )
; 178  : 		iAttackRange = 3;
; 179  : 
; 180  : 	for (int i=0;i<MAX_VIEWPORT;i++)
; 181  : 	{
; 182  : 		iTargetNumber = lpObj->VpPlayer2[i].number;
; 183  : 		if ( iTargetNumber >= 0 )
; 184  : 		{
; 185  : 			if ( gObj[iTargetNumber].Type == OBJ_USER )
; 186  : 			{
; 187  : 				if ( gObj[iTargetNumber].Live )
; 188  : 				{
; 189  : 					if ( gObj[iTargetNumber].Teleport == 0 )
; 190  : 					{
; 191  : 						if ( gObj[iTargetNumber].m_btCsJoinSide == lpObj->m_btCsJoinSide )
; 192  : 							continue;
; 193  : 
; 194  : 						int x = lpObj->X - gObj[iTargetNumber].X;
; 195  : 						int y = lpObj->Y - gObj[iTargetNumber].Y;
; 196  : 						int iDis = (int)sqrt(((float)(x*x + y*y)));
; 197  : 						lpObj->VpPlayer2[i].dis = iDis;
; 198  : 
; 199  : 						if ( lpObj->Dir == 1 )
; 200  : 						{
; 201  : 							if ( abs(x) <= 2 )
; 202  : 							{
; 203  : 								int cY = lpObj->Y - iAttackRange;
; 204  : 								if ( cY <= gObj[iTargetNumber].Y && lpObj->Y >= gObj[iTargetNumber].Y )
; 205  : 								{
; 206  : 									lpObj->TargetNumber = iTargetNumber;
; 207  : 									return TRUE;
; 208  : 								}
; 209  : 							}
; 210  : 						}
; 211  : 
; 212  : 						if ( lpObj->Dir == 3 )
; 213  : 						{
; 214  : 							if ( abs(y) <= 2 )
; 215  : 							{
; 216  : 								int cX = lpObj->X - iAttackRange;
; 217  : 								if ( cX <= gObj[iTargetNumber].X && lpObj->X >= gObj[iTargetNumber].X )
; 218  : 								{
; 219  : 									lpObj->TargetNumber = iTargetNumber;
; 220  : 									return TRUE;
; 221  : 								}
; 222  : 							}
; 223  : 						}
; 224  : 					}
; 225  : 				}
; 226  : 			}
; 227  : 		}
; 228  : 	}
; 229  : #endif
; 230  : 	return FALSE;

  00000	33 c0		 xor	 eax, eax

; 231  : }

  00002	c2 04 00	 ret	 4
?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CMercenary::SearchEnemy
_TEXT	ENDS
PUBLIC	?MercenaryAct@CMercenary@@QAEXH@Z		; CMercenary::MercenaryAct
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?MercenaryAct@CMercenary@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?MercenaryAct@CMercenary@@QAEXH@Z PROC			; CMercenary::MercenaryAct, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 236  : 	if ( ::gObjIsConnected(iIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	74 53		 je	 SHORT $LN1@MercenaryA

; 237  : 	{
; 238  : 		return;
; 239  : 	}
; 240  : 
; 241  : 	LPOBJ lpObj = &gObj[iIndex];

  00017	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  0001d	81 c6 00 00 00
	00		 add	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00023	8b d6		 mov	 edx, esi

; 242  : 
; 243  : 
; 244  : 	if ( lpObj->VPCount2 < 1 )

  00025	83 ba 9c 0a 00
	00 01		 cmp	 DWORD PTR [edx+2716], 1
  0002c	7c 3c		 jl	 SHORT $LN1@MercenaryA

; 245  : 	{
; 246  : 		return;
; 247  : 	}
; 248  : 
; 249  : 	if ( this->SearchEnemy(lpObj) != 0 && lpObj->TargetNumber >= 0)

  0002e	52		 push	 edx
  0002f	8b cf		 mov	 ecx, edi
  00031	e8 00 00 00 00	 call	 ?SearchEnemy@CMercenary@@QAEHPAUOBJECTSTRUCT@@@Z ; CMercenary::SearchEnemy
  00036	85 c0		 test	 eax, eax
  00038	74 23		 je	 SHORT $LN2@MercenaryA
  0003a	66 83 ba d4 02
	00 00 00	 cmp	 WORD PTR [edx+724], 0
  00042	7c 19		 jl	 SHORT $LN2@MercenaryA

; 250  : 	{
; 251  : 		lpObj->m_ActState.Attack = 1;
; 252  : 		lpObj->NextActionTime = lpObj->m_AttackSpeed;

  00044	8b 82 08 03 00
	00		 mov	 eax, DWORD PTR [edx+776]
  0004a	83 8a b4 01 00
	00 02		 or	 DWORD PTR [edx+436], 2
  00051	5f		 pop	 edi
  00052	89 82 1c 02 00
	00		 mov	 DWORD PTR [edx+540], eax
  00058	5e		 pop	 esi

; 257  : 	}
; 258  : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN2@MercenaryA:

; 253  : 	}
; 254  : 	else
; 255  : 	{
; 256  : 		lpObj->NextActionTime = lpObj->m_MoveSpeed;

  0005d	0f bf 8a 1c 03
	00 00		 movsx	 ecx, WORD PTR [edx+796]
  00064	89 8a 1c 02 00
	00		 mov	 DWORD PTR [edx+540], ecx
$LN1@MercenaryA:
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 257  : 	}
; 258  : }

  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?MercenaryAct@CMercenary@@QAEXH@Z ENDP			; CMercenary::MercenaryAct
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMercenary@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMercenary@@UAEPAXI@Z PROC				; CMercenary::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMercenary@@UAE@XZ	; CMercenary::~CMercenary
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMercenary@@UAEPAXI@Z ENDP				; CMercenary::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CsNPC_Mercenary@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_Mercenary@@YAXXZ PROC			; `dynamic initializer for 'g_CsNPC_Mercenary'', COMDAT

; 14   : CMercenary g_CsNPC_Mercenary;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Mercenary@@3VCMercenary@@A ; g_CsNPC_Mercenary
  00005	e8 00 00 00 00	 call	 ??0CMercenary@@QAE@XZ	; CMercenary::CMercenary
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_Mercenary@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_Mercenary''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_Mercenary@@YAXXZ ENDP			; `dynamic initializer for 'g_CsNPC_Mercenary''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_Mercenary@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_Mercenary@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CsNPC_Mercenary'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Mercenary@@3VCMercenary@@A ; g_CsNPC_Mercenary
  00005	e9 00 00 00 00	 jmp	 ??1CMercenary@@UAE@XZ	; CMercenary::~CMercenary
??__Fg_CsNPC_Mercenary@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CsNPC_Mercenary''
text$yd	ENDS
PUBLIC	?g_CsNPC_Mercenary@@3VCMercenary@@A		; g_CsNPC_Mercenary
_BSS	SEGMENT
?g_CsNPC_Mercenary@@3VCMercenary@@A DQ 01H DUP (?)	; g_CsNPC_Mercenary
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_Mercenary$initializer$ DD FLAT:??__Eg_CsNPC_Mercenary@@YAXXZ
CRT$XCU	ENDS
END
