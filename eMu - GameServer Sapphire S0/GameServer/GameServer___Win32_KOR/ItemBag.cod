; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\ItemBag.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 10	 mov	 edi, DWORD PTR ___n$[ebp]
  00007	4f		 dec	 edi
  00008	78 14		 js	 SHORT $LN1@vector
  0000a	53		 push	 ebx
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	ff d3		 call	 ebx
  00016	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00019	4f		 dec	 edi
  0001a	79 f6		 jns	 SHORT $LL2@vector
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
$LN1@vector:
  0001e	5f		 pop	 edi
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_7CItemBag@@6B@				; CItemBag::`vftable'
PUBLIC	??1CItemBag@@UAE@XZ				; CItemBag::~CItemBag
PUBLIC	??_R4CItemBag@@6B@				; CItemBag::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCItemBag@@@8				; CItemBag `RTTI Type Descriptor'
PUBLIC	??_R3CItemBag@@8				; CItemBag::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CItemBag@@8				; CItemBag::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CItemBag@@8			; CItemBag::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECItemBag@@UAEPAXI@Z:PROC			; CItemBag::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CItemBag@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\itembag.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CItemBag@@8 DD FLAT:??_R0?AVCItemBag@@@8	; CItemBag::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CItemBag@@8
rdata$r	ENDS
;	COMDAT ??_R2CItemBag@@8
rdata$r	SEGMENT
??_R2CItemBag@@8 DD FLAT:??_R1A@?0A@EA@CItemBag@@8	; CItemBag::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CItemBag@@8
rdata$r	SEGMENT
??_R3CItemBag@@8 DD 00H					; CItemBag::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CItemBag@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCItemBag@@@8
_DATA	SEGMENT
??_R0?AVCItemBag@@@8 DD FLAT:??_7type_info@@6B@		; CItemBag `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCItemBag@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CItemBag@@6B@
rdata$r	SEGMENT
??_R4CItemBag@@6B@ DD 00H				; CItemBag::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCItemBag@@@8
	DD	FLAT:??_R3CItemBag@@8
rdata$r	ENDS
;	COMDAT ??_7CItemBag@@6B@
CONST	SEGMENT
??_7CItemBag@@6B@ DD FLAT:??_R4CItemBag@@6B@		; CItemBag::`vftable'
	DD	FLAT:??_ECItemBag@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CItemBag@@UAE@XZ
_TEXT	SEGMENT
??1CItemBag@@UAE@XZ PROC				; CItemBag::~CItemBag, COMDAT
; _this$ = ecx

; 18   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CItemBag@@6B@

; 19   : 	return;
; 20   : }

  00006	c3		 ret	 0
??1CItemBag@@UAE@XZ ENDP				; CItemBag::~CItemBag
_TEXT	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?LoadItem@CItemBag@@QAEXPAD@Z			; CItemBag::LoadItem
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadItem@CItemBag@@QAEXPAD@Z
_TEXT	SEGMENT
tv226 = -8						; size = 4
tv224 = -8						; size = 4
tv216 = -8						; size = 4
tv213 = -8						; size = 4
tv206 = -8						; size = 4
tv204 = -8						; size = 4
tv197 = -8						; size = 4
tv194 = -8						; size = 4
tv175 = -8						; size = 4
tv141 = -8						; size = 4
tv137 = -8						; size = 4
tv89 = -8						; size = 4
tv229 = -2						; size = 2
tv220 = -2						; size = 2
tv210 = -2						; size = 2
tv201 = -2						; size = 2
tv160 = -2						; size = 2
tv139 = -2						; size = 2
_script_file$ = 8					; size = 4
?LoadItem@CItemBag@@QAEXPAD@Z PROC			; CItemBag::LoadItem, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 33   : 	SMDFile = fopen(script_file, "r");

  00007	8b 75 08	 mov	 esi, DWORD PTR _script_file$[ebp]
  0000a	57		 push	 edi
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00010	56		 push	 esi
  00011	8b f9		 mov	 edi, ecx
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 34   : 
; 35   : 	if ( SMDFile == NULL )

  00020	85 c0		 test	 eax, eax
  00022	75 0b		 jne	 SHORT $LN8@LoadItem

; 36   : 	{
; 37   : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 197)), script_file);

  00024	56		 push	 esi
  00025	68 c5 01 00 00	 push	 453			; 000001c5H

; 38   : 		return ;

  0002a	e9 6c 01 00 00	 jmp	 $LN18@LoadItem
$LN8@LoadItem:

; 39   : 	}
; 40   : 
; 41   : 	int Token;
; 42   : 	int n = 0;
; 43   : 
; 44   : 	while ( true )
; 45   : 	{
; 46   : 		Token = GetToken();

  0002f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 47   : 
; 48   : 		if ( Token == 2 )

  00034	83 f8 02	 cmp	 eax, 2
  00037	0f 84 46 01 00
	00		 je	 $LN15@LoadItem
  0003d	53		 push	 ebx
  0003e	bb 01 00 00 00	 mov	 ebx, 1
$LL7@LoadItem:

; 49   : 		{
; 50   : 			break;
; 51   : 		}
; 52   : 
; 53   : 		if ( Token == 1 )

  00043	3b c3		 cmp	 eax, ebx
  00045	0f 85 29 01 00
	00		 jne	 $LN1@LoadItem

; 54   : 		{
; 55   : 			n = this->BagObjectCount;

  0004b	8b 87 88 03 00
	00		 mov	 eax, DWORD PTR [edi+904]

; 56   : 
; 57   : 			this->BagObject[n].m_type = TokenNumber;

  00051	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00057	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005a	d9 7d fe	 fnstcw	 WORD PTR tv229[ebp]
  0005d	8d 34 47	 lea	 esi, DWORD PTR [edi+eax*2]
  00060	0f b7 45 fe	 movzx	 eax, WORD PTR tv229[ebp]
  00064	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00069	89 45 f8	 mov	 DWORD PTR tv226[ebp], eax
  0006c	d9 6d f8	 fldcw	 WORD PTR tv226[ebp]
  0006f	db 5d f8	 fistp	 DWORD PTR tv224[ebp]
  00072	0f b6 4d f8	 movzx	 ecx, BYTE PTR tv224[ebp]
  00076	88 4e 04	 mov	 BYTE PTR [esi+4], cl
  00079	d9 6d fe	 fldcw	 WORD PTR tv229[ebp]

; 58   : 
; 59   : 			Token = GetToken();

  0007c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 60   : 			this->BagObject[n].m_index = TokenNumber;

  00081	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00087	d9 7d fe	 fnstcw	 WORD PTR tv220[ebp]
  0008a	0f b7 45 fe	 movzx	 eax, WORD PTR tv220[ebp]
  0008e	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00093	89 45 f8	 mov	 DWORD PTR tv216[ebp], eax
  00096	d9 6d f8	 fldcw	 WORD PTR tv216[ebp]
  00099	db 5d f8	 fistp	 DWORD PTR tv213[ebp]
  0009c	0f b6 55 f8	 movzx	 edx, BYTE PTR tv213[ebp]
  000a0	88 56 05	 mov	 BYTE PTR [esi+5], dl
  000a3	d9 6d fe	 fldcw	 WORD PTR tv220[ebp]

; 61   : 
; 62   : 			Token = GetToken();

  000a6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 63   : 			this->BagObject[n].m_level = TokenNumber;

  000ab	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000b1	d9 7d fe	 fnstcw	 WORD PTR tv210[ebp]
  000b4	0f b7 45 fe	 movzx	 eax, WORD PTR tv210[ebp]
  000b8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000bd	89 45 f8	 mov	 DWORD PTR tv206[ebp], eax
  000c0	d9 6d f8	 fldcw	 WORD PTR tv206[ebp]
  000c3	db 5d f8	 fistp	 DWORD PTR tv204[ebp]
  000c6	0f b6 45 f8	 movzx	 eax, BYTE PTR tv204[ebp]
  000ca	88 46 06	 mov	 BYTE PTR [esi+6], al
  000cd	d9 6d fe	 fldcw	 WORD PTR tv210[ebp]

; 64   : 
; 65   : 			Token = GetToken();

  000d0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 66   : 			this->BagObject[n].m_op1 = TokenNumber;

  000d5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000db	d9 7d fe	 fnstcw	 WORD PTR tv201[ebp]
  000de	0f b7 45 fe	 movzx	 eax, WORD PTR tv201[ebp]
  000e2	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000e7	89 45 f8	 mov	 DWORD PTR tv197[ebp], eax
  000ea	d9 6d f8	 fldcw	 WORD PTR tv197[ebp]
  000ed	db 5d f8	 fistp	 DWORD PTR tv194[ebp]
  000f0	0f b6 4d f8	 movzx	 ecx, BYTE PTR tv194[ebp]
  000f4	88 4e 07	 mov	 BYTE PTR [esi+7], cl
  000f7	d9 6d fe	 fldcw	 WORD PTR tv201[ebp]

; 67   : 
; 68   : 			Token = GetToken();

  000fa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 69   : 			this->BagObject[n].m_op2 = TokenNumber;

  000ff	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00105	d9 7d fe	 fnstcw	 WORD PTR tv139[ebp]
  00108	0f b7 45 fe	 movzx	 eax, WORD PTR tv139[ebp]
  0010c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00111	89 45 f8	 mov	 DWORD PTR tv89[ebp], eax
  00114	d9 6d f8	 fldcw	 WORD PTR tv89[ebp]
  00117	db 5d f8	 fistp	 DWORD PTR tv175[ebp]
  0011a	0f b6 55 f8	 movzx	 edx, BYTE PTR tv175[ebp]
  0011e	88 56 08	 mov	 BYTE PTR [esi+8], dl
  00121	d9 6d fe	 fldcw	 WORD PTR tv139[ebp]

; 70   : 
; 71   : 			Token = GetToken();

  00124	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 72   : 			this->BagObject[n].m_op3 = TokenNumber;

  00129	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012f	d9 7d fe	 fnstcw	 WORD PTR tv160[ebp]
  00132	0f b7 45 fe	 movzx	 eax, WORD PTR tv160[ebp]
  00136	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H

; 73   : 
; 74   : 			if ( this->BagObject[n].m_op2 != 0 )

  0013b	80 7e 08 00	 cmp	 BYTE PTR [esi+8], 0
  0013f	89 45 f8	 mov	 DWORD PTR tv141[ebp], eax
  00142	d9 6d f8	 fldcw	 WORD PTR tv141[ebp]
  00145	db 5d f8	 fistp	 DWORD PTR tv137[ebp]
  00148	0f b6 45 f8	 movzx	 eax, BYTE PTR tv137[ebp]
  0014c	88 46 09	 mov	 BYTE PTR [esi+9], al
  0014f	d9 6d fe	 fldcw	 WORD PTR tv160[ebp]
  00152	74 08		 je	 SHORT $LN3@LoadItem

; 75   : 			{
; 76   : 				this->BagExItemCount++;

  00154	01 9f 90 03 00
	00		 add	 DWORD PTR [edi+912], ebx

; 77   : 			}
; 78   : 			else

  0015a	eb 06		 jmp	 SHORT $LN2@LoadItem
$LN3@LoadItem:

; 79   : 			{
; 80   : 				this->BagNormalItemCount++;

  0015c	01 9f 8c 03 00
	00		 add	 DWORD PTR [edi+908], ebx
$LN2@LoadItem:

; 81   : 			}
; 82   : 
; 83   : 			this->BagObjectCount++;

  00162	01 9f 88 03 00
	00		 add	 DWORD PTR [edi+904], ebx

; 84   : 
; 85   : 			if ( this->BagObjectCount > MAX_ITEMBAG_ATTR-1 )

  00168	81 bf 88 03 00
	00 95 00 00 00	 cmp	 DWORD PTR [edi+904], 149 ; 00000095H
  00172	7f 0e		 jg	 SHORT $LN17@LoadItem
$LN1@LoadItem:

; 39   : 	}
; 40   : 
; 41   : 	int Token;
; 42   : 	int n = 0;
; 43   : 
; 44   : 	while ( true )
; 45   : 	{
; 46   : 		Token = GetToken();

  00174	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 47   : 
; 48   : 		if ( Token == 2 )

  00179	83 f8 02	 cmp	 eax, 2
  0017c	0f 85 c1 fe ff
	ff		 jne	 $LL7@LoadItem
$LN17@LoadItem:
  00182	5b		 pop	 ebx
$LN15@LoadItem:

; 86   : 			{
; 87   : 				break;
; 88   : 			}
; 89   : 		}
; 90   : 	}
; 91   : 
; 92   : 	fclose(SMDFile);

  00183	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 _fclose

; 93   : 
; 94   : 	LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 198)), script_file);

  0018f	8b 55 08	 mov	 edx, DWORD PTR _script_file$[ebp]
  00192	83 c4 04	 add	 esp, 4
  00195	52		 push	 edx
  00196	68 c6 01 00 00	 push	 454			; 000001c6H
$LN18@LoadItem:
  0019b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001a0	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001a5	50		 push	 eax
  001a6	6a 00		 push	 0
  001a8	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi

; 95   : }

  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c2 04 00	 ret	 4
?LoadItem@CItemBag@@QAEXPAD@Z ENDP			; CItemBag::LoadItem
_TEXT	ENDS
PUBLIC	?GetType@CItemBag@@QAEEH@Z			; CItemBag::GetType
; Function compile flags: /Ogtp
;	COMDAT ?GetType@CItemBag@@QAEEH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetType@CItemBag@@QAEEH@Z PROC				; CItemBag::GetType, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	if ( n< 0 || n > MAX_ITEMBAG_ATTR-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0000b	77 0b		 ja	 SHORT $LN1@GetType

; 103  : 	}
; 104  : 
; 105  : 	return this->BagObject[n].m_type;

  0000d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00010	8a 44 41 04	 mov	 al, BYTE PTR [ecx+eax*2+4]

; 106  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetType:

; 101  : 	{
; 102  : 		return 0;

  00018	32 c0		 xor	 al, al

; 106  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetType@CItemBag@@QAEEH@Z ENDP				; CItemBag::GetType
_TEXT	ENDS
PUBLIC	?GetIndex@CItemBag@@QAEEH@Z			; CItemBag::GetIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetIndex@CItemBag@@QAEEH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetIndex@CItemBag@@QAEEH@Z PROC			; CItemBag::GetIndex, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 	if ( n< 0 || n > MAX_ITEMBAG_ATTR-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0000b	77 0b		 ja	 SHORT $LN1@GetIndex

; 113  : 	}
; 114  : 
; 115  : 	return this->BagObject[n].m_index;

  0000d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00010	8a 44 41 05	 mov	 al, BYTE PTR [ecx+eax*2+5]

; 116  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetIndex:

; 111  : 	{
; 112  : 		return 0;

  00018	32 c0		 xor	 al, al

; 116  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetIndex@CItemBag@@QAEEH@Z ENDP			; CItemBag::GetIndex
_TEXT	ENDS
PUBLIC	?GetLevel@CItemBag@@QAEEH@Z			; CItemBag::GetLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetLevel@CItemBag@@QAEEH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetLevel@CItemBag@@QAEEH@Z PROC			; CItemBag::GetLevel, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : 	if ( n< 0 || n > MAX_ITEMBAG_ATTR-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0000b	77 0b		 ja	 SHORT $LN1@GetLevel

; 124  : 	}
; 125  : 
; 126  : 	return this->BagObject[n].m_level;

  0000d	8d 44 40 03	 lea	 eax, DWORD PTR [eax+eax*2+3]
  00011	8a 04 41	 mov	 al, BYTE PTR [ecx+eax*2]

; 127  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetLevel:

; 122  : 	{
; 123  : 		return 0;

  00018	32 c0		 xor	 al, al

; 127  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetLevel@CItemBag@@QAEEH@Z ENDP			; CItemBag::GetLevel
_TEXT	ENDS
PUBLIC	?GetOp1@CItemBag@@QAEEH@Z			; CItemBag::GetOp1
; Function compile flags: /Ogtp
;	COMDAT ?GetOp1@CItemBag@@QAEEH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetOp1@CItemBag@@QAEEH@Z PROC				; CItemBag::GetOp1, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 132  : 	if ( n< 0 || n > MAX_ITEMBAG_ATTR-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0000b	77 0b		 ja	 SHORT $LN1@GetOp1

; 135  : 	}
; 136  : 
; 137  : 	return this->BagObject[n].m_op1;

  0000d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00010	8a 44 41 07	 mov	 al, BYTE PTR [ecx+eax*2+7]

; 138  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetOp1:

; 133  : 	{
; 134  : 		return 0;

  00018	32 c0		 xor	 al, al

; 138  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetOp1@CItemBag@@QAEEH@Z ENDP				; CItemBag::GetOp1
_TEXT	ENDS
PUBLIC	?GetOp2@CItemBag@@QAEEH@Z			; CItemBag::GetOp2
; Function compile flags: /Ogtp
;	COMDAT ?GetOp2@CItemBag@@QAEEH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetOp2@CItemBag@@QAEEH@Z PROC				; CItemBag::GetOp2, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	if ( n< 0 || n > MAX_ITEMBAG_ATTR-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0000b	77 0b		 ja	 SHORT $LN1@GetOp2

; 146  : 	}
; 147  : 
; 148  : 	return this->BagObject[n].m_op2;

  0000d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00010	8a 44 41 08	 mov	 al, BYTE PTR [ecx+eax*2+8]

; 149  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetOp2:

; 144  : 	{
; 145  : 		return 0;

  00018	32 c0		 xor	 al, al

; 149  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetOp2@CItemBag@@QAEEH@Z ENDP				; CItemBag::GetOp2
_TEXT	ENDS
PUBLIC	?GetOp3@CItemBag@@QAEEH@Z			; CItemBag::GetOp3
; Function compile flags: /Ogtp
;	COMDAT ?GetOp3@CItemBag@@QAEEH@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?GetOp3@CItemBag@@QAEEH@Z PROC				; CItemBag::GetOp3, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 154  : 	if ( n< 0 || n > MAX_ITEMBAG_ATTR-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0000b	77 0b		 ja	 SHORT $LN1@GetOp3

; 157  : 	}
; 158  : 
; 159  : 	return this->BagObject[n].m_op3;

  0000d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00010	8a 44 41 09	 mov	 al, BYTE PTR [ecx+eax*2+9]

; 160  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@GetOp3:

; 155  : 	{
; 156  : 		return 0;

  00018	32 c0		 xor	 al, al

; 160  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetOp3@CItemBag@@QAEEH@Z ENDP				; CItemBag::GetOp3
_TEXT	ENDS
PUBLIC	??0CItemBagAttr@@QAE@XZ				; CItemBagAttr::CItemBagAttr
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\itembag.h
;	COMDAT ??0CItemBagAttr@@QAE@XZ
_TEXT	SEGMENT
??0CItemBagAttr@@QAE@XZ PROC				; CItemBagAttr::CItemBagAttr, COMDAT
; _this$ = ecx

; 15   : 	CItemBagAttr()	// line : 28

  00000	8b c1		 mov	 eax, ecx

; 16   : 	{
; 17   : 		this->m_type=0;

  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 18   : 		this->m_index=0;
; 19   : 		this->m_level=0;
; 20   : 		this->m_op1=0;
; 21   : 		this->m_op2=0;

  00008	66 c7 40 04 00
	00		 mov	 WORD PTR [eax+4], 0

; 22   : 		this->m_op3=0;
; 23   : 	}	// line : 36

  0000e	c3		 ret	 0
??0CItemBagAttr@@QAE@XZ ENDP				; CItemBagAttr::CItemBagAttr
_TEXT	ENDS
PUBLIC	??0CItemBag@@QAE@XZ				; CItemBag::CItemBag
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\itembag.cpp
;	COMDAT ??0CItemBag@@QAE@XZ
_TEXT	SEGMENT
??0CItemBag@@QAE@XZ PROC				; CItemBag::CItemBag, COMDAT
; _this$ = ecx

; 13   : {

  00000	53		 push	 ebx
  00001	8b c1		 mov	 eax, ecx
  00003	56		 push	 esi
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CItemBag@@6B@
  0000a	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  0000d	be 95 00 00 00	 mov	 esi, 149		; 00000095H
  00012	32 db		 xor	 bl, bl
$LL4@CItemBag:
  00014	88 1a		 mov	 BYTE PTR [edx], bl
  00016	88 5a 01	 mov	 BYTE PTR [edx+1], bl
  00019	88 5a 02	 mov	 BYTE PTR [edx+2], bl
  0001c	88 5a 03	 mov	 BYTE PTR [edx+3], bl
  0001f	88 5a 04	 mov	 BYTE PTR [edx+4], bl
  00022	88 5a 05	 mov	 BYTE PTR [edx+5], bl
  00025	83 c2 06	 add	 edx, 6
  00028	4e		 dec	 esi
  00029	79 e9		 jns	 SHORT $LL4@CItemBag

; 14   : 	return;
; 15   : }

  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	c3		 ret	 0
??0CItemBag@@QAE@XZ ENDP				; CItemBag::CItemBag
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCItemBag@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCItemBag@@UAEPAXI@Z PROC				; CItemBag::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CItemBag@@UAE@XZ	; CItemBag::~CItemBag
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCItemBag@@UAEPAXI@Z ENDP				; CItemBag::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Init@CItemBag@@QAEXPAD@Z			; CItemBag::Init
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
; Function compile flags: /Ogtp
;	COMDAT ?Init@CItemBag@@QAEXPAD@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
?Init@CItemBag@@QAEXPAD@Z PROC				; CItemBag::Init, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	this->BagObjectCount = 0;

  00003	33 c0		 xor	 eax, eax
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	89 86 88 03 00
	00		 mov	 DWORD PTR [esi+904], eax

; 25   : 	this->BagNormalItemCount = 0;

  0000e	89 86 8c 03 00
	00		 mov	 DWORD PTR [esi+908], eax

; 26   : 	this->BagExItemCount = 0;

  00014	89 86 90 03 00
	00		 mov	 DWORD PTR [esi+912], eax

; 27   : 
; 28   : 	this->LoadItem( gDirPath.GetNewPath(name));

  0001a	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0001d	50		 push	 eax
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00023	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00028	50		 push	 eax
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?LoadItem@CItemBag@@QAEXPAD@Z ; CItemBag::LoadItem
  00030	5e		 pop	 esi

; 29   : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?Init@CItemBag@@QAEXPAD@Z ENDP				; CItemBag::Init
_TEXT	ENDS
END
