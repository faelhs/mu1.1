; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\Gate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CGate@@6B@					; CGate::`vftable'
PUBLIC	??0CGate@@QAE@XZ				; CGate::CGate
PUBLIC	??_R4CGate@@6B@					; CGate::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGate@@@8				; CGate `RTTI Type Descriptor'
PUBLIC	??_R3CGate@@8					; CGate::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGate@@8					; CGate::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGate@@8				; CGate::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECGate@@UAEPAXI@Z:PROC			; CGate::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CGate@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\gate.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CGate@@8 DD FLAT:??_R0?AVCGate@@@8	; CGate::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGate@@8
rdata$r	ENDS
;	COMDAT ??_R2CGate@@8
rdata$r	SEGMENT
??_R2CGate@@8 DD FLAT:??_R1A@?0A@EA@CGate@@8		; CGate::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGate@@8
rdata$r	SEGMENT
??_R3CGate@@8 DD 00H					; CGate::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGate@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGate@@@8
_DATA	SEGMENT
??_R0?AVCGate@@@8 DD FLAT:??_7type_info@@6B@		; CGate `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGate@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CGate@@6B@
rdata$r	SEGMENT
??_R4CGate@@6B@ DD 00H					; CGate::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGate@@@8
	DD	FLAT:??_R3CGate@@8
rdata$r	ENDS
;	COMDAT ??_7CGate@@6B@
CONST	SEGMENT
??_7CGate@@6B@ DD FLAT:??_R4CGate@@6B@			; CGate::`vftable'
	DD	FLAT:??_ECGate@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CGate@@QAE@XZ
_TEXT	SEGMENT
??0CGate@@QAE@XZ PROC					; CGate::CGate, COMDAT
; _this$ = ecx

; 22   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGate@@6B@

; 23   : 	return;
; 24   : }

  00008	c3		 ret	 0
??0CGate@@QAE@XZ ENDP					; CGate::CGate
_TEXT	ENDS
PUBLIC	??1CGate@@UAE@XZ				; CGate::~CGate
; Function compile flags: /Ogtp
;	COMDAT ??1CGate@@UAE@XZ
_TEXT	SEGMENT
??1CGate@@UAE@XZ PROC					; CGate::~CGate, COMDAT
; _this$ = ecx

; 28   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGate@@6B@

; 29   : 	return;
; 30   : }

  00006	c3		 ret	 0
??1CGate@@UAE@XZ ENDP					; CGate::~CGate
_TEXT	ENDS
PUBLIC	?Init@CGate@@QAEXXZ				; CGate::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CGate@@QAEXXZ
_TEXT	SEGMENT
?Init@CGate@@QAEXXZ PROC				; CGate::Init, COMDAT
; _this$ = ecx

; 35   : 	int n;
; 36   : 
; 37   : 	for (n=0;n<MAX_GATES;n++)

  00000	8d 81 04 09 00
	00		 lea	 eax, DWORD PTR [ecx+2308]
  00006	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0000b	b2 ff		 mov	 dl, 255			; 000000ffH
  0000d	8d 49 00	 npad	 3
$LL3@Init:

; 38   : 	{
; 39   : 		this->m_This[n] = 0xFF;	// -1 NULL

  00010	88 90 00 f7 ff
	ff		 mov	 BYTE PTR [eax-2304], dl

; 40   : 		this->m_Level[n]=0;

  00016	c6 00 00	 mov	 BYTE PTR [eax], 0
  00019	40		 inc	 eax
  0001a	49		 dec	 ecx
  0001b	75 f3		 jne	 SHORT $LL3@Init

; 41   : 	}
; 42   : }

  0001d	c3		 ret	 0
?Init@CGate@@QAEXXZ ENDP				; CGate::Init
_TEXT	ENDS
PUBLIC	??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load?5@ ; `string'
PUBLIC	??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5error@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CGate@@QAEXPAD@Z				; CGate::Load
EXTRN	_fclose:PROC
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load?5@
CONST	SEGMENT
??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load?5@ DB '[%'
	DB	's] Gate information data load complete.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5error@
CONST	SEGMENT
??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5error@ DB '[%s'
	DB	'] gate information load error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CGate@@QAEXPAD@Z
_TEXT	SEGMENT
tv215 = -4						; size = 4
tv213 = -4						; size = 4
tv207 = -4						; size = 4
tv205 = -4						; size = 4
tv199 = -4						; size = 4
tv197 = -4						; size = 4
tv185 = -4						; size = 4
tv183 = -4						; size = 4
tv177 = -4						; size = 4
tv175 = -4						; size = 4
tv170 = -4						; size = 4
tv158 = -4						; size = 4
tv154 = -4						; size = 4
tv143 = -4						; size = 4
tv135 = -4						; size = 4
tv92 = -4						; size = 4
tv84 = -4						; size = 4
tv79 = -4						; size = 4
_filename$ = 8						; size = 4
tv218 = 10						; size = 2
tv210 = 10						; size = 2
tv202 = 10						; size = 2
tv194 = 10						; size = 2
tv180 = 10						; size = 2
tv164 = 10						; size = 2
tv136 = 10						; size = 2
tv91 = 10						; size = 2
tv72 = 10						; size = 2
?Load@CGate@@QAEXPAD@Z PROC				; CGate::Load, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 47   : 	int Token;
; 48   : 	int number;
; 49   : 	
; 50   : 	this->Init();

  00008	e8 00 00 00 00	 call	 ?Init@CGate@@QAEXXZ	; CGate::Init

; 51   : 
; 52   : 	SMDFile=fopen(filename, "r");

  0000d	8b 7d 08	 mov	 edi, DWORD PTR _filename$[ebp]
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 _fopen
  0001b	83 c4 08	 add	 esp, 8
  0001e	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 53   : 	
; 54   : 	if (SMDFile==0)

  00023	85 c0		 test	 eax, eax
  00025	75 17		 jne	 SHORT $LN10@Load

; 55   : 	{
; 56   : 		LogAdd(LOG_BLACK, "[%s] gate information load error", filename);

  00027	57		 push	 edi
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CJLGKLMJ@?$FL?$CFs?$FN?5gate?5information?5load?5error@
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 108  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
$LN10@Load:

; 57   : 		return;
; 58   : 	}
; 59   : 
; 60   : 	while ( true )
; 61   : 	{
; 62   : 		Token = GetToken();

  0003e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 63   : 
; 64   : 		if ( Token == 2 )

  00043	83 f8 02	 cmp	 eax, 2
  00046	0f 84 cb 01 00
	00		 je	 $LN11@Load
  0004c	53		 push	 ebx
  0004d	8d 49 00	 npad	 3
$LL5@Load:

; 65   : 		{
; 66   : 			break;
; 67   : 		}
; 68   : 		else
; 69   : 		{
; 70   : 			if ( Token == 1 )

  00050	83 f8 01	 cmp	 eax, 1
  00053	0f 85 af 01 00
	00		 jne	 $LN1@Load

; 71   : 			{
; 72   : 
; 73   : 				number=TokenNumber;

  00059	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0005f	e8 00 00 00 00	 call	 __ftol2_sse
  00064	8b d8		 mov	 ebx, eax

; 74   : 				this->m_This[number]=number;

  00066	88 5c 33 04	 mov	 BYTE PTR [ebx+esi+4], bl

; 75   : 
; 76   : 				Token=GetToken();

  0006a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 77   : 				this->m_Flag[number]=TokenNumber;

  0006f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00075	d9 7d 0a	 fnstcw	 WORD PTR tv218[ebp]
  00078	0f b7 45 0a	 movzx	 eax, WORD PTR tv218[ebp]
  0007c	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00081	89 45 fc	 mov	 DWORD PTR tv215[ebp], eax
  00084	d9 6d fc	 fldcw	 WORD PTR tv215[ebp]
  00087	db 5d fc	 fistp	 DWORD PTR tv213[ebp]
  0008a	0f b6 45 fc	 movzx	 eax, BYTE PTR tv213[ebp]
  0008e	88 84 33 04 01
	00 00		 mov	 BYTE PTR [ebx+esi+260], al
  00095	d9 6d 0a	 fldcw	 WORD PTR tv218[ebp]

; 78   : 
; 79   : 				Token=GetToken();

  00098	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 				this->m_MapNumber[number]=TokenNumber;

  0009d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a3	d9 7d 0a	 fnstcw	 WORD PTR tv210[ebp]
  000a6	0f b7 45 0a	 movzx	 eax, WORD PTR tv210[ebp]
  000aa	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000af	89 45 fc	 mov	 DWORD PTR tv207[ebp], eax
  000b2	d9 6d fc	 fldcw	 WORD PTR tv207[ebp]
  000b5	db 5d fc	 fistp	 DWORD PTR tv205[ebp]
  000b8	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv205[ebp]
  000bc	88 8c 33 04 02
	00 00		 mov	 BYTE PTR [ebx+esi+516], cl
  000c3	d9 6d 0a	 fldcw	 WORD PTR tv210[ebp]

; 81   : 
; 82   : 				Token=GetToken();

  000c6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 83   : 				this->m_Sx[number]=TokenNumber;

  000cb	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d1	d9 7d 0a	 fnstcw	 WORD PTR tv202[ebp]
  000d4	0f b7 45 0a	 movzx	 eax, WORD PTR tv202[ebp]
  000d8	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000dd	89 45 fc	 mov	 DWORD PTR tv199[ebp], eax
  000e0	d9 6d fc	 fldcw	 WORD PTR tv199[ebp]
  000e3	db 5d fc	 fistp	 DWORD PTR tv197[ebp]
  000e6	0f b6 55 fc	 movzx	 edx, BYTE PTR tv197[ebp]
  000ea	88 94 33 04 03
	00 00		 mov	 BYTE PTR [ebx+esi+772], dl
  000f1	d9 6d 0a	 fldcw	 WORD PTR tv202[ebp]

; 84   : 
; 85   : 				Token=GetToken();

  000f4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 86   : 				this->m_Sy[number]=TokenNumber;

  000f9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ff	d9 7d 0a	 fnstcw	 WORD PTR tv194[ebp]
  00102	0f b7 45 0a	 movzx	 eax, WORD PTR tv194[ebp]
  00106	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0010b	89 45 fc	 mov	 DWORD PTR tv143[ebp], eax
  0010e	d9 6d fc	 fldcw	 WORD PTR tv143[ebp]
  00111	db 5d fc	 fistp	 DWORD PTR tv135[ebp]
  00114	0f b6 45 fc	 movzx	 eax, BYTE PTR tv135[ebp]
  00118	88 84 33 04 04
	00 00		 mov	 BYTE PTR [ebx+esi+1028], al
  0011f	d9 6d 0a	 fldcw	 WORD PTR tv194[ebp]

; 87   : 
; 88   : 				Token=GetToken();

  00122	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 				this->m_Ex[number]=TokenNumber;

  00127	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012d	d9 7d 0a	 fnstcw	 WORD PTR tv91[ebp]
  00130	0f b7 45 0a	 movzx	 eax, WORD PTR tv91[ebp]
  00134	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00139	89 45 fc	 mov	 DWORD PTR tv79[ebp], eax
  0013c	d9 6d fc	 fldcw	 WORD PTR tv79[ebp]
  0013f	db 5d fc	 fistp	 DWORD PTR tv170[ebp]
  00142	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv170[ebp]
  00146	88 8c 33 04 05
	00 00		 mov	 BYTE PTR [ebx+esi+1284], cl
  0014d	d9 6d 0a	 fldcw	 WORD PTR tv91[ebp]

; 90   : 
; 91   : 				Token=GetToken();

  00150	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 92   : 				this->m_Ey[number]=TokenNumber;

  00155	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0015b	d9 7d 0a	 fnstcw	 WORD PTR tv164[ebp]
  0015e	0f b7 45 0a	 movzx	 eax, WORD PTR tv164[ebp]
  00162	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00167	89 45 fc	 mov	 DWORD PTR tv158[ebp], eax
  0016a	d9 6d fc	 fldcw	 WORD PTR tv158[ebp]
  0016d	db 5d fc	 fistp	 DWORD PTR tv154[ebp]
  00170	0f b6 55 fc	 movzx	 edx, BYTE PTR tv154[ebp]
  00174	88 94 33 04 06
	00 00		 mov	 BYTE PTR [ebx+esi+1540], dl
  0017b	d9 6d 0a	 fldcw	 WORD PTR tv164[ebp]

; 93   : 
; 94   : 				Token=GetToken();

  0017e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 95   : 				this->m_TargetGate[number]=TokenNumber;

  00183	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00189	d9 7d 0a	 fnstcw	 WORD PTR tv136[ebp]
  0018c	0f b7 45 0a	 movzx	 eax, WORD PTR tv136[ebp]
  00190	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00195	89 45 fc	 mov	 DWORD PTR tv92[ebp], eax
  00198	d9 6d fc	 fldcw	 WORD PTR tv92[ebp]
  0019b	db 5d fc	 fistp	 DWORD PTR tv84[ebp]
  0019e	0f b6 45 fc	 movzx	 eax, BYTE PTR tv84[ebp]
  001a2	88 84 33 04 07
	00 00		 mov	 BYTE PTR [ebx+esi+1796], al
  001a9	d9 6d 0a	 fldcw	 WORD PTR tv136[ebp]

; 96   : 
; 97   : 				Token=GetToken();

  001ac	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 98   : 				this->m_Dir[number]=TokenNumber;

  001b1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b7	d9 7d 0a	 fnstcw	 WORD PTR tv72[ebp]
  001ba	0f b7 45 0a	 movzx	 eax, WORD PTR tv72[ebp]
  001be	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001c3	89 45 fc	 mov	 DWORD PTR tv175[ebp], eax
  001c6	d9 6d fc	 fldcw	 WORD PTR tv175[ebp]
  001c9	db 5d fc	 fistp	 DWORD PTR tv177[ebp]
  001cc	0f b6 4d fc	 movzx	 ecx, BYTE PTR tv177[ebp]
  001d0	88 8c 33 04 08
	00 00		 mov	 BYTE PTR [ebx+esi+2052], cl
  001d7	d9 6d 0a	 fldcw	 WORD PTR tv72[ebp]

; 99   : 
; 100  : 				Token=GetToken();

  001da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 				this->m_Level[number]=TokenNumber;

  001df	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e5	d9 7d 0a	 fnstcw	 WORD PTR tv180[ebp]
  001e8	0f b7 45 0a	 movzx	 eax, WORD PTR tv180[ebp]
  001ec	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001f1	89 45 fc	 mov	 DWORD PTR tv183[ebp], eax
  001f4	d9 6d fc	 fldcw	 WORD PTR tv183[ebp]
  001f7	db 5d fc	 fistp	 DWORD PTR tv185[ebp]
  001fa	0f b6 55 fc	 movzx	 edx, BYTE PTR tv185[ebp]
  001fe	88 94 33 04 09
	00 00		 mov	 BYTE PTR [ebx+esi+2308], dl
  00205	d9 6d 0a	 fldcw	 WORD PTR tv180[ebp]
$LN1@Load:

; 63   : 
; 64   : 		if ( Token == 2 )

  00208	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0020d	83 f8 02	 cmp	 eax, 2
  00210	0f 85 3a fe ff
	ff		 jne	 $LL5@Load
  00216	5b		 pop	 ebx
$LN11@Load:

; 102  : 			}
; 103  : 		}
; 104  : 	}	// Iterator
; 105  : 
; 106  : 	fclose(SMDFile);

  00217	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 _fclose

; 107  : 	LogAdd(LOG_BLACK, "[%s] Gate information data load complete.", filename);

  00222	57		 push	 edi
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@BNPFANFA@?$FL?$CFs?$FN?5Gate?5information?5data?5load?5@
  00228	6a 00		 push	 0
  0022a	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0022f	83 c4 10	 add	 esp, 16			; 00000010H
  00232	5f		 pop	 edi
  00233	5e		 pop	 esi

; 108  : }

  00234	8b e5		 mov	 esp, ebp
  00236	5d		 pop	 ebp
  00237	c2 04 00	 ret	 4
?Load@CGate@@QAEXPAD@Z ENDP				; CGate::Load
_TEXT	ENDS
PUBLIC	??_C@_08NDPGJHEF@Gate?4cpp?$AA@			; `string'
PUBLIC	?IsGate@CGate@@QAEHH@Z				; CGate::IsGate
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_08NDPGJHEF@Gate?4cpp?$AA@
CONST	SEGMENT
??_C@_08NDPGJHEF@Gate?4cpp?$AA@ DB 'Gate.cpp', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?IsGate@CGate@@QAEHH@Z
_TEXT	SEGMENT
_GateNumber$ = 8					; size = 4
?IsGate@CGate@@QAEHH@Z PROC				; CGate::IsGate, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  : 	if ( (GateNumber < 0) || (GateNumber > MAX_GATES-1) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 37		 ja	 SHORT $LN2@IsGate

; 116  : 	}
; 117  : 
; 118  : 	if ( this->m_This[GateNumber] == (BYTE)-1 )

  0000d	80 7c 08 04 ff	 cmp	 BYTE PTR [eax+ecx+4], 255 ; 000000ffH
  00012	75 27		 jne	 SHORT $LN1@IsGate

; 119  : 	{
; 120  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 196)), __FILE__, __LINE__);

  00014	6a 78		 push	 120			; 00000078H
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_08NDPGJHEF@Gate?4cpp?$AA@
  0001b	68 c4 01 00 00	 push	 452			; 000001c4H
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00025	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0002a	50		 push	 eax
  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00032	83 c4 10	 add	 esp, 16			; 00000010H
  00035	33 c0		 xor	 eax, eax

; 125  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN1@IsGate:

; 121  : 		return 0;
; 122  : 	}
; 123  : 
; 124  : 	return 1;

  0003b	b8 01 00 00 00	 mov	 eax, 1

; 125  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN2@IsGate:

; 113  : 	{
; 114  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 195)), GateNumber, __FILE__, __LINE__);

  00044	6a 72		 push	 114			; 00000072H
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_08NDPGJHEF@Gate?4cpp?$AA@
  0004b	50		 push	 eax
  0004c	68 c3 01 00 00	 push	 451			; 000001c3H
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00056	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0005b	50		 push	 eax
  0005c	6a 00		 push	 0
  0005e	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00063	83 c4 14	 add	 esp, 20			; 00000014H

; 115  : 		return 0;

  00066	33 c0		 xor	 eax, eax

; 125  : }

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?IsGate@CGate@@QAEHH@Z ENDP				; CGate::IsGate
_TEXT	ENDS
PUBLIC	?GetGate@CGate@@QAEHHAAF0AAE10@Z		; CGate::GetGate
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetGate@CGate@@QAEHHAAF0AAE10@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv253 = -4						; size = 4
tv241 = -4						; size = 4
_loopcount$ = 8						; size = 4
_mgt$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_MapNumber$ = 20					; size = 4
_dir$ = 24						; size = 4
_Level$ = 28						; size = 4
?GetGate@CGate@@QAEHHAAF0AAE10@Z PROC			; CGate::GetGate, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi

; 131  : 	int gt;
; 132  : 	int tx;
; 133  : 	int ty;
; 134  : 	int loopcount;
; 135  : 	BYTE attr;
; 136  : 	
; 137  : 	if (this->IsGate(mgt) == 0)

  00008	8b 7d 08	 mov	 edi, DWORD PTR _mgt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	89 75 f8	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ?IsGate@CGate@@QAEHH@Z	; CGate::IsGate
  00016	85 c0		 test	 eax, eax
  00018	75 0b		 jne	 SHORT $LN9@GetGate

; 138  : 	{
; 139  : 		return -1;

  0001a	5f		 pop	 edi
  0001b	83 c8 ff	 or	 eax, -1
  0001e	5e		 pop	 esi

; 184  : 
; 185  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 18 00	 ret	 24			; 00000018H
$LN9@GetGate:
  00025	53		 push	 ebx

; 140  : 	}
; 141  : 
; 142  : 	gt=this->m_TargetGate[mgt];

  00026	0f b6 9c 37 04
	07 00 00	 movzx	 ebx, BYTE PTR [edi+esi+1796]

; 143  : 	if ( gt == 0 )

  0002e	85 db		 test	 ebx, ebx
  00030	75 02		 jne	 SHORT $LN8@GetGate

; 144  : 	{
; 145  : 		gt=mgt;	// This is for M Key

  00032	8b df		 mov	 ebx, edi
$LN8@GetGate:

; 146  : 	}
; 147  : 	
; 148  : 	loopcount=10;

  00034	c7 45 08 0a 00
	00 00		 mov	 DWORD PTR _loopcount$[ebp], 10 ; 0000000aH
  0003b	eb 06		 jmp	 SHORT $LN7@GetGate
  0003d	8d 49 00	 npad	 3
$LL15@GetGate:
  00040	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
$LN7@GetGate:

; 150  : 	{
; 151  : 		// For X coords
; 152  : 		if ( (this->m_Ex[gt] - this->m_Sx[gt]) > 0 )

  00043	0f b6 bc 33 04
	03 00 00	 movzx	 edi, BYTE PTR [ebx+esi+772]
  0004b	0f b6 84 33 04
	05 00 00	 movzx	 eax, BYTE PTR [ebx+esi+1284]
  00053	ff 4d 08	 dec	 DWORD PTR _loopcount$[ebp]
  00056	2b c7		 sub	 eax, edi
  00058	85 c0		 test	 eax, eax
  0005a	7e 22		 jle	 SHORT $LN5@GetGate

; 153  : 		{
; 154  : 			tx = this->m_Sx[gt] + ( rand() % ( this->m_Ex[gt] - this->m_Sx[gt] ) );	// Choose any X position between XBegin and XEnd

  0005c	0f b6 bc 33 04
	03 00 00	 movzx	 edi, BYTE PTR [ebx+esi+772]
  00064	89 7d fc	 mov	 DWORD PTR tv241[ebp], edi
  00067	e8 00 00 00 00	 call	 _rand
  0006c	0f b6 8c 33 04
	05 00 00	 movzx	 ecx, BYTE PTR [ebx+esi+1284]
  00074	2b cf		 sub	 ecx, edi
  00076	99		 cdq
  00077	f7 f9		 idiv	 ecx
  00079	8b fa		 mov	 edi, edx
  0007b	03 7d fc	 add	 edi, DWORD PTR tv241[ebp]
$LN5@GetGate:

; 155  : 		}
; 156  : 		else
; 157  : 		{
; 158  : 			tx = this->m_Sx[gt];	// If there is amistake while putting values in gate.txt
; 159  : 		}
; 160  : 		// For Y coords
; 161  : 		if ( (this->m_Ey[gt] - this->m_Sy[gt]) > 0 )

  0007e	0f b6 84 33 04
	04 00 00	 movzx	 eax, BYTE PTR [ebx+esi+1028]
  00086	0f b6 94 33 04
	06 00 00	 movzx	 edx, BYTE PTR [ebx+esi+1540]
  0008e	2b d0		 sub	 edx, eax
  00090	85 d2		 test	 edx, edx
  00092	7e 25		 jle	 SHORT $LN3@GetGate

; 162  : 		{
; 163  : 			ty = this->m_Sy[gt] + ( rand() % ( this->m_Ey[gt] - this->m_Sy[gt] ) );	// Choose any Y position between YBegin and YEnd

  00094	0f b6 84 33 04
	04 00 00	 movzx	 eax, BYTE PTR [ebx+esi+1028]
  0009c	89 45 fc	 mov	 DWORD PTR tv253[ebp], eax
  0009f	e8 00 00 00 00	 call	 _rand
  000a4	0f b6 8c 33 04
	06 00 00	 movzx	 ecx, BYTE PTR [ebx+esi+1540]
  000ac	2b 4d fc	 sub	 ecx, DWORD PTR tv253[ebp]
  000af	99		 cdq
  000b0	f7 f9		 idiv	 ecx
  000b2	8b f2		 mov	 esi, edx
  000b4	03 75 fc	 add	 esi, DWORD PTR tv253[ebp]

; 164  : 		}
; 165  : 		else

  000b7	eb 02		 jmp	 SHORT $LN2@GetGate
$LN3@GetGate:

; 166  : 		{
; 167  : 			ty = this->m_Sy[gt];	// If there is amistake while putting values in gate.txt

  000b9	8b f0		 mov	 esi, eax
$LN2@GetGate:

; 168  : 		}
; 169  : 
; 170  : 		attr = MapC[MapNumber].GetAttr( tx, ty);

  000bb	8b 55 14	 mov	 edx, DWORD PTR _MapNumber$[ebp]
  000be	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000c1	69 c9 08 07 05
	00		 imul	 ecx, 329480		; 00050708H
  000c7	56		 push	 esi
  000c8	57		 push	 edi
  000c9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  000cf	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 171  : 
; 172  : 		if ( (attr&4) != 4 && (attr&2) != 2 && (attr&8) != 8 )

  000d4	a8 0e		 test	 al, 14			; 0000000eH
  000d6	74 0a		 je	 SHORT $LN13@GetGate

; 149  : 	while ( loopcount-- != 0 )

  000d8	83 7d 08 00	 cmp	 DWORD PTR _loopcount$[ebp], 0
  000dc	0f 85 5e ff ff
	ff		 jne	 $LL15@GetGate
$LN13@GetGate:

; 173  : 		{
; 174  : 			break;
; 175  : 		}
; 176  : 	}
; 177  : 
; 178  : 	x = tx;

  000e2	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]

; 179  : 	y = ty;

  000e5	8b 4d 10	 mov	 ecx, DWORD PTR _y$[ebp]
  000e8	66 89 38	 mov	 WORD PTR [eax], di

; 180  : 	MapNumber = this->m_MapNumber[gt];

  000eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	66 89 31	 mov	 WORD PTR [ecx], si
  000f1	0f b6 94 03 04
	02 00 00	 movzx	 edx, BYTE PTR [ebx+eax+516]
  000f9	8b 4d 14	 mov	 ecx, DWORD PTR _MapNumber$[ebp]
  000fc	88 11		 mov	 BYTE PTR [ecx], dl

; 181  : 	dir = this->m_Dir[gt];

  000fe	0f b6 94 03 04
	08 00 00	 movzx	 edx, BYTE PTR [ebx+eax+2052]
  00106	8b 4d 18	 mov	 ecx, DWORD PTR _dir$[ebp]
  00109	88 11		 mov	 BYTE PTR [ecx], dl

; 182  : 	Level = this->m_Level[gt];

  0010b	0f b6 94 03 04
	09 00 00	 movzx	 edx, BYTE PTR [ebx+eax+2308]
  00113	8b 45 1c	 mov	 eax, DWORD PTR _Level$[ebp]
  00116	66 89 10	 mov	 WORD PTR [eax], dx

; 183  : 	return gt;

  00119	8b c3		 mov	 eax, ebx
  0011b	5b		 pop	 ebx
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi

; 184  : 
; 185  : }

  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 18 00	 ret	 24			; 00000018H
?GetGate@CGate@@QAEHHAAF0AAE10@Z ENDP			; CGate::GetGate
_TEXT	ENDS
PUBLIC	?GetLevel@CGate@@QAEHH@Z			; CGate::GetLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetLevel@CGate@@QAEHH@Z
_TEXT	SEGMENT
_GateNumber$ = 8					; size = 4
?GetLevel@CGate@@QAEHH@Z PROC				; CGate::GetLevel, COMDAT
; _this$ = ecx

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : 	if (GateNumber < 0 || GateNumber > MAX_GATES-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _GateNumber$[ebp]
  00006	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000b	77 0c		 ja	 SHORT $LN1@GetLevel

; 194  : 	}
; 195  : 
; 196  : 	return this->m_Level[GateNumber];

  0000d	0f b6 84 08 04
	09 00 00	 movzx	 eax, BYTE PTR [eax+ecx+2308]

; 197  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetLevel:

; 191  : 	{
; 192  : 		LogAdd(LOG_BLACK, lMsg.Get(MSGGET(1, 195)), GateNumber, __FILE__, __LINE__);

  00019	68 c0 00 00 00	 push	 192			; 000000c0H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_08NDPGJHEF@Gate?4cpp?$AA@
  00023	50		 push	 eax
  00024	68 c3 01 00 00	 push	 451			; 000001c3H
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00033	50		 push	 eax
  00034	6a 00		 push	 0
  00036	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0003b	83 c4 14	 add	 esp, 20			; 00000014H

; 193  : 		return -1;

  0003e	83 c8 ff	 or	 eax, -1

; 197  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?GetLevel@CGate@@QAEHH@Z ENDP				; CGate::GetLevel
_TEXT	ENDS
PUBLIC	?IsInGate@CGate@@QAEHHH@Z			; CGate::IsInGate
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
; Function compile flags: /Ogtp
;	COMDAT ?IsInGate@CGate@@QAEHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_GateNumber$ = 12					; size = 4
?IsInGate@CGate@@QAEHHH@Z PROC				; CGate::IsInGate, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 203  : 	LPOBJ lpObj = &gObj[aIndex];
; 204  : 
; 205  : 	if ( this->IsGate(GateNumber) == FALSE )

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _GateNumber$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0000b	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  00011	57		 push	 edi
  00012	53		 push	 ebx
  00013	8b f9		 mov	 edi, ecx
  00015	81 c6 00 00 00
	00		 add	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001b	e8 00 00 00 00	 call	 ?IsGate@CGate@@QAEHH@Z	; CGate::IsGate
  00020	85 c0		 test	 eax, eax

; 206  : 	{
; 207  : 		return false;

  00022	0f 84 9e 00 00
	00		 je	 $LN1@IsInGate

; 208  : 	}
; 209  : 
; 210  : 	int level = this->m_Level[GateNumber];
; 211  : 
; 212  : 	if ( lpObj->Class == 4 || lpObj->Class == 3 )

  00028	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  0002f	0f b6 8c 3b 04
	09 00 00	 movzx	 ecx, BYTE PTR [ebx+edi+2308]
  00037	83 f8 04	 cmp	 eax, 4
  0003a	74 05		 je	 SHORT $LN6@IsInGate
  0003c	83 f8 03	 cmp	 eax, 3
  0003f	75 15		 jne	 SHORT $LN5@IsInGate
$LN6@IsInGate:

; 213  : 	{
; 214  : 		if ( level > 0 )

  00041	85 c9		 test	 ecx, ecx
  00043	7e 11		 jle	 SHORT $LN5@IsInGate

; 215  : 		{
; 216  : 			level = level / 3 * 2;

  00045	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  0004a	f7 e9		 imul	 ecx
  0004c	8b c2		 mov	 eax, edx
  0004e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00051	03 c2		 add	 eax, edx
  00053	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
$LN5@IsInGate:

; 217  : 		}
; 218  : 	}
; 219  : 
; 220  : /*#if (FOREIGN_GAMESERVER==1)
; 221  : 
; 222  : 	if (szAuthKey[15] != AUTHKEY15 )
; 223  : 	{
; 224  : 		DestroyGIocp();
; 225  : 	}
; 226  : 
; 227  : #endif*/
; 228  : 
; 229  : 	if ( lpObj->Level < level )

  00056	0f bf 96 9c 00
	00 00		 movsx	 edx, WORD PTR [esi+156]
  0005d	3b d1		 cmp	 edx, ecx

; 230  : 	{
; 231  : 		return FALSE;

  0005f	7c 65		 jl	 SHORT $LN1@IsInGate

; 232  : 	}
; 233  : 
; 234  : 	if ( lpObj->MapNumber != this->m_MapNumber[GateNumber] )

  00061	8a 86 09 01 00
	00		 mov	 al, BYTE PTR [esi+265]
  00067	3a 84 3b 04 02
	00 00		 cmp	 al, BYTE PTR [ebx+edi+516]

; 235  : 	{
; 236  : 		return FALSE;

  0006e	75 56		 jne	 SHORT $LN1@IsInGate

; 237  : 	}
; 238  : 
; 239  : 	if ( lpObj->X < this->m_Sx[GateNumber]-5 || lpObj->X > this->m_Ex[GateNumber]+5 || lpObj->Y < this->m_Sy[GateNumber]-5 || lpObj->Y > this->m_Ey[GateNumber]+5 )

  00070	0f b6 8c 3b 04
	03 00 00	 movzx	 ecx, BYTE PTR [ebx+edi+772]
  00078	0f bf 86 04 01
	00 00		 movsx	 eax, WORD PTR [esi+260]
  0007f	83 e9 05	 sub	 ecx, 5
  00082	3b c1		 cmp	 eax, ecx
  00084	7c 40		 jl	 SHORT $LN1@IsInGate
  00086	0f b6 94 3b 04
	05 00 00	 movzx	 edx, BYTE PTR [ebx+edi+1284]
  0008e	83 c2 05	 add	 edx, 5
  00091	3b c2		 cmp	 eax, edx
  00093	7f 31		 jg	 SHORT $LN1@IsInGate
  00095	0f b6 8c 3b 04
	04 00 00	 movzx	 ecx, BYTE PTR [ebx+edi+1028]
  0009d	0f bf 86 06 01
	00 00		 movsx	 eax, WORD PTR [esi+262]
  000a4	83 e9 05	 sub	 ecx, 5
  000a7	3b c1		 cmp	 eax, ecx
  000a9	7c 1b		 jl	 SHORT $LN1@IsInGate
  000ab	0f b6 94 3b 04
	06 00 00	 movzx	 edx, BYTE PTR [ebx+edi+1540]
  000b3	83 c2 05	 add	 edx, 5
  000b6	3b c2		 cmp	 eax, edx
  000b8	7f 0c		 jg	 SHORT $LN1@IsInGate

; 242  : 	}
; 243  : 
; 244  : 	return true;

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	b8 01 00 00 00	 mov	 eax, 1
  000c1	5b		 pop	 ebx

; 245  : }

  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
$LN1@IsInGate:
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi

; 240  : 	{
; 241  : 		return FALSE;

  000c8	33 c0		 xor	 eax, eax
  000ca	5b		 pop	 ebx

; 245  : }

  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
?IsInGate@CGate@@QAEHHH@Z ENDP				; CGate::IsInGate
_TEXT	ENDS
PUBLIC	?CheckGateLevel@CGate@@QAEHHH@Z			; CGate::CheckGateLevel
; Function compile flags: /Ogtp
;	COMDAT ?CheckGateLevel@CGate@@QAEHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_GateNumber$ = 12					; size = 4
?CheckGateLevel@CGate@@QAEHHH@Z PROC			; CGate::CheckGateLevel, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 249  : 	LPOBJ lpObj = &gObj[aIndex];
; 250  : 
; 251  : 	if ( this->IsGate(GateNumber) == FALSE )

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _GateNumber$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0000b	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  00011	57		 push	 edi
  00012	53		 push	 ebx
  00013	8b f9		 mov	 edi, ecx
  00015	81 c6 00 00 00
	00		 add	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001b	e8 00 00 00 00	 call	 ?IsGate@CGate@@QAEHH@Z	; CGate::IsGate
  00020	85 c0		 test	 eax, eax
  00022	75 07		 jne	 SHORT $LN5@CheckGateL
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx

; 267  : 	{
; 268  : 		return false;
; 269  : 	}
; 270  : 
; 271  : 	return true;
; 272  : }

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
$LN5@CheckGateL:

; 252  : 	{
; 253  : 		return false;
; 254  : 	}
; 255  : 
; 256  : 	int level = this->m_Level[GateNumber];
; 257  : 
; 258  : 	if ( lpObj->Class == 4 || lpObj->Class == 3 )

  0002b	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  00032	0f b6 8c 3b 04
	09 00 00	 movzx	 ecx, BYTE PTR [ebx+edi+2308]
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	74 05		 je	 SHORT $LN3@CheckGateL
  0003f	83 f8 03	 cmp	 eax, 3
  00042	75 15		 jne	 SHORT $LN2@CheckGateL
$LN3@CheckGateL:

; 259  : 	{
; 260  : 		if ( level > 0 )

  00044	85 c9		 test	 ecx, ecx
  00046	7e 11		 jle	 SHORT $LN2@CheckGateL

; 261  : 		{
; 262  : 			level = (level/3)*2;

  00048	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  0004d	f7 e9		 imul	 ecx
  0004f	8b c2		 mov	 eax, edx
  00051	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00054	03 c2		 add	 eax, edx
  00056	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
$LN2@CheckGateL:

; 263  : 		}
; 264  : 	}
; 265  : 
; 266  : 	if ( lpObj->Level < level )

  00059	0f bf 96 9c 00
	00 00		 movsx	 edx, WORD PTR [esi+156]
  00060	5f		 pop	 edi
  00061	33 c0		 xor	 eax, eax
  00063	3b d1		 cmp	 edx, ecx
  00065	5e		 pop	 esi
  00066	0f 9d c0	 setge	 al
  00069	5b		 pop	 ebx

; 267  : 	{
; 268  : 		return false;
; 269  : 	}
; 270  : 
; 271  : 	return true;
; 272  : }

  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?CheckGateLevel@CGate@@QAEHHH@Z ENDP			; CGate::CheckGateLevel
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCGate@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGate@@UAEPAXI@Z PROC				; CGate::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGate@@UAE@XZ	; CGate::~CGate
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCGate@@UAEPAXI@Z ENDP				; CGate::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgGateC@@YAXXZ
text$yc	SEGMENT
??__EgGateC@@YAXXZ PROC					; `dynamic initializer for 'gGateC'', COMDAT

; 18   : CGate gGateC;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  00005	e8 00 00 00 00	 call	 ??0CGate@@QAE@XZ	; CGate::CGate
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgGateC@@YAXXZ ; `dynamic atexit destructor for 'gGateC''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgGateC@@YAXXZ ENDP					; `dynamic initializer for 'gGateC''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgGateC@@YAXXZ
text$yd	SEGMENT
??__FgGateC@@YAXXZ PROC					; `dynamic atexit destructor for 'gGateC'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  00005	e9 00 00 00 00	 jmp	 ??1CGate@@UAE@XZ	; CGate::~CGate
??__FgGateC@@YAXXZ ENDP					; `dynamic atexit destructor for 'gGateC''
text$yd	ENDS
PUBLIC	?gGateC@@3VCGate@@A				; gGateC
_BSS	SEGMENT
?gGateC@@3VCGate@@A DB 0a04H DUP (?)			; gGateC
_BSS	ENDS
CRT$XCU	SEGMENT
_gGateC$initializer$ DD FLAT:??__EgGateC@@YAXXZ
CRT$XCU	ENDS
END
