; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\QuestInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?QuestBitMask@@3PAEA				; QuestBitMask
PUBLIC	?sQuestString@@3PAY0DC@DA			; sQuestString
_BSS	SEGMENT
?QuestBitMask@@3PAEA DB 08H DUP (?)			; QuestBitMask
_BSS	ENDS
_DATA	SEGMENT
?sQuestString@@3PAY0DC@DA DB 'None', 00H		; sQuestString
	ORG $+45
	DB	'Accept', 00H
	ORG $+43
	DB	'Clear', 00H
	ORG $+44
	DB	'None', 00H
	ORG $+45
_DATA	ENDS
PUBLIC	?GetQeustCount@CQuestInfo@@QAEHXZ		; CQuestInfo::GetQeustCount
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\questinfo.h
;	COMDAT ?GetQeustCount@CQuestInfo@@QAEHXZ
_TEXT	SEGMENT
?GetQeustCount@CQuestInfo@@QAEHXZ PROC			; CQuestInfo::GetQeustCount, COMDAT
; _this$ = ecx

; 95   : 	int GetQeustCount(){return m_QuestCount;}

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetQeustCount@CQuestInfo@@QAEHXZ ENDP			; CQuestInfo::GetQeustCount
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CQuestInfo@@6B@				; CQuestInfo::`vftable'
PUBLIC	??1CQuestInfo@@UAE@XZ				; CQuestInfo::~CQuestInfo
PUBLIC	??_R4CQuestInfo@@6B@				; CQuestInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCQuestInfo@@@8				; CQuestInfo `RTTI Type Descriptor'
PUBLIC	??_R3CQuestInfo@@8				; CQuestInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CQuestInfo@@8				; CQuestInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CQuestInfo@@8			; CQuestInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECQuestInfo@@UAEPAXI@Z:PROC			; CQuestInfo::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CQuestInfo@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\questinfo.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CQuestInfo@@8 DD FLAT:??_R0?AVCQuestInfo@@@8 ; CQuestInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CQuestInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2CQuestInfo@@8
rdata$r	SEGMENT
??_R2CQuestInfo@@8 DD FLAT:??_R1A@?0A@EA@CQuestInfo@@8	; CQuestInfo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CQuestInfo@@8
rdata$r	SEGMENT
??_R3CQuestInfo@@8 DD 00H				; CQuestInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CQuestInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCQuestInfo@@@8
_DATA	SEGMENT
??_R0?AVCQuestInfo@@@8 DD FLAT:??_7type_info@@6B@	; CQuestInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCQuestInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CQuestInfo@@6B@
rdata$r	SEGMENT
??_R4CQuestInfo@@6B@ DD 00H				; CQuestInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCQuestInfo@@@8
	DD	FLAT:??_R3CQuestInfo@@8
rdata$r	ENDS
;	COMDAT ??_7CQuestInfo@@6B@
CONST	SEGMENT
??_7CQuestInfo@@6B@ DD FLAT:??_R4CQuestInfo@@6B@	; CQuestInfo::`vftable'
	DD	FLAT:??_ECQuestInfo@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CQuestInfo@@UAE@XZ
_TEXT	SEGMENT
??1CQuestInfo@@UAE@XZ PROC				; CQuestInfo::~CQuestInfo, COMDAT
; _this$ = ecx

; 48   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CQuestInfo@@6B@

; 49   : 	return;
; 50   : }

  00006	c3		 ret	 0
??1CQuestInfo@@UAE@XZ ENDP				; CQuestInfo::~CQuestInfo
_TEXT	ENDS
PUBLIC	?Init@CQuestInfo@@QAEXXZ			; CQuestInfo::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CQuestInfo@@QAEXXZ
_TEXT	SEGMENT
?Init@CQuestInfo@@QAEXXZ PROC				; CQuestInfo::Init, COMDAT
; _this$ = ecx

; 53   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 54   : 	this->m_QuestCount = 0;
; 55   : 	memset(this->QuestInfo, -1, sizeof(this->QuestInfo));

  00003	68 80 45 03 00	 push	 214400			; 00034580H
  00008	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000b	6a ff		 push	 -1
  0000d	50		 push	 eax
  0000e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	8d 46 48	 lea	 eax, DWORD PTR [esi+72]
  00020	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00025	5e		 pop	 esi
  00026	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL3@Init:

; 56   : 
; 57   : 	for ( int i=0;i<MAX_QUEST_INFO;i++)
; 58   : 	{
; 59   : 		this->QuestInfo[i].QuestConditionCount=0;

  00030	c7 80 d4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+724], 0

; 60   : 		this->QuestInfo[i].QuestSubInfoCount= 0;

  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00040	05 30 04 00 00	 add	 eax, 1072		; 00000430H
  00045	49		 dec	 ecx
  00046	75 e8		 jne	 SHORT $LL3@Init

; 61   : 	}
; 62   : }

  00048	c3		 ret	 0
?Init@CQuestInfo@@QAEXXZ ENDP				; CQuestInfo::Init
_TEXT	ENDS
PUBLIC	?IsQuest@CQuestInfo@@QAEHH@Z			; CQuestInfo::IsQuest
; Function compile flags: /Ogtp
;	COMDAT ?IsQuest@CQuestInfo@@QAEHH@Z
_TEXT	SEGMENT
_QuestIndex$ = 8					; size = 4
?IsQuest@CQuestInfo@@QAEHH@Z PROC			; CQuestInfo::IsQuest, COMDAT
; _this$ = ecx

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  : 	if ( QuestIndex < 0 || QuestIndex > MAX_QUEST_INFO )

  00003	8b 45 08	 mov	 eax, DWORD PTR _QuestIndex$[ebp]
  00006	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  0000b	77 16		 ja	 SHORT $LN2@IsQuest

; 297  : 	}
; 298  : 
; 299  : 	if ( this->QuestInfo[QuestIndex].QuestIndex == -1 )

  0000d	69 c0 30 04 00
	00		 imul	 eax, 1072		; 00000430H
  00013	33 d2		 xor	 edx, edx
  00015	83 7c 08 3c ff	 cmp	 DWORD PTR [eax+ecx+60], -1
  0001a	0f 95 c2	 setne	 dl
  0001d	8b c2		 mov	 eax, edx

; 300  : 	{
; 301  : 		return false;
; 302  : 	}
; 303  : 
; 304  : 	return true;
; 305  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN2@IsQuest:

; 295  : 	{
; 296  : 		return false;

  00023	33 c0		 xor	 eax, eax

; 300  : 	{
; 301  : 		return false;
; 302  : 	}
; 303  : 
; 304  : 	return true;
; 305  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?IsQuest@CQuestInfo@@QAEHH@Z ENDP			; CQuestInfo::IsQuest
_TEXT	ENDS
PUBLIC	?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::GetQuestState
; Function compile flags: /Ogtp
;	COMDAT ?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_QuestIndex$ = 12					; size = 4
?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CQuestInfo::GetQuestState, COMDAT
; _this$ = ecx

; 310  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 311  : 	if ( QuestIndex < 0 || QuestIndex > MAX_QUEST_INFO )

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _QuestIndex$[ebp]
  00006	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  0000c	77 2e		 ja	 SHORT $LN1@GetQuestSt

; 314  : 	}
; 315  : 
; 316  : 	int index = (QuestIndex) /4;

  0000e	8b c1		 mov	 eax, ecx
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx

; 318  : 	return (lpObj->m_Quest[index] >> shift) &3;

  00016	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00019	c1 f8 02	 sar	 eax, 2
  0001c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00022	0f b6 84 10 c0
	0e 00 00	 movzx	 eax, BYTE PTR [eax+edx+3776]
  0002a	79 05		 jns	 SHORT $LN5@GetQuestSt

; 317  : 	int shift = (QuestIndex % 4) *2;

  0002c	49		 dec	 ecx
  0002d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00030	41		 inc	 ecx
$LN5@GetQuestSt:
  00031	02 c9		 add	 cl, cl

; 318  : 	return (lpObj->m_Quest[index] >> shift) &3;

  00033	d3 e8		 shr	 eax, cl
  00035	83 e0 03	 and	 eax, 3

; 319  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN1@GetQuestSt:

; 312  : 	{
; 313  : 		return false;

  0003c	33 c0		 xor	 eax, eax

; 319  : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CQuestInfo::GetQuestState
_TEXT	ENDS
PUBLIC	?GetQuestStateBYTE@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::GetQuestStateBYTE
; Function compile flags: /Ogtp
;	COMDAT ?GetQuestStateBYTE@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_QuestIndex$ = 12					; size = 4
?GetQuestStateBYTE@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z PROC ; CQuestInfo::GetQuestStateBYTE, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 324  : 	if ( QuestIndex < 0 || QuestIndex > MAX_QUEST_INFO )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _QuestIndex$[ebp]
  00006	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  0000b	77 17		 ja	 SHORT $LN1@GetQuestSt@2

; 327  : 	}
; 328  : 	
; 329  : 	int index = (QuestIndex / 4);
; 330  : 	return lpObj->m_Quest[index];

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8a 84 08 c0 0e
	00 00		 mov	 al, BYTE PTR [eax+ecx+3776]

; 331  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN1@GetQuestSt@2:

; 325  : 	{
; 326  : 		return false;

  00024	32 c0		 xor	 al, al

; 331  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?GetQuestStateBYTE@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ENDP ; CQuestInfo::GetQuestStateBYTE
_TEXT	ENDS
PUBLIC	?ReSetQuestState@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::ReSetQuestState
; Function compile flags: /Ogtp
;	COMDAT ?ReSetQuestState@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_QuestIndex$ = 12					; size = 4
?ReSetQuestState@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z PROC ; CQuestInfo::ReSetQuestState, COMDAT
; _this$ = ecx

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 385  : 	int State = 3;
; 386  : 	int index = (QuestIndex/4);

  00005	8b 75 0c	 mov	 esi, DWORD PTR _QuestIndex$[ebp]
  00008	8b c6		 mov	 eax, esi
  0000a	99		 cdq
  0000b	83 e2 03	 and	 edx, 3
  0000e	57		 push	 edi
  0000f	8d 3c 02	 lea	 edi, DWORD PTR [edx+eax]
  00012	c1 ff 02	 sar	 edi, 2

; 387  : 	int shift = (QuestIndex % 4)*2;

  00015	81 e6 03 00 00
	80		 and	 esi, -2147483645	; 80000003H
  0001b	79 05		 jns	 SHORT $LN3@ReSetQuest
  0001d	4e		 dec	 esi
  0001e	83 ce fc	 or	 esi, -4			; fffffffcH
  00021	46		 inc	 esi
$LN3@ReSetQuest:

; 388  : 	lpObj->m_Quest[index] &= QuestBitMask[shift];

  00022	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00025	8a 94 36 00 00
	00 00		 mov	 dl, BYTE PTR ?QuestBitMask@@3PAEA[esi+esi]
  0002c	22 94 07 c0 0e
	00 00		 and	 dl, BYTE PTR [edi+eax+3776]
  00033	03 f6		 add	 esi, esi

; 389  : 	lpObj->m_Quest[index] |= (State&3) << shift;

  00035	b3 03		 mov	 bl, 3
  00037	8b ce		 mov	 ecx, esi
  00039	d2 e3		 shl	 bl, cl
  0003b	0a d3		 or	 dl, bl
  0003d	88 94 07 c0 0e
	00 00		 mov	 BYTE PTR [edi+eax+3776], dl
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 390  : 
; 391  : 	return 0;

  00046	32 c0		 xor	 al, al
  00048	5b		 pop	 ebx

; 392  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?ReSetQuestState@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ENDP ; CQuestInfo::ReSetQuestState
_TEXT	ENDS
PUBLIC	?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z	; CQuestInfo::GetQuestInfo
; Function compile flags: /Ogtp
;	COMDAT ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z
_TEXT	SEGMENT
_QuestIndex$ = 8					; size = 4
?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z PROC	; CQuestInfo::GetQuestInfo, COMDAT
; _this$ = ecx

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 397  : 	if ( QuestIndex < 0 || QuestIndex > MAX_QUEST_INFO )

  00003	8b 45 08	 mov	 eax, DWORD PTR _QuestIndex$[ebp]
  00006	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  0000b	77 15		 ja	 SHORT $LN2@GetQuestIn

; 400  : 	}
; 401  : 	
; 402  : 	if ( this->QuestInfo[QuestIndex].QuestIndex == -1 )

  0000d	69 c0 30 04 00
	00		 imul	 eax, 1072		; 00000430H
  00013	03 c1		 add	 eax, ecx
  00015	83 78 3c ff	 cmp	 DWORD PTR [eax+60], -1

; 403  : 	{
; 404  : 		return NULL;

  00019	74 07		 je	 SHORT $LN2@GetQuestIn

; 405  : 	}
; 406  : 
; 407  : 	return &this->QuestInfo[QuestIndex];

  0001b	83 c0 08	 add	 eax, 8

; 408  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN2@GetQuestIn:

; 398  : 	{
; 399  : 		return false;

  00022	33 c0		 xor	 eax, eax

; 408  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ENDP	; CQuestInfo::GetQuestInfo
_TEXT	ENDS
PUBLIC	?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetSubquestInfo
; Function compile flags: /Ogtp
;	COMDAT ?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpQuestInfo$ = 12					; size = 4
_subquestindex$ = 16					; size = 4
?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z PROC ; CQuestInfo::GetSubquestInfo, COMDAT
; _this$ = ecx

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 	if ( lpQuestInfo == NULL )

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _lpQuestInfo$[ebp]
  00006	85 c9		 test	 ecx, ecx

; 413  : 	{
; 414  : 		return NULL;

  00008	74 33		 je	 SHORT $LN4@GetSubques

; 415  : 	}
; 416  : 
; 417  : 	if ( subquestindex < 0 || subquestindex > MAX_SUBINFO_QUEST )

  0000a	8b 45 10	 mov	 eax, DWORD PTR _subquestindex$[ebp]
  0000d	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00010	77 2b		 ja	 SHORT $LN4@GetSubques

; 420  : 	}
; 421  : 
; 422  : 	LPQUEST_SUB_INFO lpSubInfo = &lpQuestInfo->QuestSubInfo[subquestindex];
; 423  : 	int Class = lpObj->Class;
; 424  : 	int ChangeUP = lpObj->ChangeUP;
; 425  : 	int requireclass = lpSubInfo->RequireClass[Class];

  00012	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00015	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00018	8d 44 c1 44	 lea	 eax, DWORD PTR [ecx+eax*8+68]
  0001c	0f b7 8a 98 00
	00 00		 movzx	 ecx, WORD PTR [edx+152]
  00023	0f b6 4c 01 40	 movzx	 ecx, BYTE PTR [ecx+eax+64]

; 426  : 
; 427  : 	if ( requireclass == 0 )

  00028	85 c9		 test	 ecx, ecx

; 428  : 	{
; 429  : 		return NULL;

  0002a	74 11		 je	 SHORT $LN4@GetSubques

; 430  : 	}
; 431  : 
; 432  : 	if ( requireclass > 1 )

  0002c	83 f9 01	 cmp	 ecx, 1
  0002f	7e 0e		 jle	 SHORT $LN7@GetSubques

; 433  : 	{
; 434  : 		if ( requireclass != (ChangeUP + 1) )

  00031	0f b6 92 9b 00
	00 00		 movzx	 edx, BYTE PTR [edx+155]
  00038	42		 inc	 edx
  00039	3b ca		 cmp	 ecx, edx

; 435  : 		{
; 436  : 			return NULL;
; 437  : 		}
; 438  : 	}
; 439  : 
; 440  : 	return lpSubInfo;

  0003b	74 02		 je	 SHORT $LN7@GetSubques
$LN4@GetSubques:

; 418  : 	{
; 419  : 		return NULL;

  0003d	33 c0		 xor	 eax, eax
$LN7@GetSubques:

; 441  : }

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z ENDP ; CQuestInfo::GetSubquestInfo
_TEXT	ENDS
PUBLIC	?GetQuestCondition@CQuestInfo@@QAEPAUQUEST_CONDITION@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestCondition
; Function compile flags: /Ogtp
;	COMDAT ?GetQuestCondition@CQuestInfo@@QAEPAUQUEST_CONDITION@@PAUQUEST_INFO@@H@Z
_TEXT	SEGMENT
_lpQuestInfo$ = 8					; size = 4
_conditionindex$ = 12					; size = 4
?GetQuestCondition@CQuestInfo@@QAEPAUQUEST_CONDITION@@PAUQUEST_INFO@@H@Z PROC ; CQuestInfo::GetQuestCondition, COMDAT
; _this$ = ecx

; 444  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 445  : 	if ( lpQuestInfo == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpQuestInfo$[ebp]
  00006	85 c9		 test	 ecx, ecx

; 446  : 	{
; 447  : 		return NULL;

  00008	74 1c		 je	 SHORT $LN1@GetQuestCo

; 448  : 	}
; 449  : 
; 450  : 	if ( conditionindex < 0 || conditionindex > MAX_CONDITION_QUEST )

  0000a	8b 45 0c	 mov	 eax, DWORD PTR _conditionindex$[ebp]
  0000d	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00010	77 14		 ja	 SHORT $LN1@GetQuestCo

; 453  : 	}
; 454  : 
; 455  : 	return &lpQuestInfo->QuestCondition[conditionindex];

  00012	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  00019	2b d0		 sub	 edx, eax
  0001b	8d 84 91 18 03
	00 00		 lea	 eax, DWORD PTR [ecx+edx*4+792]

; 456  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN1@GetQuestCo:

; 451  : 	{
; 452  : 		return NULL;

  00026	33 c0		 xor	 eax, eax

; 456  : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?GetQuestCondition@CQuestInfo@@QAEPAUQUEST_CONDITION@@PAUQUEST_INFO@@H@Z ENDP ; CQuestInfo::GetQuestCondition
_TEXT	ENDS
PUBLIC	?QuestClearConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::QuestClearConditionCheck
EXTRN	?gObjGetItemCountInIventory@@YAHHHHH@Z:PROC	; gObjGetItemCountInIventory
; Function compile flags: /Ogtp
;	COMDAT ?QuestClearConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_subquestcount$ = -8					; size = 4
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_bFoundSubQuest$ = 12					; size = 4
_QuestIndex$ = 12					; size = 4
?QuestClearConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z PROC ; CQuestInfo::QuestClearConditionCheck, COMDAT
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 460  : 	LPQUEST_INFO lpQuestInfo = this->GetQuestInfo(QuestIndex);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _QuestIndex$[ebp]
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	50		 push	 eax
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00014	8b d8		 mov	 ebx, eax

; 461  : 
; 462  : 	if ( lpQuestInfo == NULL )

  00016	33 ff		 xor	 edi, edi
  00018	3b df		 cmp	 ebx, edi
  0001a	75 0a		 jne	 SHORT $LN8@QuestClear

; 463  : 	{
; 464  : 		return -1;

  0001c	5f		 pop	 edi
  0001d	0c ff		 or	 al, 255			; 000000ffH
  0001f	5b		 pop	 ebx

; 499  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN8@QuestClear:

; 465  : 	}
; 466  : 
; 467  : 	int subquestcount = lpQuestInfo->QuestSubInfoCount;

  00026	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  00029	56		 push	 esi
  0002a	89 45 f8	 mov	 DWORD PTR _subquestcount$[ebp], eax

; 468  : 	int concount = lpQuestInfo->QuestConditionCount;
; 469  : 	LPQUEST_SUB_INFO lpSubInfo;
; 470  : 	BOOL bFoundSubQuest = FALSE;

  0002d	89 7d 0c	 mov	 DWORD PTR _bFoundSubQuest$[ebp], edi

; 471  : 	
; 472  : 
; 473  : 	for ( int subquest=0;subquest<subquestcount;subquest++)

  00030	3b c7		 cmp	 eax, edi
  00032	7e 4d		 jle	 SHORT $LN14@QuestClear
  00034	eb 03		 jmp	 SHORT $LN7@QuestClear
$LL15@QuestClear:
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@QuestClear:

; 474  : 	{
; 475  : 		lpSubInfo = this->GetSubquestInfo(lpObj, lpQuestInfo, subquest);

  00039	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0003c	57		 push	 edi
  0003d	53		 push	 ebx
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetSubquestInfo
  00044	8b f0		 mov	 esi, eax

; 476  : 
; 477  : 		if ( lpSubInfo != NULL )

  00046	85 f6		 test	 esi, esi
  00048	74 2b		 je	 SHORT $LN6@QuestClear

; 478  : 		{
; 479  : 			bFoundSubQuest = TRUE;
; 480  : 
; 481  : 			if ( lpSubInfo->QuestType == 1 )

  0004a	83 3e 01	 cmp	 DWORD PTR [esi], 1
  0004d	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR _bFoundSubQuest$[ebp], 1
  00054	75 1f		 jne	 SHORT $LN6@QuestClear

; 482  : 			{
; 483  : 				int NumberItemQuestFound = gObjGetItemCountInIventory(lpObj->m_Index, lpSubInfo->NeedType, lpSubInfo->NeedSubType, lpSubInfo->ItemLevel);

  00056	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00059	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0005f	50		 push	 eax
  00060	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00063	51		 push	 ecx
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	52		 push	 edx
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?gObjGetItemCountInIventory@@YAHHHHH@Z ; gObjGetItemCountInIventory
  0006d	83 c4 10	 add	 esp, 16			; 00000010H

; 484  : 
; 485  : 				if ( NumberItemQuestFound < lpSubInfo->NeedNumber)

  00070	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00073	7c 17		 jl	 SHORT $LN12@QuestClear
$LN6@QuestClear:

; 471  : 	
; 472  : 
; 473  : 	for ( int subquest=0;subquest<subquestcount;subquest++)

  00075	47		 inc	 edi
  00076	3b 7d f8	 cmp	 edi, DWORD PTR _subquestcount$[ebp]
  00079	7c bb		 jl	 SHORT $LL15@QuestClear

; 488  : 				}
; 489  : 			}
; 490  : 		}
; 491  : 	}
; 492  : 
; 493  : 	if ( bFoundSubQuest == FALSE )

  0007b	83 7d 0c 00	 cmp	 DWORD PTR _bFoundSubQuest$[ebp], 0
  0007f	75 16		 jne	 SHORT $LN1@QuestClear
$LN14@QuestClear:
  00081	5e		 pop	 esi
  00082	5f		 pop	 edi

; 494  : 	{
; 495  : 		return -1;

  00083	0c ff		 or	 al, 255			; 000000ffH
  00085	5b		 pop	 ebx

; 499  : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
$LN12@QuestClear:
  0008c	5e		 pop	 esi
  0008d	5f		 pop	 edi

; 486  : 				{
; 487  : 					return 1;

  0008e	b0 01		 mov	 al, 1
  00090	5b		 pop	 ebx

; 499  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
$LN1@QuestClear:
  00097	5e		 pop	 esi
  00098	5f		 pop	 edi

; 496  : 	}
; 497  : 
; 498  : 	return 0;

  00099	32 c0		 xor	 al, al
  0009b	5b		 pop	 ebx

; 499  : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
?QuestClearConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ENDP ; CQuestInfo::QuestClearConditionCheck
_TEXT	ENDS
PUBLIC	?CompareCondition@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@PAUQUEST_CONDITION@@@Z ; CQuestInfo::CompareCondition
; Function compile flags: /Ogtp
;	COMDAT ?CompareCondition@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@PAUQUEST_CONDITION@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpCondition$ = 12					; size = 4
?CompareCondition@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@PAUQUEST_CONDITION@@@Z PROC ; CQuestInfo::CompareCondition, COMDAT
; _this$ = ecx

; 562  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 563  : 	if ( lpCondition->NeedQuestIndex != -1 )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _lpCondition$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000e	83 f8 ff	 cmp	 eax, -1
  00011	74 14		 je	 SHORT $LN7@CompareCon

; 564  : 	{
; 565  : 		if ( this->GetQuestState(lpObj, lpCondition->NeedQuestIndex) != 2 )

  00013	50		 push	 eax
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::GetQuestState
  0001a	83 f8 02	 cmp	 eax, 2
  0001d	74 08		 je	 SHORT $LN7@CompareCon
$LN11@CompareCon:
  0001f	5f		 pop	 edi

; 566  : 		{
; 567  : 			return FALSE;

  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 593  : 	{
; 594  : 		return FALSE;
; 595  : 	}
; 596  : 
; 597  : 	return TRUE;
; 598  : 
; 599  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN7@CompareCon:

; 568  : 		}
; 569  : 	}
; 570  : 
; 571  : 	if ( lpCondition->MinLevel != 0 )

  00027	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002a	85 c0		 test	 eax, eax
  0002c	74 0b		 je	 SHORT $LN5@CompareCon

; 572  : 	{
; 573  : 		if ( lpCondition->MinLevel > lpObj->Level )

  0002e	0f bf 8f 9c 00
	00 00		 movsx	 ecx, WORD PTR [edi+156]
  00035	3b c1		 cmp	 eax, ecx

; 574  : 		{
; 575  : 			return FALSE;

  00037	7f e6		 jg	 SHORT $LN11@CompareCon
$LN5@CompareCon:

; 576  : 		}
; 577  : 	}
; 578  : 
; 579  : 	if ( lpCondition->MaxLevel != 0 )

  00039	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003c	85 c0		 test	 eax, eax
  0003e	74 0b		 je	 SHORT $LN3@CompareCon

; 580  : 	{
; 581  : 		if ( lpCondition->MaxLevel < lpObj->Level )

  00040	0f bf 97 9c 00
	00 00		 movsx	 edx, WORD PTR [edi+156]
  00047	3b c2		 cmp	 eax, edx

; 582  : 		{
; 583  : 			return FALSE;

  00049	7c d4		 jl	 SHORT $LN11@CompareCon
$LN3@CompareCon:

; 584  : 		}
; 585  : 	}
; 586  : 
; 587  : 	if ( lpCondition->NeedZen > lpObj->Money )

  0004b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004e	3b 87 b0 00 00
	00		 cmp	 eax, DWORD PTR [edi+176]

; 588  : 	{
; 589  : 		return FALSE;

  00054	7f c9		 jg	 SHORT $LN11@CompareCon

; 590  : 	}
; 591  : 
; 592  : 	if ( lpCondition->ReqStr > lpObj->Strength + lpObj->AddStrength)

  00056	0f bf 8f e0 00
	00 00		 movsx	 ecx, WORD PTR [edi+224]
  0005d	0f b7 97 b4 00
	00 00		 movzx	 edx, WORD PTR [edi+180]
  00064	03 ca		 add	 ecx, edx
  00066	33 c0		 xor	 eax, eax
  00068	39 4e 10	 cmp	 DWORD PTR [esi+16], ecx
  0006b	5f		 pop	 edi
  0006c	0f 9e c0	 setle	 al
  0006f	5e		 pop	 esi

; 593  : 	{
; 594  : 		return FALSE;
; 595  : 	}
; 596  : 
; 597  : 	return TRUE;
; 598  : 
; 599  : }

  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
?CompareCondition@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@PAUQUEST_CONDITION@@@Z ENDP ; CQuestInfo::CompareCondition
_TEXT	ENDS
PUBLIC	?NpcTalk@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@0@Z	; CQuestInfo::NpcTalk
EXTRN	?GCSendQuestInfo@@YAXHH@Z:PROC			; GCSendQuestInfo
; Function compile flags: /Ogtp
;	COMDAT ?NpcTalk@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_i$155435 = -16						; size = 4
_foundquest$ = -12					; size = 4
_questindex$ = -8					; size = 4
_queststate$ = -4					; size = 4
_lpNpc$ = 8						; size = 4
_lpObj$ = 12						; size = 4
?NpcTalk@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@0@Z PROC	; CQuestInfo::NpcTalk, COMDAT
; _this$ = ecx

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 606  : 	int questcount = this->GetQeustCount();
; 607  : 	int foundquest = 0;

  00007	33 db		 xor	 ebx, ebx
  00009	56		 push	 esi

; 608  : 	LPQUEST_INFO lpQuestInfo;
; 609  : 	int queststate = -1;

  0000a	83 ca ff	 or	 edx, -1
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
  00010	89 5d f4	 mov	 DWORD PTR _foundquest$[ebp], ebx
  00013	89 55 fc	 mov	 DWORD PTR _queststate$[ebp], edx

; 610  : 	int questindex = -1;

  00016	89 55 f8	 mov	 DWORD PTR _questindex$[ebp], edx

; 611  : 
; 612  : 	for ( int i = 0; i<MAX_QUEST_INFO;i++)

  00019	89 5d f0	 mov	 DWORD PTR _i$155435[ebp], ebx
  0001c	8d 64 24 00	 npad	 4
$LL15@NpcTalk:

; 613  : 	{
; 614  : 		lpQuestInfo = this->GetQuestInfo(i);

  00020	53		 push	 ebx
  00021	8b cf		 mov	 ecx, edi
  00023	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00028	8b f0		 mov	 esi, eax

; 615  : 
; 616  : 		if ( lpQuestInfo == NULL )

  0002a	85 f6		 test	 esi, esi
  0002c	0f 84 7c 00 00
	00		 je	 $LN14@NpcTalk

; 617  : 		{
; 618  : 			continue;
; 619  : 		}
; 620  : 
; 621  : 		if ( lpQuestInfo->QuestStartType == 2 ) // NPC Click

  00032	83 7e 38 02	 cmp	 DWORD PTR [esi+56], 2
  00036	75 67		 jne	 SHORT $LN25@NpcTalk

; 622  : 		{
; 623  : 			if ( lpNpc->Class == lpQuestInfo->QuestStartSubType)

  00038	8b 45 08	 mov	 eax, DWORD PTR _lpNpc$[ebp]
  0003b	0f b7 88 98 00
	00 00		 movzx	 ecx, WORD PTR [eax+152]
  00042	3b 4e 3c	 cmp	 ecx, DWORD PTR [esi+60]
  00045	75 58		 jne	 SHORT $LN25@NpcTalk

; 624  : 			{
; 625  : 				if ( queststate == -1 )

  00047	83 fa ff	 cmp	 edx, -1
  0004a	75 17		 jne	 SHORT $LN9@NpcTalk

; 626  : 				{
; 627  : 					questindex = lpQuestInfo->QuestIndex;

  0004c	8b 76 34	 mov	 esi, DWORD PTR [esi+52]

; 628  : 					queststate = this->GetQuestState(lpObj, lpQuestInfo->QuestIndex);

  0004f	8b 55 0c	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00052	56		 push	 esi
  00053	52		 push	 edx
  00054	8b cf		 mov	 ecx, edi
  00056	89 75 f8	 mov	 DWORD PTR _questindex$[ebp], esi
  00059	e8 00 00 00 00	 call	 ?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::GetQuestState
  0005e	89 45 fc	 mov	 DWORD PTR _queststate$[ebp], eax
  00061	eb 39		 jmp	 SHORT $LN31@NpcTalk
$LN9@NpcTalk:

; 629  : 				}
; 630  : 				else if ( queststate == 2 )

  00063	83 fa 02	 cmp	 edx, 2
  00066	75 37		 jne	 SHORT $LN25@NpcTalk

; 631  : 				{
; 632  : 					for ( int n=0;n<lpQuestInfo->QuestSubInfoCount ;n++)

  00068	33 db		 xor	 ebx, ebx
  0006a	39 5e 40	 cmp	 DWORD PTR [esi+64], ebx
  0006d	7e 30		 jle	 SHORT $LN25@NpcTalk
  0006f	90		 npad	 1
$LL6@NpcTalk:

; 633  : 					{
; 634  : 						LPQUEST_SUB_INFO lpSubInfo = this->GetSubquestInfo(lpObj, lpQuestInfo, n);

  00070	8b 45 0c	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00073	53		 push	 ebx
  00074	56		 push	 esi
  00075	50		 push	 eax
  00076	8b cf		 mov	 ecx, edi
  00078	e8 00 00 00 00	 call	 ?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetSubquestInfo

; 635  : 
; 636  : 						if ( lpSubInfo != NULL )

  0007d	85 c0		 test	 eax, eax
  0007f	74 15		 je	 SHORT $LN5@NpcTalk

; 637  : 						{
; 638  : 							questindex = lpQuestInfo->QuestIndex;

  00081	8b 46 34	 mov	 eax, DWORD PTR [esi+52]

; 639  : 							queststate = this->GetQuestState(lpObj, lpQuestInfo->QuestIndex);

  00084	8b 4d 0c	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00087	50		 push	 eax
  00088	51		 push	 ecx
  00089	8b cf		 mov	 ecx, edi
  0008b	89 45 f8	 mov	 DWORD PTR _questindex$[ebp], eax
  0008e	e8 00 00 00 00	 call	 ?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::GetQuestState
  00093	89 45 fc	 mov	 DWORD PTR _queststate$[ebp], eax
$LN5@NpcTalk:

; 631  : 				{
; 632  : 					for ( int n=0;n<lpQuestInfo->QuestSubInfoCount ;n++)

  00096	43		 inc	 ebx
  00097	3b 5e 40	 cmp	 ebx, DWORD PTR [esi+64]
  0009a	7c d4		 jl	 SHORT $LL6@NpcTalk
$LN31@NpcTalk:
  0009c	8b 55 fc	 mov	 edx, DWORD PTR _queststate$[ebp]
$LN25@NpcTalk:

; 640  : 						}
; 641  : 					}
; 642  : 				}
; 643  : 			}
; 644  : 		}
; 645  : 
; 646  : 		foundquest++;

  0009f	8b 45 f4	 mov	 eax, DWORD PTR _foundquest$[ebp]
  000a2	40		 inc	 eax
  000a3	89 45 f4	 mov	 DWORD PTR _foundquest$[ebp], eax

; 647  : 
; 648  : 		if ( foundquest == questcount )

  000a6	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  000a9	74 13		 je	 SHORT $LN29@NpcTalk
  000ab	8b 5d f0	 mov	 ebx, DWORD PTR _i$155435[ebp]
$LN14@NpcTalk:

; 611  : 
; 612  : 	for ( int i = 0; i<MAX_QUEST_INFO;i++)

  000ae	43		 inc	 ebx
  000af	89 5d f0	 mov	 DWORD PTR _i$155435[ebp], ebx
  000b2	81 fb c8 00 00
	00		 cmp	 ebx, 200		; 000000c8H
  000b8	0f 8c 62 ff ff
	ff		 jl	 $LL15@NpcTalk
$LN29@NpcTalk:

; 649  : 		{
; 650  : 			break;
; 651  : 		}
; 652  : 	}
; 653  : 
; 654  : 	if ( queststate != -1 )

  000be	83 fa ff	 cmp	 edx, -1
  000c1	74 38		 je	 SHORT $LN1@NpcTalk

; 655  : 	{
; 656  : 		GCSendQuestInfo(lpObj->m_Index, questindex);

  000c3	8b 55 f8	 mov	 edx, DWORD PTR _questindex$[ebp]
  000c6	8b 75 0c	 mov	 esi, DWORD PTR _lpObj$[ebp]
  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	52		 push	 edx
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?GCSendQuestInfo@@YAXHH@Z ; GCSendQuestInfo

; 657  : 		lpObj->m_IfState.type = 10;
; 658  : 		lpObj->m_IfState.state = 0;
; 659  : 		lpObj->m_IfState.use = 1;

  000d2	8b 8e 84 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3204]
  000d8	83 c4 08	 add	 esp, 8
  000db	81 e1 81 02 ff
	ff		 and	 ecx, -64895		; ffff0281H
  000e1	81 c9 81 02 00
	00		 or	 ecx, 641		; 00000281H
  000e7	5f		 pop	 edi
  000e8	89 8e 84 0c 00
	00		 mov	 DWORD PTR [esi+3204], ecx
  000ee	5e		 pop	 esi

; 660  : 		return true;

  000ef	b8 01 00 00 00	 mov	 eax, 1
  000f4	5b		 pop	 ebx

; 664  : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
$LN1@NpcTalk:
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi

; 661  : 	}
; 662  : 
; 663  : 	return false;

  000fd	33 c0		 xor	 eax, eax
  000ff	5b		 pop	 ebx

; 664  : }

  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 08 00	 ret	 8
?NpcTalk@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP	; CQuestInfo::NpcTalk
_TEXT	ENDS
PUBLIC	??_C@_0DE@CLGCKBPA@?$FLQuest?$FN?5Quest?5Item?5Drop?5?$FL?$CFs?$FN?3?5?$FL?$CF@ ; `string'
PUBLIC	?MonsterItemDrop@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@@Z ; CQuestInfo::MonsterItemDrop
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC	; ItemSerialCreateSend
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	_rand:PROC
EXTRN	?GetPartyCount@PartyClass@@QAEHH@Z:PROC		; PartyClass::GetPartyCount
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
;	COMDAT ??_C@_0DE@CLGCKBPA@?$FLQuest?$FN?5Quest?5Item?5Drop?5?$FL?$CFs?$FN?3?5?$FL?$CF@
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\questinfo.h
CONST	SEGMENT
??_C@_0DE@CLGCKBPA@?$FLQuest?$FN?5Quest?5Item?5Drop?5?$FL?$CFs?$FN?3?5?$FL?$CF@ DB '['
	DB	'Quest] Quest Item Drop [%s]: [%s][%s] (%s) (%d,%d)', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\questinfo.cpp
CONST	ENDS
;	COMDAT ?MonsterItemDrop@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_level$ = -24						; size = 4
_questcount$ = -24					; size = 4
_MaxHitUser$ = -20					; size = 4
_y$ = -16						; size = 4
_i$155474 = -16						; size = 4
_x$ = -12						; size = 4
_foundquest$ = -12					; size = 4
_this$ = -8						; size = 4
_n$155479 = -4						; size = 4
_lpObj$ = 8						; size = 4
?MonsterItemDrop@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CQuestInfo::MonsterItemDrop, COMDAT
; _this$ = ecx

; 669  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 670  : 	int MaxHitUser = gObjMonsterTopHitDamageUser(lpObj);

  00006	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	50		 push	 eax
  0000d	89 75 f8	 mov	 DWORD PTR _this$[ebp], esi
  00010	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser
  00015	83 c4 04	 add	 esp, 4
  00018	89 45 ec	 mov	 DWORD PTR _MaxHitUser$[ebp], eax

; 671  : 
; 672  : 	if ( MaxHitUser == -1 )

  0001b	83 f8 ff	 cmp	 eax, -1
  0001e	75 09		 jne	 SHORT $LN17@MonsterIte

; 673  : 	{
; 674  : 		return false;

  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 761  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN17@MonsterIte:
  00029	53		 push	 ebx

; 675  : 	}
; 676  : 
; 677  : 	int partycount = gParty.GetPartyCount(gObj[MaxHitUser].PartyNumber);

  0002a	8b d8		 mov	 ebx, eax
  0002c	69 db 64 15 00
	00		 imul	 ebx, 5476		; 00001564H
  00032	8b 8b a8 02 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[ebx+680]
  00038	51		 push	 ecx
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0003e	e8 00 00 00 00	 call	 ?GetPartyCount@PartyClass@@QAEHH@Z ; PartyClass::GetPartyCount

; 678  : 
; 679  : 	if ( partycount > 0 )

  00043	85 c0		 test	 eax, eax
  00045	7e 0a		 jle	 SHORT $LN16@MonsterIte

; 680  : 	{
; 681  : 		return false;

  00047	5b		 pop	 ebx
  00048	33 c0		 xor	 eax, eax
  0004a	5e		 pop	 esi

; 761  : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
$LN16@MonsterIte:

; 682  : 	}
; 683  : 
; 684  : 	LPOBJ lpTarget = &gObj[MaxHitUser];
; 685  : 	int questcount = this->GetQeustCount();

  00051	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00054	89 55 e8	 mov	 DWORD PTR _questcount$[ebp], edx

; 686  : 	int foundquest = 0;

  00057	33 d2		 xor	 edx, edx
  00059	57		 push	 edi
  0005a	8d 9b 00 00 00
	00		 lea	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[ebx]
  00060	89 55 f4	 mov	 DWORD PTR _foundquest$[ebp], edx

; 687  : 	LPQUEST_INFO lpQuestInfo;
; 688  : 	LPQUEST_SUB_INFO lpSubInfo;
; 689  : 	int type;
; 690  : 	int level;
; 691  : 	int x;
; 692  : 	int y;
; 693  : 	float dur = 0;
; 694  : 	int Option1 = 0;
; 695  : 	int Option2 = 0;
; 696  : 	int Option3 = 0;
; 697  : 
; 698  : 	
; 699  : 
; 700  : 	for ( int i=0;i<MAX_QUEST_INFO;i++)

  00063	89 55 f0	 mov	 DWORD PTR _i$155474[ebp], edx
$LL15@MonsterIte:

; 701  : 	{
; 702  : 		lpQuestInfo = this->GetQuestInfo(i);

  00066	52		 push	 edx
  00067	8b ce		 mov	 ecx, esi
  00069	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  0006e	8b f8		 mov	 edi, eax

; 703  : 
; 704  : 		if ( lpQuestInfo == NULL )

  00070	85 ff		 test	 edi, edi
  00072	0f 84 98 00 00
	00		 je	 $LN14@MonsterIte

; 705  : 		{
; 706  : 			continue;
; 707  : 		}
; 708  : 
; 709  : 		for ( int n =0;n<lpQuestInfo->QuestSubInfoCount;n++)

  00078	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$155479[ebp], 0
  00083	7e 7f		 jle	 SHORT $LN9@MonsterIte
$LL11@MonsterIte:

; 710  : 		{
; 711  : 			lpSubInfo = this->GetSubquestInfo(lpTarget, lpQuestInfo, n);

  00085	8b 45 fc	 mov	 eax, DWORD PTR _n$155479[ebp]
  00088	50		 push	 eax
  00089	57		 push	 edi
  0008a	53		 push	 ebx
  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetSubquestInfo
  00092	8b f0		 mov	 esi, eax

; 712  : 			
; 713  : 			if ( lpSubInfo != NULL )

  00094	85 f6		 test	 esi, esi
  00096	74 5a		 je	 SHORT $LN10@MonsterIte

; 714  : 			{
; 715  : 				if ( lpSubInfo->QuestType == 1 )

  00098	83 3e 01	 cmp	 DWORD PTR [esi], 1
  0009b	75 55		 jne	 SHORT $LN10@MonsterIte

; 716  : 				{
; 717  : 					if ( lpObj->Level >= lpSubInfo->NeedTargetMinLevel)

  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000a0	0f bf 81 9c 00
	00 00		 movsx	 eax, WORD PTR [ecx+156]
  000a7	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  000aa	7c 46		 jl	 SHORT $LN10@MonsterIte

; 718  : 					{
; 719  : 						if ( lpObj->Level <= lpSubInfo->NeedTargetMaxLevel )

  000ac	3b 46 18	 cmp	 eax, DWORD PTR [esi+24]
  000af	7f 41		 jg	 SHORT $LN10@MonsterIte

; 720  : 						{
; 721  : 							if ( this->GetQuestState(lpTarget, lpQuestInfo->QuestIndex) == TRUE )

  000b1	8b 57 34	 mov	 edx, DWORD PTR [edi+52]
  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	52		 push	 edx
  000b8	53		 push	 ebx
  000b9	e8 00 00 00 00	 call	 ?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::GetQuestState
  000be	83 f8 01	 cmp	 eax, 1
  000c1	75 2f		 jne	 SHORT $LN10@MonsterIte

; 722  : 							{
; 723  : 								if ( (rand() % ITEM_QUEST_DROP_PROBABILITY) < lpSubInfo->NeedDropRate)

  000c3	e8 00 00 00 00	 call	 _rand
  000c8	99		 cdq
  000c9	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  000ce	f7 f9		 idiv	 ecx
  000d0	3b 56 1c	 cmp	 edx, DWORD PTR [esi+28]
  000d3	7d 1d		 jge	 SHORT $LN10@MonsterIte

; 724  : 								{
; 725  : 									int itemcount = gObjGetItemCountInIventory(MaxHitUser, lpSubInfo->NeedType,
; 726  : 										lpSubInfo->NeedSubType, lpSubInfo->ItemLevel);

  000d5	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000d8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000db	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000de	52		 push	 edx
  000df	8b 55 ec	 mov	 edx, DWORD PTR _MaxHitUser$[ebp]
  000e2	50		 push	 eax
  000e3	51		 push	 ecx
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 ?gObjGetItemCountInIventory@@YAHHHHH@Z ; gObjGetItemCountInIventory
  000ea	83 c4 10	 add	 esp, 16			; 00000010H

; 727  : 
; 728  : 									if ( itemcount >= lpSubInfo->NeedNumber)

  000ed	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  000f0	7c 39		 jl	 SHORT $LN2@MonsterIte
$LN10@MonsterIte:

; 705  : 		{
; 706  : 			continue;
; 707  : 		}
; 708  : 
; 709  : 		for ( int n =0;n<lpQuestInfo->QuestSubInfoCount;n++)

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _n$155479[ebp]
  000f5	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  000f8	40		 inc	 eax
  000f9	89 45 fc	 mov	 DWORD PTR _n$155479[ebp], eax
  000fc	3b 47 40	 cmp	 eax, DWORD PTR [edi+64]
  000ff	7c 84		 jl	 SHORT $LL11@MonsterIte
  00101	8b 55 f0	 mov	 edx, DWORD PTR _i$155474[ebp]
$LN9@MonsterIte:

; 744  : 								}
; 745  : 							}
; 746  : 						}
; 747  : 					}
; 748  : 				}
; 749  : 			}
; 750  : 		}
; 751  : 
; 752  : 		foundquest++;

  00104	8b 45 f4	 mov	 eax, DWORD PTR _foundquest$[ebp]
  00107	40		 inc	 eax
  00108	89 45 f4	 mov	 DWORD PTR _foundquest$[ebp], eax

; 753  : 
; 754  : 		if ( foundquest == questcount )

  0010b	3b 45 e8	 cmp	 eax, DWORD PTR _questcount$[ebp]
  0010e	74 10		 je	 SHORT $LN24@MonsterIte
$LN14@MonsterIte:

; 687  : 	LPQUEST_INFO lpQuestInfo;
; 688  : 	LPQUEST_SUB_INFO lpSubInfo;
; 689  : 	int type;
; 690  : 	int level;
; 691  : 	int x;
; 692  : 	int y;
; 693  : 	float dur = 0;
; 694  : 	int Option1 = 0;
; 695  : 	int Option2 = 0;
; 696  : 	int Option3 = 0;
; 697  : 
; 698  : 	
; 699  : 
; 700  : 	for ( int i=0;i<MAX_QUEST_INFO;i++)

  00110	42		 inc	 edx
  00111	89 55 f0	 mov	 DWORD PTR _i$155474[ebp], edx
  00114	81 fa c8 00 00
	00		 cmp	 edx, 200		; 000000c8H
  0011a	0f 8c 46 ff ff
	ff		 jl	 $LL15@MonsterIte
$LN24@MonsterIte:
  00120	5f		 pop	 edi
  00121	5b		 pop	 ebx

; 755  : 		{
; 756  : 			break;
; 757  : 		}
; 758  : 	}
; 759  : 
; 760  : 	return false;

  00122	33 c0		 xor	 eax, eax
  00124	5e		 pop	 esi

; 761  : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 04 00	 ret	 4
$LN2@MonsterIte:

; 729  : 									{
; 730  : 										continue;
; 731  : 									}
; 732  : 
; 733  : 									dur = 0;
; 734  : 									x = lpObj->X;

  0012b	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0012e	0f bf 88 04 01
	00 00		 movsx	 ecx, WORD PTR [eax+260]

; 735  : 									y = lpObj->Y;

  00135	0f bf 90 06 01
	00 00		 movsx	 edx, WORD PTR [eax+262]

; 736  : 									level = lpSubInfo->ItemLevel;

  0013c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0013f	89 4d f4	 mov	 DWORD PTR _x$[ebp], ecx

; 737  : 									type = ItemGetNumberMake(lpSubInfo->NeedType, lpSubInfo->NeedSubType);

  00142	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00145	89 55 f0	 mov	 DWORD PTR _y$[ebp], edx
  00148	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0014b	51		 push	 ecx
  0014c	52		 push	 edx
  0014d	89 45 e8	 mov	 DWORD PTR _level$[ebp], eax
  00150	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake

; 738  : 									ItemSerialCreateSend(lpObj->m_Index, lpObj->MapNumber, x, y, type, level, dur, Option1,
; 739  : 										Option2, Option3, MaxHitUser, 0, 0);

  00155	8b 4d ec	 mov	 ecx, DWORD PTR _MaxHitUser$[ebp]
  00158	8b 55 e8	 mov	 edx, DWORD PTR _level$[ebp]
  0015b	6a 00		 push	 0
  0015d	6a 00		 push	 0
  0015f	51		 push	 ecx
  00160	8b 4d f4	 mov	 ecx, DWORD PTR _x$[ebp]
  00163	6a 00		 push	 0
  00165	6a 00		 push	 0
  00167	6a 00		 push	 0
  00169	6a 00		 push	 0
  0016b	52		 push	 edx
  0016c	50		 push	 eax
  0016d	8b 45 f0	 mov	 eax, DWORD PTR _y$[ebp]
  00170	50		 push	 eax
  00171	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00174	0f b6 90 09 01
	00 00		 movzx	 edx, BYTE PTR [eax+265]
  0017b	8b 00		 mov	 eax, DWORD PTR [eax]
  0017d	51		 push	 ecx
  0017e	52		 push	 edx
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; ItemSerialCreateSend

; 740  : 									LogAdd(LOG_BLACK, "[Quest] Quest Item Drop [%s]: [%s][%s] (%s) (%d,%d)", lpObj->Name,
; 741  : 										lpTarget->AccountID, lpTarget->Name, lpQuestInfo->Name, lpSubInfo->NeedType,
; 742  : 										lpSubInfo->NeedSubType);

  00185	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00188	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0018b	51		 push	 ecx
  0018c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0018f	52		 push	 edx
  00190	57		 push	 edi
  00191	8d 43 6f	 lea	 eax, DWORD PTR [ebx+111]
  00194	50		 push	 eax
  00195	83 c3 64	 add	 ebx, 100		; 00000064H
  00198	53		 push	 ebx
  00199	83 c1 6f	 add	 ecx, 111		; 0000006fH
  0019c	51		 push	 ecx
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@CLGCKBPA@?$FLQuest?$FN?5Quest?5Item?5Drop?5?$FL?$CFs?$FN?3?5?$FL?$CF@
  001a2	6a 00		 push	 0
  001a4	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  001a9	83 c4 5c	 add	 esp, 92			; 0000005cH
  001ac	5f		 pop	 edi
  001ad	5b		 pop	 ebx

; 743  : 									return true;

  001ae	b8 01 00 00 00	 mov	 eax, 1
  001b3	5e		 pop	 esi

; 761  : }

  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c2 04 00	 ret	 4
?MonsterItemDrop@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CQuestInfo::MonsterItemDrop
_TEXT	ENDS
PUBLIC	?QuestAccept@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::QuestAccept
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
; Function compile flags: /Ogtp
;	COMDAT ?QuestAccept@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_subquest$155505 = 12					; size = 4
_QuestIndex$ = 12					; size = 4
?QuestAccept@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z PROC	; CQuestInfo::QuestAccept, COMDAT
; _this$ = ecx

; 764  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 765  : 	LPQUEST_INFO lpQuestInfo = this->GetQuestInfo(QuestIndex);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _QuestIndex$[ebp]
  00007	53		 push	 ebx
  00008	50		 push	 eax
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00011	8b d8		 mov	 ebx, eax

; 766  : 
; 767  : 	if ( lpQuestInfo == NULL )

  00013	85 db		 test	 ebx, ebx
  00015	75 0c		 jne	 SHORT $LN8@QuestAccep

; 768  : 	{
; 769  : 		return 0xFF;

  00017	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0001c	5b		 pop	 ebx

; 795  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
$LN8@QuestAccep:

; 770  : 	}
; 771  : 
; 772  : 	int subquestcount = lpQuestInfo->QuestSubInfoCount;

  00023	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  00026	57		 push	 edi

; 773  : 	int concount = lpQuestInfo->QuestConditionCount;
; 774  : 	LPQUEST_SUB_INFO lpSubInfo;
; 775  : 	LPQUEST_CONDITION lpCondition;
; 776  : 	int NeedZen = 0;
; 777  : 
; 778  : 	for ( int subquest=0;subquest<subquestcount;subquest++)

  00027	33 d2		 xor	 edx, edx
  00029	33 ff		 xor	 edi, edi
  0002b	89 55 0c	 mov	 DWORD PTR _subquest$155505[ebp], edx
  0002e	85 c0		 test	 eax, eax
  00030	7e 42		 jle	 SHORT $LN16@QuestAccep
  00032	56		 push	 esi
  00033	eb 03		 jmp	 SHORT $LN7@QuestAccep
$LL17@QuestAccep:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
$LN7@QuestAccep:

; 779  : 	{
; 780  : 		lpSubInfo = this->GetSubquestInfo(lpObj, lpQuestInfo, subquest);

  00038	52		 push	 edx
  00039	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0003c	53		 push	 ebx
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 ?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetSubquestInfo

; 781  : 
; 782  : 		if ( lpSubInfo != NULL )

  00043	85 c0		 test	 eax, eax
  00045	74 20		 je	 SHORT $LN6@QuestAccep

; 783  : 		{
; 784  : 			for ( int n = 0;n<concount;n++)

  00047	33 f6		 xor	 esi, esi
  00049	39 b3 14 03 00
	00		 cmp	 DWORD PTR [ebx+788], esi
  0004f	7e 16		 jle	 SHORT $LN6@QuestAccep
$LL3@QuestAccep:

; 785  : 			{
; 786  : 				lpCondition = this->GetQuestCondition(lpQuestInfo, n);

  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	56		 push	 esi
  00055	53		 push	 ebx
  00056	e8 00 00 00 00	 call	 ?GetQuestCondition@CQuestInfo@@QAEPAUQUEST_CONDITION@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestCondition

; 787  : 				NeedZen += lpCondition->NeedZen;

  0005b	03 78 14	 add	 edi, DWORD PTR [eax+20]
  0005e	46		 inc	 esi
  0005f	3b b3 14 03 00
	00		 cmp	 esi, DWORD PTR [ebx+788]
  00065	7c ea		 jl	 SHORT $LL3@QuestAccep
$LN6@QuestAccep:

; 773  : 	int concount = lpQuestInfo->QuestConditionCount;
; 774  : 	LPQUEST_SUB_INFO lpSubInfo;
; 775  : 	LPQUEST_CONDITION lpCondition;
; 776  : 	int NeedZen = 0;
; 777  : 
; 778  : 	for ( int subquest=0;subquest<subquestcount;subquest++)

  00067	8b 55 0c	 mov	 edx, DWORD PTR _subquest$155505[ebp]
  0006a	42		 inc	 edx
  0006b	89 55 0c	 mov	 DWORD PTR _subquest$155505[ebp], edx
  0006e	3b 53 40	 cmp	 edx, DWORD PTR [ebx+64]
  00071	7c c2		 jl	 SHORT $LL17@QuestAccep
  00073	5e		 pop	 esi
$LN16@QuestAccep:

; 788  : 			}
; 789  : 		}
; 790  : 	}
; 791  : 
; 792  : 	lpObj->Money -= NeedZen;

  00074	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00077	29 b9 b0 00 00
	00		 sub	 DWORD PTR [ecx+176], edi
  0007d	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]

; 793  : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00083	50		 push	 eax
  00084	8b 01		 mov	 eax, DWORD PTR [ecx]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0008c	83 c4 08	 add	 esp, 8
  0008f	5f		 pop	 edi

; 794  : 	return true;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	5b		 pop	 ebx

; 795  : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?QuestAccept@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP	; CQuestInfo::QuestAccept
_TEXT	ENDS
PUBLIC	??_C@_0CP@JAPDAPMO@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DK@CADKKHAN@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DA@FJIJPLFD@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DK@OGOONICP@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	?QuestClear@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::QuestClear
EXTRN	?gObjDelteItemCountInInventory@@YAXHHHH@Z:PROC	; gObjDelteItemCountInInventory
EXTRN	?gObjMakePreviewCharSet@@YAXH@Z:PROC		; gObjMakePreviewCharSet
EXTRN	?GCSendQuestPrize@@YAXHEE@Z:PROC		; GCSendQuestPrize
;	COMDAT ??_C@_0CP@JAPDAPMO@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0CP@JAPDAPMO@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Quest] Quest Clear (%s) : [%s][%s] ComboSkill', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CADKKHAN@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DK@CADKKHAN@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Quest] Quest Clear (%s) : [%s][%s] Stat(%d,%d), PlusStat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FJIJPLFD@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DA@FJIJPLFD@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Quest] Quest Clear (%s) : [%s][%s] Stat(%d,%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@OGOONICP@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DK@OGOONICP@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Quest] Quest Clear (%s) : [%s][%s] Stat(%d,%d), ChangeUp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?QuestClear@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_subquestcount$ = -12					; size = 4
_this$ = -8						; size = 4
_lpQuestInfo$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_subquest$155524 = 12					; size = 4
_QuestIndex$ = 12					; size = 4
?QuestClear@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z PROC	; CQuestInfo::QuestClear, COMDAT
; _this$ = ecx

; 798  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 799  : 	LPQUEST_INFO lpQuestInfo = this->GetQuestInfo(QuestIndex);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _QuestIndex$[ebp]
  00009	53		 push	 ebx
  0000a	50		 push	 eax
  0000b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00013	8b d8		 mov	 ebx, eax
  00015	89 5d fc	 mov	 DWORD PTR _lpQuestInfo$[ebp], ebx

; 800  : 
; 801  : /*#if (FOREIGN_GAMESERVER==1)
; 802  : 	if ( szAuthKey[18] != AUTHKEY18 )
; 803  : 	{
; 804  : 		DestroyGIocp();
; 805  : 	}
; 806  : #endif*/
; 807  : 
; 808  : 	if ( lpQuestInfo == NULL )

  00018	85 db		 test	 ebx, ebx
  0001a	75 0c		 jne	 SHORT $LN14@QuestClear@2

; 809  : 	{
; 810  : 		return 0xFF;

  0001c	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00021	5b		 pop	 ebx

; 877  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
$LN14@QuestClear@2:

; 811  : 	}
; 812  : 
; 813  : 	int subquestcount = lpQuestInfo->QuestSubInfoCount;

  00028	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  0002b	89 45 f4	 mov	 DWORD PTR _subquestcount$[ebp], eax

; 814  : 	int concount = lpQuestInfo->QuestConditionCount;
; 815  : 	LPQUEST_SUB_INFO lpSubInfo;
; 816  : 
; 817  : 	for ( int subquest=0;subquest<subquestcount;subquest++)

  0002e	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _subquest$155524[ebp], 0
  00035	85 c0		 test	 eax, eax
  00037	0f 8e b2 01 00
	00		 jle	 $LN11@QuestClear@2
  0003d	56		 push	 esi
  0003e	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00041	57		 push	 edi
  00042	eb 03		 jmp	 SHORT $LN13@QuestClear@2
$LL20@QuestClear@2:
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
$LN13@QuestClear@2:

; 818  : 	{
; 819  : 		lpSubInfo = this->GetSubquestInfo(lpObj, lpQuestInfo, subquest);

  00047	8b 55 0c	 mov	 edx, DWORD PTR _subquest$155524[ebp]
  0004a	52		 push	 edx
  0004b	53		 push	 ebx
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetSubquestInfo
  00052	8b f8		 mov	 edi, eax

; 820  : 
; 821  : 		if ( lpSubInfo != NULL )

  00054	85 ff		 test	 edi, edi
  00056	0f 84 81 01 00
	00		 je	 $LN12@QuestClear@2

; 822  : 		{
; 823  : 			if ( lpSubInfo->RewardType == QUEST_COMPENSATION_CHANGEUP )

  0005c	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0005f	3d c9 00 00 00	 cmp	 eax, 201		; 000000c9H
  00064	0f 85 84 00 00
	00		 jne	 $LN9@QuestClear@2

; 824  : 			{
; 825  : 				lpObj->LevelUpPoint += lpSubInfo->RewardCount;

  0006a	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0006d	01 86 a0 00 00
	00		 add	 DWORD PTR [esi+160], eax

; 826  : 				GCSendQuestPrize(lpObj->m_Index, QUEST_COMPENSATION_STATUP, lpSubInfo->RewardCount );

  00073	0f b6 4f 28	 movzx	 ecx, BYTE PTR [edi+40]
  00077	8b 16		 mov	 edx, DWORD PTR [esi]
  00079	51		 push	 ecx
  0007a	68 c8 00 00 00	 push	 200			; 000000c8H
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?GCSendQuestPrize@@YAXHEE@Z ; GCSendQuestPrize

; 827  : 				lpObj->ChangeUP = true;
; 828  : 				lpObj->DbClass |= 1;
; 829  : 				gObjMakePreviewCharSet(lpObj->m_Index);

  00085	8b 06		 mov	 eax, DWORD PTR [esi]
  00087	80 8e 9a 00 00
	00 01		 or	 BYTE PTR [esi+154], 1
  0008e	50		 push	 eax
  0008f	c6 86 9b 00 00
	00 01		 mov	 BYTE PTR [esi+155], 1
  00096	e8 00 00 00 00	 call	 ?gObjMakePreviewCharSet@@YAXH@Z ; gObjMakePreviewCharSet

; 830  : 				BYTE btClass = (lpObj->Class * 32) & 224 ;
; 831  : 				btClass |= (lpObj->ChangeUP * 16) & 16;

  0009b	8a 86 9b 00 00
	00		 mov	 al, BYTE PTR [esi+155]
  000a1	8a 8e 98 00 00
	00		 mov	 cl, BYTE PTR [esi+152]
  000a7	b2 f0		 mov	 dl, 240			; 000000f0H
  000a9	f6 ea		 imul	 dl
  000ab	c0 e1 05	 shl	 cl, 5
  000ae	80 e1 e0	 and	 cl, 224			; 000000e0H
  000b1	24 10		 and	 al, 16			; 00000010H
  000b3	0a c8		 or	 cl, al

; 832  : 				GCSendQuestPrize(lpObj->m_Index, QUEST_COMPENSATION_CHANGEUP, btClass);

  000b5	0f b6 c1	 movzx	 eax, cl
  000b8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ba	50		 push	 eax
  000bb	68 c9 00 00 00	 push	 201			; 000000c9H
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 ?GCSendQuestPrize@@YAXHEE@Z ; GCSendQuestPrize

; 833  : 				LogAdd(LOG_BLACK, "[Quest] Quest Clear (%s) : [%s][%s] Stat(%d,%d), ChangeUp",
; 834  : 					lpQuestInfo->Name, lpObj->AccountID, lpObj->Name, lpObj->LevelUpPoint,
; 835  : 					lpSubInfo->RewardCount );

  000c6	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  000c9	8b 86 a0 00 00
	00		 mov	 eax, DWORD PTR [esi+160]
  000cf	52		 push	 edx
  000d0	50		 push	 eax
  000d1	8d 4e 6f	 lea	 ecx, DWORD PTR [esi+111]
  000d4	51		 push	 ecx
  000d5	8d 56 64	 lea	 edx, DWORD PTR [esi+100]
  000d8	52		 push	 edx
  000d9	53		 push	 ebx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@OGOONICP@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@
  000df	6a 00		 push	 0
  000e1	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000e6	83 c4 38	 add	 esp, 56			; 00000038H
  000e9	e9 d3 00 00 00	 jmp	 $LN2@QuestClear@2
$LN9@QuestClear@2:

; 836  : 			}
; 837  : 			else if ( lpSubInfo->RewardType == QUEST_COMPENSATION_STATUP )

  000ee	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  000f3	75 43		 jne	 SHORT $LN7@QuestClear@2

; 838  : 			{
; 839  : 				lpObj->LevelUpPoint += lpSubInfo->RewardCount;

  000f5	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000f8	01 86 a0 00 00
	00		 add	 DWORD PTR [esi+160], eax

; 840  : 				GCSendQuestPrize(lpObj->m_Index, QUEST_COMPENSATION_STATUP, lpSubInfo->RewardCount );

  000fe	0f b6 4f 28	 movzx	 ecx, BYTE PTR [edi+40]
  00102	8b 16		 mov	 edx, DWORD PTR [esi]
  00104	51		 push	 ecx
  00105	68 c8 00 00 00	 push	 200			; 000000c8H
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 ?GCSendQuestPrize@@YAXHEE@Z ; GCSendQuestPrize

; 841  : 				LogAdd(LOG_BLACK, "[Quest] Quest Clear (%s) : [%s][%s] Stat(%d,%d)",
; 842  : 					lpQuestInfo->Name, lpObj->AccountID, lpObj->Name, lpObj->LevelUpPoint,
; 843  : 					lpSubInfo->RewardCount );

  00110	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00113	8b 8e a0 00 00
	00		 mov	 ecx, DWORD PTR [esi+160]
  00119	50		 push	 eax
  0011a	51		 push	 ecx
  0011b	8d 56 6f	 lea	 edx, DWORD PTR [esi+111]
  0011e	52		 push	 edx
  0011f	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  00122	50		 push	 eax
  00123	53		 push	 ebx
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@FJIJPLFD@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@
  00129	6a 00		 push	 0
  0012b	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00130	83 c4 28	 add	 esp, 40			; 00000028H
  00133	e9 89 00 00 00	 jmp	 $LN2@QuestClear@2
$LN7@QuestClear@2:

; 844  : 			}
; 845  : 			else if ( lpSubInfo->RewardType == QUEST_COMPENSATION_PLUSSSTAT )

  00138	3d ca 00 00 00	 cmp	 eax, 202		; 000000caH
  0013d	75 51		 jne	 SHORT $LN5@QuestClear@2

; 846  : 			{
; 847  : 				int level = lpObj->Level - QUEST_MINLEVEL_PLUSSTAT;

  0013f	0f bf 9e 9c 00
	00 00		 movsx	 ebx, WORD PTR [esi+156]
  00146	4b		 dec	 ebx

; 848  : 
; 849  : 				if ( level <= 0 )

  00147	85 db		 test	 ebx, ebx
  00149	7f 02		 jg	 SHORT $LN4@QuestClear@2

; 850  : 				{
; 851  : 					level = 0;

  0014b	33 db		 xor	 ebx, ebx
$LN4@QuestClear@2:

; 852  : 				}
; 853  : 
; 854  : 				lpObj->LevelUpPoint += level;
; 855  : 				lpObj->PlusStatQuestClear = true;
; 856  : 				GCSendQuestPrize(lpObj->m_Index, QUEST_COMPENSATION_PLUSSSTAT, level );

  0014d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014f	01 9e a0 00 00
	00		 add	 DWORD PTR [esi+160], ebx
  00155	53		 push	 ebx
  00156	68 ca 00 00 00	 push	 202			; 000000caH
  0015b	51		 push	 ecx
  0015c	c6 86 88 00 00
	00 01		 mov	 BYTE PTR [esi+136], 1
  00163	e8 00 00 00 00	 call	 ?GCSendQuestPrize@@YAXHEE@Z ; GCSendQuestPrize

; 857  : 				LogAdd(LOG_BLACK, "[Quest] Quest Clear (%s) : [%s][%s] Stat(%d,%d), PlusStat",
; 858  : 					lpQuestInfo->Name, lpObj->AccountID, lpObj->Name, lpObj->LevelUpPoint,
; 859  : 					level );

  00168	8b 96 a0 00 00
	00		 mov	 edx, DWORD PTR [esi+160]
  0016e	53		 push	 ebx
  0016f	52		 push	 edx
  00170	8b 55 fc	 mov	 edx, DWORD PTR _lpQuestInfo$[ebp]
  00173	8d 46 6f	 lea	 eax, DWORD PTR [esi+111]
  00176	50		 push	 eax
  00177	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0017a	51		 push	 ecx
  0017b	52		 push	 edx
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CADKKHAN@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@
  00181	6a 00		 push	 0
  00183	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00188	8b 5d fc	 mov	 ebx, DWORD PTR _lpQuestInfo$[ebp]
  0018b	83 c4 28	 add	 esp, 40			; 00000028H
  0018e	eb 31		 jmp	 SHORT $LN2@QuestClear@2
$LN5@QuestClear@2:

; 860  : 			}
; 861  : 			else if ( lpSubInfo->RewardType == QUEST_COMPENSATION_COMBOSKILL )

  00190	3d cb 00 00 00	 cmp	 eax, 203		; 000000cbH
  00195	75 2a		 jne	 SHORT $LN2@QuestClear@2

; 862  : 			{
; 863  : 				GCSendQuestPrize(lpObj->m_Index, QUEST_COMPENSATION_COMBOSKILL, 0 );

  00197	6a 00		 push	 0
  00199	50		 push	 eax
  0019a	8b 06		 mov	 eax, DWORD PTR [esi]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ?GCSendQuestPrize@@YAXHEE@Z ; GCSendQuestPrize

; 864  : 				lpObj->ComboSkillquestClear = true;
; 865  : 				LogAdd(LOG_BLACK, "[Quest] Quest Clear (%s) : [%s][%s] ComboSkill",
; 866  : 					lpQuestInfo->Name, lpObj->AccountID, lpObj->Name);

  001a2	8d 4e 6f	 lea	 ecx, DWORD PTR [esi+111]
  001a5	51		 push	 ecx
  001a6	8d 56 64	 lea	 edx, DWORD PTR [esi+100]
  001a9	52		 push	 edx
  001aa	53		 push	 ebx
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@JAPDAPMO@?$FLQuest?$FN?5Quest?5Clear?5?$CI?$CFs?$CJ?5?3?5?$FL?$CFs?$FN?$FL@
  001b0	6a 00		 push	 0
  001b2	c6 86 89 00 00
	00 01		 mov	 BYTE PTR [esi+137], 1
  001b9	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  001be	83 c4 20	 add	 esp, 32			; 00000020H
$LN2@QuestClear@2:

; 867  : 			}
; 868  : 
; 869  : 			if ( lpSubInfo->QuestType == 1 )

  001c1	83 3f 01	 cmp	 DWORD PTR [edi], 1
  001c4	75 17		 jne	 SHORT $LN12@QuestClear@2

; 870  : 			{
; 871  : 				gObjDelteItemCountInInventory(lpObj->m_Index, lpSubInfo->NeedType, lpSubInfo->NeedSubType,
; 872  : 					lpSubInfo->NeedNumber);

  001c6	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  001c9	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  001cc	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  001cf	50		 push	 eax
  001d0	8b 06		 mov	 eax, DWORD PTR [esi]
  001d2	51		 push	 ecx
  001d3	52		 push	 edx
  001d4	50		 push	 eax
  001d5	e8 00 00 00 00	 call	 ?gObjDelteItemCountInInventory@@YAXHHHH@Z ; gObjDelteItemCountInInventory
  001da	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@QuestClear@2:

; 814  : 	int concount = lpQuestInfo->QuestConditionCount;
; 815  : 	LPQUEST_SUB_INFO lpSubInfo;
; 816  : 
; 817  : 	for ( int subquest=0;subquest<subquestcount;subquest++)

  001dd	8b 45 0c	 mov	 eax, DWORD PTR _subquest$155524[ebp]
  001e0	40		 inc	 eax
  001e1	89 45 0c	 mov	 DWORD PTR _subquest$155524[ebp], eax
  001e4	3b 45 f4	 cmp	 eax, DWORD PTR _subquestcount$[ebp]
  001e7	0f 8c 57 fe ff
	ff		 jl	 $LL20@QuestClear@2
  001ed	5f		 pop	 edi
  001ee	5e		 pop	 esi
$LN11@QuestClear@2:

; 873  : 			}
; 874  : 		}
; 875  : 	}
; 876  : 	return true;

  001ef	b8 01 00 00 00	 mov	 eax, 1
  001f4	5b		 pop	 ebx

; 877  : }

  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c2 08 00	 ret	 8
?QuestClear@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP	; CQuestInfo::QuestClear
_TEXT	ENDS
PUBLIC	??_C@_0DI@HHHLGGKH@?$FLQuest?$FN?5QuestSave?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5index@ ; `string'
PUBLIC	?QuestInfoSave@CQuestInfo@@QAEXPAUOBJECTSTRUCT@@@Z ; CQuestInfo::QuestInfoSave
;	COMDAT ??_C@_0DI@HHHLGGKH@?$FLQuest?$FN?5QuestSave?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5index@
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\questinfo.h
CONST	SEGMENT
??_C@_0DI@HHHLGGKH@?$FLQuest?$FN?5QuestSave?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5index@ DB '['
	DB	'Quest] QuestSave [%s][%s] index(%d) name(%s) state(%s)', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\questinfo.cpp
CONST	ENDS
;	COMDAT ?QuestInfoSave@CQuestInfo@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_questcount$ = -8					; size = 4
_foundquest$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?QuestInfoSave@CQuestInfo@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CQuestInfo::QuestInfoSave, COMDAT
; _this$ = ecx

; 881  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 882  : 	int questcount = this->GetQeustCount();

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 883  : 	int foundquest = 0;

  0000b	33 f6		 xor	 esi, esi
  0000d	57		 push	 edi

; 884  : 	LPQUEST_INFO lpQuestInfo;
; 885  : 
; 886  : 	for ( int i = 0 ; i<MAX_QUEST_INFO;i++)

  0000e	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00011	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00014	89 45 f8	 mov	 DWORD PTR _questcount$[ebp], eax
  00017	89 75 fc	 mov	 DWORD PTR _foundquest$[ebp], esi
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL15@QuestInfoS:

; 887  : 	{
; 888  : 		lpQuestInfo = this->GetQuestInfo(i);

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00026	8b d8		 mov	 ebx, eax

; 889  : 
; 890  : 		if ( lpQuestInfo == NULL )

  00028	85 db		 test	 ebx, ebx
  0002a	74 38		 je	 SHORT $LN4@QuestInfoS

; 891  : 		{
; 892  : 			continue;
; 893  : 		}
; 894  : 
; 895  : 		LogAdd(LOG_BLACK, "[Quest] QuestSave [%s][%s] index(%d) name(%s) state(%s)",
; 896  : 			lpObj->AccountID, lpObj->Name, i, lpQuestInfo->Name,
; 897  : 			sQuestString[this->GetQuestState(lpObj, i)]);

  0002c	56		 push	 esi
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::GetQuestState
  00033	6b c0 32	 imul	 eax, 50			; 00000032H
  00036	05 00 00 00 00	 add	 eax, OFFSET ?sQuestString@@3PAY0DC@DA ; sQuestString
  0003b	50		 push	 eax
  0003c	53		 push	 ebx
  0003d	56		 push	 esi
  0003e	8d 4f 6f	 lea	 ecx, DWORD PTR [edi+111]
  00041	51		 push	 ecx
  00042	8d 57 64	 lea	 edx, DWORD PTR [edi+100]
  00045	52		 push	 edx
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HHHLGGKH@?$FLQuest?$FN?5QuestSave?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5index@
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 898  : 		foundquest++;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _foundquest$[ebp]
  00055	40		 inc	 eax
  00056	83 c4 1c	 add	 esp, 28			; 0000001cH
  00059	89 45 fc	 mov	 DWORD PTR _foundquest$[ebp], eax

; 899  : 
; 900  : 		if ( foundquest == questcount )

  0005c	3b 45 f8	 cmp	 eax, DWORD PTR _questcount$[ebp]
  0005f	74 0c		 je	 SHORT $LN11@QuestInfoS
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
$LN4@QuestInfoS:

; 884  : 	LPQUEST_INFO lpQuestInfo;
; 885  : 
; 886  : 	for ( int i = 0 ; i<MAX_QUEST_INFO;i++)

  00064	46		 inc	 esi
  00065	81 fe c8 00 00
	00		 cmp	 esi, 200		; 000000c8H
  0006b	7c b3		 jl	 SHORT $LL15@QuestInfoS
$LN11@QuestInfoS:
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 901  : 		{
; 902  : 			break;
; 903  : 		}
; 904  : 	}
; 905  : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?QuestInfoSave@CQuestInfo@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CQuestInfo::QuestInfoSave
_TEXT	ENDS
PUBLIC	??0CQuestInfo@@QAE@XZ				; CQuestInfo::CQuestInfo
; Function compile flags: /Ogtp
;	COMDAT ??0CQuestInfo@@QAE@XZ
_TEXT	SEGMENT
??0CQuestInfo@@QAE@XZ PROC				; CQuestInfo::CQuestInfo, COMDAT
; _this$ = ecx

; 33   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CQuestInfo@@6B@

; 34   : 	QuestBitMask[0]=0xFC;

  00009	c7 05 00 00 00
	00 fc fc f3 f3	 mov	 DWORD PTR ?QuestBitMask@@3PAEA, -202113796 ; f3f3fcfcH

; 35   : 	QuestBitMask[1]=0xFC;
; 36   : 	QuestBitMask[2]=0xF3;
; 37   : 	QuestBitMask[3]=0xF3;
; 38   : 	QuestBitMask[4]=0xCF;

  00013	c7 05 04 00 00
	00 cf cf 3f 3f	 mov	 DWORD PTR ?QuestBitMask@@3PAEA+4, 1061146575 ; 3f3fcfcfH

; 39   : 	QuestBitMask[5]=0xCF;
; 40   : 	QuestBitMask[6]=0x3F;
; 41   : 	QuestBitMask[7]=0x3F;
; 42   : 
; 43   : 	this->Init();

  0001d	e8 00 00 00 00	 call	 ?Init@CQuestInfo@@QAEXXZ ; CQuestInfo::Init

; 44   : }

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c3		 ret	 0
??0CQuestInfo@@QAE@XZ ENDP				; CQuestInfo::CQuestInfo
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCQuestInfo@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCQuestInfo@@UAEPAXI@Z PROC				; CQuestInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CQuestInfo@@UAE@XZ	; CQuestInfo::~CQuestInfo
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCQuestInfo@@UAEPAXI@Z ENDP				; CQuestInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BK@EGHNLLGE@?$FLQuest?$FN?5?$FLSetQuestItem?$FN?5?$CFs?$AA@ ; `string'
PUBLIC	?InitQuestItem@CQuestInfo@@QAEXXZ		; CQuestInfo::InitQuestItem
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
;	COMDAT ??_C@_0BK@EGHNLLGE@?$FLQuest?$FN?5?$FLSetQuestItem?$FN?5?$CFs?$AA@
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\questinfo.h
CONST	SEGMENT
??_C@_0BK@EGHNLLGE@?$FLQuest?$FN?5?$FLSetQuestItem?$FN?5?$CFs?$AA@ DB '[Q'
	DB	'uest] [SetQuestItem] %s', 00H		; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\questinfo.cpp
CONST	ENDS
;	COMDAT ?InitQuestItem@CQuestInfo@@QAEXXZ
_TEXT	SEGMENT
_questcount$ = -16					; size = 4
_this$ = -12						; size = 4
_i$155264 = -8						; size = 4
_foundquest$ = -4					; size = 4
?InitQuestItem@CQuestInfo@@QAEXXZ PROC			; CQuestInfo::InitQuestItem, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 255  : 	int questcount = this->GetQeustCount();

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00009	53		 push	 ebx

; 256  : 	int foundquest = 0;

  0000a	33 d2		 xor	 edx, edx
  0000c	56		 push	 esi
  0000d	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00010	89 45 f0	 mov	 DWORD PTR _questcount$[ebp], eax
  00013	89 55 fc	 mov	 DWORD PTR _foundquest$[ebp], edx

; 257  : 	LPQUEST_INFO lpQuestInfo;
; 258  : 	LPQUEST_SUB_INFO lpSubInfo;
; 259  : 
; 260  : 	for (int i=0;i<MAX_QUEST_INFO;i++)

  00016	89 55 f8	 mov	 DWORD PTR _i$155264[ebp], edx
  00019	57		 push	 edi
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL23@InitQuestI:

; 261  : 	{
; 262  : 		lpQuestInfo = this->GetQuestInfo(i);

  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00026	8b f8		 mov	 edi, eax

; 263  : 
; 264  : 		if ( lpQuestInfo == NULL )

  00028	85 ff		 test	 edi, edi
  0002a	74 53		 je	 SHORT $LN9@InitQuestI

; 265  : 		{
; 266  : 			continue;
; 267  : 		}
; 268  : 
; 269  : 		for ( int n=0;n<lpQuestInfo->QuestSubInfoCount;n++)

  0002c	33 db		 xor	 ebx, ebx
  0002e	39 5f 40	 cmp	 DWORD PTR [edi+64], ebx
  00031	7e 40		 jle	 SHORT $LN4@InitQuestI
  00033	8d 77 44	 lea	 esi, DWORD PTR [edi+68]
$LL6@InitQuestI:

; 270  : 		{
; 271  : 			lpSubInfo = &lpQuestInfo->QuestSubInfo[n];
; 272  : 
; 273  : 			if ( lpSubInfo != NULL )

  00036	85 f6		 test	 esi, esi
  00038	74 2a		 je	 SHORT $LN5@InitQuestI

; 274  : 			{
; 275  : 				if ( lpSubInfo->QuestType == 1 )

  0003a	83 3e 01	 cmp	 DWORD PTR [esi], 1
  0003d	75 25		 jne	 SHORT $LN5@InitQuestI

; 276  : 				{
; 277  : 					LPITEM_ATTRIBUTE p = &ItemAttribute[ITEMGET(lpSubInfo->NeedType, lpSubInfo->NeedSubType) ];

  0003f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00042	c1 e0 09	 shl	 eax, 9
  00045	03 46 08	 add	 eax, DWORD PTR [esi+8]
  00048	6b c0 6c	 imul	 eax, 108		; 0000006cH
  0004b	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute

; 278  : 					p->QuestItem = TRUE;
; 279  : 					LogAdd(LOG_BLACK, "[Quest] [SetQuestItem] %s", p->Name);

  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EGHNLLGE@?$FLQuest?$FN?5?$FLSetQuestItem?$FN?5?$CFs?$AA@
  00056	6a 00		 push	 0
  00058	c6 40 5c 01	 mov	 BYTE PTR [eax+92], 1
  0005c	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@InitQuestI:

; 265  : 		{
; 266  : 			continue;
; 267  : 		}
; 268  : 
; 269  : 		for ( int n=0;n<lpQuestInfo->QuestSubInfoCount;n++)

  00064	43		 inc	 ebx
  00065	83 c6 48	 add	 esi, 72			; 00000048H
  00068	3b 5f 40	 cmp	 ebx, DWORD PTR [edi+64]
  0006b	7c c9		 jl	 SHORT $LL6@InitQuestI
  0006d	8b 55 f8	 mov	 edx, DWORD PTR _i$155264[ebp]
  00070	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
$LN4@InitQuestI:

; 280  : 				}
; 281  : 			}
; 282  : 		}
; 283  : 		foundquest++;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _foundquest$[ebp]
  00076	40		 inc	 eax
  00077	89 45 fc	 mov	 DWORD PTR _foundquest$[ebp], eax

; 284  : 		if ( foundquest == questcount )

  0007a	3b 45 f0	 cmp	 eax, DWORD PTR _questcount$[ebp]
  0007d	74 0c		 je	 SHORT $LN17@InitQuestI
$LN9@InitQuestI:

; 257  : 	LPQUEST_INFO lpQuestInfo;
; 258  : 	LPQUEST_SUB_INFO lpSubInfo;
; 259  : 
; 260  : 	for (int i=0;i<MAX_QUEST_INFO;i++)

  0007f	42		 inc	 edx
  00080	89 55 f8	 mov	 DWORD PTR _i$155264[ebp], edx
  00083	81 fa c8 00 00
	00		 cmp	 edx, 200		; 000000c8H
  00089	7c 95		 jl	 SHORT $LL23@InitQuestI
$LN17@InitQuestI:
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 285  : 		{
; 286  : 			return;
; 287  : 		}
; 288  : 	}
; 289  : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?InitQuestItem@CQuestInfo@@QAEXXZ ENDP			; CQuestInfo::InitQuestItem
_TEXT	ENDS
PUBLIC	?QuestRunConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::QuestRunConditionCheck
; Function compile flags: /Ogtp
;	COMDAT ?QuestRunConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_subquestcount$ = -20					; size = 4
_lpSubInfo$ = -16					; size = 4
_bFoundSubQuest$ = -12					; size = 4
_subquest$155395 = -8					; size = 4
_lpQuestInfo$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_concount$ = 12						; size = 4
_QuestIndex$ = 12					; size = 4
?QuestRunConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z PROC ; CQuestInfo::QuestRunConditionCheck, COMDAT
; _this$ = ecx

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 504  : 	LPQUEST_INFO lpQuestInfo = this->GetQuestInfo(QuestIndex);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _QuestIndex$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	50		 push	 eax
  0000c	8b f9		 mov	 edi, ecx
  0000e	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00013	8b f0		 mov	 esi, eax

; 505  : 
; 506  : 	if ( lpQuestInfo == NULL )

  00015	33 c0		 xor	 eax, eax
  00017	89 75 fc	 mov	 DWORD PTR _lpQuestInfo$[ebp], esi
  0001a	3b f0		 cmp	 esi, eax
  0001c	75 0a		 jne	 SHORT $LN16@QuestRunCo

; 507  : 	{
; 508  : 		return -1;

  0001e	5f		 pop	 edi
  0001f	0c ff		 or	 al, 255			; 000000ffH
  00021	5e		 pop	 esi

; 559  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
$LN16@QuestRunCo:

; 509  : 	}
; 510  : 
; 511  : 	int subquestcount = lpQuestInfo->QuestSubInfoCount;

  00028	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]

; 512  : 	int concount = lpQuestInfo->QuestConditionCount;

  0002b	8b 96 14 03 00
	00		 mov	 edx, DWORD PTR [esi+788]
  00031	53		 push	 ebx
  00032	89 4d ec	 mov	 DWORD PTR _subquestcount$[ebp], ecx
  00035	89 55 0c	 mov	 DWORD PTR _concount$[ebp], edx

; 513  : 	LPQUEST_SUB_INFO lpSubInfo;
; 514  : 	LPQUEST_CONDITION lpCondition;
; 515  : 	BOOL bFoundSubQuest = FALSE;

  00038	89 45 f4	 mov	 DWORD PTR _bFoundSubQuest$[ebp], eax

; 516  : 
; 517  : 
; 518  : 	for ( int subquest=0;subquest<subquestcount;subquest++)

  0003b	89 45 f8	 mov	 DWORD PTR _subquest$155395[ebp], eax
  0003e	3b c8		 cmp	 ecx, eax
  00040	7e 72		 jle	 SHORT $LN26@QuestRunCo
$LL31@QuestRunCo:

; 519  : 	{
; 520  : 		lpSubInfo = this->GetSubquestInfo(lpObj, lpQuestInfo, subquest);

  00042	50		 push	 eax
  00043	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00046	56		 push	 esi
  00047	50		 push	 eax
  00048	8b cf		 mov	 ecx, edi
  0004a	e8 00 00 00 00	 call	 ?GetSubquestInfo@CQuestInfo@@QAEPAUQUEST_SUB_INFO@@PAUOBJECTSTRUCT@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetSubquestInfo
  0004f	89 45 f0	 mov	 DWORD PTR _lpSubInfo$[ebp], eax

; 521  : 
; 522  : 		if ( lpSubInfo != NULL )

  00052	85 c0		 test	 eax, eax
  00054	74 4c		 je	 SHORT $LN14@QuestRunCo

; 523  : 		{
; 524  : 			bFoundSubQuest = TRUE;
; 525  : 
; 526  : 			for ( int i=0;i<concount;i++)

  00056	33 db		 xor	 ebx, ebx
  00058	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bFoundSubQuest$[ebp], 1
  0005f	39 5d 0c	 cmp	 DWORD PTR _concount$[ebp], ebx
  00062	7e 3e		 jle	 SHORT $LN14@QuestRunCo
$LL11@QuestRunCo:

; 527  : 			{
; 528  : 				lpCondition = this->GetQuestCondition(lpQuestInfo, i);

  00064	53		 push	 ebx
  00065	56		 push	 esi
  00066	8b cf		 mov	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?GetQuestCondition@CQuestInfo@@QAEPAUQUEST_CONDITION@@PAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestCondition
  0006d	8b f0		 mov	 esi, eax

; 529  : 
; 530  : 				if ( lpCondition != NULL && lpCondition->Index == -1)

  0006f	85 f6		 test	 esi, esi
  00071	74 41		 je	 SHORT $LN26@QuestRunCo
  00073	8b 06		 mov	 eax, DWORD PTR [esi]
  00075	83 f8 ff	 cmp	 eax, -1
  00078	75 07		 jne	 SHORT $LN8@QuestRunCo

; 531  : 				{
; 532  : 					if ( this->CompareCondition(lpObj, lpCondition) == FALSE )

  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0007d	56		 push	 esi
  0007e	51		 push	 ecx

; 533  : 					{
; 534  : 						return lpCondition->StartContext;
; 535  : 					}
; 536  : 				}

  0007f	eb 0d		 jmp	 SHORT $LN34@QuestRunCo
$LN8@QuestRunCo:

; 537  : 				else if ( lpCondition != NULL && lpCondition->Index == lpSubInfo->LinkConditionIndex )

  00081	8b 55 f0	 mov	 edx, DWORD PTR _lpSubInfo$[ebp]
  00084	3b 42 2c	 cmp	 eax, DWORD PTR [edx+44]
  00087	75 10		 jne	 SHORT $LN10@QuestRunCo

; 538  : 				{
; 539  : 					if ( this->CompareCondition(lpObj, lpCondition) == 0)

  00089	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0008c	56		 push	 esi
  0008d	50		 push	 eax
$LN34@QuestRunCo:
  0008e	8b cf		 mov	 ecx, edi
  00090	e8 00 00 00 00	 call	 ?CompareCondition@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@PAUQUEST_CONDITION@@@Z ; CQuestInfo::CompareCondition
  00095	85 c0		 test	 eax, eax
  00097	74 26		 je	 SHORT $LN22@QuestRunCo
$LN10@QuestRunCo:

; 523  : 		{
; 524  : 			bFoundSubQuest = TRUE;
; 525  : 
; 526  : 			for ( int i=0;i<concount;i++)

  00099	8b 75 fc	 mov	 esi, DWORD PTR _lpQuestInfo$[ebp]
  0009c	43		 inc	 ebx
  0009d	3b 5d 0c	 cmp	 ebx, DWORD PTR _concount$[ebp]
  000a0	7c c2		 jl	 SHORT $LL11@QuestRunCo
$LN14@QuestRunCo:

; 516  : 
; 517  : 
; 518  : 	for ( int subquest=0;subquest<subquestcount;subquest++)

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _subquest$155395[ebp]
  000a5	40		 inc	 eax
  000a6	89 45 f8	 mov	 DWORD PTR _subquest$155395[ebp], eax
  000a9	3b 45 ec	 cmp	 eax, DWORD PTR _subquestcount$[ebp]
  000ac	7c 94		 jl	 SHORT $LL31@QuestRunCo

; 542  : 					}
; 543  : 				}
; 544  : 				else if ( lpCondition == NULL )
; 545  : 				{
; 546  : 					return -1;
; 547  : 				}
; 548  : 			}
; 549  : 
; 550  : 		}
; 551  : 	}
; 552  : 
; 553  : 	if ( bFoundSubQuest == FALSE )

  000ae	83 7d f4 00	 cmp	 DWORD PTR _bFoundSubQuest$[ebp], 0
  000b2	75 17		 jne	 SHORT $LN1@QuestRunCo
$LN26@QuestRunCo:
  000b4	5b		 pop	 ebx
  000b5	5f		 pop	 edi

; 554  : 	{
; 555  : 		return -1;

  000b6	0c ff		 or	 al, 255			; 000000ffH
  000b8	5e		 pop	 esi

; 559  : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 08 00	 ret	 8
$LN22@QuestRunCo:

; 540  : 					{
; 541  : 						return lpCondition->StartContext;

  000bf	8a 46 18	 mov	 al, BYTE PTR [esi+24]
  000c2	5b		 pop	 ebx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi

; 559  : }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 08 00	 ret	 8
$LN1@QuestRunCo:
  000cb	5b		 pop	 ebx
  000cc	5f		 pop	 edi

; 556  : 	}
; 557  : 
; 558  : 	return 0;

  000cd	32 c0		 xor	 al, al
  000cf	5e		 pop	 esi

; 559  : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?QuestRunConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ENDP ; CQuestInfo::QuestRunConditionCheck
_TEXT	ENDS
PUBLIC	??_C@_0BF@JAOCNINL@Quest?5Info?5Read?5Fail?$AA@	; `string'
PUBLIC	??_C@_0CO@IPPCPA@?$FLQuest?$FN?5?$CI?$CFs?$CJ?5Load?5?3?5Index?5?$CFd?0?5Su@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?LoadQuestInfo@CQuestInfo@@QAEHPAD@Z		; CQuestInfo::LoadQuestInfo
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0BF@JAOCNINL@Quest?5Info?5Read?5Fail?$AA@
CONST	SEGMENT
??_C@_0BF@JAOCNINL@Quest?5Info?5Read?5Fail?$AA@ DB 'Quest Info Read Fail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IPPCPA@?$FLQuest?$FN?5?$CI?$CFs?$CJ?5Load?5?3?5Index?5?$CFd?0?5Su@
CONST	SEGMENT
??_C@_0CO@IPPCPA@?$FLQuest?$FN?5?$CI?$CFs?$CJ?5Load?5?3?5Index?5?$CFd?0?5Su@ DB '['
	DB	'Quest] (%s) Load : Index %d, SubInfoCount %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@ DB 'load error %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadQuestInfo@CQuestInfo@@QAEHPAD@Z
_TEXT	SEGMENT
tv589 = -20						; size = 4
_iQuestIndex$155238 = -16				; size = 4
tv457 = -12						; size = 4
tv450 = -12						; size = 4
tv439 = -12						; size = 4
tv434 = -12						; size = 4
tv424 = -12						; size = 4
tv421 = -12						; size = 4
tv389 = -12						; size = 4
tv377 = -12						; size = 4
tv288 = -12						; size = 4
tv270 = -12						; size = 4
_iSubInfoCount$155242 = -8				; size = 4
tv596 = -4						; size = 4
_iFailInfoCount$155252 = 8				; size = 4
_filename$ = 8						; size = 4
tv464 = 10						; size = 2
tv443 = 10						; size = 2
tv430 = 10						; size = 2
tv414 = 10						; size = 2
tv317 = 10						; size = 2
?LoadQuestInfo@CQuestInfo@@QAEHPAD@Z PROC		; CQuestInfo::LoadQuestInfo, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 66   : 	int Token;
; 67   : 	int n;
; 68   : 
; 69   : 	SMDFile = fopen(filename, "r");

  00007	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  0000a	57		 push	 edi
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00010	56		 push	 esi
  00011	8b f9		 mov	 edi, ecx
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 70   : 
; 71   : 	if ( SMDFile == NULL )

  00020	85 c0		 test	 eax, eax
  00022	75 18		 jne	 SHORT $LN18@LoadQuestI

; 72   : 	{
; 73   : 		MsgBox("load error %s", filename);

  00024	56		 push	 esi
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NOCIMNHO@load?5error?5?$CFs?$AA@
  0002a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002f	83 c4 08	 add	 esp, 8
  00032	5f		 pop	 edi

; 74   : 		return false;

  00033	33 c0		 xor	 eax, eax
  00035	5e		 pop	 esi

; 251  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN18@LoadQuestI:
  0003c	53		 push	 ebx

; 75   : 	}
; 76   : 
; 77   : 	this->Init();

  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?Init@CQuestInfo@@QAEXXZ ; CQuestInfo::Init

; 78   : 
; 79   : 	n = 0;
; 80   : 
; 81   : 	while ( true )
; 82   : 	{
; 83   : 		Token = GetToken();

  00044	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 84   : 
; 85   : 		if ( Token == 2 )

  00049	83 f8 02	 cmp	 eax, 2
  0004c	0f 84 31 03 00
	00		 je	 $LN38@LoadQuestI
$LL17@LoadQuestI:

; 86   : 		{
; 87   : 			break;
; 88   : 		}
; 89   : 		else
; 90   : 		{
; 91   : 			if ( Token == 1 )

  00052	83 f8 01	 cmp	 eax, 1
  00055	0f 85 1a 03 00
	00		 jne	 $LN39@LoadQuestI

; 92   : 			{
; 93   : 				int Type = TokenNumber;

  0005b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00061	e8 00 00 00 00	 call	 __ftol2_sse

; 94   : 
; 95   : 				if ( Type == 0 )

  00066	85 c0		 test	 eax, eax
  00068	0f 85 39 03 00
	00		 jne	 $LN12@LoadQuestI

; 96   : 				{
; 97   : 					Token = GetToken();

  0006e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 98   : 					int iQuestIndex = TokenNumber;

  00073	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00079	e8 00 00 00 00	 call	 __ftol2_sse

; 99   : 					this->QuestInfo[iQuestIndex].QuestIndex = iQuestIndex;

  0007e	8b d8		 mov	 ebx, eax
  00080	69 db 30 04 00
	00		 imul	 ebx, 1072		; 00000430H
  00086	89 45 f0	 mov	 DWORD PTR _iQuestIndex$155238[ebp], eax
  00089	89 44 3b 3c	 mov	 DWORD PTR [ebx+edi+60], eax

; 100  : 
; 101  : 					Token = GetToken();

  0008d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 102  : 					this->QuestInfo[iQuestIndex].QuestStartType = TokenNumber;

  00092	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00098	e8 00 00 00 00	 call	 __ftol2_sse
  0009d	89 44 3b 40	 mov	 DWORD PTR [ebx+edi+64], eax

; 103  : 
; 104  : 					Token = GetToken();

  000a1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 105  : 					this->QuestInfo[iQuestIndex].QuestStartSubType = TokenNumber;

  000a6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ac	e8 00 00 00 00	 call	 __ftol2_sse
  000b1	89 44 3b 44	 mov	 DWORD PTR [ebx+edi+68], eax

; 106  : 
; 107  : 					Token = GetToken();

  000b5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 108  : 					strcpy( this->QuestInfo[iQuestIndex].Name, TokenString);

  000ba	8d 54 3b 08	 lea	 edx, DWORD PTR [ebx+edi+8]
  000be	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
  000c3	89 55 ec	 mov	 DWORD PTR tv589[ebp], edx
  000c6	2b d0		 sub	 edx, eax
$LL21@LoadQuestI:
  000c8	8a 08		 mov	 cl, BYTE PTR [eax]
  000ca	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000cd	40		 inc	 eax
  000ce	84 c9		 test	 cl, cl
  000d0	75 f6		 jne	 SHORT $LL21@LoadQuestI

; 109  : 
; 110  : 					this->QuestInfo[iQuestIndex].QuestSubInfoCount = 0;

  000d2	8d 44 3b 48	 lea	 eax, DWORD PTR [ebx+edi+72]
  000d6	89 45 fc	 mov	 DWORD PTR tv596[ebp], eax
  000d9	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000df	90		 npad	 1
$LL11@LoadQuestI:

; 111  : 
; 112  : 					while ( true )
; 113  : 					{
; 114  : 						int iSubInfoCount = this->QuestInfo[iQuestIndex].QuestSubInfoCount;

  000e0	8b 30		 mov	 esi, DWORD PTR [eax]
  000e2	89 75 f8	 mov	 DWORD PTR _iSubInfoCount$155242[ebp], esi

; 115  : 
; 116  : 						Token = GetToken();

  000e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 
; 118  : 						if ( Token == 0 )

  000ea	85 c0		 test	 eax, eax
  000ec	75 3a		 jne	 SHORT $LN8@LoadQuestI

; 119  : 						{
; 120  : 							if ( strcmp("end", TokenString) == 0 )

  000ee	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  000f3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL30@LoadQuestI:
  000f8	8a 10		 mov	 dl, BYTE PTR [eax]
  000fa	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000fc	75 1a		 jne	 SHORT $LN31@LoadQuestI
  000fe	84 d2		 test	 dl, dl
  00100	74 12		 je	 SHORT $LN32@LoadQuestI
  00102	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00105	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00108	75 0e		 jne	 SHORT $LN31@LoadQuestI
  0010a	83 c0 02	 add	 eax, 2
  0010d	83 c1 02	 add	 ecx, 2
  00110	84 d2		 test	 dl, dl
  00112	75 e4		 jne	 SHORT $LL30@LoadQuestI
$LN32@LoadQuestI:
  00114	33 c0		 xor	 eax, eax
  00116	eb 05		 jmp	 SHORT $LN33@LoadQuestI
$LN31@LoadQuestI:
  00118	1b c0		 sbb	 eax, eax
  0011a	83 d8 ff	 sbb	 eax, -1
$LN33@LoadQuestI:
  0011d	85 c0		 test	 eax, eax
  0011f	0f 84 30 02 00
	00		 je	 $LN27@LoadQuestI
  00125	8b 75 f8	 mov	 esi, DWORD PTR _iSubInfoCount$155242[ebp]
$LN8@LoadQuestI:

; 121  : 							{
; 122  : 								break;
; 123  : 							}
; 124  : 						}
; 125  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].QuestType = TokenNumber;

  00128	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0012e	8d 04 f6	 lea	 eax, DWORD PTR [esi+esi*8]
  00131	8d 34 c3	 lea	 esi, DWORD PTR [ebx+eax*8]
  00134	03 f7		 add	 esi, edi
  00136	e8 00 00 00 00	 call	 __ftol2_sse
  0013b	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 126  : 
; 127  : 						Token = GetToken();

  0013e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 128  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].NeedType = TokenNumber;

  00143	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00149	e8 00 00 00 00	 call	 __ftol2_sse
  0014e	89 46 50	 mov	 DWORD PTR [esi+80], eax

; 129  : 
; 130  : 						Token = GetToken();

  00151	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].NeedSubType = TokenNumber;

  00156	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0015c	e8 00 00 00 00	 call	 __ftol2_sse
  00161	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 132  : 
; 133  : 						Token = GetToken();

  00164	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].ItemLevel = TokenNumber;

  00169	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0016f	e8 00 00 00 00	 call	 __ftol2_sse
  00174	89 46 58	 mov	 DWORD PTR [esi+88], eax

; 135  : 
; 136  : 						Token = GetToken();

  00177	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 137  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].NeedNumber = TokenNumber;

  0017c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00182	e8 00 00 00 00	 call	 __ftol2_sse
  00187	89 46 5c	 mov	 DWORD PTR [esi+92], eax

; 138  : 
; 139  : 						Token = GetToken();

  0018a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].NeedTargetMinLevel = TokenNumber;

  0018f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00195	e8 00 00 00 00	 call	 __ftol2_sse
  0019a	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 141  : 
; 142  : 						Token = GetToken();

  0019d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 143  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].NeedTargetMaxLevel = TokenNumber;

  001a2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001a8	e8 00 00 00 00	 call	 __ftol2_sse
  001ad	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 144  : 
; 145  : 						Token = GetToken();

  001b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 146  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].NeedDropRate = TokenNumber;

  001b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001bb	e8 00 00 00 00	 call	 __ftol2_sse
  001c0	89 46 68	 mov	 DWORD PTR [esi+104], eax

; 147  : 
; 148  : 						Token = GetToken();

  001c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 149  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].RewardType = TokenNumber;

  001c8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ce	e8 00 00 00 00	 call	 __ftol2_sse
  001d3	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 150  : 
; 151  : 						Token = GetToken();

  001d6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 152  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].RewardSubType = TokenNumber;

  001db	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e1	e8 00 00 00 00	 call	 __ftol2_sse
  001e6	89 46 70	 mov	 DWORD PTR [esi+112], eax

; 153  : 
; 154  : 						Token = GetToken();

  001e9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 155  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].RewardCount = TokenNumber;

  001ee	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001f4	e8 00 00 00 00	 call	 __ftol2_sse
  001f9	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 156  : 
; 157  : 						Token = GetToken();

  001fc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 158  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].LinkConditionIndex = TokenNumber;

  00201	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00207	e8 00 00 00 00	 call	 __ftol2_sse
  0020c	89 46 78	 mov	 DWORD PTR [esi+120], eax

; 159  : 
; 160  : 						Token = GetToken();

  0020f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 161  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].ContextBeforeReg = TokenNumber;

  00214	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0021a	e8 00 00 00 00	 call	 __ftol2_sse
  0021f	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 162  : 
; 163  : 						Token = GetToken();

  00222	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 164  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].ContextAfterReg = TokenNumber;

  00227	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0022d	e8 00 00 00 00	 call	 __ftol2_sse
  00232	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 165  : 
; 166  : 						Token = GetToken();

  00238	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 167  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].ContextCompleteQuest = TokenNumber;

  0023d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00243	e8 00 00 00 00	 call	 __ftol2_sse
  00248	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax

; 168  : 
; 169  : 						Token = GetToken();

  0024e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 170  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].ContextQuestClear = TokenNumber;

  00253	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00259	e8 00 00 00 00	 call	 __ftol2_sse
  0025e	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 171  : 
; 172  : 						Token = GetToken();

  00264	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 173  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].RequireClass[0] = TokenNumber;

  00269	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026f	d9 7d 0a	 fnstcw	 WORD PTR tv464[ebp]
  00272	0f b7 45 0a	 movzx	 eax, WORD PTR tv464[ebp]
  00276	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0027b	89 45 f4	 mov	 DWORD PTR tv457[ebp], eax
  0027e	d9 6d f4	 fldcw	 WORD PTR tv457[ebp]
  00281	db 5d f4	 fistp	 DWORD PTR tv450[ebp]
  00284	0f b6 55 f4	 movzx	 edx, BYTE PTR tv450[ebp]
  00288	88 96 8c 00 00
	00		 mov	 BYTE PTR [esi+140], dl
  0028e	d9 6d 0a	 fldcw	 WORD PTR tv464[ebp]

; 174  : 
; 175  : 						Token = GetToken();

  00291	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 176  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].RequireClass[1] = TokenNumber;

  00296	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029c	d9 7d 0a	 fnstcw	 WORD PTR tv443[ebp]
  0029f	0f b7 45 0a	 movzx	 eax, WORD PTR tv443[ebp]
  002a3	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002a8	89 45 f4	 mov	 DWORD PTR tv439[ebp], eax
  002ab	d9 6d f4	 fldcw	 WORD PTR tv439[ebp]
  002ae	db 5d f4	 fistp	 DWORD PTR tv434[ebp]
  002b1	8a 45 f4	 mov	 al, BYTE PTR tv434[ebp]
  002b4	88 86 8d 00 00
	00		 mov	 BYTE PTR [esi+141], al
  002ba	d9 6d 0a	 fldcw	 WORD PTR tv443[ebp]

; 177  : 
; 178  : 						Token = GetToken();

  002bd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 179  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].RequireClass[2] = TokenNumber;

  002c2	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c8	d9 7d 0a	 fnstcw	 WORD PTR tv430[ebp]
  002cb	0f b7 45 0a	 movzx	 eax, WORD PTR tv430[ebp]
  002cf	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002d4	89 45 f4	 mov	 DWORD PTR tv424[ebp], eax
  002d7	d9 6d f4	 fldcw	 WORD PTR tv424[ebp]
  002da	db 5d f4	 fistp	 DWORD PTR tv421[ebp]
  002dd	0f b6 4d f4	 movzx	 ecx, BYTE PTR tv421[ebp]
  002e1	88 8e 8e 00 00
	00		 mov	 BYTE PTR [esi+142], cl
  002e7	d9 6d 0a	 fldcw	 WORD PTR tv430[ebp]

; 180  : 
; 181  : 						Token = GetToken();

  002ea	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 182  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].RequireClass[3] = TokenNumber;

  002ef	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f5	d9 7d 0a	 fnstcw	 WORD PTR tv414[ebp]
  002f8	0f b7 45 0a	 movzx	 eax, WORD PTR tv414[ebp]
  002fc	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00301	89 45 f4	 mov	 DWORD PTR tv389[ebp], eax
  00304	d9 6d f4	 fldcw	 WORD PTR tv389[ebp]
  00307	db 5d f4	 fistp	 DWORD PTR tv377[ebp]
  0030a	0f b6 55 f4	 movzx	 edx, BYTE PTR tv377[ebp]
  0030e	88 96 8f 00 00
	00		 mov	 BYTE PTR [esi+143], dl
  00314	d9 6d 0a	 fldcw	 WORD PTR tv414[ebp]

; 183  : 
; 184  : 						Token = GetToken();

  00317	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 185  : 						this->QuestInfo[iQuestIndex].QuestSubInfo[iSubInfoCount].RequireClass[4] = TokenNumber;

  0031c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00322	d9 7d 0a	 fnstcw	 WORD PTR tv317[ebp]
  00325	0f b7 45 0a	 movzx	 eax, WORD PTR tv317[ebp]
  00329	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0032e	89 45 f4	 mov	 DWORD PTR tv288[ebp], eax
  00331	8b 45 f8	 mov	 eax, DWORD PTR _iSubInfoCount$155242[ebp]
  00334	8d 54 c0 12	 lea	 edx, DWORD PTR [eax+eax*8+18]
  00338	d9 6d f4	 fldcw	 WORD PTR tv288[ebp]
  0033b	8d 04 d3	 lea	 eax, DWORD PTR [ebx+edx*8]
  0033e	db 5d f4	 fistp	 DWORD PTR tv270[ebp]
  00341	0f b6 4d f4	 movzx	 ecx, BYTE PTR tv270[ebp]
  00345	88 0c 38	 mov	 BYTE PTR [eax+edi], cl

; 186  : 
; 187  : 						this->QuestInfo[iQuestIndex].QuestSubInfoCount++;

  00348	8b 45 fc	 mov	 eax, DWORD PTR tv596[ebp]
  0034b	d9 6d 0a	 fldcw	 WORD PTR tv317[ebp]
  0034e	ff 00		 inc	 DWORD PTR [eax]

; 188  : 
; 189  : 					
; 190  : 					}

  00350	e9 8b fd ff ff	 jmp	 $LL11@LoadQuestI
$LN27@LoadQuestI:

; 191  : 					
; 192  : 					LogAdd(LOG_BLACK, "[Quest] (%s) Load : Index %d, SubInfoCount %d",
; 193  : 						this->QuestInfo[iQuestIndex].Name, iQuestIndex,
; 194  : 						this->QuestInfo[iQuestIndex].QuestSubInfoCount );

  00355	8b 4d fc	 mov	 ecx, DWORD PTR tv596[ebp]
  00358	8b 11		 mov	 edx, DWORD PTR [ecx]
  0035a	8b 45 f0	 mov	 eax, DWORD PTR _iQuestIndex$155238[ebp]
  0035d	8b 4d ec	 mov	 ecx, DWORD PTR tv589[ebp]
  00360	52		 push	 edx
  00361	50		 push	 eax
  00362	51		 push	 ecx
  00363	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IPPCPA@?$FLQuest?$FN?5?$CI?$CFs?$CJ?5Load?5?3?5Index?5?$CFd?0?5Su@
  00368	6a 00		 push	 0
  0036a	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0036f	83 c4 14	 add	 esp, 20			; 00000014H

; 195  : 						this->m_QuestCount++;

  00372	ff 47 04	 inc	 DWORD PTR [edi+4]
$LN39@LoadQuestI:

; 84   : 
; 85   : 		if ( Token == 2 )

  00375	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0037a	83 f8 02	 cmp	 eax, 2
  0037d	0f 85 cf fc ff
	ff		 jne	 $LL17@LoadQuestI
$LN38@LoadQuestI:

; 243  : 				}
; 244  : 			}
; 245  : 		}
; 246  : 	}
; 247  : 
; 248  : 	fclose(SMDFile);

  00383	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00389	52		 push	 edx
  0038a	e8 00 00 00 00	 call	 _fclose
  0038f	83 c4 04	 add	 esp, 4

; 249  : 	this->InitQuestItem();

  00392	8b cf		 mov	 ecx, edi
  00394	e8 00 00 00 00	 call	 ?InitQuestItem@CQuestInfo@@QAEXXZ ; CQuestInfo::InitQuestItem
  00399	5b		 pop	 ebx
  0039a	5f		 pop	 edi

; 250  : 	return true;

  0039b	b8 01 00 00 00	 mov	 eax, 1
  003a0	5e		 pop	 esi

; 251  : }

  003a1	8b e5		 mov	 esp, ebp
  003a3	5d		 pop	 ebp
  003a4	c2 04 00	 ret	 4
$LN12@LoadQuestI:

; 196  : 				}
; 197  : 				else if ( Type == 1 )

  003a7	83 f8 01	 cmp	 eax, 1
  003aa	0f 85 2b 01 00
	00		 jne	 $LN6@LoadQuestI

; 198  : 				{
; 199  : 					Token = GetToken();

  003b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 200  : 					int iQuestIndex = TokenNumber;

  003b5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  003bb	e8 00 00 00 00	 call	 __ftol2_sse
  003c0	8b d8		 mov	 ebx, eax
  003c2	69 db 30 04 00
	00		 imul	 ebx, 1072		; 00000430H
  003c8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL5@LoadQuestI:

; 201  : 
; 202  : 					while ( true )
; 203  : 					{
; 204  : 						int iFailInfoCount = this->QuestInfo[iQuestIndex].QuestConditionCount;

  003d0	8b b4 3b 1c 03
	00 00		 mov	 esi, DWORD PTR [ebx+edi+796]
  003d7	89 75 08	 mov	 DWORD PTR _iFailInfoCount$155252[ebp], esi

; 205  : 						Token = GetToken();

  003da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 206  : 
; 207  : 						if ( Token == 0 )

  003df	85 c0		 test	 eax, eax
  003e1	75 3a		 jne	 SHORT $LN2@LoadQuestI

; 208  : 						{
; 209  : 							if ( strcmp("end", TokenString) == 0 )

  003e3	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  003e8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  003ed	8d 49 00	 npad	 3
$LL34@LoadQuestI:
  003f0	8a 10		 mov	 dl, BYTE PTR [eax]
  003f2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  003f4	75 1a		 jne	 SHORT $LN35@LoadQuestI
  003f6	84 d2		 test	 dl, dl
  003f8	74 12		 je	 SHORT $LN36@LoadQuestI
  003fa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  003fd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00400	75 0e		 jne	 SHORT $LN35@LoadQuestI
  00402	83 c0 02	 add	 eax, 2
  00405	83 c1 02	 add	 ecx, 2
  00408	84 d2		 test	 dl, dl
  0040a	75 e4		 jne	 SHORT $LL34@LoadQuestI
$LN36@LoadQuestI:
  0040c	33 c0		 xor	 eax, eax
  0040e	eb 05		 jmp	 SHORT $LN37@LoadQuestI
$LN35@LoadQuestI:
  00410	1b c0		 sbb	 eax, eax
  00412	83 d8 ff	 sbb	 eax, -1
$LN37@LoadQuestI:
  00415	85 c0		 test	 eax, eax
  00417	0f 84 58 ff ff
	ff		 je	 $LN39@LoadQuestI
$LN2@LoadQuestI:

; 210  : 							{
; 211  : 								break;
; 212  : 							}
; 213  : 						}
; 214  : 							this->QuestInfo[iQuestIndex].QuestCondition[iFailInfoCount].Index = TokenNumber;

  0041d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00423	8d 14 f5 00 00
	00 00		 lea	 edx, DWORD PTR [esi*8]
  0042a	2b d6		 sub	 edx, esi
  0042c	8d 34 93	 lea	 esi, DWORD PTR [ebx+edx*4]
  0042f	03 f7		 add	 esi, edi
  00431	e8 00 00 00 00	 call	 __ftol2_sse
  00436	89 86 20 03 00
	00		 mov	 DWORD PTR [esi+800], eax

; 215  : 
; 216  : 							Token = GetToken();

  0043c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 217  : 							this->QuestInfo[iQuestIndex].QuestCondition[iFailInfoCount].NeedQuestIndex = TokenNumber;

  00441	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00447	e8 00 00 00 00	 call	 __ftol2_sse
  0044c	89 86 24 03 00
	00		 mov	 DWORD PTR [esi+804], eax

; 218  : 
; 219  : 							Token = GetToken();

  00452	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 220  : 							this->QuestInfo[iQuestIndex].QuestCondition[iFailInfoCount].MinLevel = TokenNumber;

  00457	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0045d	e8 00 00 00 00	 call	 __ftol2_sse
  00462	89 86 28 03 00
	00		 mov	 DWORD PTR [esi+808], eax

; 221  : 
; 222  : 							Token = GetToken();

  00468	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 223  : 							this->QuestInfo[iQuestIndex].QuestCondition[iFailInfoCount].MaxLevel = TokenNumber;

  0046d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00473	e8 00 00 00 00	 call	 __ftol2_sse
  00478	8b 4d 08	 mov	 ecx, DWORD PTR _iFailInfoCount$155252[ebp]
  0047b	83 c1 1d	 add	 ecx, 29			; 0000001dH
  0047e	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  00485	2b d1		 sub	 edx, ecx
  00487	8d 0c 93	 lea	 ecx, DWORD PTR [ebx+edx*4]
  0048a	89 04 39	 mov	 DWORD PTR [ecx+edi], eax

; 224  : 
; 225  : 							Token = GetToken();

  0048d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 226  : 							this->QuestInfo[iQuestIndex].QuestCondition[iFailInfoCount].ReqStr = TokenNumber;

  00492	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00498	e8 00 00 00 00	 call	 __ftol2_sse
  0049d	89 86 30 03 00
	00		 mov	 DWORD PTR [esi+816], eax

; 227  : 
; 228  : 							Token = GetToken();

  004a3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 229  : 							this->QuestInfo[iQuestIndex].QuestCondition[iFailInfoCount].NeedZen = TokenNumber;

  004a8	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004ae	e8 00 00 00 00	 call	 __ftol2_sse
  004b3	89 86 34 03 00
	00		 mov	 DWORD PTR [esi+820], eax

; 230  : 
; 231  : 							Token = GetToken();

  004b9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 232  : 							this->QuestInfo[iQuestIndex].QuestCondition[iFailInfoCount].StartContext = TokenNumber;

  004be	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  004c4	e8 00 00 00 00	 call	 __ftol2_sse
  004c9	89 86 38 03 00
	00		 mov	 DWORD PTR [esi+824], eax

; 233  : 
; 234  : 							this->QuestInfo[iQuestIndex].QuestConditionCount++;

  004cf	ff 84 3b 1c 03
	00 00		 inc	 DWORD PTR [ebx+edi+796]

; 235  : 						
; 236  : 					}

  004d6	e9 f5 fe ff ff	 jmp	 $LL5@LoadQuestI
$LN6@LoadQuestI:

; 237  : 				}
; 238  : 				else
; 239  : 				{
; 240  : 					MsgBox("Quest Info Read Fail");

  004db	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JAOCNINL@Quest?5Info?5Read?5Fail?$AA@
  004e0	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 241  : 					fclose(SMDFile);

  004e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 _fclose
  004f0	83 c4 08	 add	 esp, 8
  004f3	5b		 pop	 ebx
  004f4	5f		 pop	 edi

; 242  : 					return false;

  004f5	33 c0		 xor	 eax, eax
  004f7	5e		 pop	 esi

; 251  : }

  004f8	8b e5		 mov	 esp, ebp
  004fa	5d		 pop	 ebp
  004fb	c2 04 00	 ret	 4
?LoadQuestInfo@CQuestInfo@@QAEHPAD@Z ENDP		; CQuestInfo::LoadQuestInfo
_TEXT	ENDS
PUBLIC	??_C@_0CC@BPALCPGE@?$FLQuest?$FN?5AcceptQuest?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFs@ ; `string'
PUBLIC	??_C@_0CB@KKBMLGHJ@?$FLQuest?$FN?5ClearQuest?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFs?$CJ@ ; `string'
PUBLIC	?SetQuestState@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@HH@Z ; CQuestInfo::SetQuestState
;	COMDAT ??_C@_0CC@BPALCPGE@?$FLQuest?$FN?5AcceptQuest?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFs@
CONST	SEGMENT
??_C@_0CC@BPALCPGE@?$FLQuest?$FN?5AcceptQuest?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFs@ DB '['
	DB	'Quest] AcceptQuest [%s][%s] (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KKBMLGHJ@?$FLQuest?$FN?5ClearQuest?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0CB@KKBMLGHJ@?$FLQuest?$FN?5ClearQuest?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFs?$CJ@ DB '['
	DB	'Quest] ClearQuest [%s][%s] (%s)', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetQuestState@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_QuestIndex$ = 12					; size = 4
_State$ = 16						; size = 4
?SetQuestState@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@HH@Z PROC ; CQuestInfo::SetQuestState, COMDAT
; _this$ = ecx

; 335  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 336  : 	if ( QuestIndex < 0 || QuestIndex > MAX_QUEST_INFO )

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _QuestIndex$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 ff c8 00 00
	00		 cmp	 edi, 200		; 000000c8H
  00010	0f 87 dd 00 00
	00		 ja	 $LN8@SetQuestSt

; 339  : 	}
; 340  : 
; 341  : 	int QuestState = this->GetQuestState(lpObj, QuestIndex);

  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001a	57		 push	 edi
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ?GetQuestState@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::GetQuestState

; 342  : 
; 343  : 	if ( QuestState == 3 || QuestState == 0)

  00021	83 f8 03	 cmp	 eax, 3
  00024	74 51		 je	 SHORT $LN6@SetQuestSt
  00026	85 c0		 test	 eax, eax
  00028	74 4d		 je	 SHORT $LN6@SetQuestSt

; 356  : 	}
; 357  : 	else if ( QuestState == 1 )

  0002a	83 f8 01	 cmp	 eax, 1
  0002d	75 3f		 jne	 SHORT $LN3@SetQuestSt

; 358  : 	{
; 359  : 		BYTE btCond = this->QuestClearConditionCheck(lpObj, QuestIndex);

  0002f	57		 push	 edi
  00030	56		 push	 esi
  00031	8b cb		 mov	 ecx, ebx
  00033	e8 00 00 00 00	 call	 ?QuestClearConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::QuestClearConditionCheck

; 360  : 
; 361  : 		if ( btCond != 0 )

  00038	84 c0		 test	 al, al

; 362  : 		{
; 363  : 			return btCond;

  0003a	75 34		 jne	 SHORT $LN12@SetQuestSt

; 364  : 		}
; 365  : 
; 366  : 		this->QuestClear(lpObj, QuestIndex);

  0003c	57		 push	 edi
  0003d	56		 push	 esi
  0003e	8b cb		 mov	 ecx, ebx
  00040	e8 00 00 00 00	 call	 ?QuestClear@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::QuestClear

; 367  : 		State = 2;
; 368  : 		LogAdd(LOG_BLACK, "[Quest] ClearQuest [%s][%s] (%s)", lpObj->AccountID, lpObj->Name,
; 369  : 			this->GetQuestInfo(QuestIndex)->Name);

  00045	57		 push	 edi
  00046	8b cb		 mov	 ecx, ebx
  00048	c7 45 10 02 00
	00 00		 mov	 DWORD PTR _State$[ebp], 2
  0004f	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00054	50		 push	 eax
  00055	8d 46 6f	 lea	 eax, DWORD PTR [esi+111]
  00058	50		 push	 eax
  00059	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0005c	51		 push	 ecx
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KKBMLGHJ@?$FLQuest?$FN?5ClearQuest?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFs?$CJ@
  00062	6a 00		 push	 0
  00064	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 370  : 	}
; 371  : 	else

  00069	8a 5d 10	 mov	 bl, BYTE PTR _State$[ebp]
  0006c	eb 41		 jmp	 SHORT $LN14@SetQuestSt
$LN3@SetQuestSt:

; 372  : 	{
; 373  : 		return -1;

  0006e	0c ff		 or	 al, 255			; 000000ffH
$LN12@SetQuestSt:
  00070	5e		 pop	 esi
  00071	5f		 pop	 edi
  00072	5b		 pop	 ebx

; 381  : }

  00073	5d		 pop	 ebp
  00074	c2 0c 00	 ret	 12			; 0000000cH
$LN6@SetQuestSt:

; 344  : 	{
; 345  : 		BYTE btCond = this->QuestRunConditionCheck(lpObj, QuestIndex);

  00077	57		 push	 edi
  00078	56		 push	 esi
  00079	8b cb		 mov	 ecx, ebx
  0007b	e8 00 00 00 00	 call	 ?QuestRunConditionCheck@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::QuestRunConditionCheck

; 346  : 
; 347  : 		if ( btCond != 0 )

  00080	84 c0		 test	 al, al

; 348  : 		{
; 349  : 			return btCond;

  00082	75 ec		 jne	 SHORT $LN12@SetQuestSt

; 350  : 		}
; 351  : 
; 352  : 		this->QuestAccept(lpObj, QuestIndex);

  00084	57		 push	 edi
  00085	56		 push	 esi
  00086	8b cb		 mov	 ecx, ebx
  00088	e8 00 00 00 00	 call	 ?QuestAccept@CQuestInfo@@QAEHPAUOBJECTSTRUCT@@H@Z ; CQuestInfo::QuestAccept

; 353  : 		LogAdd(LOG_BLACK, "[Quest] AcceptQuest [%s][%s] (%s)", lpObj->AccountID, lpObj->Name,
; 354  : 			this->GetQuestInfo(QuestIndex)->Name);

  0008d	57		 push	 edi
  0008e	8b cb		 mov	 ecx, ebx
  00090	e8 00 00 00 00	 call	 ?GetQuestInfo@CQuestInfo@@QAEPAUQUEST_INFO@@H@Z ; CQuestInfo::GetQuestInfo
  00095	50		 push	 eax
  00096	8d 56 6f	 lea	 edx, DWORD PTR [esi+111]
  00099	52		 push	 edx
  0009a	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BPALCPGE@?$FLQuest?$FN?5AcceptQuest?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?$CI?$CFs@
  000a3	6a 00		 push	 0
  000a5	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 355  : 		State = 1;

  000aa	bb 01 00 00 00	 mov	 ebx, 1
$LN14@SetQuestSt:

; 374  : 	}
; 375  : 
; 376  : 	int index = (QuestIndex / 4);

  000af	8b c7		 mov	 eax, edi
  000b1	99		 cdq
  000b2	83 e2 03	 and	 edx, 3
  000b5	03 c2		 add	 eax, edx

; 377  : 	int shift =  (QuestIndex % 4) *2;

  000b7	8b cf		 mov	 ecx, edi
  000b9	83 c4 14	 add	 esp, 20			; 00000014H
  000bc	c1 f8 02	 sar	 eax, 2
  000bf	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000c5	79 05		 jns	 SHORT $LN13@SetQuestSt
  000c7	49		 dec	 ecx
  000c8	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000cb	41		 inc	 ecx
$LN13@SetQuestSt:

; 378  : 	lpObj->m_Quest[index] &= QuestBitMask[shift];

  000cc	8a 94 09 00 00
	00 00		 mov	 dl, BYTE PTR ?QuestBitMask@@3PAEA[ecx+ecx]
  000d3	22 94 30 c0 0e
	00 00		 and	 dl, BYTE PTR [eax+esi+3776]
  000da	03 c9		 add	 ecx, ecx

; 379  : 	lpObj->m_Quest[index] |= (State&3) << shift;

  000dc	80 e3 03	 and	 bl, 3
  000df	d2 e3		 shl	 bl, cl
  000e1	0a d3		 or	 dl, bl
  000e3	88 94 30 c0 0e
	00 00		 mov	 BYTE PTR [eax+esi+3776], dl
  000ea	5e		 pop	 esi
  000eb	5f		 pop	 edi

; 380  : 	return 0;

  000ec	32 c0		 xor	 al, al
  000ee	5b		 pop	 ebx

; 381  : }

  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH
$LN8@SetQuestSt:
  000f3	5f		 pop	 edi

; 337  : 	{
; 338  : 		return -1;

  000f4	0c ff		 or	 al, 255			; 000000ffH
  000f6	5b		 pop	 ebx

; 381  : }

  000f7	5d		 pop	 ebp
  000f8	c2 0c 00	 ret	 12			; 0000000cH
?SetQuestState@CQuestInfo@@QAEEPAUOBJECTSTRUCT@@HH@Z ENDP ; CQuestInfo::SetQuestState
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_QuestInfo@@YAXXZ
text$yc	SEGMENT
??__Eg_QuestInfo@@YAXXZ PROC				; `dynamic initializer for 'g_QuestInfo'', COMDAT

; 22   : CQuestInfo g_QuestInfo;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_QuestInfo@@3VCQuestInfo@@A ; g_QuestInfo
  00005	e8 00 00 00 00	 call	 ??0CQuestInfo@@QAE@XZ	; CQuestInfo::CQuestInfo
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_QuestInfo@@YAXXZ ; `dynamic atexit destructor for 'g_QuestInfo''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_QuestInfo@@YAXXZ ENDP				; `dynamic initializer for 'g_QuestInfo''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_QuestInfo@@YAXXZ
text$yd	SEGMENT
??__Fg_QuestInfo@@YAXXZ PROC				; `dynamic atexit destructor for 'g_QuestInfo'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_QuestInfo@@3VCQuestInfo@@A ; g_QuestInfo
  00005	e9 00 00 00 00	 jmp	 ??1CQuestInfo@@UAE@XZ	; CQuestInfo::~CQuestInfo
??__Fg_QuestInfo@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_QuestInfo''
text$yd	ENDS
PUBLIC	?g_QuestInfo@@3VCQuestInfo@@A			; g_QuestInfo
_BSS	SEGMENT
?g_QuestInfo@@3VCQuestInfo@@A DB 034588H DUP (?)	; g_QuestInfo
_BSS	ENDS
CRT$XCU	SEGMENT
_g_QuestInfo$initializer$ DD FLAT:??__Eg_QuestInfo@@YAXXZ
CRT$XCU	ENDS
END
