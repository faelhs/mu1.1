; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\SkillHitBox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CSkillHitBox@@6B@				; CSkillHitBox::`vftable'
PUBLIC	??0CSkillHitBox@@QAE@XZ				; CSkillHitBox::CSkillHitBox
PUBLIC	??_R4CSkillHitBox@@6B@				; CSkillHitBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkillHitBox@@@8			; CSkillHitBox `RTTI Type Descriptor'
PUBLIC	??_R3CSkillHitBox@@8				; CSkillHitBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkillHitBox@@8				; CSkillHitBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkillHitBox@@8			; CSkillHitBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECSkillHitBox@@UAEPAXI@Z:PROC		; CSkillHitBox::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CSkillHitBox@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\skillhitbox.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkillHitBox@@8 DD FLAT:??_R0?AVCSkillHitBox@@@8 ; CSkillHitBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkillHitBox@@8
rdata$r	SEGMENT
??_R2CSkillHitBox@@8 DD FLAT:??_R1A@?0A@EA@CSkillHitBox@@8 ; CSkillHitBox::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSkillHitBox@@8
rdata$r	SEGMENT
??_R3CSkillHitBox@@8 DD 00H				; CSkillHitBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkillHitBox@@@8
_DATA	SEGMENT
??_R0?AVCSkillHitBox@@@8 DD FLAT:??_7type_info@@6B@	; CSkillHitBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkillHitBox@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSkillHitBox@@6B@
rdata$r	SEGMENT
??_R4CSkillHitBox@@6B@ DD 00H				; CSkillHitBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkillHitBox@@@8
	DD	FLAT:??_R3CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_7CSkillHitBox@@6B@
CONST	SEGMENT
??_7CSkillHitBox@@6B@ DD FLAT:??_R4CSkillHitBox@@6B@	; CSkillHitBox::`vftable'
	DD	FLAT:??_ECSkillHitBox@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CSkillHitBox@@QAE@XZ
_TEXT	SEGMENT
??0CSkillHitBox@@QAE@XZ PROC				; CSkillHitBox::CSkillHitBox, COMDAT
; _this$ = ecx

; 16   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSkillHitBox@@6B@

; 17   : 	return;
; 18   : }

  00008	c3		 ret	 0
??0CSkillHitBox@@QAE@XZ ENDP				; CSkillHitBox::CSkillHitBox
_TEXT	ENDS
PUBLIC	??1CSkillHitBox@@UAE@XZ				; CSkillHitBox::~CSkillHitBox
; Function compile flags: /Ogtp
;	COMDAT ??1CSkillHitBox@@UAE@XZ
_TEXT	SEGMENT
??1CSkillHitBox@@UAE@XZ PROC				; CSkillHitBox::~CSkillHitBox, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSkillHitBox@@6B@

; 23   : 	return;
; 24   : }

  00006	c3		 ret	 0
??1CSkillHitBox@@UAE@XZ ENDP				; CSkillHitBox::~CSkillHitBox
_TEXT	ENDS
PUBLIC	?Init@CSkillHitBox@@QAEXXZ			; CSkillHitBox::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CSkillHitBox@@QAEXXZ
_TEXT	SEGMENT
?Init@CSkillHitBox@@QAEXXZ PROC				; CSkillHitBox::Init, COMDAT
; _this$ = ecx

; 28   : 	memset(this->m_Table, 0, sizeof(this->m_Table));

  00000	68 04 3e 00 00	 push	 15876			; 00003e04H
  00005	83 c1 04	 add	 ecx, 4
  00008	6a 00		 push	 0
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _memset
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 29   : }

  00013	c3		 ret	 0
?Init@CSkillHitBox@@QAEXXZ ENDP				; CSkillHitBox::Init
_TEXT	ENDS
PUBLIC	?Check@CSkillHitBox@@QAEHHHH@Z			; CSkillHitBox::Check
; Function compile flags: /Ogtp
;	COMDAT ?Check@CSkillHitBox@@QAEHHHH@Z
_TEXT	SEGMENT
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?Check@CSkillHitBox@@QAEHHHH@Z PROC			; CSkillHitBox::Check, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 35   : 	if ( x <0 || x >= 21 || y < 0 || y >= 21 || dir < 0 || dir >= 36 )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _x$[ebp]
  00007	83 fe 14	 cmp	 esi, 20			; 00000014H
  0000a	77 24		 ja	 SHORT $LN1@Check
  0000c	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000f	83 fa 14	 cmp	 edx, 20			; 00000014H
  00012	77 1c		 ja	 SHORT $LN1@Check
  00014	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  00017	83 f8 23	 cmp	 eax, 35			; 00000023H
  0001a	77 14		 ja	 SHORT $LN1@Check

; 38   : 	}
; 39   : 
; 40   : 	return this->m_Table[dir][y * 21 + x];

  0001c	6b c0 15	 imul	 eax, 21			; 00000015H
  0001f	03 c2		 add	 eax, edx
  00021	6b c0 15	 imul	 eax, 21			; 00000015H
  00024	03 c6		 add	 eax, esi
  00026	0f b6 44 08 04	 movzx	 eax, BYTE PTR [eax+ecx+4]
  0002b	5e		 pop	 esi

; 41   : }

  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN1@Check:

; 36   : 	{
; 37   : 		return 0;

  00030	33 c0		 xor	 eax, eax
  00032	5e		 pop	 esi

; 41   : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?Check@CSkillHitBox@@QAEHHHH@Z ENDP			; CSkillHitBox::Check
_TEXT	ENDS
PUBLIC	?HitCheck@CSkillHitBox@@QAEHHHHHH@Z		; CSkillHitBox::HitCheck
; Function compile flags: /Ogtp
;	COMDAT ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z
_TEXT	SEGMENT
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_tx$ = 20						; size = 4
_ty$ = 24						; size = 4
?HitCheck@CSkillHitBox@@QAEHHHHHH@Z PROC		; CSkillHitBox::HitCheck, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 	dir /= 10;

  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	f7 6d 08	 imul	 DWORD PTR _dir$[ebp]
  0000b	c1 fa 02	 sar	 edx, 2
  0000e	56		 push	 esi
  0000f	8b f2		 mov	 esi, edx
  00011	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00014	03 f2		 add	 esi, edx

; 49   : 
; 50   : 	if ( dir < 0 || dir >= 36 )

  00016	83 fe 23	 cmp	 esi, 35			; 00000023H
  00019	77 51		 ja	 SHORT $LN3@HitCheck

; 53   : 	}
; 54   : 
; 55   : 	int targetx = tx - x;
; 56   : 	int targety = ty - y;
; 57   : 
; 58   : 	targetx += 10;
; 59   : 	targety += 10;

  0001b	53		 push	 ebx
  0001c	8b 5d 18	 mov	 ebx, DWORD PTR _ty$[ebp]
  0001f	2b 5d 10	 sub	 ebx, DWORD PTR _y$[ebp]
  00022	57		 push	 edi
  00023	8b 7d 14	 mov	 edi, DWORD PTR _tx$[ebp]
  00026	2b 7d 0c	 sub	 edi, DWORD PTR _x$[ebp]
  00029	83 c3 0a	 add	 ebx, 10			; 0000000aH
  0002c	83 c7 0a	 add	 edi, 10			; 0000000aH

; 60   : 
; 61   : 	if ( targetx <0 || abs(targetx) >= 21 || targety <0 || abs(targety) >= 21 )

  0002f	78 32		 js	 SHORT $LN1@HitCheck
  00031	8b c7		 mov	 eax, edi
  00033	99		 cdq
  00034	33 c2		 xor	 eax, edx
  00036	2b c2		 sub	 eax, edx
  00038	83 f8 15	 cmp	 eax, 21			; 00000015H
  0003b	7d 26		 jge	 SHORT $LN1@HitCheck
  0003d	85 db		 test	 ebx, ebx
  0003f	78 22		 js	 SHORT $LN1@HitCheck
  00041	8b c3		 mov	 eax, ebx
  00043	99		 cdq
  00044	33 c2		 xor	 eax, edx
  00046	2b c2		 sub	 eax, edx
  00048	83 f8 15	 cmp	 eax, 21			; 00000015H
  0004b	7d 16		 jge	 SHORT $LN1@HitCheck

; 64   : 	}
; 65   : 
; 66   : 	return this->m_Table[dir][targety * 21 + targetx];

  0004d	6b f6 15	 imul	 esi, 21			; 00000015H
  00050	03 f3		 add	 esi, ebx
  00052	6b f6 15	 imul	 esi, 21			; 00000015H
  00055	03 f7		 add	 esi, edi
  00057	0f b6 44 0e 04	 movzx	 eax, BYTE PTR [esi+ecx+4]
  0005c	5f		 pop	 edi
  0005d	5b		 pop	 ebx
  0005e	5e		 pop	 esi

; 67   : }

  0005f	5d		 pop	 ebp
  00060	c2 14 00	 ret	 20			; 00000014H
$LN1@HitCheck:
  00063	5f		 pop	 edi
  00064	5b		 pop	 ebx

; 62   : 	{
; 63   : 		return 0;

  00065	33 c0		 xor	 eax, eax
  00067	5e		 pop	 esi

; 67   : }

  00068	5d		 pop	 ebp
  00069	c2 14 00	 ret	 20			; 00000014H
$LN3@HitCheck:

; 51   : 	{
; 52   : 		return 0;

  0006c	33 c0		 xor	 eax, eax
  0006e	5e		 pop	 esi

; 67   : }

  0006f	5d		 pop	 ebp
  00070	c2 14 00	 ret	 20			; 00000014H
?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ENDP		; CSkillHitBox::HitCheck
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Load@CSkillHitBox@@QAEHPAD@Z			; CSkillHitBox::Load
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp___lclose@4:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__OpenFile@12:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Load@CSkillHitBox@@QAEHPAD@Z
_TEXT	SEGMENT
_readfilesize$ = -144					; size = 4
_ofst$ = -140						; size = 136
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Load@CSkillHitBox@@QAEHPAD@Z PROC			; CSkillHitBox::Load, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 71   : 	OFSTRUCT ofst;
; 72   : 	HFILE hfile;
; 73   : 	int filesize;
; 74   : 	unsigned long readfilesize;
; 75   : 
; 76   : 	this->Init();

  0001a	e8 00 00 00 00	 call	 ?Init@CSkillHitBox@@QAEXXZ ; CSkillHitBox::Init

; 77   : 	
; 78   : 	hfile = OpenFile( filename, &ofst, OF_READ|OF_SHARE_COMPAT);

  0001f	6a 00		 push	 0
  00021	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ofst$[ebp]
  00027	50		 push	 eax
  00028	56		 push	 esi
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenFile@12
  0002f	8b f0		 mov	 esi, eax

; 79   : 
; 80   : 	if ( hfile == NULL )

  00031	85 f6		 test	 esi, esi

; 81   : 	{
; 82   : 		return false;

  00033	74 17		 je	 SHORT $LN7@Load

; 83   : 	}
; 84   : 
; 85   : 	filesize = GetFileSize((HANDLE) hfile, NULL );

  00035	6a 00		 push	 0
  00037	56		 push	 esi
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8

; 86   : 
; 87   : 	if ( filesize != sizeof(this->m_Table) )

  0003e	3d 04 3e 00 00	 cmp	 eax, 15876		; 00003e04H
  00043	74 1b		 je	 SHORT $LN3@Load
$LN8@Load:

; 88   : 	{
; 89   : 		_lclose(hfile);

  00045	56		 push	 esi
$LN9@Load:
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4
$LN7@Load:
  0004c	5f		 pop	 edi

; 90   : 		return false;

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 106  : 	return true;
; 107  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN3@Load:

; 91   : 	}
; 92   : 
; 93   : 	if (ReadFile( (HANDLE) hfile, this->m_Table, filesize, &readfilesize, NULL) == 0 )

  00060	6a 00		 push	 0
  00062	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _readfilesize$[ebp]
  00068	51		 push	 ecx
  00069	68 04 3e 00 00	 push	 15876			; 00003e04H
  0006e	83 c7 04	 add	 edi, 4
  00071	57		 push	 edi
  00072	56		 push	 esi
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00079	85 c0		 test	 eax, eax

; 94   : 	{
; 95   : 		_lclose(hfile);
; 96   : 		return false;

  0007b	74 c8		 je	 SHORT $LN8@Load

; 97   : 	}
; 98   : 
; 99   : 	if ( readfilesize != filesize )

  0007d	81 bd 70 ff ff
	ff 04 3e 00 00	 cmp	 DWORD PTR _readfilesize$[ebp], 15876 ; 00003e04H

; 100  : 	{
; 101  : 		_lclose( hfile);

  00087	56		 push	 esi

; 102  : 		return false;

  00088	75 bc		 jne	 SHORT $LN9@Load

; 103  : 	}
; 104  : 
; 105  : 	_lclose( hfile);

  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 106  : 	return true;
; 107  : }

  00090	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00093	5f		 pop	 edi
  00094	33 cd		 xor	 ecx, ebp
  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	5e		 pop	 esi
  0009c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
?Load@CSkillHitBox@@QAEHPAD@Z ENDP			; CSkillHitBox::Load
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCSkillHitBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSkillHitBox@@UAEPAXI@Z PROC			; CSkillHitBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCSkillHitBox@@UAEPAXI@Z ENDP			; CSkillHitBox::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__ESkillSpearHitBox@@YAXXZ
text$yc	SEGMENT
??__ESkillSpearHitBox@@YAXXZ PROC			; `dynamic initializer for 'SkillSpearHitBox'', COMDAT

; 12   : CSkillHitBox SkillSpearHitBox;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  00005	e8 00 00 00 00	 call	 ??0CSkillHitBox@@QAE@XZ	; CSkillHitBox::CSkillHitBox
  0000a	68 00 00 00 00	 push	 OFFSET ??__FSkillSpearHitBox@@YAXXZ ; `dynamic atexit destructor for 'SkillSpearHitBox''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__ESkillSpearHitBox@@YAXXZ ENDP			; `dynamic initializer for 'SkillSpearHitBox''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__ESkillElectricSparkHitBox@@YAXXZ
text$yc	SEGMENT
??__ESkillElectricSparkHitBox@@YAXXZ PROC		; `dynamic initializer for 'SkillElectricSparkHitBox'', COMDAT

; 13   : CSkillHitBox SkillElectricSparkHitBox;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  00005	e8 00 00 00 00	 call	 ??0CSkillHitBox@@QAE@XZ	; CSkillHitBox::CSkillHitBox
  0000a	68 00 00 00 00	 push	 OFFSET ??__FSkillElectricSparkHitBox@@YAXXZ ; `dynamic atexit destructor for 'SkillElectricSparkHitBox''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__ESkillElectricSparkHitBox@@YAXXZ ENDP		; `dynamic initializer for 'SkillElectricSparkHitBox''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FSkillSpearHitBox@@YAXXZ
text$yd	SEGMENT
??__FSkillSpearHitBox@@YAXXZ PROC			; `dynamic atexit destructor for 'SkillSpearHitBox'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  00005	e9 00 00 00 00	 jmp	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
??__FSkillSpearHitBox@@YAXXZ ENDP			; `dynamic atexit destructor for 'SkillSpearHitBox''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FSkillElectricSparkHitBox@@YAXXZ
text$yd	SEGMENT
??__FSkillElectricSparkHitBox@@YAXXZ PROC		; `dynamic atexit destructor for 'SkillElectricSparkHitBox'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  00005	e9 00 00 00 00	 jmp	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
??__FSkillElectricSparkHitBox@@YAXXZ ENDP		; `dynamic atexit destructor for 'SkillElectricSparkHitBox''
text$yd	ENDS
PUBLIC	?SkillElectricSparkHitBox@@3VCSkillHitBox@@A	; SkillElectricSparkHitBox
PUBLIC	?SkillSpearHitBox@@3VCSkillHitBox@@A		; SkillSpearHitBox
_BSS	SEGMENT
?SkillElectricSparkHitBox@@3VCSkillHitBox@@A DB 03e08H DUP (?) ; SkillElectricSparkHitBox
?SkillSpearHitBox@@3VCSkillHitBox@@A DB 03e08H DUP (?)	; SkillSpearHitBox
_BSS	ENDS
CRT$XCU	SEGMENT
_SkillSpearHitBox$initializer$ DD FLAT:??__ESkillSpearHitBox@@YAXXZ
_SkillElectricSparkHitBox$initializer$ DD FLAT:??__ESkillElectricSparkHitBox@@YAXXZ
CRT$XCU	ENDS
END
