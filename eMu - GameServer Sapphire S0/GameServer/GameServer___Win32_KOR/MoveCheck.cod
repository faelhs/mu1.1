; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\MoveCheck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CMoveCheck@@6B@				; CMoveCheck::`vftable'
PUBLIC	??0CMoveCheck@@QAE@XZ				; CMoveCheck::CMoveCheck
PUBLIC	??_R4CMoveCheck@@6B@				; CMoveCheck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMoveCheck@@@8				; CMoveCheck `RTTI Type Descriptor'
PUBLIC	??_R3CMoveCheck@@8				; CMoveCheck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMoveCheck@@8				; CMoveCheck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMoveCheck@@8			; CMoveCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMoveCheck@@UAEPAXI@Z:PROC			; CMoveCheck::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMoveCheck@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\movecheck.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMoveCheck@@8 DD FLAT:??_R0?AVCMoveCheck@@@8 ; CMoveCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_R2CMoveCheck@@8
rdata$r	SEGMENT
??_R2CMoveCheck@@8 DD FLAT:??_R1A@?0A@EA@CMoveCheck@@8	; CMoveCheck::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMoveCheck@@8
rdata$r	SEGMENT
??_R3CMoveCheck@@8 DD 00H				; CMoveCheck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMoveCheck@@@8
_DATA	SEGMENT
??_R0?AVCMoveCheck@@@8 DD FLAT:??_7type_info@@6B@	; CMoveCheck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMoveCheck@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMoveCheck@@6B@
rdata$r	SEGMENT
??_R4CMoveCheck@@6B@ DD 00H				; CMoveCheck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMoveCheck@@@8
	DD	FLAT:??_R3CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_7CMoveCheck@@6B@
CONST	SEGMENT
??_7CMoveCheck@@6B@ DD FLAT:??_R4CMoveCheck@@6B@	; CMoveCheck::`vftable'
	DD	FLAT:??_ECMoveCheck@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMoveCheck@@QAE@XZ
_TEXT	SEGMENT
??0CMoveCheck@@QAE@XZ PROC				; CMoveCheck::CMoveCheck, COMDAT
; _this$ = ecx

; 10   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMoveCheck@@6B@

; 11   : 	return;
; 12   : }

  00008	c3		 ret	 0
??0CMoveCheck@@QAE@XZ ENDP				; CMoveCheck::CMoveCheck
_TEXT	ENDS
PUBLIC	??1CMoveCheck@@UAE@XZ				; CMoveCheck::~CMoveCheck
; Function compile flags: /Ogtp
;	COMDAT ??1CMoveCheck@@UAE@XZ
_TEXT	SEGMENT
??1CMoveCheck@@UAE@XZ PROC				; CMoveCheck::~CMoveCheck, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMoveCheck@@6B@

; 16   : 	return;
; 17   : }

  00006	c3		 ret	 0
??1CMoveCheck@@UAE@XZ ENDP				; CMoveCheck::~CMoveCheck
_TEXT	ENDS
PUBLIC	?Init@CMoveCheck@@QAEXXZ			; CMoveCheck::Init
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CMoveCheck@@QAEXXZ
_TEXT	SEGMENT
?Init@CMoveCheck@@QAEXXZ PROC				; CMoveCheck::Init, COMDAT
; _this$ = ecx

; 20   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 21   : 	this->m_Time=GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 22   : 
; 23   : 	for (int n=0;n<5;n++)
; 24   : 	{
; 25   : 		this->m_PosX[n]=n;

  0000c	b9 01 00 00 00	 mov	 ecx, 1
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 26   : 		this->m_PosY[n]=n;

  00014	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  00017	b9 02 00 00 00	 mov	 ecx, 2
  0001c	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0001f	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  00022	b9 03 00 00 00	 mov	 ecx, 3
  00027	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0002a	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
  0002d	33 c0		 xor	 eax, eax
  0002f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00032	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00035	b9 04 00 00 00	 mov	 ecx, 4
  0003a	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
  0003d	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx

; 27   : 	}
; 28   : 
; 29   : 	this->m_PosCount=0;

  00040	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 30   : 	this->m_TmpPosX=0;

  00043	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 31   : 	this->m_TmpPosY=0;

  00046	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00049	5e		 pop	 esi

; 32   : }

  0004a	c3		 ret	 0
?Init@CMoveCheck@@QAEXXZ ENDP				; CMoveCheck::Init
_TEXT	ENDS
PUBLIC	?Insert@CMoveCheck@@QAEHHH@Z			; CMoveCheck::Insert
; Function compile flags: /Ogtp
;	COMDAT ?Insert@CMoveCheck@@QAEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Insert@CMoveCheck@@QAEHHH@Z PROC			; CMoveCheck::Insert, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   : 	if ( (this->m_TmpPosX != x) || (this->m_TmpPosY != y) )

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	39 46 34	 cmp	 DWORD PTR [esi+52], eax
  0000d	75 50		 jne	 SHORT $LN3@Insert
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _y$[ebp]
  00012	39 7e 38	 cmp	 DWORD PTR [esi+56], edi
  00015	75 48		 jne	 SHORT $LN3@Insert

; 41   : 	}
; 42   : 	
; 43   : 	this->m_TmpPosX=x;
; 44   : 	this->m_TmpPosX=y;	// #error Change m_TmpPosX to m_TmpPosY
; 45   : 
; 46   : 	if ( (GetTickCount() - this->m_Time) < 1000)

  00017	53		 push	 ebx
  00018	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  0001e	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  00021	ff d3		 call	 ebx
  00023	2b 46 04	 sub	 eax, DWORD PTR [esi+4]
  00026	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0002b	73 05		 jae	 SHORT $LN2@Insert

; 47   : 	{
; 48   : 		this->m_Time=GetTickCount();

  0002d	ff d3		 call	 ebx
  0002f	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN2@Insert:

; 49   : 	}
; 50   : 
; 51   : 	this->m_PosX[this->m_PosCount]=x;

  00032	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00035	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00038	89 54 8e 08	 mov	 DWORD PTR [esi+ecx*4+8], edx

; 52   : 	this->m_PosY[this->m_PosCount]=y;

  0003c	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0003f	89 7c 86 1c	 mov	 DWORD PTR [esi+eax*4+28], edi

; 53   : 	this->m_PosCount++;

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	01 46 30	 add	 DWORD PTR [esi+48], eax

; 54   : 
; 55   : 	if (this->m_PosCount > 4)

  0004b	83 7e 30 04	 cmp	 DWORD PTR [esi+48], 4
  0004f	5b		 pop	 ebx
  00050	7e 19		 jle	 SHORT $LN5@Insert

; 38   : 	{
; 39   : 		this->m_PosCount =0;

  00052	5f		 pop	 edi
  00053	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0005a	5e		 pop	 esi

; 56   : 	{
; 57   : 		this->m_PosCount = 0;
; 58   : 	}
; 59   : 	return 1;
; 60   : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN3@Insert:

; 40   : 		return 1;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN5@Insert:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi

; 56   : 	{
; 57   : 		this->m_PosCount = 0;
; 58   : 	}
; 59   : 	return 1;
; 60   : }

  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?Insert@CMoveCheck@@QAEHHH@Z ENDP			; CMoveCheck::Insert
_TEXT	ENDS
PUBLIC	?Check@CMoveCheck@@QAEHXZ			; CMoveCheck::Check
; Function compile flags: /Ogtp
;	COMDAT ?Check@CMoveCheck@@QAEHXZ
_TEXT	SEGMENT
?Check@CMoveCheck@@QAEHXZ PROC				; CMoveCheck::Check, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 64   : 	int x;
; 65   : 	int y;
; 66   : 
; 67   : 	for (y=0;y<5;y++)

  00007	33 db		 xor	 ebx, ebx
  00009	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  0000c	8d 64 24 00	 npad	 4
$LL28@Check:

; 68   : 	{
; 69   : 		for (x=0;x<5;x++)

  00010	8b 3e		 mov	 edi, DWORD PTR [esi]
  00012	33 c0		 xor	 eax, eax
  00014	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
$LL11@Check:

; 70   : 		{
; 71   : 			if ( this->m_PosX[y] != this->m_PosX[x] )

  00017	3b 3a		 cmp	 edi, DWORD PTR [edx]
  00019	75 47		 jne	 SHORT $LN21@Check

; 68   : 	{
; 69   : 		for (x=0;x<5;x++)

  0001b	40		 inc	 eax
  0001c	83 c2 04	 add	 edx, 4
  0001f	83 f8 05	 cmp	 eax, 5
  00022	7c f3		 jl	 SHORT $LL11@Check

; 64   : 	int x;
; 65   : 	int y;
; 66   : 
; 67   : 	for (y=0;y<5;y++)

  00024	43		 inc	 ebx
  00025	83 c6 04	 add	 esi, 4
  00028	83 fb 05	 cmp	 ebx, 5
  0002b	7c e3		 jl	 SHORT $LL28@Check

; 74   : 			}
; 75   : 		}
; 76   : 	}
; 77   : 
; 78   : 	for (y=0;y<5;y++)

  0002d	8b d9		 mov	 ebx, ecx
  0002f	33 ff		 xor	 edi, edi
  00031	8d 53 1c	 lea	 edx, DWORD PTR [ebx+28]
$LL27@Check:

; 79   : 	{
; 80   : 		for (x=0;x<5;x++)

  00034	8b 32		 mov	 esi, DWORD PTR [edx]
  00036	33 c0		 xor	 eax, eax
  00038	8d 4b 1c	 lea	 ecx, DWORD PTR [ebx+28]
  0003b	eb 03 8d 49 00	 npad	 5
$LL4@Check:

; 81   : 		{
; 82   : 			if ( this->m_PosY[y] != this->m_PosY[x] )

  00040	3b 31		 cmp	 esi, DWORD PTR [ecx]
  00042	75 1e		 jne	 SHORT $LN21@Check

; 79   : 	{
; 80   : 		for (x=0;x<5;x++)

  00044	40		 inc	 eax
  00045	83 c1 04	 add	 ecx, 4
  00048	83 f8 05	 cmp	 eax, 5
  0004b	7c f3		 jl	 SHORT $LL4@Check

; 74   : 			}
; 75   : 		}
; 76   : 	}
; 77   : 
; 78   : 	for (y=0;y<5;y++)

  0004d	47		 inc	 edi
  0004e	83 c2 04	 add	 edx, 4
  00051	83 ff 05	 cmp	 edi, 5
  00054	7c de		 jl	 SHORT $LL27@Check

; 83   : 			{
; 84   : 				return 0;
; 85   : 			}
; 86   : 		}
; 87   : 	}
; 88   : 	return 1;

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	5b		 pop	 ebx

; 89   : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN21@Check:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 72   : 			{
; 73   : 				return 0;

  00064	33 c0		 xor	 eax, eax
  00066	5b		 pop	 ebx

; 89   : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?Check@CMoveCheck@@QAEHXZ ENDP				; CMoveCheck::Check
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMoveCheck@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMoveCheck@@UAEPAXI@Z PROC				; CMoveCheck::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMoveCheck@@UAE@XZ	; CMoveCheck::~CMoveCheck
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMoveCheck@@UAEPAXI@Z ENDP				; CMoveCheck::`scalar deleting destructor'
_TEXT	ENDS
END
