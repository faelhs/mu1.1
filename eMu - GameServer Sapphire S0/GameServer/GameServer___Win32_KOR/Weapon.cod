; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\Weapon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_WEAPON_CS_ATTACKER DB 03eH
	DB	067H
	DB	048H
	DB	070H
	DB	058H
	DB	068H
	DB	07cH
	DB	06fH
	DB	074H
	DB	069H
	DB	07cH
	DB	070H
	DB	049H
	DB	056H
	DB	069H
	DB	067H
_WEAPON_CS_DEFENSER DB 03dH
	DB	058H
	DB	05dH
	DB	06cH
	DB	05cH
	DB	059H
	DB	07fH
	DB	06fH
	DB	054H
	DB	034H
	DB	066H
	DB	042H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\weapon.h
;	COMDAT ?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ
_TEXT	SEGMENT
?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ PROC	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET, COMDAT
; _this$ = ecx

; 25   : 		this->m_iWeaponObjIndex = -1;
; 26   : 		this->m_iTargetObjIndex = -1;
; 27   : 		this->m_iDamageDealingTime = 0;

  00000	33 c0		 xor	 eax, eax
  00002	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1
  00008	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  0000f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 28   : 		this->m_IsUsed = FALSE;

  00012	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 29   : 	}

  00015	c3		 ret	 0
?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ ENDP	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET
_TEXT	ENDS
PUBLIC	?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ	; ST_WEAPON_CAL_DAMAGER_INFO::RESET
; Function compile flags: /Ogtp
;	COMDAT ?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ
_TEXT	SEGMENT
?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ PROC		; ST_WEAPON_CAL_DAMAGER_INFO::RESET, COMDAT
; _this$ = ecx

; 42   : 		this->m_iWeaponObjIndex = -1;

  00000	83 c8 ff	 or	 eax, -1
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 43   : 		this->m_iTargetX = -1;

  00005	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 44   : 		this->m_iTargetY = -1;

  00008	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 45   : 		this->m_iLimitTime = -1;

  0000b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 46   : 		this->m_IsUsed = FALSE;

  0000e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 47   : 	}

  00015	c3		 ret	 0
?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ ENDP		; ST_WEAPON_CAL_DAMAGER_INFO::RESET
_TEXT	ENDS
PUBLIC	??_7CWeapon@@6B@				; CWeapon::`vftable'
PUBLIC	??0CWeapon@@QAE@XZ				; CWeapon::CWeapon
PUBLIC	??_R4CWeapon@@6B@				; CWeapon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWeapon@@@8				; CWeapon `RTTI Type Descriptor'
PUBLIC	??_R3CWeapon@@8					; CWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWeapon@@8					; CWeapon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWeapon@@8			; CWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECWeapon@@UAEPAXI@Z:PROC			; CWeapon::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWeapon@@8 DD FLAT:??_R0?AVCWeapon@@@8	; CWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R2CWeapon@@8
rdata$r	SEGMENT
??_R2CWeapon@@8 DD FLAT:??_R1A@?0A@EA@CWeapon@@8	; CWeapon::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWeapon@@8
rdata$r	SEGMENT
??_R3CWeapon@@8 DD 00H					; CWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWeapon@@@8
_DATA	SEGMENT
??_R0?AVCWeapon@@@8 DD FLAT:??_7type_info@@6B@		; CWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWeapon@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CWeapon@@6B@
rdata$r	SEGMENT
??_R4CWeapon@@6B@ DD 00H				; CWeapon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWeapon@@@8
	DD	FLAT:??_R3CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_7CWeapon@@6B@
CONST	SEGMENT
??_7CWeapon@@6B@ DD FLAT:??_R4CWeapon@@6B@		; CWeapon::`vftable'
	DD	FLAT:??_ECWeapon@@UAEPAXI@Z
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\weapon.cpp
CONST	ENDS
;	COMDAT ??0CWeapon@@QAE@XZ
_TEXT	SEGMENT
??0CWeapon@@QAE@XZ PROC					; CWeapon::CWeapon, COMDAT
; _this$ = ecx

; 40   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b c1		 mov	 eax, ecx
  00004	57		 push	 edi
  00005	83 ce ff	 or	 esi, -1
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWeapon@@6B@
  0000e	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00011	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
  00016	33 db		 xor	 ebx, ebx
$LL6@CWeapon:

; 41   : 	for (int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)	// #error Cahnge to MAX_WEAPON_DAMAGED_TARGET_INFO
; 42   : 	{
; 43   : 		this->m_WeaponDamagedTargetInfo[i].RESET();

  00018	89 72 f8	 mov	 DWORD PTR [edx-8], esi
  0001b	89 72 fc	 mov	 DWORD PTR [edx-4], esi
  0001e	89 1a		 mov	 DWORD PTR [edx], ebx
  00020	89 5a 04	 mov	 DWORD PTR [edx+4], ebx
  00023	83 c2 10	 add	 edx, 16			; 00000010H
  00026	4f		 dec	 edi
  00027	75 ef		 jne	 SHORT $LL6@CWeapon

; 44   : 	}
; 45   : 
; 46   : 	for (int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)	// #error Cahnge to MAX_WEAPON_CAL_DAMAGER_INFO

  00029	8d 90 4c 06 00
	00		 lea	 edx, DWORD PTR [eax+1612]
  0002f	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
$LL3@CWeapon:

; 47   : 	{
; 48   : 		this->m_WeaponCalDamageInfo[i].RESET();

  00034	89 72 f8	 mov	 DWORD PTR [edx-8], esi
  00037	89 72 fc	 mov	 DWORD PTR [edx-4], esi
  0003a	89 32		 mov	 DWORD PTR [edx], esi
  0003c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0003f	89 5a 08	 mov	 DWORD PTR [edx+8], ebx
  00042	83 c2 14	 add	 edx, 20			; 00000014H
  00045	4f		 dec	 edi
  00046	75 ec		 jne	 SHORT $LL3@CWeapon

; 49   : 	}
; 50   : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	c3		 ret	 0
??0CWeapon@@QAE@XZ ENDP					; CWeapon::CWeapon
_TEXT	ENDS
PUBLIC	??1CWeapon@@UAE@XZ				; CWeapon::~CWeapon
; Function compile flags: /Ogtp
;	COMDAT ??1CWeapon@@UAE@XZ
_TEXT	SEGMENT
??1CWeapon@@UAE@XZ PROC					; CWeapon::~CWeapon, COMDAT
; _this$ = ecx

; 57   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWeapon@@6B@

; 58   : 	return;
; 59   : }

  00006	c3		 ret	 0
??1CWeapon@@UAE@XZ ENDP					; CWeapon::~CWeapon
_TEXT	ENDS
PUBLIC	?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z	; CWeapon::SetWeaponCalDamageInfo
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z
_TEXT	SEGMENT
_wObjIndex$ = 8						; size = 2
_btTargetX$ = 12					; size = 1
_btTargetY$ = 16					; size = 1
_iDelayTime$ = 20					; size = 4
?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z PROC	; CWeapon::SetWeaponCalDamageInfo, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 64   : 	for (int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00007	33 f6		 xor	 esi, esi
  00009	8d 83 54 06 00
	00		 lea	 eax, DWORD PTR [ebx+1620]
  0000f	90		 npad	 1
$LL4@SetWeaponC:

; 65   : 	{
; 66   : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == FALSE )

  00010	83 38 00	 cmp	 DWORD PTR [eax], 0
  00013	74 11		 je	 SHORT $LN8@SetWeaponC

; 64   : 	for (int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00015	46		 inc	 esi
  00016	83 c0 14	 add	 eax, 20			; 00000014H
  00019	83 fe 32	 cmp	 esi, 50			; 00000032H
  0001c	7c f2		 jl	 SHORT $LL4@SetWeaponC

; 75   : 		}
; 76   : 	}
; 77   : 
; 78   : 	return FALSE;

  0001e	5e		 pop	 esi
  0001f	33 c0		 xor	 eax, eax
  00021	5b		 pop	 ebx

; 79   : }

  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
$LN8@SetWeaponC:

; 67   : 		{
; 68   : 			this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex = wObjIndex;

  00026	0f b7 4d 08	 movzx	 ecx, WORD PTR _wObjIndex$[ebp]

; 69   : 			this->m_WeaponCalDamageInfo[i].m_iTargetX = btTargetX;

  0002a	0f b6 55 0c	 movzx	 edx, BYTE PTR _btTargetX$[ebp]
  0002e	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00031	57		 push	 edi
  00032	8d 3c 83	 lea	 edi, DWORD PTR [ebx+eax*4]

; 70   : 			this->m_WeaponCalDamageInfo[i].m_iTargetY = btTargetY;

  00035	0f b6 45 10	 movzx	 eax, BYTE PTR _btTargetY$[ebp]
  00039	89 8f 44 06 00
	00		 mov	 DWORD PTR [edi+1604], ecx
  0003f	89 97 48 06 00
	00		 mov	 DWORD PTR [edi+1608], edx
  00045	89 87 4c 06 00
	00		 mov	 DWORD PTR [edi+1612], eax

; 71   : 			this->m_WeaponCalDamageInfo[i].m_iLimitTime = GetTickCount() + iDelayTime;

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00051	03 45 14	 add	 eax, DWORD PTR _iDelayTime$[ebp]

; 72   : 			this->m_WeaponCalDamageInfo[i].m_IsUsed = TRUE;

  00054	8d 8c b6 95 01
	00 00		 lea	 ecx, DWORD PTR [esi+esi*4+405]
  0005b	89 87 50 06 00
	00		 mov	 DWORD PTR [edi+1616], eax
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	c7 04 8b 01 00
	00 00		 mov	 DWORD PTR [ebx+ecx*4], 1

; 73   : 
; 74   : 			return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	5b		 pop	 ebx

; 79   : }

  00070	5d		 pop	 ebp
  00071	c2 10 00	 ret	 16			; 00000010H
?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z ENDP	; CWeapon::SetWeaponCalDamageInfo
_TEXT	ENDS
PUBLIC	?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z	; CWeapon::GetWeaponCalDamageInfo
; Function compile flags: /Ogtp
;	COMDAT ?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z
_TEXT	SEGMENT
_wObjIndex$ = 8						; size = 2
_btTargetX$ = 12					; size = 4
_btTargetY$ = 16					; size = 4
?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z PROC	; CWeapon::GetWeaponCalDamageInfo, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 84   : 	for( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00006	66 8b 7d 08	 mov	 di, WORD PTR _wObjIndex$[ebp]
  0000a	33 d2		 xor	 edx, edx
  0000c	8d b1 44 06 00
	00		 lea	 esi, DWORD PTR [ecx+1604]
  00012	b8 01 00 00 00	 mov	 eax, 1
$LL4@GetWeaponC:

; 85   : 	{
; 86   : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == TRUE && this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex == wObjIndex)

  00017	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0001a	75 07		 jne	 SHORT $LN3@GetWeaponC
  0001c	0f b7 df	 movzx	 ebx, di
  0001f	39 1e		 cmp	 DWORD PTR [esi], ebx
  00021	74 13		 je	 SHORT $LN10@GetWeaponC
$LN3@GetWeaponC:

; 84   : 	for( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00023	03 d0		 add	 edx, eax
  00025	83 c6 14	 add	 esi, 20			; 00000014H
  00028	83 fa 32	 cmp	 edx, 50			; 00000032H
  0002b	7c ea		 jl	 SHORT $LL4@GetWeaponC

; 92   : 
; 93   : 			return TRUE;
; 94   : 		}
; 95   : 	}
; 96   : 
; 97   : 	return FALSE;

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	33 c0		 xor	 eax, eax
  00031	5b		 pop	 ebx

; 98   : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
$LN10@GetWeaponC:

; 87   : 		{
; 88   : 			btTargetX = this->m_WeaponCalDamageInfo[i].m_iTargetX;

  00036	8b 75 0c	 mov	 esi, DWORD PTR _btTargetX$[ebp]
  00039	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  0003c	8d 0c 91	 lea	 ecx, DWORD PTR [ecx+edx*4]
  0003f	0f b6 91 48 06
	00 00		 movzx	 edx, BYTE PTR [ecx+1608]
  00046	88 16		 mov	 BYTE PTR [esi], dl

; 89   : 			btTargetY = this->m_WeaponCalDamageInfo[i].m_iTargetY;

  00048	0f b6 91 4c 06
	00 00		 movzx	 edx, BYTE PTR [ecx+1612]
  0004f	8b 75 10	 mov	 esi, DWORD PTR _btTargetY$[ebp]
  00052	88 16		 mov	 BYTE PTR [esi], dl

; 90   : 
; 91   : 			this->m_WeaponCalDamageInfo[i].RESET();

  00054	83 ca ff	 or	 edx, -1
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	89 91 44 06 00
	00		 mov	 DWORD PTR [ecx+1604], edx
  0005f	89 91 48 06 00
	00		 mov	 DWORD PTR [ecx+1608], edx
  00065	89 91 4c 06 00
	00		 mov	 DWORD PTR [ecx+1612], edx
  0006b	89 91 50 06 00
	00		 mov	 DWORD PTR [ecx+1616], edx
  00071	c7 81 54 06 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1620], 0
  0007b	5b		 pop	 ebx

; 98   : }

  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z ENDP	; CWeapon::GetWeaponCalDamageInfo
_TEXT	ENDS
PUBLIC	?GetAttackDamage@CWeapon@@QAEHH@Z		; CWeapon::GetAttackDamage
; Function compile flags: /Ogtp
;	COMDAT ?GetAttackDamage@CWeapon@@QAEHH@Z
_TEXT	SEGMENT
_iObjClass$ = 8						; size = 4
?GetAttackDamage@CWeapon@@QAEHH@Z PROC			; CWeapon::GetAttackDamage, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 104  : 	int iDamage = 0;
; 105  : 
; 106  : 	if ( iObjClass == 221 )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iObjClass$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	81 f9 dd 00 00
	00		 cmp	 ecx, 221		; 000000ddH
  0000e	75 07		 jne	 SHORT $LN3@GetAttackD

; 107  : 	{
; 108  : 		iDamage = 300;

  00010	8d 41 4f	 lea	 eax, DWORD PTR [ecx+79]

; 113  : 	}
; 114  : 
; 115  : 	return iDamage;
; 116  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN3@GetAttackD:

; 109  : 	}
; 110  : 	else if ( iObjClass == 222 )

  00017	81 f9 de 00 00
	00		 cmp	 ecx, 222		; 000000deH
  0001d	75 03		 jne	 SHORT $LN1@GetAttackD

; 111  : 	{
; 112  : 		iDamage = 200;

  0001f	8d 41 ea	 lea	 eax, DWORD PTR [ecx-22]
$LN1@GetAttackD:

; 113  : 	}
; 114  : 
; 115  : 	return iDamage;
; 116  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?GetAttackDamage@CWeapon@@QAEHH@Z ENDP			; CWeapon::GetAttackDamage
_TEXT	ENDS
PUBLIC	?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z	; CWeapon::GetTargetPointXY
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z
_TEXT	SEGMENT
_iObjClass$ = 8						; size = 4
tv294 = 12						; size = 4
tv264 = 12						; size = 4
_iTargetPointIndex$ = 12				; size = 4
_btX$ = 16						; size = 4
_btY$ = 20						; size = 4
_bRandomPos$ = 24					; size = 4
?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z PROC		; CWeapon::GetTargetPointXY, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 	if ( iObjClass == 221 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iObjClass$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	3d dd 00 00 00	 cmp	 eax, 221		; 000000ddH
  0000e	75 49		 jne	 SHORT $LN5@GetTargetP

; 124  : 	{
; 125  : 		if ( iTargetPointIndex >= 0 && iTargetPointIndex < MAX_ST_CS_WEAPON )

  00010	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  00013	83 f8 03	 cmp	 eax, 3
  00016	0f 87 cc 00 00
	00		 ja	 $LN13@GetTargetP

; 126  : 		{
; 127  : 			int tx = WEAPON_CS_ATTACKER[iTargetPointIndex].btXEnd - WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin;

  0001c	0f b6 34 85 02
	00 00 00	 movzx	 esi, BYTE PTR _WEAPON_CS_ATTACKER[eax*4+2]

; 128  : 			int ty = WEAPON_CS_ATTACKER[iTargetPointIndex].btYEnd - WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin;

  00024	0f b6 3c 85 03
	00 00 00	 movzx	 edi, BYTE PTR _WEAPON_CS_ATTACKER[eax*4+3]
  0002c	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR _WEAPON_CS_ATTACKER[eax*4]
  00033	89 4d 0c	 mov	 DWORD PTR tv264[ebp], ecx
  00036	8a 09		 mov	 cl, BYTE PTR [ecx]
  00038	8d 1c 85 01 00
	00 00		 lea	 ebx, DWORD PTR _WEAPON_CS_ATTACKER[eax*4+1]
  0003f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00042	0f b6 d1	 movzx	 edx, cl
  00045	2b f2		 sub	 esi, edx
  00047	2b f8		 sub	 edi, eax

; 129  : 
; 130  : 			if ( bRandomPos != FALSE )

  00049	83 7d 18 00	 cmp	 DWORD PTR _bRandomPos$[ebp], 0
  0004d	74 7d		 je	 SHORT $LN2@GetTargetP

; 131  : 			{
; 132  : 				btX = WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin + rand() % tx;

  0004f	e8 00 00 00 00	 call	 _rand
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR tv264[ebp]

; 133  : 				btY = WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin + rand() % ty;
; 134  : 			}
; 135  : 			else
; 136  : 			{
; 137  : 				btX = WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin + tx / 2;
; 138  : 				btY = WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin + ty / 2;
; 139  : 			}
; 140  : 		}
; 141  : 	}
; 142  : 
; 143  : 	if ( iObjClass == 222 )

  00057	eb 4e		 jmp	 SHORT $LN14@GetTargetP
$LN5@GetTargetP:
  00059	3d de 00 00 00	 cmp	 eax, 222		; 000000deH
  0005e	0f 85 84 00 00
	00		 jne	 $LN13@GetTargetP

; 144  : 	{
; 145  : 		if ( iTargetPointIndex >= 0 && iTargetPointIndex < MAX_ST_CS_WEAPON )

  00064	8b 45 0c	 mov	 eax, DWORD PTR _iTargetPointIndex$[ebp]
  00067	83 f8 03	 cmp	 eax, 3
  0006a	77 7c		 ja	 SHORT $LN13@GetTargetP

; 146  : 		{
; 147  : 			int tx = WEAPON_CS_DEFENSER[iTargetPointIndex].btXEnd - WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin;

  0006c	0f b6 34 85 02
	00 00 00	 movzx	 esi, BYTE PTR _WEAPON_CS_DEFENSER[eax*4+2]

; 148  : 			int ty = WEAPON_CS_DEFENSER[iTargetPointIndex].btYEnd - WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin;

  00074	0f b6 3c 85 03
	00 00 00	 movzx	 edi, BYTE PTR _WEAPON_CS_DEFENSER[eax*4+3]
  0007c	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR _WEAPON_CS_DEFENSER[eax*4]
  00083	89 4d 0c	 mov	 DWORD PTR tv294[ebp], ecx
  00086	8a 09		 mov	 cl, BYTE PTR [ecx]
  00088	8d 1c 85 01 00
	00 00		 lea	 ebx, DWORD PTR _WEAPON_CS_DEFENSER[eax*4+1]
  0008f	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00092	0f b6 d1	 movzx	 edx, cl
  00095	2b f2		 sub	 esi, edx
  00097	2b f8		 sub	 edi, eax

; 149  : 
; 150  : 			if ( bRandomPos != FALSE )

  00099	83 7d 18 00	 cmp	 DWORD PTR _bRandomPos$[ebp], 0
  0009d	74 2d		 je	 SHORT $LN2@GetTargetP

; 151  : 			{
; 152  : 				btX = WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin + rand() % tx;

  0009f	e8 00 00 00 00	 call	 _rand
  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR tv294[ebp]
$LN14@GetTargetP:
  000a7	99		 cdq
  000a8	f7 fe		 idiv	 esi
  000aa	8b 45 10	 mov	 eax, DWORD PTR _btX$[ebp]
  000ad	02 11		 add	 dl, BYTE PTR [ecx]
  000af	88 10		 mov	 BYTE PTR [eax], dl

; 153  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + rand() % ty;

  000b1	e8 00 00 00 00	 call	 _rand
  000b6	99		 cdq
  000b7	f7 ff		 idiv	 edi
  000b9	8b 4d 14	 mov	 ecx, DWORD PTR _btY$[ebp]
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi

; 159  : 			}
; 160  : 		}
; 161  : 	}
; 162  : 
; 163  : 	return TRUE;

  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	02 13		 add	 dl, BYTE PTR [ebx]
  000c5	5b		 pop	 ebx
  000c6	88 11		 mov	 BYTE PTR [ecx], dl

; 164  : }

  000c8	5d		 pop	 ebp
  000c9	c2 14 00	 ret	 20			; 00000014H
$LN2@GetTargetP:

; 154  : 			}
; 155  : 			else
; 156  : 			{
; 157  : 				btX = WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin + tx / 2;

  000cc	8b c6		 mov	 eax, esi
  000ce	99		 cdq
  000cf	2b c2		 sub	 eax, edx
  000d1	8b 55 10	 mov	 edx, DWORD PTR _btX$[ebp]
  000d4	d1 f8		 sar	 eax, 1
  000d6	02 c1		 add	 al, cl

; 158  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + ty / 2;

  000d8	8b 4d 14	 mov	 ecx, DWORD PTR _btY$[ebp]
  000db	88 02		 mov	 BYTE PTR [edx], al
  000dd	8b c7		 mov	 eax, edi
  000df	99		 cdq
  000e0	2b c2		 sub	 eax, edx
  000e2	d1 f8		 sar	 eax, 1
  000e4	02 03		 add	 al, BYTE PTR [ebx]
  000e6	88 01		 mov	 BYTE PTR [ecx], al
$LN13@GetTargetP:

; 159  : 			}
; 160  : 		}
; 161  : 	}
; 162  : 
; 163  : 	return TRUE;

  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	b8 01 00 00 00	 mov	 eax, 1
  000ef	5b		 pop	 ebx

; 164  : }

  000f0	5d		 pop	 ebp
  000f1	c2 14 00	 ret	 20			; 00000014H
?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z ENDP		; CWeapon::GetTargetPointXY
_TEXT	ENDS
PUBLIC	?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ; CWeapon::MissCheck
; Function compile flags: /Ogtp
;	COMDAT ?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_iSkill$ = 16						; size = 4
_iSkillSuccess$ = 20					; size = 4
_bAllMiss$ = 24						; size = 4
?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z PROC	; CWeapon::MissCheck, COMDAT
; _this$ = ecx

; 170  : 	return TRUE;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 171  : }

  00005	c2 14 00	 ret	 20			; 00000014H
?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ENDP	; CWeapon::MissCheck
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@4024000000000000
PUBLIC	?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ; CWeapon::Attack
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHE@Z:PROC ; gObjLifeCheck
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjUniriaSprite
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z:PROC ; gObjArmorRandomDurDown
EXTRN	?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjDarkHorse
EXTRN	?GCReFillSend@@YAXHHEE@Z:PROC			; GCReFillSend
EXTRN	?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ:PROC ; CItem::IsDinorantReduceAttackDamaege
EXTRN	?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjDenorantSprite
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAngelSprite
EXTRN	?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAttackQ
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_MSBFlag$ = -12						; size = 4
_ManaChange$ = -8					; size = 4
_iSkill$ = -4						; size = 4
tv573 = 8						; size = 4
tv561 = 8						; size = 4
tv538 = 8						; size = 4
tv519 = 8						; size = 4
_ManaPercent$153759 = 8					; size = 4
_bAllMiss$ = 8						; size = 4
_lpObj$ = 8						; size = 4
tv489 = 10						; size = 2
tv566 = 12						; size = 4
tv564 = 12						; size = 4
tv556 = 12						; size = 4
tv553 = 12						; size = 4
tv546 = 12						; size = 4
tv544 = 12						; size = 4
_iAttackDamage$ = 12					; size = 4
_lpTargetObj$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_MsgDamage$ = 19					; size = 1
tv486 = 20						; size = 4
tv484 = 20						; size = 4
_iCriticalDamage$ = 20					; size = 4
_iActionType$ = 24					; size = 4
?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z PROC ; CWeapon::Attack, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 178  : 	int iSkill = 0;
; 179  : 	int iSkillSuccess = TRUE;
; 180  : 	BYTE MsgDamage = 0;
; 181  : 	int ManaChange = 0;
; 182  : 
; 183  : 	if ( lpMagic != NULL )

  00006	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	33 c9		 xor	 ecx, ecx
  0000e	57		 push	 edi
  0000f	89 4d fc	 mov	 DWORD PTR _iSkill$[ebp], ecx
  00012	89 4d f8	 mov	 DWORD PTR _ManaChange$[ebp], ecx
  00015	3b c1		 cmp	 eax, ecx
  00017	74 07		 je	 SHORT $LN41@Attack

; 184  : 	{
; 185  : 		iSkill = lpMagic->m_Skill;

  00019	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  0001d	89 45 fc	 mov	 DWORD PTR _iSkill$[ebp], eax
$LN41@Attack:

; 186  : 	}
; 187  : 
; 188  : 	if ( (lpTargetObj->Authority & 2) == 2 )

  00020	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  00023	f6 87 a4 01 00
	00 02		 test	 BYTE PTR [edi+420], 2
  0002a	74 0a		 je	 SHORT $LN40@Attack

; 189  : 	{
; 190  : 		return FALSE;

  0002c	5f		 pop	 edi
  0002d	33 c0		 xor	 eax, eax
  0002f	5b		 pop	 ebx

; 399  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 14 00	 ret	 20			; 00000014H
$LN40@Attack:
  00036	56		 push	 esi

; 191  : 	}
; 192  : 
; 193  : 	if ( lpObj->MapNumber != lpTargetObj->MapNumber )

  00037	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0003a	8a 8e 09 01 00
	00		 mov	 cl, BYTE PTR [esi+265]
  00040	3a 8f 09 01 00
	00		 cmp	 cl, BYTE PTR [edi+265]

; 194  : 	{
; 195  : 		return FALSE;

  00046	75 68		 jne	 SHORT $LN67@Attack

; 196  : 	}
; 197  : 
; 198  : 	if ( lpTargetObj->Type == OBJ_USER )

  00048	66 83 7f 60 01	 cmp	 WORD PTR [edi+96], 1
  0004d	75 0d		 jne	 SHORT $LN37@Attack

; 199  : 	{
; 200  : 		if ( gObjIsConnected(lpTargetObj) == FALSE )

  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00055	83 c4 04	 add	 esp, 4
  00058	85 c0		 test	 eax, eax

; 201  : 		{
; 202  : 			return FALSE;

  0005a	74 54		 je	 SHORT $LN67@Attack
$LN37@Attack:

; 203  : 		}
; 204  : 	}
; 205  : 
; 206  : 	if ( gObjAttackQ(lpTargetObj) == 0 )

  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 ?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAttackQ
  00062	83 c4 04	 add	 esp, 4
  00065	85 c0		 test	 eax, eax

; 207  : 	{
; 208  : 		return FALSE;

  00067	74 47		 je	 SHORT $LN67@Attack

; 209  : 	}
; 210  : 
; 211  : 	lpObj->m_TotalAttackCount++;
; 212  : 
; 213  : 	int MSBFlag = 0;
; 214  : 
; 215  : 	if ( iCriticalDamage != 0 )

  00069	8b 45 14	 mov	 eax, DWORD PTR _iCriticalDamage$[ebp]
  0006c	ff 86 f8 01 00
	00		 inc	 DWORD PTR [esi+504]

; 216  : 	{
; 217  : 		MsgDamage = 3;
; 218  : 	}
; 219  : 	else
; 220  : 	{
; 221  : 		MsgDamage = 0;
; 222  : 	}
; 223  : 
; 224  : 	int iAttackDamage = this->GetAttackDamage(lpObj->Class);

  00072	0f b7 96 98 00
	00 00		 movzx	 edx, WORD PTR [esi+152]
  00079	f7 d8		 neg	 eax
  0007b	1a c0		 sbb	 al, al
  0007d	24 03		 and	 al, 3
  0007f	52		 push	 edx
  00080	8b cb		 mov	 ecx, ebx
  00082	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _MSBFlag$[ebp], 0
  00089	88 45 13	 mov	 BYTE PTR _MsgDamage$[ebp], al
  0008c	e8 00 00 00 00	 call	 ?GetAttackDamage@CWeapon@@QAEHH@Z ; CWeapon::GetAttackDamage

; 225  : 	int iSkillDefense = lpTargetObj->m_SkillDefense;
; 226  : 	int iTargetDefense = lpTargetObj->m_Defense + iSkillDefense;
; 227  : 
; 228  : 	iTargetDefense -= (iTargetDefense * lpTargetObj->m_SkillMagumReduceDefense)/100;
; 229  : 
; 230  : 	BOOL bAllMiss = FALSE;
; 231  : 	
; 232  : 	if ( this->MissCheck(lpObj, lpTargetObj, iSkill, iSkillSuccess, bAllMiss) == FALSE )

  00091	8b 4d fc	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  00094	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00097	8b f0		 mov	 esi, eax
  00099	89 45 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], eax
  0009c	8d 45 08	 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  0009f	50		 push	 eax
  000a0	6a 01		 push	 1
  000a2	51		 push	 ecx
  000a3	57		 push	 edi
  000a4	52		 push	 edx
  000a5	8b cb		 mov	 ecx, ebx
  000a7	e8 00 00 00 00	 call	 ?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ; CWeapon::MissCheck
  000ac	85 c0		 test	 eax, eax
  000ae	75 0b		 jne	 SHORT $LN32@Attack
$LN67@Attack:
  000b0	5e		 pop	 esi
  000b1	5f		 pop	 edi

; 233  : 	{
; 234  : 		return FALSE;

  000b2	33 c0		 xor	 eax, eax
  000b4	5b		 pop	 ebx

; 399  : }

  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 14 00	 ret	 20			; 00000014H
$LN32@Attack:

; 235  : 	}
; 236  : 
; 237  : 	if ( bAllMiss != FALSE )
; 238  : 	{
; 239  : 		iAttackDamage = (iAttackDamage * 30)/100;
; 240  : 	}
; 241  : 
; 242  : 	if ( lpTargetObj->DamageMinus != 0 )

  000bb	8a 87 14 01 00
	00		 mov	 al, BYTE PTR [edi+276]
  000c1	84 c0		 test	 al, al
  000c3	74 1c		 je	 SHORT $LN31@Attack

; 243  : 	{
; 244  : 		int lc11 = iAttackDamage;
; 245  : 		iAttackDamage -= (iAttackDamage * lpTargetObj->DamageMinus)/100;

  000c5	0f b6 c8	 movzx	 ecx, al
  000c8	0f af ce	 imul	 ecx, esi
  000cb	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  000d0	f7 e9		 imul	 ecx
  000d2	c1 fa 05	 sar	 edx, 5
  000d5	8b c2		 mov	 eax, edx
  000d7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000da	03 c2		 add	 eax, edx
  000dc	03 f0		 add	 esi, eax
  000de	89 75 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], esi
$LN31@Attack:

; 246  : 	}
; 247  : 
; 248  : 	int iTargetLevel = lpObj->Level / 10;

  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000e4	0f bf 89 9c 00
	00 00		 movsx	 ecx, WORD PTR [ecx+156]
  000eb	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000f0	f7 e9		 imul	 ecx
  000f2	c1 fa 02	 sar	 edx, 2
  000f5	8b c2		 mov	 eax, edx
  000f7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000fa	03 c2		 add	 eax, edx

; 249  : 
; 250  : 	if ( iAttackDamage < iTargetLevel )

  000fc	3b f0		 cmp	 esi, eax
  000fe	7d 0f		 jge	 SHORT $LN44@Attack

; 251  : 	{
; 252  : 		if ( iTargetLevel < 1 )

  00100	83 f8 01	 cmp	 eax, 1
  00103	7d 05		 jge	 SHORT $LN29@Attack

; 253  : 		{
; 254  : 			iTargetLevel = 1;

  00105	b8 01 00 00 00	 mov	 eax, 1
$LN29@Attack:

; 255  : 		}
; 256  : 
; 257  : 		iAttackDamage = iTargetLevel;

  0010a	8b f0		 mov	 esi, eax
  0010c	89 75 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], esi
$LN44@Attack:

; 258  : 	}
; 259  : 
; 260  : 	if ( lpTargetObj->m_SkillNumber == 18 )

  0010f	66 83 bf 3c 02
	00 00 12	 cmp	 WORD PTR [edi+572], 18	; 00000012H
  00117	75 0a		 jne	 SHORT $LN51@Attack

; 261  : 	{
; 262  : 		if ( iAttackDamage > 1 )

  00119	83 fe 01	 cmp	 esi, 1
  0011c	7e 05		 jle	 SHORT $LN51@Attack

; 263  : 		{
; 264  : 			iAttackDamage = iAttackDamage >> 1;

  0011e	d1 fe		 sar	 esi, 1
  00120	89 75 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], esi
$LN51@Attack:

; 265  : 		}
; 266  : 	}
; 267  : 
; 268  : 	if ( gObjAngelSprite(lpTargetObj) == TRUE )

  00123	57		 push	 edi
  00124	e8 00 00 00 00	 call	 ?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAngelSprite
  00129	83 c4 04	 add	 esp, 4
  0012c	83 f8 01	 cmp	 eax, 1
  0012f	75 27		 jne	 SHORT $LN25@Attack

; 269  : 	{
; 270  : 		if ( iAttackDamage > 1 )

  00131	3b f0		 cmp	 esi, eax
  00133	7e 23		 jle	 SHORT $LN25@Attack

; 271  : 		{
; 272  : 			float lc13 = (float)(iAttackDamage * 8 ) / 10.0f;

  00135	8d 14 f5 00 00
	00 00		 lea	 edx, DWORD PTR [esi*8]

; 273  : 			iAttackDamage = (int)( lc13 );

  0013c	89 55 0c	 mov	 DWORD PTR tv566[ebp], edx
  0013f	db 45 0c	 fild	 DWORD PTR tv566[ebp]
  00142	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  00148	d9 5d 0c	 fstp	 DWORD PTR tv564[ebp]
  0014b	d9 45 0c	 fld	 DWORD PTR tv564[ebp]
  0014e	e8 00 00 00 00	 call	 __ftol2_sse
  00153	8b f0		 mov	 esi, eax
  00155	89 75 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], esi
$LN25@Attack:

; 274  : 		}
; 275  : 	}
; 276  : 
; 277  : 	if ( gObjWingSprite(lpTargetObj) == TRUE )

  00158	57		 push	 edi
  00159	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  0015e	83 c4 04	 add	 esp, 4
  00161	83 f8 01	 cmp	 eax, 1
  00164	75 6f		 jne	 SHORT $LN21@Attack

; 278  : 	{
; 279  : 		CItem * Wing = &lpTargetObj->pInventory[7];

  00166	8b 87 8c 0c 00
	00		 mov	 eax, DWORD PTR [edi+3212]

; 280  : 
; 281  : 		if ( iAttackDamage > 1 )

  0016c	83 fe 01	 cmp	 esi, 1
  0016f	7e 64		 jle	 SHORT $LN21@Attack

; 282  : 		{
; 283  : 			if ( Wing->m_Type > ITEMGET(12,2) )

  00171	b9 02 18 00 00	 mov	 ecx, 6146		; 00001802H
  00176	66 39 88 9e 04
	00 00		 cmp	 WORD PTR [eax+1182], cx
  0017d	7e 27		 jle	 SHORT $LN22@Attack

; 284  : 			{
; 285  : 				float lc15 = float((int)iAttackDamage *  (int)(75 - Wing->m_Level * 2) ) / 100.0f;
; 286  : 				iAttackDamage = (int )lc15;

  0017f	0f bf 90 a0 04
	00 00		 movsx	 edx, WORD PTR [eax+1184]
  00186	03 d2		 add	 edx, edx
  00188	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  0018d	2b c2		 sub	 eax, edx
  0018f	0f af c6	 imul	 eax, esi
  00192	89 45 0c	 mov	 DWORD PTR tv556[ebp], eax
  00195	db 45 0c	 fild	 DWORD PTR tv556[ebp]
  00198	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  0019e	d9 5d 0c	 fstp	 DWORD PTR tv553[ebp]
  001a1	d9 45 0c	 fld	 DWORD PTR tv553[ebp]

; 287  : 			}
; 288  : 			else

  001a4	eb 25		 jmp	 SHORT $LN66@Attack
$LN22@Attack:

; 289  : 			{
; 290  : 				float lc16 = float((int)iAttackDamage *  (int)(88 - Wing->m_Level * 2) ) / 100.0f;
; 291  : 				iAttackDamage = (int)lc16;

  001a6	0f bf 88 a0 04
	00 00		 movsx	 ecx, WORD PTR [eax+1184]
  001ad	ba 2c 00 00 00	 mov	 edx, 44			; 0000002cH
  001b2	2b d1		 sub	 edx, ecx
  001b4	0f af d6	 imul	 edx, esi
  001b7	03 d2		 add	 edx, edx
  001b9	89 55 0c	 mov	 DWORD PTR tv546[ebp], edx
  001bc	db 45 0c	 fild	 DWORD PTR tv546[ebp]
  001bf	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  001c5	d9 5d 0c	 fstp	 DWORD PTR tv544[ebp]
  001c8	d9 45 0c	 fld	 DWORD PTR tv544[ebp]
$LN66@Attack:
  001cb	e8 00 00 00 00	 call	 __ftol2_sse
  001d0	8b f0		 mov	 esi, eax
  001d2	89 75 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], esi
$LN21@Attack:

; 292  : 			}
; 293  : 		}
; 294  : 	}
; 295  : 
; 296  : 	if ( gObjDenorantSprite(lpTargetObj) != FALSE )

  001d5	57		 push	 edi
  001d6	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  001db	83 c4 04	 add	 esp, 4
  001de	85 c0		 test	 eax, eax
  001e0	0f 84 81 00 00
	00		 je	 $LN45@Attack

; 297  : 	{
; 298  : 		CItem * Dino = &lpTargetObj->pInventory[8];

  001e6	8b 8f 8c 0c 00
	00		 mov	 ecx, DWORD PTR [edi+3212]
  001ec	81 c1 40 05 00
	00		 add	 ecx, 1344		; 00000540H

; 299  : 
; 300  : 		int ReduceDamage = 90 - Dino->IsDinorantReduceAttackDamaege();

  001f2	e8 00 00 00 00	 call	 ?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ ; CItem::IsDinorantReduceAttackDamaege

; 301  : 
; 302  : 		lpObj->Life -= 1.0f;

  001f7	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  001fa	d9 83 bc 00 00
	00		 fld	 DWORD PTR [ebx+188]
  00200	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00205	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  0020b	2b c8		 sub	 ecx, eax
  0020d	d9 5d 08	 fstp	 DWORD PTR tv519[ebp]
  00210	d9 45 08	 fld	 DWORD PTR tv519[ebp]
  00213	d9 93 bc 00 00
	00		 fst	 DWORD PTR [ebx+188]

; 303  : 
; 304  : 		if ( lpObj->Life < 0.0f )

  00219	d9 ee		 fldz
  0021b	d8 d1		 fcom	 ST(1)
  0021d	df e0		 fnstsw	 ax
  0021f	dd d9		 fstp	 ST(1)
  00221	f6 c4 41	 test	 ah, 65			; 00000041H
  00224	75 08		 jne	 SHORT $LN54@Attack

; 305  : 		{
; 306  : 			lpObj->Life = 0;

  00226	d9 9b bc 00 00
	00		 fstp	 DWORD PTR [ebx+188]

; 307  : 		}
; 308  : 		else

  0022c	eb 19		 jmp	 SHORT $LN18@Attack
$LN54@Attack:

; 309  : 		{
; 310  : 			iAttackDamage = (iAttackDamage * ReduceDamage)/100;

  0022e	0f af ce	 imul	 ecx, esi
  00231	dd d8		 fstp	 ST(0)
  00233	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00238	f7 e9		 imul	 ecx
  0023a	c1 fa 05	 sar	 edx, 5
  0023d	8b f2		 mov	 esi, edx
  0023f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00242	03 f2		 add	 esi, edx
  00244	89 75 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], esi
$LN18@Attack:

; 311  : 		}
; 312  : 
; 313  : 		GCReFillSend(lpObj->m_Index, lpObj->Life, (BYTE)-1, 0);

  00247	d9 83 bc 00 00
	00		 fld	 DWORD PTR [ebx+188]
  0024d	6a 00		 push	 0
  0024f	68 ff 00 00 00	 push	 255			; 000000ffH
  00254	e8 00 00 00 00	 call	 __ftol2_sse
  00259	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0025b	50		 push	 eax
  0025c	51		 push	 ecx
  0025d	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEE@Z ; GCReFillSend
  00262	83 c4 10	 add	 esp, 16			; 00000010H
  00265	eb 03		 jmp	 SHORT $LN20@Attack
$LN45@Attack:
  00267	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
$LN20@Attack:

; 314  : 	}
; 315  : 
; 316  : 	if ( gObjDarkHorse(lpTargetObj) != FALSE )

  0026a	57		 push	 edi
  0026b	e8 00 00 00 00	 call	 ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDarkHorse
  00270	83 c4 04	 add	 esp, 4
  00273	85 c0		 test	 eax, eax
  00275	74 7f		 je	 SHORT $LN17@Attack

; 317  : 	{
; 318  : 		CItem * DarkHorse = &lpTargetObj->pInventory[8];
; 319  : 
; 320  : 		int DHPercent = 100-(DarkHorse->m_PetItem_Level+30)/2;
; 321  : 
; 322  : 		lpTargetObj->Life -= 1.0f;

  00277	d9 87 bc 00 00
	00		 fld	 DWORD PTR [edi+188]
  0027d	8b 97 8c 0c 00
	00		 mov	 edx, DWORD PTR [edi+3212]
  00283	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00289	8b 82 e0 05 00
	00		 mov	 eax, DWORD PTR [edx+1504]
  0028f	83 c0 1e	 add	 eax, 30			; 0000001eH
  00292	99		 cdq
  00293	d9 5d 08	 fstp	 DWORD PTR tv538[ebp]
  00296	2b c2		 sub	 eax, edx
  00298	d9 45 08	 fld	 DWORD PTR tv538[ebp]
  0029b	d1 f8		 sar	 eax, 1
  0029d	d9 97 bc 00 00
	00		 fst	 DWORD PTR [edi+188]
  002a3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H

; 323  : 
; 324  : 		if ( lpTargetObj->Life < 0.0f )

  002a8	d9 ee		 fldz
  002aa	2b c8		 sub	 ecx, eax
  002ac	d8 d1		 fcom	 ST(1)
  002ae	df e0		 fnstsw	 ax
  002b0	dd d9		 fstp	 ST(1)
  002b2	f6 c4 41	 test	 ah, 65			; 00000041H
  002b5	75 08		 jne	 SHORT $LN57@Attack

; 325  : 		{
; 326  : 			lpTargetObj->Life = 0;

  002b7	d9 9f bc 00 00
	00		 fstp	 DWORD PTR [edi+188]

; 327  : 		}
; 328  : 		else

  002bd	eb 19		 jmp	 SHORT $LN15@Attack
$LN57@Attack:

; 329  : 		{
; 330  : 			iAttackDamage = (iAttackDamage * DHPercent)/100;

  002bf	0f af ce	 imul	 ecx, esi
  002c2	dd d8		 fstp	 ST(0)
  002c4	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002c9	f7 e9		 imul	 ecx
  002cb	c1 fa 05	 sar	 edx, 5
  002ce	8b f2		 mov	 esi, edx
  002d0	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  002d3	03 f2		 add	 esi, edx
  002d5	89 75 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], esi
$LN15@Attack:

; 331  : 		}
; 332  : 
; 333  : 		GCReFillSend(lpTargetObj->m_Index, lpTargetObj->Life, (BYTE)-1, 0);

  002d8	d9 87 bc 00 00
	00		 fld	 DWORD PTR [edi+188]
  002de	6a 00		 push	 0
  002e0	68 ff 00 00 00	 push	 255			; 000000ffH
  002e5	e8 00 00 00 00	 call	 __ftol2_sse
  002ea	8b 0f		 mov	 ecx, DWORD PTR [edi]
  002ec	50		 push	 eax
  002ed	51		 push	 ecx
  002ee	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEE@Z ; GCReFillSend
  002f3	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@Attack:

; 334  : 	}
; 335  : 
; 336  : 	if ( lpTargetObj->Live != FALSE )

  002f6	80 7f 62 00	 cmp	 BYTE PTR [edi+98], 0
  002fa	0f 84 c5 00 00
	00		 je	 $LN47@Attack

; 337  : 	{
; 338  : 		if ( lpTargetObj->m_WizardSkillDefense !=0 && iAttackDamage > 0 )

  00300	8b 8f 04 0f 00
	00		 mov	 ecx, DWORD PTR [edi+3844]
  00306	85 c9		 test	 ecx, ecx
  00308	0f 84 8b 00 00
	00		 je	 $LN49@Attack
  0030e	85 f6		 test	 esi, esi
  00310	0f 8e 83 00 00
	00		 jle	 $LN49@Attack

; 339  : 		{
; 340  : 			int ManaPercent = (WORD)lpTargetObj->Mana * 2 / 100;

  00316	d9 87 d0 00 00
	00		 fld	 DWORD PTR [edi+208]
  0031c	d9 7d 0a	 fnstcw	 WORD PTR tv489[ebp]
  0031f	0f b7 45 0a	 movzx	 eax, WORD PTR tv489[ebp]
  00323	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00328	89 45 14	 mov	 DWORD PTR tv486[ebp], eax
  0032b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00330	d9 6d 14	 fldcw	 WORD PTR tv486[ebp]
  00333	db 5d 14	 fistp	 DWORD PTR tv484[ebp]
  00336	66 8b 55 14	 mov	 dx, WORD PTR tv484[ebp]
  0033a	0f b7 d2	 movzx	 edx, dx
  0033d	03 d2		 add	 edx, edx
  0033f	d9 6d 0a	 fldcw	 WORD PTR tv489[ebp]
  00342	f7 ea		 imul	 edx
  00344	c1 fa 05	 sar	 edx, 5
  00347	8b c2		 mov	 eax, edx
  00349	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0034c	03 c2		 add	 eax, edx
  0034e	89 45 08	 mov	 DWORD PTR _ManaPercent$153759[ebp], eax

; 341  : 
; 342  : 			if ( ManaPercent < lpTargetObj->Mana )

  00351	db 45 08	 fild	 DWORD PTR _ManaPercent$153759[ebp]
  00354	d9 5d 08	 fstp	 DWORD PTR tv561[ebp]
  00357	d9 45 08	 fld	 DWORD PTR tv561[ebp]
  0035a	d9 87 d0 00 00
	00		 fld	 DWORD PTR [edi+208]
  00360	d8 d9		 fcomp	 ST(1)
  00362	df e0		 fnstsw	 ax
  00364	f6 c4 41	 test	 ah, 65			; 00000041H
  00367	75 2e		 jne	 SHORT $LN60@Attack

; 343  : 			{
; 344  : 				lpTargetObj->Mana -= ManaPercent;

  00369	d8 af d0 00 00
	00		 fsubr	 DWORD PTR [edi+208]

; 345  : 				int lc22 = (iAttackDamage * lpTargetObj->m_WizardSkillDefense )/100;

  0036f	0f af ce	 imul	 ecx, esi
  00372	d9 9f d0 00 00
	00		 fstp	 DWORD PTR [edi+208]
  00378	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  0037d	f7 e9		 imul	 ecx
  0037f	c1 fa 05	 sar	 edx, 5
  00382	8b ca		 mov	 ecx, edx
  00384	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00387	03 ca		 add	 ecx, edx

; 346  : 
; 347  : 				iAttackDamage -= lc22;

  00389	03 f1		 add	 esi, ecx
  0038b	89 75 0c	 mov	 DWORD PTR _iAttackDamage$[ebp], esi

; 348  : 				ManaChange = TRUE;

  0038e	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ManaChange$[ebp], 1
  00395	eb 02		 jmp	 SHORT $LN49@Attack
$LN60@Attack:
  00397	dd d8		 fstp	 ST(0)
$LN49@Attack:

; 349  : 			}
; 350  : 		}
; 351  : 
; 352  : 		lpTargetObj->Life -= iAttackDamage;

  00399	d9 87 bc 00 00
	00		 fld	 DWORD PTR [edi+188]
  0039f	da 65 0c	 fisub	 DWORD PTR _iAttackDamage$[ebp]
  003a2	d9 5d 08	 fstp	 DWORD PTR tv573[ebp]
  003a5	d9 45 08	 fld	 DWORD PTR tv573[ebp]
  003a8	d9 97 bc 00 00
	00		 fst	 DWORD PTR [edi+188]

; 353  : 
; 354  : 		if ( lpTargetObj->Life < 0.0f )

  003ae	d9 ee		 fldz
  003b0	d8 d1		 fcom	 ST(1)
  003b2	df e0		 fnstsw	 ax
  003b4	dd d9		 fstp	 ST(1)
  003b6	f6 c4 41	 test	 ah, 65			; 00000041H
  003b9	75 08		 jne	 SHORT $LN63@Attack

; 355  : 		{
; 356  : 			lpTargetObj->Life = 0;

  003bb	d9 9f bc 00 00
	00		 fstp	 DWORD PTR [edi+188]
  003c1	eb 02		 jmp	 SHORT $LN47@Attack
$LN63@Attack:
  003c3	dd d8		 fstp	 ST(0)
$LN47@Attack:

; 357  : 		}
; 358  : 	}
; 359  : 
; 360  : 	if ( iAttackDamage >= 1 )

  003c5	83 fe 01	 cmp	 esi, 1
  003c8	7c 11		 jl	 SHORT $LN9@Attack

; 361  : 	{
; 362  : 		if ( lpTargetObj->Type == OBJ_USER )

  003ca	66 83 7f 60 01	 cmp	 WORD PTR [edi+96], 1
  003cf	75 0a		 jne	 SHORT $LN9@Attack

; 363  : 		{
; 364  : 			gObjArmorRandomDurDown(lpTargetObj, lpObj);

  003d1	53		 push	 ebx
  003d2	57		 push	 edi
  003d3	e8 00 00 00 00	 call	 ?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z ; gObjArmorRandomDurDown
  003d8	83 c4 08	 add	 esp, 8
$LN9@Attack:

; 365  : 		}
; 366  : 	}
; 367  : 
; 368  : 	if ( iAttackDamage >= 5 )

  003db	83 fe 05	 cmp	 esi, 5
  003de	7c 52		 jl	 SHORT $LN50@Attack

; 369  : 	{
; 370  : 		if ( lpTargetObj->Type == OBJ_MONSTER )

  003e0	66 83 7f 60 02	 cmp	 WORD PTR [edi+96], 2
  003e5	75 24		 jne	 SHORT $LN7@Attack

; 371  : 		{
; 372  : 			if ( (rand()%26) == 0 )

  003e7	e8 00 00 00 00	 call	 _rand
  003ec	99		 cdq
  003ed	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  003f2	f7 f9		 idiv	 ecx
  003f4	85 d2		 test	 edx, edx
  003f6	75 3a		 jne	 SHORT $LN50@Attack

; 373  : 			{
; 374  : 				gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  003f8	52		 push	 edx
  003f9	8b 13		 mov	 edx, DWORD PTR [ebx]
  003fb	6a 64		 push	 100			; 00000064H
  003fd	52		 push	 edx
  003fe	6a 04		 push	 4
  00400	57		 push	 edi
  00401	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  00406	83 c4 14	 add	 esp, 20			; 00000014H

; 375  : 			}
; 376  : 		}

  00409	eb 27		 jmp	 SHORT $LN50@Attack
$LN7@Attack:

; 377  : 		else if ( (rand()%4) == 0 )

  0040b	e8 00 00 00 00	 call	 _rand
  00410	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00415	79 05		 jns	 SHORT $LN65@Attack
  00417	48		 dec	 eax
  00418	83 c8 fc	 or	 eax, -4			; fffffffcH
  0041b	40		 inc	 eax
$LN65@Attack:
  0041c	75 14		 jne	 SHORT $LN50@Attack

; 378  : 		{
; 379  : 			if ( gObjUniriaSprite(lpTargetObj) == FALSE )

  0041e	57		 push	 edi
  0041f	e8 00 00 00 00	 call	 ?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjUniriaSprite
  00424	83 c4 04	 add	 esp, 4
  00427	85 c0		 test	 eax, eax
  00429	75 07		 jne	 SHORT $LN50@Attack

; 380  : 			{
; 381  : 				MSBFlag = TRUE;

  0042b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _MSBFlag$[ebp], 1
$LN50@Attack:

; 382  : 			}
; 383  : 		}
; 384  : 	}
; 385  : 
; 386  : 	if ( ManaChange != FALSE )

  00432	83 7d f8 00	 cmp	 DWORD PTR _ManaChange$[ebp], 0
  00436	74 25		 je	 SHORT $LN2@Attack

; 387  : 	{
; 388  : 		GCManaSend(lpTargetObj->m_Index, lpTargetObj->Mana, (BYTE)-1, 0, lpTargetObj->BP);

  00438	8b 87 e8 00 00
	00		 mov	 eax, DWORD PTR [edi+232]
  0043e	d9 87 d0 00 00
	00		 fld	 DWORD PTR [edi+208]
  00444	50		 push	 eax
  00445	6a 00		 push	 0
  00447	68 ff 00 00 00	 push	 255			; 000000ffH
  0044c	e8 00 00 00 00	 call	 __ftol2_sse
  00451	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00453	50		 push	 eax
  00454	51		 push	 ecx
  00455	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0045a	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@Attack:

; 389  : 	}
; 390  : 
; 391  : 	lpObj->m_Rest = 0;

  0045d	c6 83 c1 01 00
	00 00		 mov	 BYTE PTR [ebx+449], 0

; 392  : 
; 393  : 	if ( iAttackDamage > 0 )

  00464	85 f6		 test	 esi, esi
  00466	7e 1a		 jle	 SHORT $LN1@Attack

; 394  : 	{
; 395  : 		gObjLifeCheck(lpTargetObj, lpObj, iAttackDamage, 0, MSBFlag, MsgDamage, iSkill);

  00468	8b 55 fc	 mov	 edx, DWORD PTR _iSkill$[ebp]
  0046b	0f b6 45 13	 movzx	 eax, BYTE PTR _MsgDamage$[ebp]
  0046f	8b 4d f4	 mov	 ecx, DWORD PTR _MSBFlag$[ebp]
  00472	52		 push	 edx
  00473	50		 push	 eax
  00474	51		 push	 ecx
  00475	6a 00		 push	 0
  00477	56		 push	 esi
  00478	53		 push	 ebx
  00479	57		 push	 edi
  0047a	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHE@Z ; gObjLifeCheck
  0047f	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@Attack:

; 396  : 	}
; 397  : 
; 398  : 	return TRUE;

  00482	5e		 pop	 esi
  00483	5f		 pop	 edi
  00484	b8 01 00 00 00	 mov	 eax, 1
  00489	5b		 pop	 ebx

; 399  : }

  0048a	8b e5		 mov	 esp, ebp
  0048c	5d		 pop	 ebp
  0048d	c2 14 00	 ret	 20			; 00000014H
?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ENDP ; CWeapon::Attack
_TEXT	ENDS
PUBLIC	?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z	; CWeapon::AddWeaponDamagedTargetInfo
; Function compile flags: /Ogtp
;	COMDAT ?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z
_TEXT	SEGMENT
_iWeaponIndex$ = 8					; size = 4
_iTargetIndex$ = 12					; size = 4
_iDelayTime$ = 16					; size = 4
?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z PROC	; CWeapon::AddWeaponDamagedTargetInfo, COMDAT
; _this$ = ecx

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 405  : 	for (int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00003	33 c0		 xor	 eax, eax
  00005	8d 51 10	 lea	 edx, DWORD PTR [ecx+16]
$LL4@AddWeaponD:

; 406  : 	{
; 407  : 		if ( this->m_WeaponDamagedTargetInfo[i].m_IsUsed == FALSE )

  00008	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000b	74 0f		 je	 SHORT $LN8@AddWeaponD

; 405  : 	for (int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  0000d	40		 inc	 eax
  0000e	83 c2 10	 add	 edx, 16			; 00000010H
  00011	83 f8 64	 cmp	 eax, 100		; 00000064H
  00014	7c f2		 jl	 SHORT $LL4@AddWeaponD

; 415  : 		}
; 416  : 	}
; 417  : 
; 418  : 	return FALSE;

  00016	33 c0		 xor	 eax, eax

; 419  : }

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
$LN8@AddWeaponD:

; 408  : 		{
; 409  : 			this->m_WeaponDamagedTargetInfo[i].m_iWeaponObjIndex = iWeaponIndex;

  0001c	03 c0		 add	 eax, eax
  0001e	56		 push	 esi
  0001f	8d 34 c1	 lea	 esi, DWORD PTR [ecx+eax*8]
  00022	8b 45 08	 mov	 eax, DWORD PTR _iWeaponIndex$[ebp]

; 410  : 			this->m_WeaponDamagedTargetInfo[i].m_iTargetObjIndex = iTargetIndex;

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _iTargetIndex$[ebp]
  00028	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 411  : 			this->m_WeaponDamagedTargetInfo[i].m_iDamageDealingTime = GetTickCount() + iDelayTime;

  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00034	03 45 10	 add	 eax, DWORD PTR _iDelayTime$[ebp]

; 412  : 			this->m_WeaponDamagedTargetInfo[i].m_IsUsed = TRUE;

  00037	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1
  0003e	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 413  : 
; 414  : 			return TRUE;

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	5e		 pop	 esi

; 419  : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z ENDP	; CWeapon::AddWeaponDamagedTargetInfo
_TEXT	ENDS
PUBLIC	?WeaponAttackProc@CWeapon@@QAEXXZ		; CWeapon::WeaponAttackProc
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
; Function compile flags: /Ogtp
;	COMDAT ?WeaponAttackProc@CWeapon@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv638 = -4						; size = 4
?WeaponAttackProc@CWeapon@@QAEXXZ PROC			; CWeapon::WeaponAttackProc, COMDAT
; _this$ = ecx

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 425  : 	for (int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  0000c	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
  0000f	c7 45 fc 64 00
	00 00		 mov	 DWORD PTR tv638[ebp], 100 ; 00000064H
$LL7@WeaponAtta:

; 426  : 	{
; 427  : 		if ( this->m_WeaponDamagedTargetInfo[i].m_IsUsed == TRUE )

  00016	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  0001a	75 71		 jne	 SHORT $LN6@WeaponAtta

; 428  : 		{
; 429  : 			if ( this->m_WeaponDamagedTargetInfo[i].m_iDamageDealingTime > GetTickCount() )

  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00022	39 06		 cmp	 DWORD PTR [esi], eax
  00024	77 67		 ja	 SHORT $LN6@WeaponAtta

; 430  : 			{
; 431  : 				continue;
; 432  : 			}
; 433  : 
; 434  : 			LPOBJ lpTargetObj = &gObj[this->m_WeaponDamagedTargetInfo[i].m_iTargetObjIndex];

  00026	8b 5e fc	 mov	 ebx, DWORD PTR [esi-4]

; 435  : 			LPOBJ lpWeaponObj = & gObj[this->m_WeaponDamagedTargetInfo[i].m_iWeaponObjIndex];

  00029	8b 7e f8	 mov	 edi, DWORD PTR [esi-8]
  0002c	69 db 64 15 00
	00		 imul	 ebx, 5476		; 00001564H
  00032	69 ff 64 15 00
	00		 imul	 edi, 5476		; 00001564H
  00038	81 c3 00 00 00
	00		 add	 ebx, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 436  : 
; 437  : 			if ( gObjIsConnected(lpTargetObj) == FALSE )

  0003e	53		 push	 ebx
  0003f	81 c7 00 00 00
	00		 add	 edi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  0004a	83 c4 04	 add	 esp, 4
  0004d	85 c0		 test	 eax, eax

; 438  : 			{
; 439  : 				this->m_WeaponDamagedTargetInfo[i].RESET();
; 440  : 				continue;

  0004f	74 26		 je	 SHORT $LN21@WeaponAtta

; 441  : 			}
; 442  : 
; 443  : 			if (  OBJMAX_RANGE(lpWeaponObj->m_Index) == FALSE )

  00051	8b 07		 mov	 eax, DWORD PTR [edi]
  00053	85 c0		 test	 eax, eax
  00055	78 20		 js	 SHORT $LN21@WeaponAtta
  00057	33 c9		 xor	 ecx, ecx
  00059	3d e7 1c 00 00	 cmp	 eax, 7399		; 00001ce7H
  0005e	0f 9e c1	 setle	 cl
  00061	8b c1		 mov	 eax, ecx
  00063	85 c0		 test	 eax, eax

; 444  : 			{
; 445  : 				this->m_WeaponDamagedTargetInfo[i].RESET();
; 446  : 				continue;

  00065	74 10		 je	 SHORT $LN21@WeaponAtta

; 447  : 			}
; 448  : 
; 449  : 			this->Attack(lpWeaponObj, lpTargetObj, NULL, FALSE, 0);

  00067	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	6a 00		 push	 0
  00070	53		 push	 ebx
  00071	57		 push	 edi
  00072	e8 00 00 00 00	 call	 ?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ; CWeapon::Attack
$LN21@WeaponAtta:

; 450  : 
; 451  : 			this->m_WeaponDamagedTargetInfo[i].RESET();

  00077	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0007e	83 c8 ff	 or	 eax, -1
  00081	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00087	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  0008a	89 46 f8	 mov	 DWORD PTR [esi-8], eax
$LN6@WeaponAtta:

; 425  : 	for (int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  0008d	83 c6 10	 add	 esi, 16			; 00000010H
  00090	ff 4d fc	 dec	 DWORD PTR tv638[ebp]
  00093	75 81		 jne	 SHORT $LL7@WeaponAtta
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 452  : 		}
; 453  : 	}
; 454  : 
; 455  : }

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?WeaponAttackProc@CWeapon@@QAEXXZ ENDP			; CWeapon::WeaponAttackProc
_TEXT	ENDS
PUBLIC	?WeaponAct@CWeapon@@QAEXH@Z			; CWeapon::WeaponAct
; Function compile flags: /Ogtp
;	COMDAT ?WeaponAct@CWeapon@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?WeaponAct@CWeapon@@QAEXH@Z PROC			; CWeapon::WeaponAct, COMDAT
; _this$ = ecx

; 460  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 461  : 	for (int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00006	8d b1 4c 06 00
	00		 lea	 esi, DWORD PTR [ecx+1612]
  0000c	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
  00011	83 cb ff	 or	 ebx, -1
$LL6@WeaponAct:

; 462  : 	{
; 463  : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == TRUE )

  00014	83 7e 08 01	 cmp	 DWORD PTR [esi+8], 1
  00018	75 25		 jne	 SHORT $LN5@WeaponAct

; 464  : 		{
; 465  : 			if ( this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex == iIndex )

  0001a	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  0001d	39 46 f8	 cmp	 DWORD PTR [esi-8], eax
  00020	75 1d		 jne	 SHORT $LN5@WeaponAct

; 466  : 			{
; 467  : 				if ( this->m_WeaponCalDamageInfo[i].m_iLimitTime < GetTickCount() )

  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00028	39 46 04	 cmp	 DWORD PTR [esi+4], eax
  0002b	73 12		 jae	 SHORT $LN5@WeaponAct

; 468  : 				{
; 469  : 					this->m_WeaponCalDamageInfo[i].RESET();

  0002d	89 5e f8	 mov	 DWORD PTR [esi-8], ebx
  00030	89 5e fc	 mov	 DWORD PTR [esi-4], ebx
  00033	89 1e		 mov	 DWORD PTR [esi], ebx
  00035	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00038	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@WeaponAct:

; 461  : 	for (int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  0003f	83 c6 14	 add	 esi, 20			; 00000014H
  00042	4f		 dec	 edi
  00043	75 cf		 jne	 SHORT $LL6@WeaponAct
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 470  : 				}
; 471  : 			}
; 472  : 		}
; 473  : 	}
; 474  : }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?WeaponAct@CWeapon@@QAEXH@Z ENDP			; CWeapon::WeaponAct
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCWeapon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWeapon@@UAEPAXI@Z PROC				; CWeapon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWeapon@@UAE@XZ	; CWeapon::~CWeapon
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCWeapon@@UAEPAXI@Z ENDP				; CWeapon::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_CsNPC_Weapon@@YAXXZ
text$yc	SEGMENT
??__Eg_CsNPC_Weapon@@YAXXZ PROC				; `dynamic initializer for 'g_CsNPC_Weapon'', COMDAT

; 11   : CWeapon g_CsNPC_Weapon;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Weapon@@3VCWeapon@@A ; g_CsNPC_Weapon
  00005	e8 00 00 00 00	 call	 ??0CWeapon@@QAE@XZ	; CWeapon::CWeapon
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_Weapon@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_Weapon''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_Weapon@@YAXXZ ENDP				; `dynamic initializer for 'g_CsNPC_Weapon''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_CsNPC_Weapon@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_Weapon@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CsNPC_Weapon'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Weapon@@3VCWeapon@@A ; g_CsNPC_Weapon
  00005	e9 00 00 00 00	 jmp	 ??1CWeapon@@UAE@XZ	; CWeapon::~CWeapon
??__Fg_CsNPC_Weapon@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CsNPC_Weapon''
text$yd	ENDS
PUBLIC	?g_CsNPC_Weapon@@3VCWeapon@@A			; g_CsNPC_Weapon
_BSS	SEGMENT
?g_CsNPC_Weapon@@3VCWeapon@@A DB 0a2cH DUP (?)		; g_CsNPC_Weapon
_BSS	ENDS
CRT$XCU	SEGMENT
_g_CsNPC_Weapon$initializer$ DD FLAT:??__Eg_CsNPC_Weapon@@YAXXZ
CRT$XCU	ENDS
END
