; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\DevilSquare.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	070H
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
_g_sttCHAOSCASTLE_LEVEL DD 0aH
	DD	031H
	DD	0aH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?DevilSquareEventProtocolCore@@YAXEPAEH@Z	; DevilSquareEventProtocolCore
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\devilsquare.cpp
;	COMDAT ?DevilSquareEventProtocolCore@@YAXEPAEH@Z
_TEXT	SEGMENT
_protoNum$ = 8						; size = 1
_aRecv$ = 12						; size = 4
_aLen$ = 16						; size = 4
?DevilSquareEventProtocolCore@@YAXEPAEH@Z PROC		; DevilSquareEventProtocolCore, COMDAT

; 31   : 	#ifdef TRACE_PROTOCOL
; 32   : 		LogAddHeadHex("DEVIL_SQUARE", aRecv, aLen);
; 33   : 	#endif
; 34   : 	switch ( protoNum )
; 35   : 	{
; 36   : 	}
; 37   : }

  00000	c3		 ret	 0
?DevilSquareEventProtocolCore@@YAXEPAEH@Z ENDP		; DevilSquareEventProtocolCore
_TEXT	ENDS
PUBLIC	??_C@_0BP@EMDINEAJ@Can?5not?5connect?5Ranking?5Server?$AA@ ; `string'
PUBLIC	?DataSendRank@@YAXPADH@Z			; DataSendRank
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?GMRankingServerConnect@@YAHPADK@Z:PROC		; GMRankingServerConnect
EXTRN	?gDevilSquareEventServerIp@@3PADA:BYTE		; gDevilSquareEventServerIp
EXTRN	?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z:PROC ; MyWinsockBase::CreateSocket
EXTRN	?ghWnd@@3PAUHWND__@@A:DWORD			; ghWnd
EXTRN	?Close@MyWinsockBase@@QAEHXZ:PROC		; MyWinsockBase::Close
EXTRN	?wsRServerCli@@3VwsJoinServerCli@@A:BYTE	; wsRServerCli
EXTRN	?DevilSquareEventConnect@@3HA:DWORD		; DevilSquareEventConnect
EXTRN	?IsDevilSquareEventConnected@@3HA:DWORD		; IsDevilSquareEventConnected
;	COMDAT ??_C@_0BP@EMDINEAJ@Can?5not?5connect?5Ranking?5Server?$AA@
CONST	SEGMENT
??_C@_0BP@EMDINEAJ@Can?5not?5connect?5Ranking?5Server?$AA@ DB 'Can not co'
	DB	'nnect Ranking Server', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DataSendRank@@YAXPADH@Z
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
_size$ = 12						; size = 4
?DataSendRank@@YAXPADH@Z PROC				; DataSendRank, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 	if ( IsDevilSquareEventConnected == FALSE && DevilSquareEventConnect == FALSE )

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?IsDevilSquareEventConnected@@3HA ; IsDevilSquareEventConnected
  00008	85 c0		 test	 eax, eax
  0000a	75 57		 jne	 SHORT $LN3@DataSendRa
  0000c	39 05 00 00 00
	00		 cmp	 DWORD PTR ?DevilSquareEventConnect@@3HA, eax ; DevilSquareEventConnect
  00012	75 6e		 jne	 SHORT $LN1@DataSendRa

; 43   : 	{
; 44   : 		wsRServerCli.Close();

  00014	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A+4
  00019	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close

; 45   : 		wsRServerCli.CreateSocket(ghWnd);

  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  00023	50		 push	 eax
  00024	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A+4
  00029	e8 00 00 00 00	 call	 ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ; MyWinsockBase::CreateSocket

; 46   : 
; 47   : 		if ( GMRankingServerConnect(gDevilSquareEventServerIp, WM_GM_RANKING_CLIENT_MSG_PROC) == FALSE )

  0002e	68 0c 04 00 00	 push	 1036			; 0000040cH
  00033	68 00 00 00 00	 push	 OFFSET ?gDevilSquareEventServerIp@@3PADA ; gDevilSquareEventServerIp
  00038	e8 00 00 00 00	 call	 ?GMRankingServerConnect@@YAHPADK@Z ; GMRankingServerConnect
  0003d	83 c4 08	 add	 esp, 8
  00040	85 c0		 test	 eax, eax
  00042	75 15		 jne	 SHORT $LN2@DataSendRa

; 48   : 		{
; 49   : 			IsDevilSquareEventConnected = FALSE;
; 50   : 			LogAdd(LOG_BLACK, "Can not connect Ranking Server");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EMDINEAJ@Can?5not?5connect?5Ranking?5Server?$AA@
  00049	50		 push	 eax
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, eax ; IsDevilSquareEventConnected
  0004f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00054	83 c4 08	 add	 esp, 8

; 61   : 	}
; 62   : }

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN2@DataSendRa:

; 51   : 
; 52   : 			return;
; 53   : 		}
; 54   : 
; 55   : 		IsDevilSquareEventConnected = TRUE;

  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	a3 00 00 00 00	 mov	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, eax ; IsDevilSquareEventConnected
$LN3@DataSendRa:

; 56   : 	}
; 57   : 
; 58   : 	if ( DevilSquareEventConnect == FALSE && IsDevilSquareEventConnected != FALSE )

  00063	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DevilSquareEventConnect@@3HA, 0 ; DevilSquareEventConnect
  0006a	75 16		 jne	 SHORT $LN1@DataSendRa
  0006c	85 c0		 test	 eax, eax
  0006e	74 12		 je	 SHORT $LN1@DataSendRa

; 59   : 	{
; 60   : 		wsRServerCli.DataSend(pMsg, size);

  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  00073	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  00076	51		 push	 ecx
  00077	52		 push	 edx
  00078	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A ; wsRServerCli
  0007d	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend
$LN1@DataSendRa:

; 61   : 	}
; 62   : }

  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?DataSendRank@@YAXPADH@Z ENDP				; DataSendRank
_TEXT	ENDS
PUBLIC	??_7CDevilSquare@@6B@				; CDevilSquare::`vftable'
PUBLIC	??0CDevilSquare@@QAE@XZ				; CDevilSquare::CDevilSquare
PUBLIC	??_R4CDevilSquare@@6B@				; CDevilSquare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDevilSquare@@@8			; CDevilSquare `RTTI Type Descriptor'
PUBLIC	??_R3CDevilSquare@@8				; CDevilSquare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDevilSquare@@8				; CDevilSquare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDevilSquare@@8			; CDevilSquare::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0CDevilSquareGround@@QAE@XZ:PROC		; CDevilSquareGround::CDevilSquareGround
EXTRN	??1CDevilSquareGround@@UAE@XZ:PROC		; CDevilSquareGround::~CDevilSquareGround
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECDevilSquare@@UAEPAXI@Z:PROC		; CDevilSquare::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CDevilSquare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDevilSquare@@8 DD FLAT:??_R0?AVCDevilSquare@@@8 ; CDevilSquare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDevilSquare@@8
rdata$r	ENDS
;	COMDAT ??_R2CDevilSquare@@8
rdata$r	SEGMENT
??_R2CDevilSquare@@8 DD FLAT:??_R1A@?0A@EA@CDevilSquare@@8 ; CDevilSquare::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDevilSquare@@8
rdata$r	SEGMENT
??_R3CDevilSquare@@8 DD 00H				; CDevilSquare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDevilSquare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDevilSquare@@@8
_DATA	SEGMENT
??_R0?AVCDevilSquare@@@8 DD FLAT:??_7type_info@@6B@	; CDevilSquare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDevilSquare@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDevilSquare@@6B@
rdata$r	SEGMENT
??_R4CDevilSquare@@6B@ DD 00H				; CDevilSquare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDevilSquare@@@8
	DD	FLAT:??_R3CDevilSquare@@8
rdata$r	ENDS
;	COMDAT ??_7CDevilSquare@@6B@
CONST	SEGMENT
??_7CDevilSquare@@6B@ DD FLAT:??_R4CDevilSquare@@6B@	; CDevilSquare::`vftable'
	DD	FLAT:??_ECDevilSquare@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CDevilSquare@@QAE@XZ
_TEXT	SEGMENT
??0CDevilSquare@@QAE@XZ PROC				; CDevilSquare::CDevilSquare, COMDAT
; _this$ = ecx

; 66   : {

  00000	56		 push	 esi
  00001	68 00 00 00 00	 push	 OFFSET ??1CDevilSquareGround@@UAE@XZ ; CDevilSquareGround::~CDevilSquareGround
  00006	68 00 00 00 00	 push	 OFFSET ??0CDevilSquareGround@@QAE@XZ ; CDevilSquareGround::CDevilSquareGround
  0000b	8b f1		 mov	 esi, ecx
  0000d	6a 06		 push	 6
  0000f	68 94 04 00 00	 push	 1172			; 00000494H
  00014	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  00017	50		 push	 eax
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDevilSquare@@6B@
  0001e	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z

; 67   : 	this->m_bQuit = FALSE;

  00023	33 c0		 xor	 eax, eax

; 68   : 	this->m_iCloseTime = 2;

  00025	b9 02 00 00 00	 mov	 ecx, 2
  0002a	89 4e 24	 mov	 DWORD PTR [esi+36], ecx

; 69   : 	this->m_iOpenTime = 2;

  0002d	89 4e 28	 mov	 DWORD PTR [esi+40], ecx

; 70   : 	this->m_iPlaytime = 10;

  00030	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00035	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx

; 71   : 	this->m_BonusScoreTable[0][0] = 0;
; 72   : 	this->m_BonusScoreTable[0][1] = 0;
; 73   : 	this->m_BonusScoreTable[0][2] = 0;
; 74   : 	this->m_BonusScoreTable[0][3] = 170;
; 75   : 	
; 76   : 	this->m_BonusScoreTable[1][0] = 20;
; 77   : 	this->m_BonusScoreTable[1][1] = 90;
; 78   : 	this->m_BonusScoreTable[1][2] = 120;
; 79   : 	this->m_BonusScoreTable[1][3] = 400;

  00038	ba 90 01 00 00	 mov	 edx, 400		; 00000190H

; 80   : 
; 81   : 	this->m_BonusScoreTable[2][0] = 10;

  0003d	89 8e d8 1b 00
	00		 mov	 DWORD PTR [esi+7128], ecx

; 82   : 	this->m_BonusScoreTable[2][1] = 10;

  00043	89 8e dc 1b 00
	00		 mov	 DWORD PTR [esi+7132], ecx

; 83   : 	this->m_BonusScoreTable[2][2] = 10;

  00049	89 8e e0 1b 00
	00		 mov	 DWORD PTR [esi+7136], ecx

; 84   : 	this->m_BonusScoreTable[2][3] = 200;

  0004f	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00054	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00057	89 86 a8 1b 00
	00		 mov	 DWORD PTR [esi+7080], eax
  0005d	89 86 ac 1b 00
	00		 mov	 DWORD PTR [esi+7084], eax
  00063	89 86 b0 1b 00
	00		 mov	 DWORD PTR [esi+7088], eax

; 85   : 
; 86   : 	this->m_BonusScoreTable[3][0] = 0;

  00069	89 86 f0 1b 00
	00		 mov	 DWORD PTR [esi+7152], eax

; 87   : 	this->m_BonusScoreTable[3][1] = 0;

  0006f	89 86 f4 1b 00
	00		 mov	 DWORD PTR [esi+7156], eax

; 88   : 	this->m_BonusScoreTable[3][2] = 0;

  00075	89 86 f8 1b 00
	00		 mov	 DWORD PTR [esi+7160], eax

; 89   : 	this->m_BonusScoreTable[3][3] = 0;

  0007b	89 86 fc 1b 00
	00		 mov	 DWORD PTR [esi+7164], eax

; 90   : 
; 91   : 	this->m_BonusScoreTable[0][4] = 170;
; 92   : 	this->m_BonusScoreTable[0][5] = 170;
; 93   : 
; 94   : 	this->m_BonusScoreTable[1][4] = 400;
; 95   : 	this->m_BonusScoreTable[1][5] = 400;
; 96   : 
; 97   : 	this->m_BonusScoreTable[2][4] = 200;
; 98   : 	this->m_BonusScoreTable[2][5] = 200;
; 99   : 
; 100  : 	this->m_BonusScoreTable[3][4] = 0;

  00081	89 86 00 1c 00
	00		 mov	 DWORD PTR [esi+7168], eax

; 101  : 	this->m_BonusScoreTable[3][5] = 0;

  00087	89 86 04 1c 00
	00		 mov	 DWORD PTR [esi+7172], eax

; 102  : 
; 103  : 	this->m_BonusScoreTable[4][0] = 0;

  0008d	89 86 08 1c 00
	00		 mov	 DWORD PTR [esi+7176], eax

; 104  : 	this->m_BonusScoreTable[4][1] = 0;

  00093	89 86 0c 1c 00
	00		 mov	 DWORD PTR [esi+7180], eax

; 105  : 	this->m_BonusScoreTable[4][2] = 0;

  00099	89 86 10 1c 00
	00		 mov	 DWORD PTR [esi+7184], eax

; 106  : 	this->m_BonusScoreTable[4][3] = 0;

  0009f	89 86 14 1c 00
	00		 mov	 DWORD PTR [esi+7188], eax

; 107  : 	this->m_BonusScoreTable[4][4] = 0;

  000a5	89 86 18 1c 00
	00		 mov	 DWORD PTR [esi+7192], eax

; 108  : 	this->m_BonusScoreTable[4][5] = 0;

  000ab	89 86 1c 1c 00
	00		 mov	 DWORD PTR [esi+7196], eax
  000b1	c7 86 b4 1b 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+7092], 170 ; 000000aaH
  000bb	c7 86 c0 1b 00
	00 14 00 00 00	 mov	 DWORD PTR [esi+7104], 20 ; 00000014H
  000c5	c7 86 c4 1b 00
	00 5a 00 00 00	 mov	 DWORD PTR [esi+7108], 90 ; 0000005aH
  000cf	c7 86 c8 1b 00
	00 78 00 00 00	 mov	 DWORD PTR [esi+7112], 120 ; 00000078H
  000d9	89 96 cc 1b 00
	00		 mov	 DWORD PTR [esi+7116], edx
  000df	89 8e e4 1b 00
	00		 mov	 DWORD PTR [esi+7140], ecx
  000e5	c7 86 b8 1b 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+7096], 170 ; 000000aaH
  000ef	c7 86 bc 1b 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+7100], 170 ; 000000aaH
  000f9	89 96 d0 1b 00
	00		 mov	 DWORD PTR [esi+7120], edx
  000ff	89 96 d4 1b 00
	00		 mov	 DWORD PTR [esi+7124], edx
  00105	89 8e e8 1b 00
	00		 mov	 DWORD PTR [esi+7144], ecx
  0010b	89 8e ec 1b 00
	00		 mov	 DWORD PTR [esi+7148], ecx

; 109  : }

  00111	8b c6		 mov	 eax, esi
  00113	5e		 pop	 esi
  00114	c3		 ret	 0
??0CDevilSquare@@QAE@XZ ENDP				; CDevilSquare::CDevilSquare
_TEXT	ENDS
PUBLIC	??1CDevilSquare@@UAE@XZ				; CDevilSquare::~CDevilSquare
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??1CDevilSquare@@UAE@XZ
_TEXT	SEGMENT
??1CDevilSquare@@UAE@XZ PROC				; CDevilSquare::~CDevilSquare, COMDAT
; _this$ = ecx

; 113  : 	this->m_bQuit = TRUE;
; 114  : }

  00000	68 00 00 00 00	 push	 OFFSET ??1CDevilSquareGround@@UAE@XZ ; CDevilSquareGround::~CDevilSquareGround
  00005	6a 06		 push	 6
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CDevilSquare@@6B@
  0000d	c7 41 18 01 00
	00 00		 mov	 DWORD PTR [ecx+24], 1
  00014	68 94 04 00 00	 push	 1172			; 00000494H
  00019	83 c1 30	 add	 ecx, 48			; 00000030H
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00022	c3		 ret	 0
??1CDevilSquare@@UAE@XZ ENDP				; CDevilSquare::~CDevilSquare
_TEXT	ENDS
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CDevilSquare@@QAEXPAD@Z			; CDevilSquare::Load
EXTRN	_fclose:PROC
EXTRN	?SetBonus@CDevilSquareGround@@QAEXHHH@Z:PROC	; CDevilSquareGround::SetBonus
EXTRN	?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z:PROC	; CDevilSquareGround::SetBoss
EXTRN	?Set@CDevilSquareGround@@QAEXGHH@Z:PROC		; CDevilSquareGround::Set
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	?Init@CDevilSquareGround@@QAEXH@Z:PROC		; CDevilSquareGround::Init
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@
CONST	SEGMENT
??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@ DB '[Devil'
	DB	'Square] Info file Load Fail [%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CDevilSquare@@QAEXPAD@Z
_TEXT	SEGMENT
_x$ = -20						; size = 4
_y$ = -16						; size = 4
_tx$ = -12						; size = 4
_type$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?Load@CDevilSquare@@QAEXPAD@Z PROC			; CDevilSquare::Load, COMDAT
; _this$ = ecx

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx

; 135  : 	for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  0000e	33 f6		 xor	 esi, esi
  00010	8d 7b 30	 lea	 edi, DWORD PTR [ebx+48]
$LL20@Load:

; 136  : 	{
; 137  : 		this->m_DevilSquareGround[i].Init(i);

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ?Init@CDevilSquareGround@@QAEXH@Z ; CDevilSquareGround::Init
  0001b	46		 inc	 esi
  0001c	81 c7 94 04 00
	00		 add	 edi, 1172		; 00000494H
  00022	83 fe 06	 cmp	 esi, 6
  00025	7c ec		 jl	 SHORT $LL20@Load

; 138  : 	}
; 139  : 
; 140  : 	int Token;
; 141  : 	int number;
; 142  : 	int type;
; 143  : 	int monstertype;
; 144  : 	int starttime;
; 145  : 	int endtime;
; 146  : 	int x;
; 147  : 	int y;
; 148  : 	int tx;
; 149  : 	int ty;
; 150  : 
; 151  : 	SMDFile = fopen(filename, "r");

  00027	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _fopen
  00035	83 c4 08	 add	 esp, 8
  00038	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 152  : 
; 153  : 	if ( SMDFile == NULL )

  0003d	85 c0		 test	 eax, eax
  0003f	75 17		 jne	 SHORT $LN25@Load

; 154  : 	{
; 155  : 		MsgBox("[DevilSquare] Info file Load Fail [%s]", filename);

  00041	56		 push	 esi
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@
  00047	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0004c	83 c4 08	 add	 esp, 8
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx

; 275  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN25@Load:

; 156  : 		return;
; 157  : 	}
; 158  : 
; 159  : 	while ( true )
; 160  : 	{
; 161  : 		Token = GetToken();

  00058	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 162  : 
; 163  : 		if ( Token == 2 )

  0005d	83 f8 02	 cmp	 eax, 2
  00060	0f 84 d6 02 00
	00		 je	 $LN32@Load
  00066	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL16@Load:

; 164  : 		{
; 165  : 			break;
; 166  : 		}
; 167  : 
; 168  : 		type = TokenNumber;

  00070	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00076	e8 00 00 00 00	 call	 __ftol2_sse
  0007b	8b f0		 mov	 esi, eax
  0007d	89 75 f8	 mov	 DWORD PTR _type$[ebp], esi
$LL13@Load:

; 169  : 
; 170  : 		while ( true )
; 171  : 		{
; 172  : 			if ( type == 0 )	// Time Sync

  00080	85 f6		 test	 esi, esi
  00082	75 72		 jne	 SHORT $LN11@Load

; 173  : 			{
; 174  : 				Token = GetToken();

  00084	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 175  : 
; 176  : 				if ( strcmp("end", TokenString) == 0 )

  00089	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0008e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL34@Load:
  00093	8a 10		 mov	 dl, BYTE PTR [eax]
  00095	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00097	75 1a		 jne	 SHORT $LN35@Load
  00099	84 d2		 test	 dl, dl
  0009b	74 12		 je	 SHORT $LN50@Load
  0009d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000a0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a3	75 0e		 jne	 SHORT $LN35@Load
  000a5	83 c0 02	 add	 eax, 2
  000a8	83 c1 02	 add	 ecx, 2
  000ab	84 d2		 test	 dl, dl
  000ad	75 e4		 jne	 SHORT $LL34@Load
$LN50@Load:
  000af	33 c0		 xor	 eax, eax
  000b1	eb 05		 jmp	 SHORT $LN37@Load
$LN35@Load:
  000b3	1b c0		 sbb	 eax, eax
  000b5	83 d8 ff	 sbb	 eax, -1
$LN37@Load:
  000b8	85 c0		 test	 eax, eax
  000ba	0f 84 6b 02 00
	00		 je	 $LN52@Load

; 177  : 				{
; 178  : 					break;
; 179  : 				}
; 180  : 
; 181  : 				this->m_iCloseTime = TokenNumber;

  000c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000c6	e8 00 00 00 00	 call	 __ftol2_sse
  000cb	89 43 24	 mov	 DWORD PTR [ebx+36], eax

; 182  : 
; 183  : 				Token = GetToken();

  000ce	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 184  : 				this->m_iOpenTime = TokenNumber;

  000d3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d9	e8 00 00 00 00	 call	 __ftol2_sse
  000de	89 43 28	 mov	 DWORD PTR [ebx+40], eax

; 185  : 
; 186  : 				Token = GetToken();

  000e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 187  : 				this->m_iPlaytime = TokenNumber;

  000e6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ec	e8 00 00 00 00	 call	 __ftol2_sse
  000f1	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
  000f4	eb 8a		 jmp	 SHORT $LL13@Load
$LN11@Load:

; 188  : 			}
; 189  : 			else if ( type == 1 )	// Normal Monster Settings

  000f6	83 fe 01	 cmp	 esi, 1
  000f9	0f 85 9f 00 00
	00		 jne	 $LN8@Load

; 190  : 			{
; 191  : 				Token = GetToken();

  000ff	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 192  : 
; 193  : 				if ( strcmp("end", TokenString) == 0 )

  00104	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00109	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0010e	8b ff		 npad	 2
$LL38@Load:
  00110	8a 10		 mov	 dl, BYTE PTR [eax]
  00112	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00114	75 1a		 jne	 SHORT $LN39@Load
  00116	84 d2		 test	 dl, dl
  00118	74 12		 je	 SHORT $LN51@Load
  0011a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0011d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00120	75 0e		 jne	 SHORT $LN39@Load
  00122	83 c0 02	 add	 eax, 2
  00125	83 c1 02	 add	 ecx, 2
  00128	84 d2		 test	 dl, dl
  0012a	75 e4		 jne	 SHORT $LL38@Load
$LN51@Load:
  0012c	33 c0		 xor	 eax, eax
  0012e	eb 05		 jmp	 SHORT $LN41@Load
$LN39@Load:
  00130	1b c0		 sbb	 eax, eax
  00132	83 d8 ff	 sbb	 eax, -1
$LN41@Load:
  00135	85 c0		 test	 eax, eax
  00137	0f 84 ee 01 00
	00		 je	 $LN52@Load

; 194  : 				{
; 195  : 					break;
; 196  : 				}
; 197  : 
; 198  : 				number = TokenNumber;	// Devils Square Index;

  0013d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00143	e8 00 00 00 00	 call	 __ftol2_sse
  00148	8b f0		 mov	 esi, eax

; 199  : 
; 200  : 				Token = GetToken();

  0014a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 201  : 				monstertype = TokenNumber;

  0014f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00155	e8 00 00 00 00	 call	 __ftol2_sse
  0015a	8b f8		 mov	 edi, eax

; 202  : 
; 203  : 				Token = GetToken();

  0015c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 204  : 				starttime = TokenNumber;

  00161	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00167	e8 00 00 00 00	 call	 __ftol2_sse
  0016c	8b d8		 mov	 ebx, eax

; 205  : 
; 206  : 				Token = GetToken();

  0016e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 207  : 				endtime = TokenNumber;
; 208  : 
; 209  : 				this->m_DevilSquareGround[number].Set(monstertype, starttime, endtime);

  00173	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00179	e8 00 00 00 00	 call	 __ftol2_sse
  0017e	69 f6 94 04 00
	00		 imul	 esi, 1172		; 00000494H
  00184	50		 push	 eax
  00185	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00188	53		 push	 ebx
  00189	57		 push	 edi
  0018a	8d 4c 06 30	 lea	 ecx, DWORD PTR [esi+eax+48]
  0018e	e8 00 00 00 00	 call	 ?Set@CDevilSquareGround@@QAEXGHH@Z ; CDevilSquareGround::Set
  00193	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
  00196	8b 75 f8	 mov	 esi, DWORD PTR _type$[ebp]
  00199	e9 e2 fe ff ff	 jmp	 $LL13@Load
$LN8@Load:

; 210  : 			}
; 211  : 			else if ( type == 2 )	// Boss Monster Set

  0019e	83 fe 02	 cmp	 esi, 2
  001a1	0f 85 e2 00 00
	00		 jne	 $LN5@Load

; 212  : 			{
; 213  : 				Token = GetToken();

  001a7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 214  : 
; 215  : 				if ( strcmp("end", TokenString) == 0 )

  001ac	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  001b1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL42@Load:
  001b6	8a 10		 mov	 dl, BYTE PTR [eax]
  001b8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001ba	75 1a		 jne	 SHORT $LN43@Load
  001bc	84 d2		 test	 dl, dl
  001be	74 12		 je	 SHORT $LN44@Load
  001c0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001c3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001c6	75 0e		 jne	 SHORT $LN43@Load
  001c8	83 c0 02	 add	 eax, 2
  001cb	83 c1 02	 add	 ecx, 2
  001ce	84 d2		 test	 dl, dl
  001d0	75 e4		 jne	 SHORT $LL42@Load
$LN44@Load:
  001d2	33 c0		 xor	 eax, eax
  001d4	eb 05		 jmp	 SHORT $LN45@Load
$LN43@Load:
  001d6	1b c0		 sbb	 eax, eax
  001d8	83 d8 ff	 sbb	 eax, -1
$LN45@Load:
  001db	85 c0		 test	 eax, eax
  001dd	0f 84 48 01 00
	00		 je	 $LN52@Load

; 216  : 				{
; 217  : 					break;
; 218  : 				}
; 219  : 
; 220  : 				number = TokenNumber;	// Devils Square Index;

  001e3	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001e9	e8 00 00 00 00	 call	 __ftol2_sse
  001ee	8b f0		 mov	 esi, eax

; 221  : 
; 222  : 				Token = GetToken();

  001f0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 223  : 				monstertype = TokenNumber;

  001f5	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001fb	e8 00 00 00 00	 call	 __ftol2_sse
  00200	8b f8		 mov	 edi, eax

; 224  : 
; 225  : 				Token = GetToken();

  00202	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 226  : 				starttime = TokenNumber;

  00207	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0020d	e8 00 00 00 00	 call	 __ftol2_sse
  00212	8b d8		 mov	 ebx, eax

; 227  : 
; 228  : 				Token = GetToken();

  00214	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 229  : 				x = TokenNumber;

  00219	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0021f	e8 00 00 00 00	 call	 __ftol2_sse
  00224	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 230  : 
; 231  : 				Token = GetToken();

  00227	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 232  : 				y = TokenNumber;

  0022c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00232	e8 00 00 00 00	 call	 __ftol2_sse
  00237	89 45 f0	 mov	 DWORD PTR _y$[ebp], eax

; 233  : 
; 234  : 				Token = GetToken();

  0023a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 235  : 				tx = TokenNumber;

  0023f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00245	e8 00 00 00 00	 call	 __ftol2_sse
  0024a	89 45 f4	 mov	 DWORD PTR _tx$[ebp], eax

; 236  : 
; 237  : 				Token = GetToken();

  0024d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 238  : 				ty = TokenNumber;
; 239  : 
; 240  : 				this->m_DevilSquareGround[number].SetBoss(monstertype, starttime, x, y, tx, ty);

  00252	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00258	e8 00 00 00 00	 call	 __ftol2_sse
  0025d	69 f6 94 04 00
	00		 imul	 esi, 1172		; 00000494H
  00263	8b 4d f4	 mov	 ecx, DWORD PTR _tx$[ebp]
  00266	8b 55 f0	 mov	 edx, DWORD PTR _y$[ebp]
  00269	50		 push	 eax
  0026a	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  0026d	51		 push	 ecx
  0026e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00271	52		 push	 edx
  00272	50		 push	 eax
  00273	53		 push	 ebx
  00274	57		 push	 edi
  00275	8d 4c 0e 30	 lea	 ecx, DWORD PTR [esi+ecx+48]
  00279	e8 00 00 00 00	 call	 ?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z ; CDevilSquareGround::SetBoss
  0027e	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
  00281	8b 75 f8	 mov	 esi, DWORD PTR _type$[ebp]
  00284	e9 f7 fd ff ff	 jmp	 $LL13@Load
$LN5@Load:

; 241  : 			}
; 242  : 			else if ( type == 3 ) // Bonus Sttings

  00289	83 fe 03	 cmp	 esi, 3
  0028c	0f 85 ee fd ff
	ff		 jne	 $LL13@Load

; 243  : 			{
; 244  : 				Token = GetToken();

  00292	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 245  : 
; 246  : 				if ( strcmp("end", TokenString) == 0 )

  00297	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  0029c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL46@Load:
  002a1	8a 10		 mov	 dl, BYTE PTR [eax]
  002a3	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002a5	75 1a		 jne	 SHORT $LN47@Load
  002a7	84 d2		 test	 dl, dl
  002a9	74 12		 je	 SHORT $LN48@Load
  002ab	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002ae	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002b1	75 0e		 jne	 SHORT $LN47@Load
  002b3	83 c0 02	 add	 eax, 2
  002b6	83 c1 02	 add	 ecx, 2
  002b9	84 d2		 test	 dl, dl
  002bb	75 e4		 jne	 SHORT $LL46@Load
$LN48@Load:
  002bd	33 c0		 xor	 eax, eax
  002bf	eb 05		 jmp	 SHORT $LN49@Load
$LN47@Load:
  002c1	1b c0		 sbb	 eax, eax
  002c3	83 d8 ff	 sbb	 eax, -1
$LN49@Load:
  002c6	85 c0		 test	 eax, eax
  002c8	74 61		 je	 SHORT $LN52@Load

; 247  : 				{
; 248  : 					break;
; 249  : 				}
; 250  : 
; 251  : 				int index;
; 252  : 				int rank;
; 253  : 				int zen;
; 254  : 				int exp;
; 255  : 
; 256  : 				index = TokenNumber;

  002ca	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002d0	e8 00 00 00 00	 call	 __ftol2_sse
  002d5	8b f0		 mov	 esi, eax

; 257  : 
; 258  : 				Token = GetToken();

  002d7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 259  : 				rank = TokenNumber;

  002dc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002e2	e8 00 00 00 00	 call	 __ftol2_sse
  002e7	8b f8		 mov	 edi, eax

; 260  : 
; 261  : 				Token = GetToken();

  002e9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 262  : 				exp = TokenNumber;

  002ee	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f4	e8 00 00 00 00	 call	 __ftol2_sse
  002f9	8b d8		 mov	 ebx, eax

; 263  : 
; 264  : 				Token = GetToken();

  002fb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 265  : 				zen = TokenNumber;
; 266  : 
; 267  : 				this->m_DevilSquareGround[index].SetBonus(rank, exp, zen);

  00300	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00306	e8 00 00 00 00	 call	 __ftol2_sse
  0030b	69 f6 94 04 00
	00		 imul	 esi, 1172		; 00000494H
  00311	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00314	50		 push	 eax
  00315	53		 push	 ebx
  00316	57		 push	 edi
  00317	8d 4c 16 30	 lea	 ecx, DWORD PTR [esi+edx+48]
  0031b	e8 00 00 00 00	 call	 ?SetBonus@CDevilSquareGround@@QAEXHHH@Z ; CDevilSquareGround::SetBonus

; 268  : 			}
; 269  : 		}

  00320	8b 5d fc	 mov	 ebx, DWORD PTR _this$[ebp]
  00323	8b 75 f8	 mov	 esi, DWORD PTR _type$[ebp]
  00326	e9 55 fd ff ff	 jmp	 $LL13@Load
$LN52@Load:

; 156  : 		return;
; 157  : 	}
; 158  : 
; 159  : 	while ( true )
; 160  : 	{
; 161  : 		Token = GetToken();

  0032b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 162  : 
; 163  : 		if ( Token == 2 )

  00330	83 f8 02	 cmp	 eax, 2
  00333	0f 85 37 fd ff
	ff		 jne	 $LL16@Load
  00339	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
$LN32@Load:

; 270  : 	}
; 271  : 
; 272  : 	fclose (SMDFile );

  0033c	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00341	50		 push	 eax
  00342	e8 00 00 00 00	 call	 _fclose

; 273  : 
; 274  : 	LogAdd(LOG_BLACK, "%s file load!", filename);

  00347	56		 push	 esi
  00348	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  0034d	6a 00		 push	 0
  0034f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00354	83 c4 10	 add	 esp, 16			; 00000010H
  00357	5f		 pop	 edi
  00358	5e		 pop	 esi
  00359	5b		 pop	 ebx

; 275  : }

  0035a	8b e5		 mov	 esp, ebp
  0035c	5d		 pop	 ebp
  0035d	c2 04 00	 ret	 4
?Load@CDevilSquare@@QAEXPAD@Z ENDP			; CDevilSquare::Load
_TEXT	ENDS
PUBLIC	?SetOpen@CDevilSquare@@AAEXXZ			; CDevilSquare::SetOpen
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?SetOpen@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?SetOpen@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SetOpen, COMDAT
; _this$ = ecx

; 323  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 324  : 	this->m_iRemainTime = this->m_iOpenTime;

  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 325  : 
; 326  : 	if ( this->m_iOpenTime <= 1 )

  00009	83 f8 01	 cmp	 eax, 1
  0000c	7f 19		 jg	 SHORT $LN2@SetOpen

; 327  : 	{
; 328  : 		this->m_iTime = GetTickCount();

  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 329  : 		this->m_iremainTimeSec = 60;

  00014	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH

; 335  : 	}
; 336  : 
; 337  : 	this->m_bSendTimeCount = FALSE;

  0001b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00022	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00025	5e		 pop	 esi

; 338  : }

  00026	c3		 ret	 0
$LN2@SetOpen:

; 330  : 	}
; 331  : 	else
; 332  : 	{
; 333  : 		this->m_iTime = GetTickCount() + 60000;

  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002d	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H

; 334  : 		this->m_iremainTimeSec = -1;

  00032	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1

; 335  : 	}
; 336  : 
; 337  : 	this->m_bSendTimeCount = FALSE;

  00039	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00040	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00043	5e		 pop	 esi

; 338  : }

  00044	c3		 ret	 0
?SetOpen@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SetOpen
_TEXT	ENDS
PUBLIC	?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z	; CDevilSquare::GetDevilSquareIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z
_TEXT	SEGMENT
_iGateNumber$ = 8					; size = 4
?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z PROC		; CDevilSquare::GetDevilSquareIndex, COMDAT
; _this$ = ecx

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	switch ( iGateNumber )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iGateNumber$[ebp]
  00006	8d 41 c6	 lea	 eax, DWORD PTR [ecx-58]
  00009	83 f8 36	 cmp	 eax, 54			; 00000036H
  0000c	77 15		 ja	 SHORT $LN1@GetDevilSq
  0000e	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR $LN8@GetDevilSq[eax]
  00015	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN9@GetDevilSq[edx*4]
$LN2@GetDevilSq:

; 364  : 	{
; 365  : 
; 366  : 		case 58:
; 367  : 		case 59:
; 368  : 		case 60:
; 369  : 		case 61:
; 370  : 			return iGateNumber - 58;	// Devil 1 - 4
; 371  : 			break;
; 372  : 
; 373  : 		case 111:
; 374  : 		case 112:
; 375  : 			return iGateNumber - 107;	// Devil 5 - 6

  0001c	8d 41 95	 lea	 eax, DWORD PTR [ecx-107]

; 380  : 			break;
; 381  : 	}
; 382  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN1@GetDevilSq:

; 376  : 			break;
; 377  : 
; 378  : 		default:
; 379  : 			return -1;

  00023	83 c8 ff	 or	 eax, -1
$LN4@GetDevilSq:

; 380  : 			break;
; 381  : 	}
; 382  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
  0002a	8b ff		 npad	 2
$LN9@GetDevilSq:
  0002c	00 00 00 00	 DD	 $LN4@GetDevilSq
  00030	00 00 00 00	 DD	 $LN2@GetDevilSq
  00034	00 00 00 00	 DD	 $LN1@GetDevilSq
$LN8@GetDevilSq:
  00038	00		 DB	 0
  00039	00		 DB	 0
  0003a	00		 DB	 0
  0003b	00		 DB	 0
  0003c	02		 DB	 2
  0003d	02		 DB	 2
  0003e	02		 DB	 2
  0003f	02		 DB	 2
  00040	02		 DB	 2
  00041	02		 DB	 2
  00042	02		 DB	 2
  00043	02		 DB	 2
  00044	02		 DB	 2
  00045	02		 DB	 2
  00046	02		 DB	 2
  00047	02		 DB	 2
  00048	02		 DB	 2
  00049	02		 DB	 2
  0004a	02		 DB	 2
  0004b	02		 DB	 2
  0004c	02		 DB	 2
  0004d	02		 DB	 2
  0004e	02		 DB	 2
  0004f	02		 DB	 2
  00050	02		 DB	 2
  00051	02		 DB	 2
  00052	02		 DB	 2
  00053	02		 DB	 2
  00054	02		 DB	 2
  00055	02		 DB	 2
  00056	02		 DB	 2
  00057	02		 DB	 2
  00058	02		 DB	 2
  00059	02		 DB	 2
  0005a	02		 DB	 2
  0005b	02		 DB	 2
  0005c	02		 DB	 2
  0005d	02		 DB	 2
  0005e	02		 DB	 2
  0005f	02		 DB	 2
  00060	02		 DB	 2
  00061	02		 DB	 2
  00062	02		 DB	 2
  00063	02		 DB	 2
  00064	02		 DB	 2
  00065	02		 DB	 2
  00066	02		 DB	 2
  00067	02		 DB	 2
  00068	02		 DB	 2
  00069	02		 DB	 2
  0006a	02		 DB	 2
  0006b	02		 DB	 2
  0006c	02		 DB	 2
  0006d	01		 DB	 1
  0006e	01		 DB	 1
?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z ENDP		; CDevilSquare::GetDevilSquareIndex
_TEXT	ENDS
PUBLIC	?GetUserLevelToEnter@CDevilSquare@@QAEHHAAE@Z	; CDevilSquare::GetUserLevelToEnter
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
; Function compile flags: /Ogtp
;	COMDAT ?GetUserLevelToEnter@CDevilSquare@@QAEHHAAE@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_btMoveGate$ = 12					; size = 4
?GetUserLevelToEnter@CDevilSquare@@QAEHHAAE@Z PROC	; CDevilSquare::GetUserLevelToEnter, COMDAT
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 386  : 	btMoveGate = -1;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _btMoveGate$[ebp]
  00006	57		 push	 edi

; 387  : 
; 388  : 	if ( gObjIsConnected(iUserIndex) == FALSE )

  00007	8b 7d 08	 mov	 edi, DWORD PTR _iUserIndex$[ebp]
  0000a	57		 push	 edi
  0000b	c6 00 ff	 mov	 BYTE PTR [eax], 255	; 000000ffH
  0000e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00013	83 c4 04	 add	 esp, 4
  00016	85 c0		 test	 eax, eax
  00018	75 08		 jne	 SHORT $LN9@GetUserLev

; 389  : 	{
; 390  : 		return -1;

  0001a	83 c8 ff	 or	 eax, -1
  0001d	5f		 pop	 edi

; 418  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
$LN9@GetUserLev:
  00022	53		 push	 ebx
  00023	56		 push	 esi

; 391  : 	}
; 392  : 
; 393  : 	int iENTER_LEVEL = -1;
; 394  : 
; 395  : 	for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  00024	8b d7		 mov	 edx, edi
  00026	83 cb ff	 or	 ebx, -1
  00029	33 f6		 xor	 esi, esi
  0002b	69 d2 64 15 00
	00		 imul	 edx, 5476		; 00001564H
  00031	0f b7 82 98 00
	00 00		 movzx	 eax, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edx+152]
  00038	b9 04 00 00 00	 mov	 ecx, OFFSET _g_sttDEVILSQUARE_LEVEL+4
  0003d	8d 49 00	 npad	 3
$LL8@GetUserLev:

; 396  : 	{
; 397  : 		if ( gObj[iUserIndex].Class == 4 || gObj[iUserIndex].Class == 3 )

  00040	83 f8 04	 cmp	 eax, 4
  00043	74 15		 je	 SHORT $LN4@GetUserLev
  00045	83 f8 03	 cmp	 eax, 3
  00048	74 10		 je	 SHORT $LN4@GetUserLev

; 403  : 				break;
; 404  : 			}
; 405  : 		}
; 406  : 		else
; 407  : 		{
; 408  : 			if ( gObj[iUserIndex].Level >= g_sttDEVILSQUARE_LEVEL[i].NormalCharacterMinLevel  && gObj[iUserIndex].Level <= g_sttDEVILSQUARE_LEVEL[i].NormalCharacterMaxLevel )

  0004a	0f bf ba 9c 00
	00 00		 movsx	 edi, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edx+156]
  00051	3b 79 fc	 cmp	 edi, DWORD PTR [ecx-4]
  00054	7c 15		 jl	 SHORT $LN7@GetUserLev
  00056	3b 39		 cmp	 edi, DWORD PTR [ecx]
  00058	eb 0f		 jmp	 SHORT $LN16@GetUserLev
$LN4@GetUserLev:

; 398  : 		{
; 399  : 			if ( gObj[iUserIndex].Level >= g_sttDEVILSQUARE_LEVEL[i].SpecialCharacterMinLevel  && gObj[iUserIndex].Level <= g_sttDEVILSQUARE_LEVEL[i].SpecialCharacterMaxLevel )

  0005a	0f bf ba 9c 00
	00 00		 movsx	 edi, WORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[edx+156]
  00061	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  00064	7c 05		 jl	 SHORT $LN7@GetUserLev
  00066	3b 79 08	 cmp	 edi, DWORD PTR [ecx+8]
$LN16@GetUserLev:
  00069	7e 15		 jle	 SHORT $LN14@GetUserLev
$LN7@GetUserLev:

; 391  : 	}
; 392  : 
; 393  : 	int iENTER_LEVEL = -1;
; 394  : 
; 395  : 	for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  0006b	83 c1 14	 add	 ecx, 20			; 00000014H
  0006e	46		 inc	 esi
  0006f	81 f9 7c 00 00
	00		 cmp	 ecx, OFFSET _g_sttDEVILSQUARE_LEVEL+124
  00075	7c c9		 jl	 SHORT $LL8@GetUserLev

; 409  : 			{
; 410  : 				iENTER_LEVEL = i;
; 411  : 				btMoveGate = g_sttDEVILSQUARE_LEVEL[i].MoveGate;
; 412  : 				break;
; 413  : 			}
; 414  : 		}
; 415  : 	}
; 416  : 
; 417  : 	return iENTER_LEVEL;

  00077	5e		 pop	 esi
  00078	8b c3		 mov	 eax, ebx
  0007a	5b		 pop	 ebx
  0007b	5f		 pop	 edi

; 418  : }

  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN14@GetUserLev:

; 400  : 			{
; 401  : 				iENTER_LEVEL = i;
; 402  : 				btMoveGate = g_sttDEVILSQUARE_LEVEL[i].MoveGate;

  00080	8b 45 0c	 mov	 eax, DWORD PTR _btMoveGate$[ebp]
  00083	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00086	8a 14 8d 10 00
	00 00		 mov	 dl, BYTE PTR _g_sttDEVILSQUARE_LEVEL[ecx*4+16]
  0008d	8b de		 mov	 ebx, esi
  0008f	5e		 pop	 esi
  00090	88 10		 mov	 BYTE PTR [eax], dl

; 409  : 			{
; 410  : 				iENTER_LEVEL = i;
; 411  : 				btMoveGate = g_sttDEVILSQUARE_LEVEL[i].MoveGate;
; 412  : 				break;
; 413  : 			}
; 414  : 		}
; 415  : 	}
; 416  : 
; 417  : 	return iENTER_LEVEL;

  00092	8b c3		 mov	 eax, ebx
  00094	5b		 pop	 ebx
  00095	5f		 pop	 edi

; 418  : }

  00096	5d		 pop	 ebp
  00097	c2 08 00	 ret	 8
?GetUserLevelToEnter@CDevilSquare@@QAEHHAAE@Z ENDP	; CDevilSquare::GetUserLevelToEnter
_TEXT	ENDS
PUBLIC	??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@ ; `string'
PUBLIC	?SetMonster@CDevilSquare@@QAEXXZ		; CDevilSquare::SetMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
;	COMDAT ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
CONST	SEGMENT
??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@ DB '['
	DB	'DevilSquare] [%d] Invalid MonterType', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetMonster@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
tv294 = -8						; size = 4
_n$157598 = -4						; size = 4
?SetMonster@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::SetMonster, COMDAT
; _this$ = ecx

; 767  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 768  : 	int result;
; 769  : 	for ( int n=0;n<gMSetBase.m_Count;n++)

  00006	83 3d e4 0f 01
	00 00		 cmp	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+69604, 0
  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$157598[ebp], 0
  00014	0f 8e 85 00 00
	00		 jle	 $LN15@SetMonster
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	be 0a 00 00 00	 mov	 esi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+10
  00021	57		 push	 edi
  00022	89 75 f8	 mov	 DWORD PTR tv294[ebp], esi
$LL27@SetMonster:

; 770  : 	{
; 771  : 		if ( DS_MAP_RANGE(gMSetBase.m_Mp[n].m_MapNumber) != FALSE )

  00025	8a 4e fe	 mov	 cl, BYTE PTR [esi-2]
  00028	80 f9 09	 cmp	 cl, 9
  0002b	74 0c		 je	 SHORT $LN28@SetMonster
  0002d	33 c0		 xor	 eax, eax
  0002f	80 f9 20	 cmp	 cl, 32			; 00000020H
  00032	0f 94 c0	 sete	 al
  00035	85 c0		 test	 eax, eax
  00037	74 4e		 je	 SHORT $LN16@SetMonster
$LN28@SetMonster:

; 772  : 		{
; 773  : 			WORD wMonIndex = gMSetBase.m_Mp[n].m_Type;
; 774  : 			BYTE btDSIndex = -1;
; 775  : 
; 776  : 			if ( gMSetBase.m_Mp[n].m_X == 119 )

  00039	8a 06		 mov	 al, BYTE PTR [esi]
  0003b	0f b7 7e fc	 movzx	 edi, WORD PTR [esi-4]
  0003f	3c 77		 cmp	 al, 119			; 00000077H
  00041	75 60		 jne	 SHORT $LN13@SetMonster

; 777  : 			{
; 778  : 				btDSIndex = DEVIL_SQUARE_GROUND_1;

  00043	32 db		 xor	 bl, bl
$LN2@SetMonster:

; 805  : 			}
; 806  : 
; 807  : 			result = gObjAddMonster(gMSetBase.m_Mp[n].m_MapNumber);

  00045	0f b6 c9	 movzx	 ecx, cl
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0004e	0f bf f0	 movsx	 esi, ax
  00051	83 c4 04	 add	 esp, 4

; 808  : 
; 809  : 			if ( result >= 0 )

  00054	85 f6		 test	 esi, esi
  00056	78 2c		 js	 SHORT $LN26@SetMonster

; 810  : 			{
; 811  : 				gObjSetPosMonster(result, n);

  00058	8b 55 fc	 mov	 edx, DWORD PTR _n$157598[ebp]
  0005b	52		 push	 edx
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster

; 812  : 				gObjSetMonster(result, wMonIndex); 

  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 813  : 				gObj[result].MaxRegenTime = 1000;	// Rgeneration in 1 second

  00069	8b c6		 mov	 eax, esi
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  00074	c7 80 0c 02 00
	00 e8 03 00 00	 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+524], 1000 ; 000003e8H

; 814  : 				gObj[result].m_bDevilSquareIndex = btDSIndex;

  0007e	88 98 00 0d 00
	00		 mov	 BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+3328], bl
$LN26@SetMonster:

; 804  : 				continue;

  00084	8b 75 f8	 mov	 esi, DWORD PTR tv294[ebp]
$LN16@SetMonster:

; 768  : 	int result;
; 769  : 	for ( int n=0;n<gMSetBase.m_Count;n++)

  00087	8b 45 fc	 mov	 eax, DWORD PTR _n$157598[ebp]
  0008a	40		 inc	 eax
  0008b	83 c6 0c	 add	 esi, 12			; 0000000cH
  0008e	89 45 fc	 mov	 DWORD PTR _n$157598[ebp], eax
  00091	89 75 f8	 mov	 DWORD PTR tv294[ebp], esi
  00094	3b 05 e4 0f 01
	00		 cmp	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+69604
  0009a	7c 89		 jl	 SHORT $LL27@SetMonster
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
$LN15@SetMonster:

; 815  : 			}
; 816  : 		}
; 817  : 	}
; 818  : }

  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
$LN13@SetMonster:

; 779  : 			}
; 780  : 			else if ( gMSetBase.m_Mp[n].m_X == 121 )

  000a3	3c 79		 cmp	 al, 121			; 00000079H
  000a5	75 04		 jne	 SHORT $LN11@SetMonster

; 781  : 			{
; 782  : 				btDSIndex = DEVIL_SQUARE_GROUND_2;

  000a7	b3 01		 mov	 bl, 1
  000a9	eb 9a		 jmp	 SHORT $LN2@SetMonster
$LN11@SetMonster:

; 783  : 			}
; 784  : 			else if ( gMSetBase.m_Mp[n].m_X == 49 )

  000ab	3c 31		 cmp	 al, 49			; 00000031H
  000ad	75 04		 jne	 SHORT $LN9@SetMonster

; 785  : 			{
; 786  : 				btDSIndex = DEVIL_SQUARE_GROUND_3;

  000af	b3 02		 mov	 bl, 2
  000b1	eb 92		 jmp	 SHORT $LN2@SetMonster
$LN9@SetMonster:

; 787  : 			}
; 788  : 			else if ( gMSetBase.m_Mp[n].m_X == 53 )

  000b3	3c 35		 cmp	 al, 53			; 00000035H
  000b5	75 04		 jne	 SHORT $LN7@SetMonster

; 789  : 			{
; 790  : 				btDSIndex = DEVIL_SQUARE_GROUND_4;

  000b7	b3 03		 mov	 bl, 3
  000b9	eb 8a		 jmp	 SHORT $LN2@SetMonster
$LN7@SetMonster:

; 791  : 			}
; 792  : 			else if ( gMSetBase.m_Mp[n].m_X == 120 )

  000bb	3c 78		 cmp	 al, 120			; 00000078H
  000bd	75 04		 jne	 SHORT $LN5@SetMonster

; 793  : 			{
; 794  : 				btDSIndex = DEVIL_SQUARE_GROUND_5;

  000bf	b3 04		 mov	 bl, 4
  000c1	eb 82		 jmp	 SHORT $LN2@SetMonster
$LN5@SetMonster:

; 795  : 			}
; 796  : 			else if ( gMSetBase.m_Mp[n].m_X == 122 )

  000c3	3c 7a		 cmp	 al, 122			; 0000007aH
  000c5	75 07		 jne	 SHORT $LN25@SetMonster

; 797  : 			{
; 798  : 				btDSIndex = DEVIL_SQUARE_GROUND_6;

  000c7	b3 05		 mov	 bl, 5

; 799  : 			}
; 800  : 
; 801  : 			if ( btDSIndex == 0xFF )

  000c9	e9 77 ff ff ff	 jmp	 $LN2@SetMonster
$LN25@SetMonster:

; 802  : 			{
; 803  : 				LogAdd(LOG_BLACK, "[DevilSquare] [%d] Invalid MonterType", wMonIndex);

  000ce	57		 push	 edi
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
  000d4	6a 00		 push	 0
  000d6	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 804  : 				continue;

  000de	eb a7		 jmp	 SHORT $LN16@SetMonster
?SetMonster@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::SetMonster
_TEXT	ENDS
PUBLIC	?ClearMonstr@CDevilSquare@@QAEXXZ		; CDevilSquare::ClearMonstr
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
; Function compile flags: /Ogtp
;	COMDAT ?ClearMonstr@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
?ClearMonstr@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::ClearMonstr, COMDAT
; _this$ = ecx

; 821  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 822  : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  00002	33 ff		 xor	 edi, edi
  00004	be 09 01 00 00	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+265
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL4@ClearMonst:

; 823  : 	{
; 824  : 		if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	3c 09		 cmp	 al, 9
  00014	74 0d		 je	 SHORT $LN11@ClearMonst
  00016	33 c9		 xor	 ecx, ecx
  00018	3c 20		 cmp	 al, 32			; 00000020H
  0001a	0f 94 c1	 sete	 cl
  0001d	8b c1		 mov	 eax, ecx
  0001f	85 c0		 test	 eax, eax
  00021	74 09		 je	 SHORT $LN3@ClearMonst
$LN11@ClearMonst:

; 825  : 		{
; 826  : 			gObjDel(n);

  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00029	83 c4 04	 add	 esp, 4
$LN3@ClearMonst:

; 822  : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  0002c	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  00032	47		 inc	 edi
  00033	81 fe a9 a2 e4
	01		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+31761065
  00039	7c d5		 jl	 SHORT $LL4@ClearMonst

; 827  : 		}
; 828  : 	}
; 829  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	c3		 ret	 0
?ClearMonstr@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::ClearMonstr
_TEXT	ENDS
PUBLIC	??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@ ; `string'
PUBLIC	??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@ ; `string'
PUBLIC	?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquare::gDevilSquareMonsterRegen
EXTRN	?CreateFrustrum@@YAXHHH@Z:PROC			; CreateFrustrum
EXTRN	?gObjMonsterRegen@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjMonsterRegen
EXTRN	?Clear@CMagicInf@@QAEXXZ:PROC			; CMagicInf::Clear
EXTRN	?GetMonsterType@CDevilSquareGround@@QAEGH@Z:PROC ; CDevilSquareGround::GetMonsterType
;	COMDAT ??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@
CONST	SEGMENT
??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@ DB '[DevilSq'
	DB	'uare] Invalid DevilSquareIndex [%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@
CONST	SEGMENT
??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@ DB '['
	DB	'DevilSquare] Monter Regen [%d][%d][%d,%d]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv210 = -4						; size = 4
_monstertype$ = 8					; size = 2
_lpObj$ = 8						; size = 4
?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquare::gDevilSquareMonsterRegen, COMDAT
; _this$ = ecx

; 832  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 833  : 	BYTE devilsquareindex = lpObj->m_bDevilSquareIndex;

  00006	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00009	8a 9e 00 0d 00
	00		 mov	 bl, BYTE PTR [esi+3328]

; 834  : 
; 835  : 	if ( devilsquareindex < 0 || devilsquareindex >= MAX_DEVILSQUARE_GROUND )

  0000f	80 fb 06	 cmp	 bl, 6
  00012	0f 83 ef 00 00
	00		 jae	 $LN6@gDevilSqua

; 838  : 		return;
; 839  : 	}
; 840  : 
; 841  : 	if ( lpObj->m_PosNum == -1 )

  00018	66 83 be 10 02
	00 00 ff	 cmp	 WORD PTR [esi+528], -1
  00020	75 13		 jne	 SHORT $LN5@gDevilSqua

; 842  : 	{
; 843  : 		gObjDel(lpObj->m_Index);

  00022	8b 06		 mov	 eax, DWORD PTR [esi]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0002a	83 c4 04	 add	 esp, 4
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx

; 869  : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN5@gDevilSqua:

; 844  : 		return;
; 845  : 	}
; 846  : 
; 847  : 	WORD monstertype = this->m_DevilSquareGround[devilsquareindex].GetMonsterType(this->m_iPlaytime - this->m_iRemainTime );

  00035	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00038	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  0003b	0f b6 c3	 movzx	 eax, bl
  0003e	89 45 fc	 mov	 DWORD PTR tv210[ebp], eax
  00041	69 c0 94 04 00
	00		 imul	 eax, 1172		; 00000494H
  00047	52		 push	 edx
  00048	8d 4c 08 30	 lea	 ecx, DWORD PTR [eax+ecx+48]
  0004c	e8 00 00 00 00	 call	 ?GetMonsterType@CDevilSquareGround@@QAEGH@Z ; CDevilSquareGround::GetMonsterType
  00051	0f b7 c0	 movzx	 eax, ax

; 848  : 
; 849  : 	if ( monstertype == (BYTE)-1 )

  00054	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00059	89 45 08	 mov	 DWORD PTR _monstertype$[ebp], eax
  0005c	66 3b c1	 cmp	 ax, cx
  0005f	75 18		 jne	 SHORT $LN4@gDevilSqua

; 850  : 	{
; 851  : 		LogAdd(LOG_BLACK, "[DevilSquare] [%d] Invalid MonterType", monstertype);

  00061	51		 push	 ecx
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
  00067	6a 00		 push	 0
  00069	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx

; 869  : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
$LN4@gDevilSqua:
  00079	57		 push	 edi

; 852  : 		return;
; 853  : 	}
; 854  : 
; 855  : 	for ( int n=0;n<MAX_MAGIC;n++)

  0007a	33 ff		 xor	 edi, edi
  0007c	8d 64 24 00	 npad	 4
$LL3@gDevilSqua:

; 856  : 	{
; 857  : 		lpObj->Magic[n].Clear();

  00080	8b 8e 38 03 00
	00		 mov	 ecx, DWORD PTR [esi+824]
  00086	03 cf		 add	 ecx, edi
  00088	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear
  0008d	83 c7 10	 add	 edi, 16			; 00000010H
  00090	81 ff c0 03 00
	00		 cmp	 edi, 960		; 000003c0H
  00096	7c e8		 jl	 SHORT $LL3@gDevilSqua

; 858  : 	}
; 859  : 
; 860  : 	gObjSetMonster(lpObj->m_Index, monstertype);

  00098	0f b7 7d 08	 movzx	 edi, WORD PTR _monstertype$[ebp]
  0009c	8b 16		 mov	 edx, DWORD PTR [esi]
  0009e	57		 push	 edi
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 861  : 	lpObj->DieRegen = FALSE;
; 862  : 	gObjMonsterRegen(lpObj);

  000a5	56		 push	 esi
  000a6	c6 86 02 02 00
	00 00		 mov	 BYTE PTR [esi+514], 0
  000ad	e8 00 00 00 00	 call	 ?gObjMonsterRegen@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterRegen

; 863  : 	CreateFrustrum(lpObj->X, lpObj->Y, lpObj->m_Index);

  000b2	8b 06		 mov	 eax, DWORD PTR [esi]
  000b4	0f bf 8e 06 01
	00 00		 movsx	 ecx, WORD PTR [esi+262]
  000bb	0f bf 96 04 01
	00 00		 movsx	 edx, WORD PTR [esi+260]
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	52		 push	 edx
  000c5	e8 00 00 00 00	 call	 ?CreateFrustrum@@YAXHHH@Z ; CreateFrustrum

; 864  : 	lpObj->m_bDevilSquareIndex = devilsquareindex;
; 865  : 	lpObj->MaxRegenTime = 1000;
; 866  : 
; 867  : 	LogAdd(LOG_BLACK, "[DevilSquare] Monter Regen [%d][%d][%d,%d]",
; 868  : 		monstertype, devilsquareindex, lpObj->X, lpObj->Y);

  000ca	0f bf 86 06 01
	00 00		 movsx	 eax, WORD PTR [esi+262]
  000d1	0f bf 8e 04 01
	00 00		 movsx	 ecx, WORD PTR [esi+260]
  000d8	8b 55 fc	 mov	 edx, DWORD PTR tv210[ebp]
  000db	50		 push	 eax
  000dc	51		 push	 ecx
  000dd	52		 push	 edx
  000de	57		 push	 edi
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@
  000e4	6a 00		 push	 0
  000e6	88 9e 00 0d 00
	00		 mov	 BYTE PTR [esi+3328], bl
  000ec	c7 86 0c 02 00
	00 e8 03 00 00	 mov	 DWORD PTR [esi+524], 1000 ; 000003e8H
  000f6	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000fb	83 c4 30	 add	 esp, 48			; 00000030H
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx

; 869  : }

  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 04 00	 ret	 4
$LN6@gDevilSqua:

; 836  : 	{
; 837  : 		LogAdd(LOG_BLACK, "[DevilSquare] Invalid DevilSquareIndex [%d]", devilsquareindex);

  00107	0f b6 c3	 movzx	 eax, bl
  0010a	50		 push	 eax
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@
  00110	6a 00		 push	 0
  00112	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx

; 869  : }

  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquare::gDevilSquareMonsterRegen
_TEXT	ENDS
PUBLIC	??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SendEventStartMsg@CDevilSquare@@AAEXXZ		; CDevilSquare::SendEventStartMsg
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
;	COMDAT ??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@
CONST	SEGMENT
??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@ DB '[DevilSquar'
	DB	'e] Start Event', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SendEventStartMsg@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pWithOutEvneter$ = -548				; size = 272
_pToEventer$ = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?SendEventStartMsg@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::SendEventStartMsg, COMDAT
; _this$ = ecx

; 872  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 02 00
	00		 sub	 esp, 548		; 00000224H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi

; 873  : 	PMSG_NOTICE pToEventer;
; 874  : 	PMSG_NOTICE pWithOutEvneter;
; 875  : 
; 876  : 	TNotice::MakeNoticeMsg(&pToEventer, 0, lMsg.Get(MSGGET(2, 195)));

  00015	68 c3 02 00 00	 push	 707			; 000002c3H
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0001f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00024	50		 push	 eax
  00025	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pToEventer$[ebp]
  0002b	6a 00		 push	 0
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 877  : 	TNotice::MakeNoticeMsg(&pWithOutEvneter, 0, lMsg.Get(MSGGET(2, 196)));

  00036	68 c4 02 00 00	 push	 708			; 000002c4H
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00040	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00045	50		 push	 eax
  00046	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR _pWithOutEvneter$[ebp]
  0004c	6a 00		 push	 0
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 878  : 
; 879  : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00057	bf 00 19 00 00	 mov	 edi, 6400		; 00001900H
  0005c	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
$LL6@SendEventS:

; 880  : 	{
; 881  : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00061	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  00068	75 3c		 jne	 SHORT $LN5@SendEventS

; 882  : 		{
; 883  : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  0006a	8a 06		 mov	 al, BYTE PTR [esi]
  0006c	3c 09		 cmp	 al, 9
  0006e	74 0d		 je	 SHORT $LN13@SendEventS
  00070	33 d2		 xor	 edx, edx
  00072	3c 20		 cmp	 al, 32			; 00000020H
  00074	0f 94 c2	 sete	 dl
  00077	8b c2		 mov	 eax, edx
  00079	85 c0		 test	 eax, eax
  0007b	74 11		 je	 SHORT $LN2@SendEventS
$LN13@SendEventS:

; 884  : 			{
; 885  : 				DataSend(n, (BYTE *)&pToEventer, pToEventer.h.size);

  0007d	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pToEventer$[ebp+1]
  00084	50		 push	 eax
  00085	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pToEventer$[ebp]
  0008b	51		 push	 ecx

; 886  : 			}
; 887  : 			else

  0008c	eb 0f		 jmp	 SHORT $LN14@SendEventS
$LN2@SendEventS:

; 888  : 			{
; 889  : 				DataSend(n, (BYTE *)&pWithOutEvneter, pWithOutEvneter.h.size);

  0008e	0f b6 95 dd fd
	ff ff		 movzx	 edx, BYTE PTR _pWithOutEvneter$[ebp+1]
  00095	52		 push	 edx
  00096	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _pWithOutEvneter$[ebp]
  0009c	50		 push	 eax
$LN14@SendEventS:
  0009d	57		 push	 edi
  0009e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SendEventS:

; 878  : 
; 879  : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  000a6	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  000ac	47		 inc	 edi
  000ad	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  000b3	7c ac		 jl	 SHORT $LL6@SendEventS

; 890  : 			}
; 891  : 		}
; 892  : 	}
; 893  : 
; 894  : 	LogAdd(LOG_BLACK, "[DevilSquare] Start Event");

  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@
  000ba	6a 00		 push	 0
  000bc	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 895  : }

  000c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c4	83 c4 08	 add	 esp, 8
  000c7	5f		 pop	 edi
  000c8	33 cd		 xor	 ecx, ebp
  000ca	5e		 pop	 esi
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
?SendEventStartMsg@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::SendEventStartMsg
_TEXT	ENDS
PUBLIC	??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquare::DieProcDevilSquare
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@
CONST	SEGMENT
??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@ DB '['
	DB	'DevilSquare] Dead [%s][%s][%d][%d]', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$ = -304						; size = 4
_pMsg$ = -300						; size = 40
_msg$ = -260						; size = 255
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquare::DieProcDevilSquare, COMDAT
; _this$ = ecx

; 898  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 899  : 	char msg[255];
; 900  : 
; 901  : 	wsprintf(msg, lMsg.Get(MSGGET(2, 197)), lpObj->m_nEventScore);

  00018	8b 86 f4 0c 00
	00		 mov	 eax, DWORD PTR [esi+3316]
  0001e	50		 push	 eax
  0001f	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
  00025	68 c5 02 00 00	 push	 709			; 000002c5H
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0002f	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00034	50		 push	 eax
  00035	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _msg$[ebp]
  0003b	51		 push	 ecx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 902  : 	GCServerMsgStringSend(msg, lpObj->m_Index, 1);

  00042	8b 16		 mov	 edx, DWORD PTR [esi]
  00044	6a 01		 push	 1
  00046	52		 push	 edx
  00047	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 903  : 
; 904  : 	if ( lpObj->m_nEventScore <= 0 )

  00053	8b 9e f4 0c 00
	00		 mov	 ebx, DWORD PTR [esi+3316]
  00059	83 c4 18	 add	 esp, 24			; 00000018H
  0005c	85 db		 test	 ebx, ebx
  0005e	0f 8e 0d 01 00
	00		 jle	 $LN6@DieProcDev

; 905  : 		return;
; 906  : 
; 907  : 	PMSG_ANS_EVENTUSERSCORE pMsg;
; 908  : 
; 909  : 	pMsg.h.c = 0xC1;
; 910  : 	pMsg.h.headcode = 0x01;
; 911  : 	pMsg.h.size = sizeof(pMsg);
; 912  : 	pMsg.SquareNum = lpObj->m_bDevilSquareIndex;
; 913  : 	pMsg.Class = lpObj->Class;

  00064	0f b7 8e 98 00
	00 00		 movzx	 ecx, WORD PTR [esi+152]
  0006b	8a 96 00 0d 00
	00		 mov	 dl, BYTE PTR [esi+3328]
  00071	57		 push	 edi
  00072	0f b6 fa	 movzx	 edi, dl
  00075	8b c1		 mov	 eax, ecx
  00077	c6 85 d4 fe ff
	ff c1		 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  0007e	66 c7 85 d5 fe
	ff ff 28 01	 mov	 WORD PTR _pMsg$[ebp+1], 296 ; 00000128H
  00087	89 bd f8 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+36], edi
  0008d	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+32], eax

; 914  : 
; 915  : 	if ( lpObj->Class == 1 )

  00093	83 f9 01	 cmp	 ecx, 1
  00096	75 46		 jne	 SHORT $LN4@DieProcDev

; 916  : 	{
; 917  : 		if ( lpObj->Class >= 0 && lpObj->Class < MAX_TYPE_PLAYER )
; 918  : 		{
; 919  : 			if ( DS_LEVEL_RANGE(lpObj->m_bDevilSquareIndex) != FALSE )

  00098	b9 05 00 00 00	 mov	 ecx, 5
  0009d	3a ca		 cmp	 cl, dl
  0009f	1b c9		 sbb	 ecx, ecx
  000a1	41		 inc	 ecx
  000a2	74 2c		 je	 SHORT $LN2@DieProcDev

; 920  : 			{
; 921  : 				lpObj->m_nEventScore+= this->m_BonusScoreTable[lpObj->Class][lpObj->m_bDevilSquareIndex]/100;

  000a4	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	8d 94 40 75 03
	00 00		 lea	 edx, DWORD PTR [eax+eax*2+885]
  000b1	8d 04 57	 lea	 eax, DWORD PTR [edi+edx*2]
  000b4	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  000b7	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000bc	f7 e9		 imul	 ecx
  000be	c1 fa 05	 sar	 edx, 5
  000c1	8b c2		 mov	 eax, edx
  000c3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c6	03 c2		 add	 eax, edx
  000c8	03 c3		 add	 eax, ebx
  000ca	89 86 f4 0c 00
	00		 mov	 DWORD PTR [esi+3316], eax
$LN2@DieProcDev:

; 922  : 				
; 923  : 			}
; 924  : 		}
; 925  : 
; 926  : 		pMsg.Score = lpObj->m_nEventScore;

  000d0	8b 8e f4 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3316]
  000d6	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+28], ecx

; 927  : 	}
; 928  : 	else

  000dc	eb 06		 jmp	 SHORT $LN1@DieProcDev
$LN4@DieProcDev:

; 929  : 	{
; 930  : 		pMsg.Score = lpObj->m_nEventScore;

  000de	89 9d f0 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+28], ebx
$LN1@DieProcDev:

; 931  : 	}
; 932  : 
; 933  : 	pMsg.ServerCode = gGameServerCode;

  000e4	0f bf 15 00 00
	00 00		 movsx	 edx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode

; 934  : 	memcpy(pMsg.AccountID, lpObj->AccountID, sizeof(pMsg.AccountID));

  000eb	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  000ee	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  000f1	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]
  000f4	89 95 ec fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+24], edx
  000fa	0f b7 57 08	 movzx	 edx, WORD PTR [edi+8]

; 935  : 	memcpy(pMsg.GameID, lpObj->Name, sizeof(pMsg.GameID));

  000fe	8d 5e 6f	 lea	 ebx, DWORD PTR [esi+111]
  00101	89 85 d7 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+3], eax
  00107	8b 03		 mov	 eax, DWORD PTR [ebx]
  00109	66 89 95 df fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+11], dx
  00110	0f b7 53 08	 movzx	 edx, WORD PTR [ebx+8]
  00114	89 85 e1 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+13], eax
  0011a	89 8d db fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+7], ecx
  00120	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 936  : 
; 937  : 	DataSendRank((char *)&pMsg, pMsg.h.size);

  00123	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00129	6a 28		 push	 40			; 00000028H
  0012b	50		 push	 eax
  0012c	89 8d e5 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+17], ecx
  00132	66 89 95 e9 fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+21], dx
  00139	e8 00 00 00 00	 call	 ?DataSendRank@@YAXPADH@Z ; DataSendRank

; 938  : 
; 939  : 	LogAdd(LOG_BLACK, "[DevilSquare] Dead [%s][%s][%d][%d]",
; 940  : 		lpObj->AccountID, lpObj->Name, 
; 941  : 		lpObj->m_nEventExp, lpObj->m_nEventScore);

  0013e	8b 8e f4 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3316]
  00144	8b 96 f8 0c 00
	00		 mov	 edx, DWORD PTR [esi+3320]
  0014a	51		 push	 ecx
  0014b	52		 push	 edx
  0014c	53		 push	 ebx
  0014d	57		 push	 edi
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@
  00153	33 ff		 xor	 edi, edi
  00155	57		 push	 edi
  00156	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0015b	83 c4 20	 add	 esp, 32			; 00000020H

; 942  : 
; 943  : 	lpObj->m_nEventScore = 0;

  0015e	89 be f4 0c 00
	00		 mov	 DWORD PTR [esi+3316], edi

; 944  : 	lpObj->m_nEventMoney = 0;

  00164	89 be fc 0c 00
	00		 mov	 DWORD PTR [esi+3324], edi

; 945  : 	lpObj->m_nEventExp = 0;

  0016a	89 be f8 0c 00
	00		 mov	 DWORD PTR [esi+3320], edi
  00170	5f		 pop	 edi
$LN6@DieProcDev:

; 946  : 
; 947  : }

  00171	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00174	5e		 pop	 esi
  00175	33 cd		 xor	 ecx, ebp
  00177	5b		 pop	 ebx
  00178	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c2 04 00	 ret	 4
?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquare::DieProcDevilSquare
_TEXT	ENDS
PUBLIC	?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjMonsterExpSingle
EXTRN	?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@HHH@Z:PROC	; gObjLevelUp
EXTRN	?GetExperience@CVip@@QAEMH@Z:PROC		; CVip::GetExperience
EXTRN	?gVip@@3VCVip@@A:BYTE				; gVip
EXTRN	?gLevelExperience@@3PAKA:BYTE			; gLevelExperience
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z
_TEXT	SEGMENT
_exp$ = 8						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_dmg$ = 16						; size = 4
_tot_dmg$ = 20						; size = 4
?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjMonsterExpSingle, COMDAT
; _this$ = ecx

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 951  : 	INT exp;
; 952  : 	INT maxexp = 0;
; 953  : 	int level = ((lpTargetObj->Level + 25) * lpTargetObj->Level) / 3;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00006	0f bf 88 9c 00
	00 00		 movsx	 ecx, WORD PTR [eax+156]
  0000d	8d 51 19	 lea	 edx, DWORD PTR [ecx+25]
  00010	0f af d1	 imul	 edx, ecx
  00013	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00018	f7 ea		 imul	 edx
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi

; 954  : 
; 955  : 	if ( (lpTargetObj->Level + 10) < lpObj->Level )

  0001d	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00020	0f bf 9f 9c 00
	00 00		 movsx	 ebx, WORD PTR [edi+156]
  00027	8b f2		 mov	 esi, edx
  00029	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0002c	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0002f	03 f2		 add	 esi, edx
  00031	3b cb		 cmp	 ecx, ebx

; 956  : 	{
; 957  : 		level = (level*(lpTargetObj->Level + 10))/lpObj->Level;

  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  00036	7d 12		 jge	 SHORT $LN10@gObjMonste
  00038	0f bf 81 9c 00
	00 00		 movsx	 eax, WORD PTR [ecx+156]
  0003f	83 c0 0a	 add	 eax, 10			; 0000000aH
  00042	0f af c6	 imul	 eax, esi
  00045	99		 cdq
  00046	f7 fb		 idiv	 ebx
  00048	8b f0		 mov	 esi, eax
$LN10@gObjMonste:

; 958  : 	}
; 959  : 
; 960  : 	if ( lpTargetObj->Level >= 65 )

  0004a	66 83 b9 9c 00
	00 00 41	 cmp	 WORD PTR [ecx+156], 65	; 00000041H
  00052	7c 18		 jl	 SHORT $LN9@gObjMonste

; 961  : 	{
; 962  : 		level += (lpTargetObj->Level-64)*(lpTargetObj->Level / 4);

  00054	0f bf 81 9c 00
	00 00		 movsx	 eax, WORD PTR [ecx+156]
  0005b	8d 48 c0	 lea	 ecx, DWORD PTR [eax-64]
  0005e	99		 cdq
  0005f	83 e2 03	 and	 edx, 3
  00062	03 c2		 add	 eax, edx
  00064	c1 f8 02	 sar	 eax, 2
  00067	0f af c8	 imul	 ecx, eax
  0006a	03 f1		 add	 esi, ecx
$LN9@gObjMonste:

; 963  : 	}
; 964  : 
; 965  : 	if ( level > 0 )

  0006c	85 f6		 test	 esi, esi
  0006e	7e 12		 jle	 SHORT $LN8@gObjMonste

; 966  : 	{
; 967  : 		maxexp = level / 2;

  00070	8b c6		 mov	 eax, esi
  00072	99		 cdq
  00073	2b c2		 sub	 eax, edx
  00075	8b d8		 mov	 ebx, eax
  00077	d1 fb		 sar	 ebx, 1

; 972  : 	}
; 973  : 
; 974  : 	if ( maxexp < 1 )

  00079	83 fb 01	 cmp	 ebx, 1
  0007c	7d 0a		 jge	 SHORT $LN6@gObjMonste

; 975  : 	{
; 976  : 		exp = level;

  0007e	8b c6		 mov	 eax, esi

; 977  : 	}
; 978  : 	else

  00080	eb 11		 jmp	 SHORT $LN5@gObjMonste
$LN8@gObjMonste:

; 968  : 	}
; 969  : 	else
; 970  : 	{
; 971  : 		level = 0;

  00082	33 f6		 xor	 esi, esi

; 975  : 	{
; 976  : 		exp = level;

  00084	8b c6		 mov	 eax, esi

; 977  : 	}
; 978  : 	else

  00086	eb 0b		 jmp	 SHORT $LN5@gObjMonste
$LN6@gObjMonste:

; 979  : 	{
; 980  : 		exp = level + rand()%maxexp;

  00088	e8 00 00 00 00	 call	 _rand
  0008d	99		 cdq
  0008e	f7 fb		 idiv	 ebx
  00090	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
$LN5@gObjMonste:

; 981  : 	}
; 982  : 
; 983  : 	exp = (dmg * exp)/tot_dmg;

  00093	0f af 45 10	 imul	 eax, DWORD PTR _dmg$[ebp]
  00097	99		 cdq
  00098	f7 7d 14	 idiv	 DWORD PTR _tot_dmg$[ebp]

; 984  : 	DWORD mymaxexp = gLevelExperience[lpObj->Level];

  0009b	0f bf 97 9c 00
	00 00		 movsx	 edx, WORD PTR [edi+156]
  000a2	8b 0c 95 00 00
	00 00		 mov	 ecx, DWORD PTR ?gLevelExperience@@3PAKA[edx*4]
  000a9	89 45 08	 mov	 DWORD PTR _exp$[ebp], eax

; 985  : 
; 986  : 	if ( exp > mymaxexp )

  000ac	3b c1		 cmp	 eax, ecx
  000ae	76 03		 jbe	 SHORT $LN4@gObjMonste

; 987  : 	{
; 988  : 		exp = mymaxexp;

  000b0	89 4d 08	 mov	 DWORD PTR _exp$[ebp], ecx
$LN4@gObjMonste:

; 989  : 	}
; 990  : 
; 991  : 	exp = int(exp * gVip.GetExperience(lpObj->m_Vip));

  000b3	8b 87 3c 15 00
	00		 mov	 eax, DWORD PTR [edi+5436]
  000b9	50		 push	 eax
  000ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?gVip@@3VCVip@@A ; gVip
  000bf	e8 00 00 00 00	 call	 ?GetExperience@CVip@@QAEMH@Z ; CVip::GetExperience
  000c4	da 4d 08	 fimul	 DWORD PTR _exp$[ebp]
  000c7	e8 00 00 00 00	 call	 __ftol2_sse
  000cc	8b f0		 mov	 esi, eax

; 992  : 
; 993  : 	if ( exp > 0 )

  000ce	85 f6		 test	 esi, esi
  000d0	7e 37		 jle	 SHORT $LN1@gObjMonste

; 994  : 	{
; 995  : 		if ( lpObj->Type == OBJ_USER )

  000d2	66 83 7f 60 01	 cmp	 WORD PTR [edi+96], 1
  000d7	75 30		 jne	 SHORT $LN1@gObjMonste

; 996  : 		{
; 997  : 			lpObj->Experience += exp;
; 998  : 			lpObj->m_nEventExp += exp;
; 999  : 
; 1000 : 			if ( gObjLevelUp(lpObj, exp, lpTargetObj->Class, 0) == false )

  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  000dc	01 b7 a8 00 00
	00		 add	 DWORD PTR [edi+168], esi
  000e2	01 b7 f8 0c 00
	00		 add	 DWORD PTR [edi+3320], esi
  000e8	0f b7 91 98 00
	00 00		 movzx	 edx, WORD PTR [ecx+152]
  000ef	6a 00		 push	 0
  000f1	52		 push	 edx
  000f2	56		 push	 esi
  000f3	57		 push	 edi
  000f4	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjLevelUp
  000f9	83 c4 10	 add	 esp, 16			; 00000010H
  000fc	84 c0		 test	 al, al
  000fe	75 09		 jne	 SHORT $LN1@gObjMonste

; 1001 : 			{
; 1002 : 				return 0;

  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	33 c0		 xor	 eax, eax
  00104	5b		 pop	 ebx

; 1008 : }

  00105	5d		 pop	 ebp
  00106	c2 10 00	 ret	 16			; 00000010H
$LN1@gObjMonste:
  00109	5f		 pop	 edi

; 1003 : 			}
; 1004 : 		}
; 1005 : 	}
; 1006 : 
; 1007 : 	return exp;

  0010a	8b c6		 mov	 eax, esi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx

; 1008 : }

  0010e	5d		 pop	 ebp
  0010f	c2 10 00	 ret	 16			; 00000010H
?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjMonsterExpSingle
_TEXT	ENDS
PUBLIC	__real@4069000000000000
PUBLIC	__real@3fc999999999999a
PUBLIC	??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BA@HPOBAIIK@DevilSquare?4cpp?$AA@	; `string'
PUBLIC	_lpObj$GSCopy$
PUBLIC	_lpTargetObj$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjExpParty
EXTRN	?GCKillPlayerExpSend@@YAXHHHHH@Z:PROC		; GCKillPlayerExpSend
EXTRN	?gServerInfo@@3VCServerInfo@@A:BYTE		; gServerInfo
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@ DB 'error : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HPOBAIIK@DevilSquare?4cpp?$AA@
CONST	SEGMENT
??_C@_0BA@HPOBAIIK@DevilSquare?4cpp?$AA@ DB 'DevilSquare.cpp', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z
_TEXT	SEGMENT
tv863 = -68						; size = 4
_lpObj$GSCopy$ = -64					; size = 4
tv844 = -60						; size = 4
_n$157762 = -60						; size = 4
_bApplaySetParty$ = -60					; size = 4
_totallevel$ = -56					; size = 4
_lpTargetObj$GSCopy$ = -52				; size = 4
tv855 = -48						; size = 4
_exp$ = -48						; size = 4
_level$ = -44						; size = 4
tv902 = -40						; size = 4
_viewplayer$ = -40					; size = 4
_viewpercent$ = -36					; size = 4
_dis$ = -32						; size = 20
_bCheckSetParty$ = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_AttackDamage$ = 16					; size = 4
_MSBFlag$ = 20						; size = 4
?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjExpParty, COMDAT
; _this$ = ecx

; 1011 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]

; 1012 : 	int n;
; 1013 : 	INT exp;
; 1014 : 	INT maxexp = 0;
; 1015 : 	int totalexp;
; 1016 : 	int level = ((lpTargetObj->Level + 25) * lpTargetObj->Level) / 3;
; 1017 : 	int number;
; 1018 : 	int partynum = 0;
; 1019 : 	int totallevel = 0;

  00013	89 45 cc	 mov	 DWORD PTR _lpTargetObj$GSCopy$[ebp], eax
  00016	0f bf 80 9c 00
	00 00		 movsx	 eax, WORD PTR [eax+156]
  0001d	8d 48 19	 lea	 ecx, DWORD PTR [eax+25]
  00020	0f af c8	 imul	 ecx, eax
  00023	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00028	f7 e9		 imul	 ecx
  0002a	53		 push	 ebx
  0002b	56		 push	 esi
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	57		 push	 edi
  00034	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 1020 : 	int partylevel;
; 1021 : 	int partycount;
; 1022 : 	int dis[MAX_USER_IN_PARTY];
; 1023 : 	int viewplayer = 0;
; 1024 : 	int viewpercent = 100;
; 1025 : 	BOOL bApplaySetParty = FALSE;
; 1026 : 	bool bCheckSetParty[MAX_TYPE_PLAYER];
; 1027 : 	partynum = lpObj->PartyNumber;

  00037	8b 97 a8 02 00
	00		 mov	 edx, DWORD PTR [edi+680]
  0003d	89 45 d4	 mov	 DWORD PTR _level$[ebp], eax

; 1028 : 	LPOBJ lpPartyObj;
; 1029 : 
; 1030 : 	
; 1031 : 	int toplevel = 0;
; 1032 : 
; 1033 : 	for (n=0;n<MAX_USER_IN_PARTY;n++)
; 1034 : 	{
; 1035 : 		number = gParty.m_PartyS[partynum].Number[n];

  00040	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00043	c1 e0 04	 shl	 eax, 4
  00046	8b 88 0c 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+12]
  0004c	33 f6		 xor	 esi, esi
  0004e	33 db		 xor	 ebx, ebx
  00050	89 7d c0	 mov	 DWORD PTR _lpObj$GSCopy$[ebp], edi
  00053	89 75 c8	 mov	 DWORD PTR _totallevel$[ebp], esi
  00056	89 75 d8	 mov	 DWORD PTR _viewplayer$[ebp], esi
  00059	c7 45 dc 64 00
	00 00		 mov	 DWORD PTR _viewpercent$[ebp], 100 ; 00000064H
  00060	89 75 c4	 mov	 DWORD PTR _bApplaySetParty$[ebp], esi

; 1036 : 
; 1037 : 		if ( number >= 0 )

  00063	85 c9		 test	 ecx, ecx
  00065	78 19		 js	 SHORT $LN54@gObjExpPar

; 1038 : 		{
; 1039 : 			lpPartyObj = &gObj[number];

  00067	69 c9 64 15 00
	00		 imul	 ecx, 5476		; 00001564H
  0006d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1040 : 
; 1041 : 			if ( lpPartyObj->Level > toplevel )

  00073	0f bf 89 9c 00
	00 00		 movsx	 ecx, WORD PTR [ecx+156]
  0007a	85 c9		 test	 ecx, ecx
  0007c	7e 02		 jle	 SHORT $LN54@gObjExpPar

; 1042 : 			{
; 1043 : 				toplevel = lpPartyObj->Level;

  0007e	8b d9		 mov	 ebx, ecx
$LN54@gObjExpPar:

; 1028 : 	LPOBJ lpPartyObj;
; 1029 : 
; 1030 : 	
; 1031 : 	int toplevel = 0;
; 1032 : 
; 1033 : 	for (n=0;n<MAX_USER_IN_PARTY;n++)
; 1034 : 	{
; 1035 : 		number = gParty.m_PartyS[partynum].Number[n];

  00080	8b 88 10 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+16]

; 1036 : 
; 1037 : 		if ( number >= 0 )

  00086	85 c9		 test	 ecx, ecx
  00088	78 19		 js	 SHORT $LN90@gObjExpPar

; 1038 : 		{
; 1039 : 			lpPartyObj = &gObj[number];

  0008a	69 c9 64 15 00
	00		 imul	 ecx, 5476		; 00001564H
  00090	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1040 : 
; 1041 : 			if ( lpPartyObj->Level > toplevel )

  00096	0f bf 89 9c 00
	00 00		 movsx	 ecx, WORD PTR [ecx+156]
  0009d	3b cb		 cmp	 ecx, ebx
  0009f	7e 02		 jle	 SHORT $LN90@gObjExpPar

; 1042 : 			{
; 1043 : 				toplevel = lpPartyObj->Level;

  000a1	8b d9		 mov	 ebx, ecx
$LN90@gObjExpPar:

; 1028 : 	LPOBJ lpPartyObj;
; 1029 : 
; 1030 : 	
; 1031 : 	int toplevel = 0;
; 1032 : 
; 1033 : 	for (n=0;n<MAX_USER_IN_PARTY;n++)
; 1034 : 	{
; 1035 : 		number = gParty.m_PartyS[partynum].Number[n];

  000a3	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+20]

; 1036 : 
; 1037 : 		if ( number >= 0 )

  000a9	85 c9		 test	 ecx, ecx
  000ab	78 19		 js	 SHORT $LN91@gObjExpPar

; 1038 : 		{
; 1039 : 			lpPartyObj = &gObj[number];

  000ad	69 c9 64 15 00
	00		 imul	 ecx, 5476		; 00001564H
  000b3	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1040 : 
; 1041 : 			if ( lpPartyObj->Level > toplevel )

  000b9	0f bf 89 9c 00
	00 00		 movsx	 ecx, WORD PTR [ecx+156]
  000c0	3b cb		 cmp	 ecx, ebx
  000c2	7e 02		 jle	 SHORT $LN91@gObjExpPar

; 1042 : 			{
; 1043 : 				toplevel = lpPartyObj->Level;

  000c4	8b d9		 mov	 ebx, ecx
$LN91@gObjExpPar:

; 1028 : 	LPOBJ lpPartyObj;
; 1029 : 
; 1030 : 	
; 1031 : 	int toplevel = 0;
; 1032 : 
; 1033 : 	for (n=0;n<MAX_USER_IN_PARTY;n++)
; 1034 : 	{
; 1035 : 		number = gParty.m_PartyS[partynum].Number[n];

  000c6	8b 88 18 00 00
	00		 mov	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax+24]

; 1036 : 
; 1037 : 		if ( number >= 0 )

  000cc	85 c9		 test	 ecx, ecx
  000ce	78 19		 js	 SHORT $LN92@gObjExpPar

; 1038 : 		{
; 1039 : 			lpPartyObj = &gObj[number];

  000d0	69 c9 64 15 00
	00		 imul	 ecx, 5476		; 00001564H
  000d6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1040 : 
; 1041 : 			if ( lpPartyObj->Level > toplevel )

  000dc	0f bf 89 9c 00
	00 00		 movsx	 ecx, WORD PTR [ecx+156]
  000e3	3b cb		 cmp	 ecx, ebx
  000e5	7e 02		 jle	 SHORT $LN92@gObjExpPar

; 1042 : 			{
; 1043 : 				toplevel = lpPartyObj->Level;

  000e7	8b d9		 mov	 ebx, ecx
$LN92@gObjExpPar:

; 1028 : 	LPOBJ lpPartyObj;
; 1029 : 
; 1030 : 	
; 1031 : 	int toplevel = 0;
; 1032 : 
; 1033 : 	for (n=0;n<MAX_USER_IN_PARTY;n++)
; 1034 : 	{
; 1035 : 		number = gParty.m_PartyS[partynum].Number[n];

  000e9	8b 80 1c 00 00
	00		 mov	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[eax+28]

; 1036 : 
; 1037 : 		if ( number >= 0 )

  000ef	85 c0		 test	 eax, eax
  000f1	78 18		 js	 SHORT $LN76@gObjExpPar

; 1038 : 		{
; 1039 : 			lpPartyObj = &gObj[number];

  000f3	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  000f9	05 00 00 00 00	 add	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1040 : 
; 1041 : 			if ( lpPartyObj->Level > toplevel )

  000fe	0f bf 80 9c 00
	00 00		 movsx	 eax, WORD PTR [eax+156]
  00105	3b c3		 cmp	 eax, ebx
  00107	7e 02		 jle	 SHORT $LN76@gObjExpPar

; 1042 : 			{
; 1043 : 				toplevel = lpPartyObj->Level;

  00109	8b d8		 mov	 ebx, eax
$LN76@gObjExpPar:

; 1044 : 			}
; 1045 : 		}
; 1046 : 	}
; 1047 : 
; 1048 : 	if ( OBJMAX_RANGE(partynum) == FALSE )

  0010b	85 d2		 test	 edx, edx
  0010d	78 0f		 js	 SHORT $LN77@gObjExpPar
  0010f	33 c0		 xor	 eax, eax
  00111	81 fa e7 1c 00
	00		 cmp	 edx, 7399		; 00001ce7H
  00117	0f 9e c0	 setle	 al
  0011a	85 c0		 test	 eax, eax
  0011c	75 2c		 jne	 SHORT $LN50@gObjExpPar
$LN77@gObjExpPar:

; 1049 : 	{
; 1050 : 		LogAdd(LOG_BLACK, "error : %s %d", __FILE__, __LINE__);

  0011e	68 1a 04 00 00	 push	 1050			; 0000041aH
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HPOBAIIK@DevilSquare?4cpp?$AA@
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0012d	6a 00		 push	 0
  0012f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00134	83 c4 10	 add	 esp, 16			; 00000010H
  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx

; 1232 : 					}
; 1233 : 				}
; 1234 : 			}
; 1235 : 		}
; 1236 : 	}
; 1237 : }

  0013a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013d	33 cd		 xor	 ecx, ebp
  0013f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 10 00	 ret	 16			; 00000010H
$LN50@gObjExpPar:

; 1051 : 		return;
; 1052 : 	}
; 1053 : 
; 1054 : 	partycount = gParty.m_PartyS[partynum].Count;
; 1055 : 
; 1056 : 	for (int n =0;n<MAX_USER_IN_PARTY;n++)

  0014a	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  0014d	33 ff		 xor	 edi, edi
  0014f	c1 e0 04	 shl	 eax, 4
  00152	8d 80 0c 00 00
	00		 lea	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[eax+12]
  00158	89 45 bc	 mov	 DWORD PTR tv863[ebp], eax
  0015b	89 45 d0	 mov	 DWORD PTR tv855[ebp], eax
  0015e	8b ff		 npad	 2
$LL49@gObjExpPar:

; 1057 : 	{
; 1058 : 		number = gParty.m_PartyS[partynum].Number[n];

  00160	8b 45 d0	 mov	 eax, DWORD PTR tv855[ebp]
  00163	8b 00		 mov	 eax, DWORD PTR [eax]

; 1059 : 
; 1060 : 		if ( number >= 0 )

  00165	85 c0		 test	 eax, eax
  00167	78 67		 js	 SHORT $LN48@gObjExpPar

; 1061 : 		{
; 1062 : 			lpPartyObj = &gObj[number];
; 1063 : 
; 1064 : 			if ( lpTargetObj->MapNumber ==lpPartyObj->MapNumber )

  00169	8b 4d cc	 mov	 ecx, DWORD PTR _lpTargetObj$GSCopy$[ebp]
  0016c	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  00172	8a 91 09 01 00
	00		 mov	 dl, BYTE PTR [ecx+265]
  00178	3a 90 09 01 00
	00		 cmp	 dl, BYTE PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+265]
  0017e	75 50		 jne	 SHORT $LN48@gObjExpPar

; 1065 : 			{
; 1066 : 				dis[n] = gObjCalDistance(lpTargetObj, &gObj[number]);

  00180	8d b0 00 00 00
	00		 lea	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax]
  00186	8b c1		 mov	 eax, ecx
  00188	56		 push	 esi
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0018f	83 c4 08	 add	 esp, 8
  00192	89 44 bd e0	 mov	 DWORD PTR _dis$[ebp+edi*4], eax

; 1067 : 
; 1068 : 				if ( dis[n] < 10 )

  00196	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00199	7d 32		 jge	 SHORT $LN80@gObjExpPar

; 1069 : 				{
; 1070 : 					lpPartyObj = &gObj[number];
; 1071 : 
; 1072 : 					if ( toplevel >= (lpPartyObj->Level + 200 ) ) // #formula

  0019b	0f bf 86 9c 00
	00 00		 movsx	 eax, WORD PTR [esi+156]
  001a2	8d 88 c8 00 00
	00		 lea	 ecx, DWORD PTR [eax+200]
  001a8	3b d9		 cmp	 ebx, ecx
  001aa	7c 0f		 jl	 SHORT $LN43@gObjExpPar

; 1073 : 					{
; 1074 : 						totallevel = totallevel + lpPartyObj->Level + 200;

  001ac	8b 55 c8	 mov	 edx, DWORD PTR _totallevel$[ebp]
  001af	8d 84 02 c8 00
	00 00		 lea	 eax, DWORD PTR [edx+eax+200]
  001b6	89 45 c8	 mov	 DWORD PTR _totallevel$[ebp], eax

; 1075 : 					}
; 1076 : 					else

  001b9	eb 03		 jmp	 SHORT $LN42@gObjExpPar
$LN43@gObjExpPar:

; 1077 : 					{
; 1078 : 						totallevel += lpPartyObj->Level;

  001bb	01 45 c8	 add	 DWORD PTR _totallevel$[ebp], eax
$LN42@gObjExpPar:

; 1079 : 					}
; 1080 : 
; 1081 : 					viewplayer++;
; 1082 : 					bCheckSetParty[lpPartyObj->Class] = true;

  001be	0f b7 8e 98 00
	00 00		 movzx	 ecx, WORD PTR [esi+152]
  001c5	ff 45 d8	 inc	 DWORD PTR _viewplayer$[ebp]
  001c8	c6 44 0d f4 01	 mov	 BYTE PTR _bCheckSetParty$[ebp+ecx], 1
$LN80@gObjExpPar:
  001cd	8b 75 d8	 mov	 esi, DWORD PTR _viewplayer$[ebp]
$LN48@gObjExpPar:

; 1051 : 		return;
; 1052 : 	}
; 1053 : 
; 1054 : 	partycount = gParty.m_PartyS[partynum].Count;
; 1055 : 
; 1056 : 	for (int n =0;n<MAX_USER_IN_PARTY;n++)

  001d0	83 45 d0 04	 add	 DWORD PTR tv855[ebp], 4
  001d4	47		 inc	 edi
  001d5	83 ff 05	 cmp	 edi, 5
  001d8	7c 86		 jl	 SHORT $LL49@gObjExpPar

; 1083 : 				}
; 1084 : 			}
; 1085 : 		}
; 1086 : 	}
; 1087 : 
; 1088 : 	if ( bCheckSetParty[0] != false && bCheckSetParty[1] != false && bCheckSetParty[2] != false )

  001da	80 7d f4 00	 cmp	 BYTE PTR _bCheckSetParty$[ebp], 0
  001de	74 13		 je	 SHORT $LN82@gObjExpPar
  001e0	80 7d f5 00	 cmp	 BYTE PTR _bCheckSetParty$[ebp+1], 0
  001e4	74 0d		 je	 SHORT $LN82@gObjExpPar
  001e6	80 7d f6 00	 cmp	 BYTE PTR _bCheckSetParty$[ebp+2], 0
  001ea	74 07		 je	 SHORT $LN82@gObjExpPar

; 1089 : 	{
; 1090 : 		bApplaySetParty = TRUE;

  001ec	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _bApplaySetParty$[ebp], 1
$LN82@gObjExpPar:

; 1091 : 	}
; 1092 : 
; 1093 : 	if ( viewplayer > 1 )

  001f3	83 fe 01	 cmp	 esi, 1
  001f6	0f 8e da 00 00
	00		 jle	 $LN40@gObjExpPar

; 1094 : 	{
; 1095 : 		if ( bApplaySetParty != FALSE )

  001fc	83 7d c4 00	 cmp	 DWORD PTR _bApplaySetParty$[ebp], 0
  00200	74 63		 je	 SHORT $LN39@gObjExpPar

; 1096 : 		{
; 1097 : 			if ( viewplayer == 3 )

  00202	83 fe 03	 cmp	 esi, 3
  00205	75 16		 jne	 SHORT $LN38@gObjExpPar

; 1098 : 			{
; 1099 : 				viewpercent = gServerInfo.m_Data.iExpParty[0];

  00207	8b 15 f4 00 00
	00		 mov	 edx, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+244

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  0020d	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  00210	89 55 dc	 mov	 DWORD PTR _viewpercent$[ebp], edx
  00213	99		 cdq
  00214	f7 fe		 idiv	 esi
  00216	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  00218	e9 bc 00 00 00	 jmp	 $LN23@gObjExpPar
$LN38@gObjExpPar:

; 1100 : 			}
; 1101 : 			else if ( viewplayer == 4 )

  0021d	83 fe 04	 cmp	 esi, 4
  00220	75 15		 jne	 SHORT $LN36@gObjExpPar

; 1102 : 			{
; 1103 : 				viewpercent = gServerInfo.m_Data.iExpParty[1];

  00222	a1 f8 00 00 00	 mov	 eax, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+248
  00227	89 45 dc	 mov	 DWORD PTR _viewpercent$[ebp], eax

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  0022a	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  0022d	99		 cdq
  0022e	f7 fe		 idiv	 esi
  00230	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  00232	e9 a2 00 00 00	 jmp	 $LN23@gObjExpPar
$LN36@gObjExpPar:

; 1104 : 			}
; 1105 : 			else if ( viewplayer >= 5 )

  00237	83 fe 05	 cmp	 esi, 5
  0023a	7c 16		 jl	 SHORT $LN34@gObjExpPar

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  0023c	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  0023f	99		 cdq
  00240	f7 fe		 idiv	 esi
  00242	8b 0d fc 00 00
	00		 mov	 ecx, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+252
  00248	89 4d dc	 mov	 DWORD PTR _viewpercent$[ebp], ecx
  0024b	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  0024d	e9 87 00 00 00	 jmp	 $LN23@gObjExpPar
$LN34@gObjExpPar:

; 1106 : 			{
; 1107 : 				viewpercent = gServerInfo.m_Data.iExpParty[2];
; 1108 : 			}
; 1109 : 			else
; 1110 : 			{
; 1111 : 				viewpercent = gServerInfo.m_Data.iExpParty[3];

  00252	8b 15 00 01 00
	00		 mov	 edx, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+256

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  00258	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  0025b	89 55 dc	 mov	 DWORD PTR _viewpercent$[ebp], edx
  0025e	99		 cdq
  0025f	f7 fe		 idiv	 esi
  00261	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  00263	eb 74		 jmp	 SHORT $LN23@gObjExpPar
$LN39@gObjExpPar:

; 1112 : 			}
; 1113 : 		}
; 1114 : 		else
; 1115 : 		{
; 1116 : 			if ( viewplayer == 2 )

  00265	83 fe 02	 cmp	 esi, 2
  00268	75 12		 jne	 SHORT $LN31@gObjExpPar

; 1117 : 			{
; 1118 : 				viewpercent = gServerInfo.m_Data.iExpParty[4];

  0026a	a1 04 01 00 00	 mov	 eax, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+260
  0026f	89 45 dc	 mov	 DWORD PTR _viewpercent$[ebp], eax

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  00272	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  00275	99		 cdq
  00276	f7 fe		 idiv	 esi
  00278	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  0027a	eb 5d		 jmp	 SHORT $LN23@gObjExpPar
$LN31@gObjExpPar:

; 1119 : 			}
; 1120 : 			else if ( viewplayer == 3 )

  0027c	83 fe 03	 cmp	 esi, 3
  0027f	75 13		 jne	 SHORT $LN29@gObjExpPar

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  00281	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  00284	99		 cdq
  00285	f7 fe		 idiv	 esi
  00287	8b 0d 08 01 00
	00		 mov	 ecx, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+264
  0028d	89 4d dc	 mov	 DWORD PTR _viewpercent$[ebp], ecx
  00290	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  00292	eb 45		 jmp	 SHORT $LN23@gObjExpPar
$LN29@gObjExpPar:

; 1121 : 			{
; 1122 : 				viewpercent = gServerInfo.m_Data.iExpParty[5];
; 1123 : 			}
; 1124 : 			else if ( viewplayer == 4 )

  00294	83 fe 04	 cmp	 esi, 4
  00297	75 13		 jne	 SHORT $LN27@gObjExpPar

; 1125 : 			{
; 1126 : 				viewpercent = gServerInfo.m_Data.iExpParty[6];

  00299	8b 15 0c 01 00
	00		 mov	 edx, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+268

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  0029f	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  002a2	89 55 dc	 mov	 DWORD PTR _viewpercent$[ebp], edx
  002a5	99		 cdq
  002a6	f7 fe		 idiv	 esi
  002a8	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  002aa	eb 2d		 jmp	 SHORT $LN23@gObjExpPar
$LN27@gObjExpPar:

; 1127 : 			}
; 1128 : 			else if ( viewplayer >= 5 )

  002ac	83 fe 05	 cmp	 esi, 5
  002af	7c 12		 jl	 SHORT $LN25@gObjExpPar

; 1129 : 			{
; 1130 : 				viewpercent = gServerInfo.m_Data.iExpParty[7];

  002b1	a1 10 01 00 00	 mov	 eax, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+272
  002b6	89 45 dc	 mov	 DWORD PTR _viewpercent$[ebp], eax

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  002b9	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  002bc	99		 cdq
  002bd	f7 fe		 idiv	 esi
  002bf	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  002c1	eb 16		 jmp	 SHORT $LN23@gObjExpPar
$LN25@gObjExpPar:

; 1131 : 			}
; 1132 : 			else
; 1133 : 			{
; 1134 : 				viewpercent = gServerInfo.m_Data.iExpParty[8];
; 1135 : 			}
; 1136 : 		}
; 1137 : 
; 1138 : 		partylevel = totallevel / viewplayer;

  002c3	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$[ebp]
  002c6	99		 cdq
  002c7	f7 fe		 idiv	 esi
  002c9	8b 0d 14 01 00
	00		 mov	 ecx, DWORD PTR ?gServerInfo@@3VCServerInfo@@A+276
  002cf	89 4d dc	 mov	 DWORD PTR _viewpercent$[ebp], ecx
  002d2	8b f0		 mov	 esi, eax

; 1139 : 	}
; 1140 : 	else

  002d4	eb 03		 jmp	 SHORT $LN23@gObjExpPar
$LN40@gObjExpPar:

; 1141 : 	{
; 1142 : 		partylevel = totallevel;

  002d6	8b 75 c8	 mov	 esi, DWORD PTR _totallevel$[ebp]
$LN23@gObjExpPar:

; 1143 : 	}
; 1144 : 
; 1145 : 	if ( (lpTargetObj->Level +10) < partylevel )

  002d9	8b 55 cc	 mov	 edx, DWORD PTR _lpTargetObj$GSCopy$[ebp]
  002dc	0f b7 ba 9c 00
	00 00		 movzx	 edi, WORD PTR [edx+156]
  002e3	0f bf cf	 movsx	 ecx, di
  002e6	8d 41 0a	 lea	 eax, DWORD PTR [ecx+10]
  002e9	3b c6		 cmp	 eax, esi
  002eb	7d 0e		 jge	 SHORT $LN83@gObjExpPar

; 1146 : 	{
; 1147 : 		level = (level * (lpTargetObj->Level+10) ) / partylevel;

  002ed	0f af 45 d4	 imul	 eax, DWORD PTR _level$[ebp]
  002f1	99		 cdq
  002f2	f7 fe		 idiv	 esi
  002f4	8b f0		 mov	 esi, eax
  002f6	89 75 d4	 mov	 DWORD PTR _level$[ebp], esi
  002f9	eb 03		 jmp	 SHORT $LN22@gObjExpPar
$LN83@gObjExpPar:
  002fb	8b 75 d4	 mov	 esi, DWORD PTR _level$[ebp]
$LN22@gObjExpPar:

; 1148 : 	}
; 1149 : 
; 1150 : 	if ( lpTargetObj->Level >= 65 )

  002fe	66 83 ff 41	 cmp	 di, 65			; 00000041H
  00302	7c 44		 jl	 SHORT $LN84@gObjExpPar

; 1151 : 	{
; 1152 : 		if ( viewplayer == 1 )

  00304	83 7d d8 01	 cmp	 DWORD PTR _viewplayer$[ebp], 1
  00308	75 15		 jne	 SHORT $LN20@gObjExpPar

; 1153 : 		{
; 1154 : 			level += (lpTargetObj->Level - 64) * (lpTargetObj->Level/ 4);

  0030a	8b c1		 mov	 eax, ecx
  0030c	99		 cdq
  0030d	83 e2 03	 and	 edx, 3
  00310	03 c2		 add	 eax, edx
  00312	c1 f8 02	 sar	 eax, 2
  00315	8d 79 c0	 lea	 edi, DWORD PTR [ecx-64]
  00318	0f af f8	 imul	 edi, eax
  0031b	03 f7		 add	 esi, edi

; 1155 : 		}
; 1156 : 		else

  0031d	eb 29		 jmp	 SHORT $LN84@gObjExpPar
$LN20@gObjExpPar:

; 1157 : 		{
; 1158 : 			level += (200.0 - (lpObj->Level * 0.2));

  0031f	8b 45 c0	 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  00322	0f bf 88 9c 00
	00 00		 movsx	 ecx, WORD PTR [eax+156]
  00329	89 4d c4	 mov	 DWORD PTR tv844[ebp], ecx
  0032c	db 45 c4	 fild	 DWORD PTR tv844[ebp]
  0032f	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fc999999999999a
  00335	dc 2d 00 00 00
	00		 fsubr	 QWORD PTR __real@4069000000000000
  0033b	da 45 d4	 fiadd	 DWORD PTR _level$[ebp]
  0033e	e8 00 00 00 00	 call	 __ftol2_sse
  00343	89 45 d4	 mov	 DWORD PTR _level$[ebp], eax
  00346	8b f0		 mov	 esi, eax
$LN84@gObjExpPar:

; 1159 : 		}
; 1160 : 	}
; 1161 : 
; 1162 : 	if ( level > 0 )

  00348	85 f6		 test	 esi, esi
  0034a	7e 12		 jle	 SHORT $LN18@gObjExpPar

; 1163 : 	{
; 1164 : 		maxexp = level / 2;

  0034c	8b c6		 mov	 eax, esi
  0034e	99		 cdq
  0034f	2b c2		 sub	 eax, edx
  00351	8b f8		 mov	 edi, eax
  00353	d1 ff		 sar	 edi, 1

; 1169 : 	}
; 1170 : 
; 1171 : 	if ( maxexp < 1 )

  00355	83 ff 01	 cmp	 edi, 1
  00358	7d 12		 jge	 SHORT $LN16@gObjExpPar

; 1172 : 	{
; 1173 : 		totalexp = level;

  0035a	8b de		 mov	 ebx, esi

; 1174 : 	}
; 1175 : 	else

  0035c	eb 19		 jmp	 SHORT $LN15@gObjExpPar
$LN18@gObjExpPar:

; 1165 : 	}
; 1166 : 	else
; 1167 : 	{
; 1168 : 		level = 0;

  0035e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _level$[ebp], 0

; 1169 : 	}
; 1170 : 
; 1171 : 	if ( maxexp < 1 )

  00365	8b 75 d4	 mov	 esi, DWORD PTR _level$[ebp]

; 1172 : 	{
; 1173 : 		totalexp = level;

  00368	8b de		 mov	 ebx, esi

; 1174 : 	}
; 1175 : 	else

  0036a	eb 0b		 jmp	 SHORT $LN15@gObjExpPar
$LN16@gObjExpPar:

; 1176 : 	{
; 1177 : 		totalexp = level + rand()%maxexp;

  0036c	e8 00 00 00 00	 call	 _rand
  00371	99		 cdq
  00372	f7 ff		 idiv	 edi
  00374	8d 1c 16	 lea	 ebx, DWORD PTR [esi+edx]
$LN15@gObjExpPar:

; 1178 : 	}
; 1179 : 
; 1180 : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  00377	8b 7d cc	 mov	 edi, DWORD PTR _lpTargetObj$GSCopy$[ebp]
  0037a	66 83 7f 60 02	 cmp	 WORD PTR [edi+96], 2
  0037f	75 06		 jne	 SHORT $LN14@gObjExpPar

; 1181 : 	{
; 1182 : 		lpTargetObj->Money = totalexp;

  00381	89 9f b0 00 00
	00		 mov	 DWORD PTR [edi+176], ebx
$LN14@gObjExpPar:

; 1183 : 	}
; 1184 : 
; 1185 : 	for (int n=0;n<MAX_USER_IN_PARTY;n++)

  00387	8b 55 bc	 mov	 edx, DWORD PTR tv863[ebp]
  0038a	33 c0		 xor	 eax, eax
  0038c	89 45 c4	 mov	 DWORD PTR _n$157762[ebp], eax
  0038f	89 55 d8	 mov	 DWORD PTR tv902[ebp], edx
  00392	eb 03		 jmp	 SHORT $LN13@gObjExpPar
$LL89@gObjExpPar:
  00394	8b 7d cc	 mov	 edi, DWORD PTR _lpTargetObj$GSCopy$[ebp]
$LN13@gObjExpPar:

; 1186 : 	{
; 1187 : 		number = gParty.m_PartyS[partynum].Number[n];

  00397	8b 4d d8	 mov	 ecx, DWORD PTR tv902[ebp]
  0039a	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1188 : 
; 1189 : 		if ( number >= 0 )

  0039c	85 f6		 test	 esi, esi
  0039e	0f 88 e8 00 00
	00		 js	 $LN12@gObjExpPar

; 1190 : 		{
; 1191 : 			lpPartyObj = &gObj[number];
; 1192 : 
; 1193 : 			if ( lpTargetObj->MapNumber == lpPartyObj->MapNumber )

  003a4	8a 97 09 01 00
	00		 mov	 dl, BYTE PTR [edi+265]
  003aa	69 f6 64 15 00
	00		 imul	 esi, 5476		; 00001564H
  003b0	81 c6 00 00 00
	00		 add	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003b6	3a 96 09 01 00
	00		 cmp	 dl, BYTE PTR [esi+265]
  003bc	0f 85 ca 00 00
	00		 jne	 $LN12@gObjExpPar

; 1194 : 			{
; 1195 : 				if ( dis[n] < 10 )

  003c2	83 7c 85 e0 0a	 cmp	 DWORD PTR _dis$[ebp+eax*4], 10 ; 0000000aH
  003c7	0f 8d bf 00 00
	00		 jge	 $LN12@gObjExpPar

; 1196 : 				{
; 1197 : 					DWORD myexp = gLevelExperience[lpPartyObj->Level];

  003cd	0f bf 86 9c 00
	00 00		 movsx	 eax, WORD PTR [esi+156]
  003d4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?gLevelExperience@@3PAKA[eax*4]

; 1198 : 					exp = ((totalexp * viewpercent* lpPartyObj->Level ) / totallevel ) / 100;

  003db	0f af c3	 imul	 eax, ebx
  003de	0f af 45 dc	 imul	 eax, DWORD PTR _viewpercent$[ebp]
  003e2	99		 cdq
  003e3	f7 7d c8	 idiv	 DWORD PTR _totallevel$[ebp]
  003e6	8b d0		 mov	 edx, eax
  003e8	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003ed	f7 ea		 imul	 edx
  003ef	c1 fa 05	 sar	 edx, 5
  003f2	8b c2		 mov	 eax, edx
  003f4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003f7	03 c2		 add	 eax, edx
  003f9	89 45 d0	 mov	 DWORD PTR _exp$[ebp], eax

; 1199 : 
; 1200 : 					if ( exp > myexp  )

  003fc	3b c1		 cmp	 eax, ecx
  003fe	76 03		 jbe	 SHORT $LN7@gObjExpPar

; 1201 : 					{
; 1202 : 						exp = myexp;

  00400	89 4d d0	 mov	 DWORD PTR _exp$[ebp], ecx
$LN7@gObjExpPar:

; 1203 : 					}
; 1204 : 
; 1205 : 					if( lpPartyObj->Type == OBJ_USER )

  00403	b8 01 00 00 00	 mov	 eax, 1
  00408	66 39 46 60	 cmp	 WORD PTR [esi+96], ax
  0040c	75 0d		 jne	 SHORT $LN5@gObjExpPar

; 1206 : 					{
; 1207 : 						if ( lpTargetObj->Type == OBJ_USER )

  0040e	66 39 47 60	 cmp	 WORD PTR [edi+96], ax
  00412	75 07		 jne	 SHORT $LN5@gObjExpPar

; 1208 : 						{
; 1209 : 							exp = 0;

  00414	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _exp$[ebp], 0
$LN5@gObjExpPar:

; 1210 : 						}
; 1211 : 					}
; 1212 : 
; 1213 : 					exp = int(exp * gVip.GetExperience(lpObj->m_Vip));

  0041b	8b 45 c0	 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  0041e	8b 88 3c 15 00
	00		 mov	 ecx, DWORD PTR [eax+5436]
  00424	51		 push	 ecx
  00425	b9 00 00 00 00	 mov	 ecx, OFFSET ?gVip@@3VCVip@@A ; gVip
  0042a	e8 00 00 00 00	 call	 ?GetExperience@CVip@@QAEMH@Z ; CVip::GetExperience
  0042f	da 4d d0	 fimul	 DWORD PTR _exp$[ebp]
  00432	e8 00 00 00 00	 call	 __ftol2_sse
  00437	8b f8		 mov	 edi, eax

; 1214 : 
; 1215 : 					if ( exp > 0 )

  00439	85 ff		 test	 edi, edi
  0043b	7e 2e		 jle	 SHORT $LN85@gObjExpPar

; 1216 : 					{
; 1217 : 						if ( lpPartyObj->Type == OBJ_USER )

  0043d	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1
  00442	75 48		 jne	 SHORT $LN12@gObjExpPar

; 1218 : 						{
; 1219 : 							lpPartyObj->Experience += exp;
; 1220 : 							lpPartyObj->m_nEventExp += exp;
; 1221 : 
; 1222 : 							if ( gObjLevelUp(lpPartyObj, exp, lpTargetObj->Class, EVENT_TYPE_PARTY) == false )

  00444	8b 55 cc	 mov	 edx, DWORD PTR _lpTargetObj$GSCopy$[ebp]
  00447	01 be a8 00 00
	00		 add	 DWORD PTR [esi+168], edi
  0044d	01 be f8 0c 00
	00		 add	 DWORD PTR [esi+3320], edi
  00453	0f b7 82 98 00
	00 00		 movzx	 eax, WORD PTR [edx+152]
  0045a	6a 01		 push	 1
  0045c	50		 push	 eax
  0045d	57		 push	 edi
  0045e	56		 push	 esi
  0045f	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjLevelUp
  00464	83 c4 10	 add	 esp, 16			; 00000010H
  00467	84 c0		 test	 al, al
  00469	74 21		 je	 SHORT $LN12@gObjExpPar
$LN85@gObjExpPar:

; 1223 : 							{
; 1224 : 								continue;
; 1225 : 							}
; 1226 : 						}
; 1227 : 					}
; 1228 : 
; 1229 : 					if ( lpPartyObj->Type == OBJ_USER )

  0046b	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1
  00470	75 1a		 jne	 SHORT $LN12@gObjExpPar

; 1230 : 					{
; 1231 : 						GCKillPlayerExpSend(lpPartyObj->m_Index, lpTargetObj->m_Index, exp, AttackDamage, MSBFlag);

  00472	8b 4d 14	 mov	 ecx, DWORD PTR _MSBFlag$[ebp]
  00475	8b 55 10	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  00478	8b 45 cc	 mov	 eax, DWORD PTR _lpTargetObj$GSCopy$[ebp]
  0047b	51		 push	 ecx
  0047c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0047e	52		 push	 edx
  0047f	8b 16		 mov	 edx, DWORD PTR [esi]
  00481	57		 push	 edi
  00482	51		 push	 ecx
  00483	52		 push	 edx
  00484	e8 00 00 00 00	 call	 ?GCKillPlayerExpSend@@YAXHHHHH@Z ; GCKillPlayerExpSend
  00489	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@gObjExpPar:

; 1183 : 	}
; 1184 : 
; 1185 : 	for (int n=0;n<MAX_USER_IN_PARTY;n++)

  0048c	8b 45 c4	 mov	 eax, DWORD PTR _n$157762[ebp]
  0048f	83 45 d8 04	 add	 DWORD PTR tv902[ebp], 4
  00493	40		 inc	 eax
  00494	89 45 c4	 mov	 DWORD PTR _n$157762[ebp], eax
  00497	83 f8 05	 cmp	 eax, 5
  0049a	0f 8c f4 fe ff
	ff		 jl	 $LL89@gObjExpPar

; 1232 : 					}
; 1233 : 				}
; 1234 : 			}
; 1235 : 		}
; 1236 : 	}
; 1237 : }

  004a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004a3	5f		 pop	 edi
  004a4	5e		 pop	 esi
  004a5	33 cd		 xor	 ecx, ebp
  004a7	5b		 pop	 ebx
  004a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ad	8b e5		 mov	 esp, ebp
  004af	5d		 pop	 ebp
  004b0	c2 10 00	 ret	 16			; 00000010H
?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjExpParty
_TEXT	ENDS
EXTRN	__localtime64:PROC
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
;	COMDAT _localtime
_TEXT	SEGMENT
_localtime PROC						; COMDAT
; __Time$ = eax

; 114  : #pragma warning( push )
; 115  : #pragma warning( disable : 4996 )
; 116  :     return _localtime64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __localtime64
  00006	83 c4 04	 add	 esp, 4

; 117  : #pragma warning( pop )
; 118  : }

  00009	c3		 ret	 0
_localtime ENDP
_TEXT	ENDS
EXTRN	__time64:PROC
; Function compile flags: /Ogtp
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$ = eax

; 133  :     return _time64(_Time);

  00000	50		 push	 eax
  00001	e8 00 00 00 00	 call	 __time64
  00006	83 c4 04	 add	 esp, 4

; 134  : }

  00009	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
PUBLIC	?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjMonsterScoreDivision
EXTRN	?gObjMonsterLastHitDamageUser@@YAHPAUOBJECTSTRUCT@@AAH@Z:PROC ; gObjMonsterLastHitDamageUser
EXTRN	?gObjMonsterHitDamageUserDel@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterHitDamageUserDel
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\devilsquare.cpp
;	COMDAT ?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z
_TEXT	SEGMENT
tv176 = 8						; size = 4
_HitIndex$ = 8						; size = 4
_lpMonObj$ = 8						; size = 4
_lpObj$ = 12						; size = 4
_AttackDamage$ = 16					; size = 4
_MSBFlag$ = 20						; size = 4
?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjMonsterScoreDivision, COMDAT
; _this$ = ecx

; 1240 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1241 : 	::gObjMonsterHitDamageUserDel(lpMonObj);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpMonObj$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjMonsterHitDamageUserDel@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterHitDamageUserDel

; 1242 : 	lpMonObj->Money = 0;
; 1243 : 
; 1244 : 	LPOBJ lpTargetObj;
; 1245 : 	int HitIndex;
; 1246 : 	int LastHitObjNum = ::gObjMonsterLastHitDamageUser(lpMonObj, HitIndex);

  0000d	8d 45 08	 lea	 eax, DWORD PTR _HitIndex$[ebp]
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
  0001c	e8 00 00 00 00	 call	 ?gObjMonsterLastHitDamageUser@@YAHPAUOBJECTSTRUCT@@AAH@Z ; gObjMonsterLastHitDamageUser
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1247 : 
; 1248 : 	if ( LastHitObjNum != -1 )

  00024	83 f8 ff	 cmp	 eax, -1
  00027	74 47		 je	 SHORT $LN1@gObjMonste@2

; 1249 : 	{
; 1250 : 		lpTargetObj = &gObj[LastHitObjNum];
; 1251 : 		int lc5 = lpMonObj->sHD[HitIndex].HitDamage / lpMonObj->MaxLife * lpMonObj->Level;
; 1252 : 		lc5 *= lpTargetObj->m_bDevilSquareIndex + 1;
; 1253 : 		lpTargetObj->m_nEventScore += lc5;

  00029	0f bf 96 9c 00
	00 00		 movsx	 edx, WORD PTR [esi+156]
  00030	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  00036	05 00 00 00 00	 add	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003b	57		 push	 edi
  0003c	8b f8		 mov	 edi, eax
  0003e	8b 45 08	 mov	 eax, DWORD PTR _HitIndex$[ebp]
  00041	8d 8c 40 a9 02
	00 00		 lea	 ecx, DWORD PTR [eax+eax*2+681]
  00048	db 04 8e	 fild	 DWORD PTR [esi+ecx*4]
  0004b	89 55 08	 mov	 DWORD PTR tv176[ebp], edx
  0004e	d8 b6 c0 00 00
	00		 fdiv	 DWORD PTR [esi+192]
  00054	db 45 08	 fild	 DWORD PTR tv176[ebp]
  00057	de c9		 fmulp	 ST(1), ST(0)
  00059	e8 00 00 00 00	 call	 __ftol2_sse
  0005e	0f b6 8f 00 0d
	00 00		 movzx	 ecx, BYTE PTR [edi+3328]
  00065	41		 inc	 ecx
  00066	0f af c1	 imul	 eax, ecx
  00069	01 87 f4 0c 00
	00		 add	 DWORD PTR [edi+3316], eax
  0006f	5f		 pop	 edi
$LN1@gObjMonste@2:
  00070	5e		 pop	 esi

; 1254 : 	}
; 1255 : }

  00071	5d		 pop	 ebp
  00072	c2 10 00	 ret	 16			; 00000010H
?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjMonsterScoreDivision
_TEXT	ENDS
PUBLIC	?ItemClear@CDevilSquare@@AAEXXZ			; CDevilSquare::ItemClear
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
; Function compile flags: /Ogtp
;	COMDAT ?ItemClear@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?ItemClear@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ItemClear, COMDAT
; _this$ = ecx

; 1259 : 	int CurTime = GetTickCount();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00006	b8 18 40 2d 00	 mov	 eax, OFFSET ?MapC@@3PAVMapClass@@A+2965528
  0000b	eb 03 8d 49 00	 npad	 5
$LL3@ItemClear:

; 1260 : 
; 1261 : 	for ( int i=0;i<MAX_MAPITEM;i++)
; 1262 : 	{
; 1263 : 		MapC[MAP_INDEX_DEVILSQUARE].m_cItem[i].m_State = 8;

  00010	c7 00 08 00 00
	00		 mov	 DWORD PTR [eax], 8
  00016	05 48 04 00 00	 add	 eax, 1096		; 00000448H
  0001b	3d 78 44 32 00	 cmp	 eax, OFFSET ?MapC@@3PAVMapClass@@A+3294328
  00020	7c ee		 jl	 SHORT $LL3@ItemClear

; 1264 : 	}
; 1265 : }

  00022	c3		 ret	 0
?ItemClear@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ItemClear
_TEXT	ENDS
PUBLIC	?CalcScore@CDevilSquare@@QAEXXZ			; CDevilSquare::CalcScore
EXTRN	?SendScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::SendScore
EXTRN	?SortScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::SortScore
EXTRN	?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CDevilSquareGround::InsertObj
EXTRN	?ClearScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::ClearScore
; Function compile flags: /Ogtp
;	COMDAT ?CalcScore@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
tv263 = -4						; size = 4
?CalcScore@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::CalcScore, COMDAT
; _this$ = ecx

; 1268 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx

; 1269 : 	for ( int n=0;n<MAX_DEVILSQUARE_GROUND;n++)

  00008	8d 73 30	 lea	 esi, DWORD PTR [ebx+48]
  0000b	57		 push	 edi
  0000c	89 75 fc	 mov	 DWORD PTR tv263[ebp], esi
  0000f	bf 06 00 00 00	 mov	 edi, 6
$LL12@CalcScore:

; 1270 : 	{
; 1271 : 		this->m_DevilSquareGround[n].ClearScore();

  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ?ClearScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::ClearScore
  0001b	81 c6 94 04 00
	00		 add	 esi, 1172		; 00000494H
  00021	4f		 dec	 edi
  00022	75 f0		 jne	 SHORT $LL12@CalcScore

; 1272 : 	}
; 1273 : 
; 1274 : 	for (int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00024	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL9@CalcScore:

; 1275 : 	{
; 1276 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00030	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  00037	75 3b		 jne	 SHORT $LN8@CalcScore

; 1277 : 		{
; 1278 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  00039	8a 06		 mov	 al, BYTE PTR [esi]
  0003b	3c 09		 cmp	 al, 9
  0003d	74 0d		 je	 SHORT $LN25@CalcScore
  0003f	33 c9		 xor	 ecx, ecx
  00041	3c 20		 cmp	 al, 32			; 00000020H
  00043	0f 94 c1	 sete	 cl
  00046	8b c1		 mov	 eax, ecx
  00048	85 c0		 test	 eax, eax
  0004a	74 28		 je	 SHORT $LN8@CalcScore
$LN25@CalcScore:

; 1279 : 			{
; 1280 : 				if ( DS_LEVEL_RANGE(gObj[n].m_bDevilSquareIndex) != FALSE )

  0004c	8a 8e f7 0b 00
	00		 mov	 cl, BYTE PTR [esi+3063]
  00052	b2 05		 mov	 dl, 5
  00054	3a d1		 cmp	 dl, cl
  00056	1b c0		 sbb	 eax, eax
  00058	40		 inc	 eax
  00059	74 19		 je	 SHORT $LN8@CalcScore

; 1281 : 				{
; 1282 : 					this->m_DevilSquareGround[gObj[n].m_bDevilSquareIndex].InsertObj(&gObj[n]);

  0005b	0f b6 c9	 movzx	 ecx, cl
  0005e	69 c9 94 04 00
	00		 imul	 ecx, 1172		; 00000494H
  00064	8d 86 f7 fe ff
	ff		 lea	 eax, DWORD PTR [esi-265]
  0006a	50		 push	 eax
  0006b	8d 4c 19 30	 lea	 ecx, DWORD PTR [ecx+ebx+48]
  0006f	e8 00 00 00 00	 call	 ?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::InsertObj
$LN8@CalcScore:

; 1272 : 	}
; 1273 : 
; 1274 : 	for (int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00074	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  0007a	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  00080	7c ae		 jl	 SHORT $LL9@CalcScore

; 1283 : 				}
; 1284 : 			}
; 1285 : 		}
; 1286 : 	}
; 1287 : 
; 1288 : 	for (int n=0;n<MAX_DEVILSQUARE_GROUND;n++)

  00082	8b 75 fc	 mov	 esi, DWORD PTR tv263[ebp]
  00085	bf 06 00 00 00	 mov	 edi, 6
  0008a	8d 9b 00 00 00
	00		 npad	 6
$LL3@CalcScore:

; 1289 : 	{
; 1290 : 		this->m_DevilSquareGround[n].SortScore();

  00090	8b ce		 mov	 ecx, esi
  00092	e8 00 00 00 00	 call	 ?SortScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::SortScore

; 1291 : 		this->m_DevilSquareGround[n].SendScore();

  00097	8b ce		 mov	 ecx, esi
  00099	e8 00 00 00 00	 call	 ?SendScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::SendScore
  0009e	81 c6 94 04 00
	00		 add	 esi, 1172		; 00000494H
  000a4	4f		 dec	 edi
  000a5	75 e9		 jne	 SHORT $LL3@CalcScore
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx

; 1292 : 	}
; 1293 : }

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
?CalcScore@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::CalcScore
_TEXT	ENDS
PUBLIC	?SendLiveCall@CDevilSquare@@AAEXXZ		; CDevilSquare::SendLiveCall
; Function compile flags: /Ogtp
;	COMDAT ?SendLiveCall@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pMsg$ = -4						; size = 3
?SendLiveCall@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SendLiveCall, COMDAT
; _this$ = ecx

; 1301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1302 : 	PMSG_ANS_EVENTLIVE pMsg;
; 1303 : 	
; 1304 : 	pMsg.h.c = 0xC1;
; 1305 : 	pMsg.h.headcode = 0x03;

  00004	b8 03 00 00 00	 mov	 eax, 3

; 1306 : 	pMsg.h.size = sizeof(pMsg);
; 1307 : 
; 1308 : 	DataSendRank((char *)&pMsg, pMsg.h.size);

  00009	50		 push	 eax
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000d	50		 push	 eax
  0000e	c6 45 fc c1	 mov	 BYTE PTR _pMsg$[ebp], 193 ; 000000c1H
  00012	66 c7 45 fd 03
	03		 mov	 WORD PTR _pMsg$[ebp+1], 771 ; 00000303H
  00018	e8 00 00 00 00	 call	 ?DataSendRank@@YAXPADH@Z ; DataSendRank
  0001d	83 c4 08	 add	 esp, 8

; 1309 : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?SendLiveCall@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SendLiveCall
_TEXT	ENDS
PUBLIC	?gObjScoreClear@CDevilSquare@@AAEXXZ		; CDevilSquare::gObjScoreClear
; Function compile flags: /Ogtp
;	COMDAT ?gObjScoreClear@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?gObjScoreClear@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::gObjScoreClear, COMDAT
; _this$ = ecx

; 1312 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 1313 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00002	b8 09 c5 16 02	 mov	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
  00007	b2 03		 mov	 dl, 3
  00009	33 f6		 xor	 esi, esi
  0000b	eb 03 8d 49 00	 npad	 5
$LL5@gObjScoreC:

; 1314 : 	{
; 1315 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00010	38 90 fb fe ff
	ff		 cmp	 BYTE PTR [eax-261], dl
  00016	75 27		 jne	 SHORT $LN4@gObjScoreC

; 1316 : 		{
; 1317 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  00018	8a 08		 mov	 cl, BYTE PTR [eax]
  0001a	80 f9 09	 cmp	 cl, 9
  0001d	74 0e		 je	 SHORT $LN12@gObjScoreC
  0001f	33 db		 xor	 ebx, ebx
  00021	80 f9 20	 cmp	 cl, 32			; 00000020H
  00024	0f 94 c3	 sete	 bl
  00027	8b cb		 mov	 ecx, ebx
  00029	3b ce		 cmp	 ecx, esi
  0002b	74 12		 je	 SHORT $LN4@gObjScoreC
$LN12@gObjScoreC:

; 1318 : 			{
; 1319 : 				gObj[n].m_nEventScore = 0;

  0002d	89 b0 eb 0b 00
	00		 mov	 DWORD PTR [eax+3051], esi

; 1320 : 				gObj[n].m_nEventMoney = 0;

  00033	89 b0 f3 0b 00
	00		 mov	 DWORD PTR [eax+3059], esi

; 1321 : 				gObj[n].m_nEventExp = 0;

  00039	89 b0 ef 0b 00
	00		 mov	 DWORD PTR [eax+3055], esi
$LN4@gObjScoreC:

; 1313 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  0003f	05 64 15 00 00	 add	 eax, 5476		; 00001564H
  00044	3d a9 53 6a 02	 cmp	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  00049	7c c5		 jl	 SHORT $LL5@gObjScoreC

; 1322 : 			}
; 1323 : 		}
; 1324 : 	}
; 1325 : }

  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	c3		 ret	 0
?gObjScoreClear@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::gObjScoreClear
_TEXT	ENDS
PUBLIC	??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@ ; `string'
PUBLIC	?CheckInvalidUser@CDevilSquare@@AAEXXZ		; CDevilSquare::CheckInvalidUser
EXTRN	?gObjUserKill@@YAXH@Z:PROC			; gObjUserKill
;	COMDAT ??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@
CONST	SEGMENT
??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@ DB '['
	DB	'DevilSquare] [%s][%s] Found user in DevilSquare [State:Close]'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckInvalidUser@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?CheckInvalidUser@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::CheckInvalidUser, COMDAT
; _this$ = ecx

; 1328 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1329 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00004	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL6@CheckInval:

; 1330 : 	{
; 1331 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00010	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  00017	75 42		 jne	 SHORT $LN5@CheckInval

; 1332 : 		{
; 1333 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  00019	8a 06		 mov	 al, BYTE PTR [esi]
  0001b	3c 09		 cmp	 al, 9
  0001d	74 0d		 je	 SHORT $LN14@CheckInval
  0001f	33 c9		 xor	 ecx, ecx
  00021	3c 20		 cmp	 al, 32			; 00000020H
  00023	0f 94 c1	 sete	 cl
  00026	8b c1		 mov	 eax, ecx
  00028	85 c0		 test	 eax, eax
  0002a	74 2f		 je	 SHORT $LN5@CheckInval
$LN14@CheckInval:

; 1334 : 			{
; 1335 : 				if ( this->m_eState == DevilSquare_CLOSE )

  0002c	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00030	75 29		 jne	 SHORT $LN5@CheckInval

; 1336 : 				{
; 1337 : 					LogAdd(LOG_RED,  "[DevilSquare] [%s][%s] Found user in DevilSquare [State:Close]",
; 1338 : 						gObj[n].AccountID, gObj[n].Name);

  00032	8d 96 66 ff ff
	ff		 lea	 edx, DWORD PTR [esi-154]
  00038	52		 push	 edx
  00039	8d 86 5b ff ff
	ff		 lea	 eax, DWORD PTR [esi-165]
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@
  00045	6a 01		 push	 1
  00047	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 1339 : 					gObjUserKill(gObj[n].m_Index);

  0004c	8b 8e f7 fe ff
	ff		 mov	 ecx, DWORD PTR [esi-265]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?gObjUserKill@@YAXH@Z	; gObjUserKill
  00058	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@CheckInval:

; 1329 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  0005b	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  00061	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  00067	7c a7		 jl	 SHORT $LL6@CheckInval

; 1340 : 				}
; 1341 : 			}
; 1342 : 		}
; 1343 : 	}
; 1344 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	c3		 ret	 0
?CheckInvalidUser@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::CheckInvalidUser
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCDevilSquare@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDevilSquare@@UAEPAXI@Z PROC			; CDevilSquare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDevilSquare@@UAE@XZ	; CDevilSquare::~CDevilSquare
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCDevilSquare@@UAEPAXI@Z ENDP			; CDevilSquare::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetPlaying@CDevilSquare@@AAEXXZ		; CDevilSquare::SetPlaying
; Function compile flags: /Ogtp
;	COMDAT ?SetPlaying@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?SetPlaying@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SetPlaying, COMDAT
; _this$ = ecx

; 341  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 342  : 	this->gObjScoreClear();

  00003	e8 00 00 00 00	 call	 ?gObjScoreClear@CDevilSquare@@AAEXXZ ; CDevilSquare::gObjScoreClear

; 343  : 	this->SetMonster();

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?SetMonster@CDevilSquare@@QAEXXZ ; CDevilSquare::SetMonster

; 344  : 
; 345  : 	this->m_iRemainTime = this->m_iPlaytime;

  0000f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00012	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 346  : 
; 347  : 	if ( this->m_iPlaytime <= 1 )

  00015	83 f8 01	 cmp	 eax, 1
  00018	7f 19		 jg	 SHORT $LN2@SetPlaying

; 348  : 	{
; 349  : 		this->m_iTime = GetTickCount();

  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 350  : 		this->m_iremainTimeSec = 60;

  00020	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH

; 356  : 	}
; 357  : 	
; 358  : 	this->m_bSendTimeCount = FALSE;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00031	5e		 pop	 esi

; 359  : }

  00032	c3		 ret	 0
$LN2@SetPlaying:

; 351  : 	}
; 352  : 	else
; 353  : 	{
; 354  : 		this->m_iTime = GetTickCount() + 60000;

  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00039	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H

; 355  : 		this->m_iremainTimeSec = -1;

  0003e	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1

; 356  : 	}
; 357  : 	
; 358  : 	this->m_bSendTimeCount = FALSE;

  00045	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 359  : }

  00050	c3		 ret	 0
?SetPlaying@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SetPlaying
_TEXT	ENDS
PUBLIC	??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@ ; `string'
PUBLIC	?CheckSync@CDevilSquare@@AAEXXZ			; CDevilSquare::CheckSync
;	COMDAT ??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
CONST	SEGMENT
??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@ DB '['
	DB	'DevilSquare] Sync Open Time. [%d]min remain', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\devilsquare.cpp
CONST	ENDS
;	COMDAT ?CheckSync@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_ltime$ = -8						; size = 8
?CheckSync@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::CheckSync, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 457  : 	tm * today;
; 458  : 	time_t ltime;
; 459  : 
; 460  : 	time(&ltime);

  00007	8d 45 f8	 lea	 eax, DWORD PTR _ltime$[ebp]
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 __time64

; 461  : 	today = localtime(&ltime);

  00012	8d 4d f8	 lea	 ecx, DWORD PTR _ltime$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 __localtime64

; 462  : 
; 463  : 	if ( (today->tm_hour % 2) == 0 )

  0001b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001e	83 c4 08	 add	 esp, 8
  00021	81 e2 01 00 00
	80		 and	 edx, -2147483647	; 80000001H
  00027	79 05		 jns	 SHORT $LN12@CheckSync
  00029	4a		 dec	 edx
  0002a	83 ca fe	 or	 edx, -2			; fffffffeH
  0002d	42		 inc	 edx
$LN12@CheckSync:
  0002e	75 0d		 jne	 SHORT $LN5@CheckSync

; 464  : 	{
; 465  : 		this->m_iRemainTime = 120 - today->tm_min - this->m_iOpenTime;

  00030	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00035	2b 4e 28	 sub	 ecx, DWORD PTR [esi+40]
  00038	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  0003b	eb 21		 jmp	 SHORT $LN13@CheckSync
$LN5@CheckSync:

; 466  : 	}
; 467  : 	else if ( today->tm_min >= 55 )

  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00040	83 f8 37	 cmp	 eax, 55			; 00000037H
  00043	7c 0f		 jl	 SHORT $LN3@CheckSync

; 468  : 	{
; 469  : 		this->m_iRemainTime = 60 - today->tm_min - this->m_iOpenTime;
; 470  : 		this->m_iRemainTime += 120;

  00045	ba b4 00 00 00	 mov	 edx, 180		; 000000b4H
  0004a	2b 56 28	 sub	 edx, DWORD PTR [esi+40]
  0004d	2b d0		 sub	 edx, eax
  0004f	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 471  : 	}
; 472  : 	else

  00052	eb 0d		 jmp	 SHORT $LN2@CheckSync
$LN3@CheckSync:

; 473  : 	{
; 474  : 		this->m_iRemainTime = 60 - today->tm_min - this->m_iOpenTime;

  00054	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00059	2b 4e 28	 sub	 ecx, DWORD PTR [esi+40]
  0005c	2b c8		 sub	 ecx, eax
$LN13@CheckSync:
  0005e	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
$LN2@CheckSync:

; 475  : 	}
; 476  : 
; 477  : 	if ( this->m_iRemainTime < 0 )

  00061	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00064	85 c0		 test	 eax, eax
  00066	79 06		 jns	 SHORT $LN1@CheckSync

; 478  : 	{
; 479  : 		this->m_iRemainTime += 60;

  00068	83 c0 3c	 add	 eax, 60			; 0000003cH
  0006b	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN1@CheckSync:

; 480  : 	}
; 481  : 
; 482  : 	LogAdd(LOG_BLACK, "[DevilSquare] Sync Open Time. [%d]min remain", this->m_iRemainTime);

  0006e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00071	52		 push	 edx
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@
  00077	6a 00		 push	 0
  00079	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	5e		 pop	 esi

; 483  : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?CheckSync@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::CheckSync
_TEXT	ENDS
PUBLIC	??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@ ; `string'
PUBLIC	?SetClose@CDevilSquare@@QAEXXZ			; CDevilSquare::SetClose
EXTRN	?Clear@CDevilSquareGround@@QAEXXZ:PROC		; CDevilSquareGround::Clear
;	COMDAT ??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@
CONST	SEGMENT
??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@ DB '[DevilSquare] Clos'
	DB	'e', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetClose@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
?SetClose@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::SetClose, COMDAT
; _this$ = ecx

; 290  : {

  00000	56		 push	 esi

; 291  : 	if ( LogAdd != NULL )	// LoL

  00001	b8 00 00 00 00	 mov	 eax, OFFSET ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	85 c0		 test	 eax, eax
  0000b	74 0f		 je	 SHORT $LN6@SetClose

; 292  : 	{
; 293  : 		LogAdd(LOG_BLACK, "[DevilSquare] Close");

  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@
  00012	6a 00		 push	 0
  00014	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00019	83 c4 08	 add	 esp, 8
$LN6@SetClose:

; 294  : 	}
; 295  : 
; 296  : 	this->ClearMonstr();

  0001c	53		 push	 ebx
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 297  : 	this->CalcScore();

  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?CalcScore@CDevilSquare@@QAEXXZ ; CDevilSquare::CalcScore
  0002b	8d 7e 30	 lea	 edi, DWORD PTR [esi+48]
  0002e	bb 06 00 00 00	 mov	 ebx, 6
$LL5@SetClose:

; 298  : 
; 299  : 	for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)
; 300  : 	{
; 301  : 		this->m_DevilSquareGround[i].Clear();

  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?Clear@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::Clear
  0003a	81 c7 94 04 00
	00		 add	 edi, 1172		; 00000494H
  00040	4b		 dec	 ebx
  00041	75 f0		 jne	 SHORT $LL5@SetClose

; 302  : 	}
; 303  : 
; 304  : 	this->m_iRemainTime = this->m_iCloseTime;

  00043	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00046	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 305  : 	this->CheckSync();

  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?CheckSync@CDevilSquare@@AAEXXZ ; CDevilSquare::CheckSync

; 306  : 	this->m_bFlag = 0;

  00050	33 ff		 xor	 edi, edi

; 307  : 
; 308  : 	if ( this->m_iRemainTime <= 1 )

  00052	83 7e 0c 01	 cmp	 DWORD PTR [esi+12], 1
  00056	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00059	5b		 pop	 ebx
  0005a	7f 16		 jg	 SHORT $LN2@SetClose

; 309  : 	{
; 310  : 		this->m_iTime = GetTickCount();

  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 316  : 		this->m_iremainTimeSec = -1;
; 317  : 	}
; 318  : 	
; 319  : 	this->m_bSendTimeCount = FALSE;

  00062	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00065	5f		 pop	 edi
  00066	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH
  0006d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00070	5e		 pop	 esi

; 320  : }

  00071	c3		 ret	 0
$LN2@SetClose:

; 311  : 		this->m_iremainTimeSec = 60;
; 312  : 	}
; 313  : 	else
; 314  : 	{
; 315  : 		this->m_iTime = GetTickCount() + 60000;

  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 316  : 		this->m_iremainTimeSec = -1;
; 317  : 	}
; 318  : 	
; 319  : 	this->m_bSendTimeCount = FALSE;

  00078	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0007b	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  00080	5f		 pop	 edi
  00081	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1
  00088	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0008b	5e		 pop	 esi

; 320  : }

  0008c	c3		 ret	 0
?SetClose@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::SetClose
_TEXT	ENDS
PUBLIC	?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
; Function compile flags: /Ogtp
;	COMDAT ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z
_TEXT	SEGMENT
_eState$ = 8						; size = 4
?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z PROC ; CDevilSquare::SetState, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 279  : 	this->m_eState = eState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _eState$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 280  : 
; 281  : 	switch ( this->m_eState )

  00009	83 e8 00	 sub	 eax, 0
  0000c	74 18		 je	 SHORT $LN3@SetState
  0000e	48		 dec	 eax
  0000f	74 0c		 je	 SHORT $LN2@SetState
  00011	48		 dec	 eax
  00012	75 17		 jne	 SHORT $LN4@SetState

; 285  : 		case DevilSquare_PLAYING:	this->SetPlaying();	break;

  00014	e8 00 00 00 00	 call	 ?SetPlaying@CDevilSquare@@AAEXXZ ; CDevilSquare::SetPlaying

; 286  : 	}
; 287  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN2@SetState:

; 284  : 		case DevilSquare_OPEN:		this->SetOpen();	break;

  0001d	e8 00 00 00 00	 call	 ?SetOpen@CDevilSquare@@AAEXXZ ; CDevilSquare::SetOpen

; 286  : 	}
; 287  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@SetState:

; 282  : 	{
; 283  : 		case DevilSquare_CLOSE:	this->SetClose();	break;

  00026	e8 00 00 00 00	 call	 ?SetClose@CDevilSquare@@QAEXXZ ; CDevilSquare::SetClose
$LN4@SetState:

; 286  : 	}
; 287  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ENDP ; CDevilSquare::SetState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ProcClose@CDevilSquare@@AAEXXZ			; CDevilSquare::ProcClose
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
; Function compile flags: /Ogtp
;	COMDAT ?ProcClose@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pMsg$157490 = -280					; size = 4
_pNotice$157523 = -276					; size = 272
_pNotice$157501 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?ProcClose@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcClose, COMDAT
; _this$ = ecx

; 486  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 487  : 	if ( this->m_iremainTimeSec != -1 )

  00018	83 ce ff	 or	 esi, -1
  0001b	39 77 10	 cmp	 DWORD PTR [edi+16], esi
  0001e	0f 84 89 01 00
	00		 je	 $LN35@ProcClose

; 488  : 	{
; 489  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  00024	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002d	8b c8		 mov	 ecx, eax
  0002f	2b ce		 sub	 ecx, esi
  00031	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00036	f7 e1		 mul	 ecx
  00038	c1 ea 06	 shr	 edx, 6

; 490  : 
; 491  : 		if ( lc2 != 0 )

  0003b	85 d2		 test	 edx, edx
  0003d	0f 84 ca 02 00
	00		 je	 $LN1@ProcClose

; 492  : 		{
; 493  : 			this->m_iremainTimeSec -= lc2;

  00043	29 57 10	 sub	 DWORD PTR [edi+16], edx

; 494  : 			this->m_iTime += lc2 * 1000;

  00046	69 d2 e8 03 00
	00		 imul	 edx, 1000		; 000003e8H
  0004c	03 d6		 add	 edx, esi

; 495  : 
; 496  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  0004e	83 7f 10 1e	 cmp	 DWORD PTR [edi+16], 30	; 0000001eH
  00052	89 57 08	 mov	 DWORD PTR [edi+8], edx
  00055	0f 8f 97 00 00
	00		 jg	 $LN68@ProcClose
  0005b	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
  0005f	0f 85 8d 00 00
	00		 jne	 $LN68@ProcClose

; 497  : 			{
; 498  : 				PMSG_SET_DEVILSQUARE pMsg;
; 499  : 
; 500  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  00065	6a 04		 push	 4
  00067	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _pMsg$157490[ebp]
  0006d	68 92 00 00 00	 push	 146			; 00000092H
  00072	52		 push	 edx
  00073	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 501  : 				pMsg.Type = DevilSquare_CLOSE;

  0007b	c6 85 eb fe ff
	ff 00		 mov	 BYTE PTR _pMsg$157490[ebp+3], 0

; 502  : 
; 503  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00082	bb 00 19 00 00	 mov	 ebx, 6400		; 00001900H
  00087	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
  0008c	8d 64 24 00	 npad	 4
$LL32@ProcClose:

; 504  : 				{
; 505  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00090	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  00097	75 43		 jne	 SHORT $LN31@ProcClose
  00099	66 83 be 57 ff
	ff ff 01	 cmp	 WORD PTR [esi-169], 1
  000a1	75 39		 jne	 SHORT $LN31@ProcClose

; 506  : 					{
; 507  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  000a3	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a5	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  000a8	72 0c		 jb	 SHORT $LN72@ProcClose
  000aa	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  000af	3a c1		 cmp	 al, cl
  000b1	1b c0		 sbb	 eax, eax
  000b3	40		 inc	 eax
  000b4	75 26		 jne	 SHORT $LN31@ProcClose
$LN72@ProcClose:

; 508  : 						{
; 509  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  000b6	80 f9 12	 cmp	 cl, 18			; 00000012H
  000b9	72 09		 jb	 SHORT $LN61@ProcClose
  000bb	b2 17		 mov	 dl, 23			; 00000017H
  000bd	3a d1		 cmp	 dl, cl
  000bf	1b c0		 sbb	 eax, eax
  000c1	40		 inc	 eax
  000c2	75 18		 jne	 SHORT $LN31@ProcClose
$LN61@ProcClose:

; 510  : 							{
; 511  : 								DataSend(i, (BYTE *)&pMsg, pMsg.h.size);

  000c4	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$157490[ebp+1]
  000cb	50		 push	 eax
  000cc	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$157490[ebp]
  000d2	51		 push	 ecx
  000d3	53		 push	 ebx
  000d4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN31@ProcClose:

; 502  : 
; 503  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  000dc	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  000e2	43		 inc	 ebx
  000e3	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  000e9	7c a5		 jl	 SHORT $LL32@ProcClose

; 512  : 							}
; 513  : 						}
; 514  : 					}
; 515  : 				}
; 516  : 
; 517  : 
; 518  : 				this->m_bSendTimeCount = TRUE;

  000eb	c7 47 14 01 00
	00 00		 mov	 DWORD PTR [edi+20], 1
$LN68@ProcClose:

; 519  : 			}		
; 520  : 
; 521  : 			if (this->m_iremainTimeSec < 1 )

  000f2	83 7f 10 01	 cmp	 DWORD PTR [edi+16], 1
  000f6	0f 8d 11 02 00
	00		 jge	 $LN1@ProcClose

; 522  : 			{
; 523  : 				PMSG_NOTICE pNotice;
; 524  : 
; 525  : 				TNotice::MakeNoticeMsg((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 191)));

  000fc	68 bf 02 00 00	 push	 703			; 000002bfH
  00101	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00106	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0010b	50		 push	 eax
  0010c	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$157501[ebp]
  00112	6a 00		 push	 0
  00114	52		 push	 edx
  00115	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 526  : 
; 527  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0011d	bb 00 19 00 00	 mov	 ebx, 6400		; 00001900H
  00122	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
$LL25@ProcClose:

; 528  : 				{
; 529  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00127	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  0012e	75 43		 jne	 SHORT $LN24@ProcClose
  00130	66 83 be 57 ff
	ff ff 01	 cmp	 WORD PTR [esi-169], 1
  00138	75 39		 jne	 SHORT $LN24@ProcClose

; 530  : 					{
; 531  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  0013a	8a 0e		 mov	 cl, BYTE PTR [esi]
  0013c	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  0013f	72 0c		 jb	 SHORT $LN70@ProcClose
  00141	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  00146	3a c1		 cmp	 al, cl
  00148	1b c0		 sbb	 eax, eax
  0014a	40		 inc	 eax
  0014b	75 26		 jne	 SHORT $LN24@ProcClose
$LN70@ProcClose:

; 532  : 						{
; 533  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  0014d	80 f9 12	 cmp	 cl, 18			; 00000012H
  00150	72 09		 jb	 SHORT $LN63@ProcClose
  00152	b2 17		 mov	 dl, 23			; 00000017H
  00154	3a d1		 cmp	 dl, cl
  00156	1b c0		 sbb	 eax, eax
  00158	40		 inc	 eax
  00159	75 18		 jne	 SHORT $LN24@ProcClose
$LN63@ProcClose:

; 534  : 							{
; 535  : 								DataSend(i, (BYTE *)&pNotice, pNotice.h.size);

  0015b	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$157501[ebp+1]
  00162	50		 push	 eax
  00163	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$157501[ebp]
  00169	51		 push	 ecx
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@ProcClose:

; 526  : 
; 527  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00173	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  00179	43		 inc	 ebx
  0017a	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  00180	7c a5		 jl	 SHORT $LL25@ProcClose

; 536  : 							}
; 537  : 						}
; 538  : 					}
; 539  : 				}
; 540  : 
; 541  : 				LogAdd(LOG_BLACK, pNotice.Notice);

  00182	8d 95 f9 fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$157501[ebp+13]
  00188	52		 push	 edx
  00189	6a 00		 push	 0
  0018b	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00190	83 c4 08	 add	 esp, 8

; 542  : 				this->SetState(DevilSquare_OPEN);

  00193	6a 01		 push	 1
  00195	8b cf		 mov	 ecx, edi
  00197	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	5b		 pop	 ebx

; 606  : 		}
; 607  : 	}
; 608  : }

  0019f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a2	33 cd		 xor	 ecx, ebp
  001a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c3		 ret	 0
$LN35@ProcClose:

; 543  : 			}
; 544  : 		
; 545  : 		}
; 546  : 	}
; 547  : 	else if ( this->m_iTime < GetTickCount() )

  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001b3	39 47 08	 cmp	 DWORD PTR [edi+8], eax
  001b6	0f 83 51 01 00
	00		 jae	 $LN1@ProcClose

; 548  : 	{
; 549  : 		this->ClearMonstr();

  001bc	8b cf		 mov	 ecx, edi
  001be	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 550  : 		this->m_iRemainTime--;

  001c3	01 77 0c	 add	 DWORD PTR [edi+12], esi

; 551  : 
; 552  : 		if ( this->m_bFlag == 0 )

  001c6	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  001ca	75 49		 jne	 SHORT $LN17@ProcClose

; 553  : 		{
; 554  : 			for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  001cc	bb 00 19 00 00	 mov	 ebx, 6400		; 00001900H
  001d1	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
$LL74@ProcClose:

; 555  : 			{
; 556  : 				if ( gObj[i].Connected == PLAYER_PLAYING )

  001d6	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  001dd	75 1e		 jne	 SHORT $LN15@ProcClose

; 557  : 				{
; 558  : 					if ( DS_MAP_RANGE(gObj[i].MapNumber) != FALSE )

  001df	8a 06		 mov	 al, BYTE PTR [esi]
  001e1	3c 09		 cmp	 al, 9
  001e3	74 0d		 je	 SHORT $LN64@ProcClose
  001e5	33 c9		 xor	 ecx, ecx
  001e7	3c 20		 cmp	 al, 32			; 00000020H
  001e9	0f 94 c1	 sete	 cl
  001ec	8b c1		 mov	 eax, ecx
  001ee	85 c0		 test	 eax, eax
  001f0	74 0b		 je	 SHORT $LN15@ProcClose
$LN64@ProcClose:

; 559  : 					{
; 560  : 						gObjMoveGate(i, 27);

  001f2	6a 1b		 push	 27			; 0000001bH
  001f4	53		 push	 ebx
  001f5	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  001fa	83 c4 08	 add	 esp, 8
$LN15@ProcClose:

; 553  : 		{
; 554  : 			for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  001fd	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  00203	43		 inc	 ebx
  00204	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  0020a	7c ca		 jl	 SHORT $LL74@ProcClose

; 561  : 					}
; 562  : 				}
; 563  : 			}
; 564  : 
; 565  : 			this->ItemClear();

  0020c	8b cf		 mov	 ecx, edi
  0020e	e8 00 00 00 00	 call	 ?ItemClear@CDevilSquare@@AAEXXZ ; CDevilSquare::ItemClear

; 566  : 		}
; 567  : 		else

  00213	eb 07		 jmp	 SHORT $LN11@ProcClose
$LN17@ProcClose:

; 568  : 		{
; 569  : 			this->CheckInvalidUser();

  00215	8b cf		 mov	 ecx, edi
  00217	e8 00 00 00 00	 call	 ?CheckInvalidUser@CDevilSquare@@AAEXXZ ; CDevilSquare::CheckInvalidUser
$LN11@ProcClose:

; 570  : 		}
; 571  : 
; 572  : 		if ( this->m_iRemainTime <= 15 )

  0021c	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0021f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00222	0f 8f aa 00 00
	00		 jg	 $LN9@ProcClose

; 573  : 		{
; 574  : 			if ( (this->m_iRemainTime%5)== 0 )

  00228	8b c1		 mov	 eax, ecx
  0022a	99		 cdq
  0022b	be 05 00 00 00	 mov	 esi, 5
  00230	f7 fe		 idiv	 esi
  00232	85 d2		 test	 edx, edx
  00234	0f 85 98 00 00
	00		 jne	 $LN9@ProcClose

; 575  : 			{
; 576  : 				PMSG_NOTICE pNotice;
; 577  : 
; 578  : 				TNotice::MakeNoticeMsgEx((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 192)), this->m_iRemainTime);

  0023a	51		 push	 ecx
  0023b	68 c0 02 00 00	 push	 704			; 000002c0H
  00240	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00245	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  0024a	50		 push	 eax
  0024b	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$157523[ebp]
  00251	6a 00		 push	 0
  00253	52		 push	 edx
  00254	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  00259	83 c4 10	 add	 esp, 16			; 00000010H

; 579  : 
; 580  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0025c	bb 00 19 00 00	 mov	 ebx, 6400		; 00001900H
  00261	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
$LL8@ProcClose:

; 581  : 				{
; 582  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00266	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  0026d	75 43		 jne	 SHORT $LN7@ProcClose
  0026f	66 83 be 57 ff
	ff ff 01	 cmp	 WORD PTR [esi-169], 1
  00277	75 39		 jne	 SHORT $LN7@ProcClose

; 583  : 					{
; 584  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  00279	8a 0e		 mov	 cl, BYTE PTR [esi]
  0027b	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  0027e	72 0c		 jb	 SHORT $LN73@ProcClose
  00280	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  00285	3a c1		 cmp	 al, cl
  00287	1b c0		 sbb	 eax, eax
  00289	40		 inc	 eax
  0028a	75 26		 jne	 SHORT $LN7@ProcClose
$LN73@ProcClose:

; 585  : 						{
; 586  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  0028c	80 f9 12	 cmp	 cl, 18			; 00000012H
  0028f	72 09		 jb	 SHORT $LN66@ProcClose
  00291	b2 17		 mov	 dl, 23			; 00000017H
  00293	3a d1		 cmp	 dl, cl
  00295	1b c0		 sbb	 eax, eax
  00297	40		 inc	 eax
  00298	75 18		 jne	 SHORT $LN7@ProcClose
$LN66@ProcClose:

; 587  : 							{
; 588  : 								DataSend(i, (BYTE *)&pNotice, pNotice.h.size);

  0029a	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$157523[ebp+1]
  002a1	50		 push	 eax
  002a2	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$157523[ebp]
  002a8	51		 push	 ecx
  002a9	53		 push	 ebx
  002aa	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@ProcClose:

; 579  : 
; 580  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  002b2	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  002b8	43		 inc	 ebx
  002b9	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  002bf	7c a5		 jl	 SHORT $LL8@ProcClose

; 589  : 							}
; 590  : 						}
; 591  : 					}
; 592  : 				}
; 593  : 
; 594  : 				LogAdd(LOG_BLACK, (char*)pNotice.Notice);

  002c1	8d 95 f9 fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$157523[ebp+13]
  002c7	52		 push	 edx
  002c8	6a 00		 push	 0
  002ca	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  002cf	83 c4 08	 add	 esp, 8
$LN9@ProcClose:

; 595  : 			}
; 596  : 		}
; 597  : 
; 598  : 		if ( this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1 )

  002d2	83 7f 0c 01	 cmp	 DWORD PTR [edi+12], 1
  002d6	75 27		 jne	 SHORT $LN2@ProcClose
  002d8	83 7f 10 ff	 cmp	 DWORD PTR [edi+16], -1
  002dc	75 21		 jne	 SHORT $LN2@ProcClose

; 599  : 		{
; 600  : 			this->m_iremainTimeSec = 60;

  002de	c7 47 10 3c 00
	00 00		 mov	 DWORD PTR [edi+16], 60	; 0000003cH

; 601  : 			this->m_iTime = GetTickCount();

  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 602  : 		}
; 603  : 		else
; 604  : 		{
; 605  : 			this->m_iTime = GetTickCount() + 60000;

  002eb	89 47 08	 mov	 DWORD PTR [edi+8], eax
  002ee	5f		 pop	 edi
  002ef	5e		 pop	 esi
  002f0	5b		 pop	 ebx

; 606  : 		}
; 607  : 	}
; 608  : }

  002f1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f4	33 cd		 xor	 ecx, ebp
  002f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002fb	8b e5		 mov	 esp, ebp
  002fd	5d		 pop	 ebp
  002fe	c3		 ret	 0
$LN2@ProcClose:

; 602  : 		}
; 603  : 		else
; 604  : 		{
; 605  : 			this->m_iTime = GetTickCount() + 60000;

  002ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00305	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  0030a	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN1@ProcClose:

; 606  : 		}
; 607  : 	}
; 608  : }

  0030d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	33 cd		 xor	 ecx, ebp
  00314	5b		 pop	 ebx
  00315	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031a	8b e5		 mov	 esp, ebp
  0031c	5d		 pop	 ebp
  0031d	c3		 ret	 0
?ProcClose@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcClose
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ProcOpen@CDevilSquare@@AAEXXZ			; CDevilSquare::ProcOpen
; Function compile flags: /Ogtp
;	COMDAT ?ProcOpen@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pMsg$157543 = -280					; size = 4
_pNotice$157557 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?ProcOpen@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcOpen, COMDAT
; _this$ = ecx

; 611  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 612  : 	if ( this->m_iremainTimeSec != -1 )

  00018	83 ce ff	 or	 esi, -1
  0001b	39 77 10	 cmp	 DWORD PTR [edi+16], esi
  0001e	0f 84 f9 00 00
	00		 je	 $LN21@ProcOpen@2

; 613  : 	{
; 614  : 
; 615  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  00024	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002d	8b c8		 mov	 ecx, eax
  0002f	2b ce		 sub	 ecx, esi
  00031	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00036	f7 e1		 mul	 ecx
  00038	c1 ea 06	 shr	 edx, 6

; 616  : 
; 617  : 		if ( lc2 != 0 )

  0003b	85 d2		 test	 edx, edx
  0003d	0f 84 dd 01 00
	00		 je	 $LN1@ProcOpen@2

; 618  : 		{
; 619  : 			this->m_iremainTimeSec -= lc2;

  00043	29 57 10	 sub	 DWORD PTR [edi+16], edx

; 620  : 			this->m_iTime += lc2 * 1000;

  00046	69 d2 e8 03 00
	00		 imul	 edx, 1000		; 000003e8H
  0004c	03 d6		 add	 edx, esi

; 621  : 
; 622  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  0004e	83 7f 10 1e	 cmp	 DWORD PTR [edi+16], 30	; 0000001eH
  00052	89 57 08	 mov	 DWORD PTR [edi+8], edx
  00055	0f 8f 97 00 00
	00		 jg	 $LN41@ProcOpen@2
  0005b	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
  0005f	0f 85 8d 00 00
	00		 jne	 $LN41@ProcOpen@2

; 623  : 			{
; 624  : 				PMSG_SET_DEVILSQUARE pMsg;
; 625  : 
; 626  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  00065	6a 04		 push	 4
  00067	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _pMsg$157543[ebp]
  0006d	68 92 00 00 00	 push	 146			; 00000092H
  00072	52		 push	 edx
  00073	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 627  : 				pMsg.Type = DevilSquare_OPEN;

  0007b	c6 85 eb fe ff
	ff 01		 mov	 BYTE PTR _pMsg$157543[ebp+3], 1

; 628  : 
; 629  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00082	bb 00 19 00 00	 mov	 ebx, 6400		; 00001900H
  00087	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
  0008c	8d 64 24 00	 npad	 4
$LL18@ProcOpen@2:

; 630  : 				{
; 631  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00090	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  00097	75 43		 jne	 SHORT $LN17@ProcOpen@2
  00099	66 83 be 57 ff
	ff ff 01	 cmp	 WORD PTR [esi-169], 1
  000a1	75 39		 jne	 SHORT $LN17@ProcOpen@2

; 632  : 					{
; 633  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  000a3	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a5	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  000a8	72 0c		 jb	 SHORT $LN44@ProcOpen@2
  000aa	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  000af	3a c1		 cmp	 al, cl
  000b1	1b c0		 sbb	 eax, eax
  000b3	40		 inc	 eax
  000b4	75 26		 jne	 SHORT $LN17@ProcOpen@2
$LN44@ProcOpen@2:

; 634  : 						{
; 635  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  000b6	80 f9 12	 cmp	 cl, 18			; 00000012H
  000b9	72 09		 jb	 SHORT $LN37@ProcOpen@2
  000bb	b2 17		 mov	 dl, 23			; 00000017H
  000bd	3a d1		 cmp	 dl, cl
  000bf	1b c0		 sbb	 eax, eax
  000c1	40		 inc	 eax
  000c2	75 18		 jne	 SHORT $LN17@ProcOpen@2
$LN37@ProcOpen@2:

; 636  : 							{
; 637  : 								DataSend(i, (BYTE *)&pMsg, pMsg.h.size);

  000c4	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$157543[ebp+1]
  000cb	50		 push	 eax
  000cc	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _pMsg$157543[ebp]
  000d2	51		 push	 ecx
  000d3	53		 push	 ebx
  000d4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@ProcOpen@2:

; 628  : 
; 629  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  000dc	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  000e2	43		 inc	 ebx
  000e3	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  000e9	7c a5		 jl	 SHORT $LL18@ProcOpen@2

; 638  : 							}
; 639  : 						}
; 640  : 					}
; 641  : 				}
; 642  : 
; 643  : 				this->m_bSendTimeCount = TRUE;

  000eb	c7 47 14 01 00
	00 00		 mov	 DWORD PTR [edi+20], 1
$LN41@ProcOpen@2:

; 644  : 			}
; 645  : 
; 646  : 			if (this->m_iremainTimeSec < 1 )

  000f2	83 7f 10 01	 cmp	 DWORD PTR [edi+16], 1
  000f6	0f 8d 24 01 00
	00		 jge	 $LN1@ProcOpen@2

; 647  : 			{
; 648  : 				this->SendEventStartMsg();

  000fc	8b cf		 mov	 ecx, edi
  000fe	e8 00 00 00 00	 call	 ?SendEventStartMsg@CDevilSquare@@AAEXXZ ; CDevilSquare::SendEventStartMsg

; 649  : 				this->SetState(DevilSquare_PLAYING);

  00103	6a 02		 push	 2
  00105	8b cf		 mov	 ecx, edi
  00107	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx

; 694  : 			}
; 695  : 		}
; 696  : 	}
; 697  : }

  0010f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00112	33 cd		 xor	 ecx, ebp
  00114	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
$LN21@ProcOpen@2:

; 650  : 			}
; 651  : 		
; 652  : 		}
; 653  : 	}
; 654  : 	else
; 655  : 	{
; 656  : 		if ( this->m_iTime < GetTickCount() )

  0011d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  00123	ff d3		 call	 ebx
  00125	39 47 08	 cmp	 DWORD PTR [edi+8], eax
  00128	0f 83 f2 00 00
	00		 jae	 $LN1@ProcOpen@2

; 657  : 		{
; 658  : 			this->ClearMonstr();

  0012e	8b cf		 mov	 ecx, edi
  00130	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 659  : 			this->m_iRemainTime--;

  00135	01 77 0c	 add	 DWORD PTR [edi+12], esi
  00138	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 660  : 
; 661  : 			if ( this->m_iRemainTime > 0 )

  0013b	85 c0		 test	 eax, eax
  0013d	0f 8e ab 00 00
	00		 jle	 $LN9@ProcOpen@2

; 662  : 			{
; 663  : 				PMSG_NOTICE pNotice;
; 664  : 
; 665  : 				TNotice::MakeNoticeMsgEx(&pNotice, 0, lMsg.Get(MSGGET(2, 193)), this->m_iRemainTime);

  00143	50		 push	 eax
  00144	68 c1 02 00 00	 push	 705			; 000002c1H
  00149	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0014e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00153	50		 push	 eax
  00154	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$157557[ebp]
  0015a	6a 00		 push	 0
  0015c	52		 push	 edx
  0015d	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  00162	83 c4 10	 add	 esp, 16			; 00000010H

; 666  : 
; 667  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00165	bb 00 19 00 00	 mov	 ebx, 6400		; 00001900H
  0016a	be 09 c5 16 02	 mov	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+35046665
  0016f	90		 npad	 1
$LL8@ProcOpen@2:

; 668  : 				{
; 669  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00170	80 be fb fe ff
	ff 03		 cmp	 BYTE PTR [esi-261], 3
  00177	75 43		 jne	 SHORT $LN7@ProcOpen@2
  00179	66 83 be 57 ff
	ff ff 01	 cmp	 WORD PTR [esi-169], 1
  00181	75 39		 jne	 SHORT $LN7@ProcOpen@2

; 670  : 					{
; 671  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  00183	8a 0e		 mov	 cl, BYTE PTR [esi]
  00185	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  00188	72 0c		 jb	 SHORT $LN42@ProcOpen@2
  0018a	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  0018f	3a c1		 cmp	 al, cl
  00191	1b c0		 sbb	 eax, eax
  00193	40		 inc	 eax
  00194	75 26		 jne	 SHORT $LN7@ProcOpen@2
$LN42@ProcOpen@2:

; 672  : 						{
; 673  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  00196	80 f9 12	 cmp	 cl, 18			; 00000012H
  00199	72 09		 jb	 SHORT $LN39@ProcOpen@2
  0019b	b2 17		 mov	 dl, 23			; 00000017H
  0019d	3a d1		 cmp	 dl, cl
  0019f	1b c0		 sbb	 eax, eax
  001a1	40		 inc	 eax
  001a2	75 18		 jne	 SHORT $LN7@ProcOpen@2
$LN39@ProcOpen@2:

; 674  : 							{
; 675  : 								DataSend(i, (BYTE *)&pNotice, pNotice.h.size);

  001a4	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$157557[ebp+1]
  001ab	50		 push	 eax
  001ac	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$157557[ebp]
  001b2	51		 push	 ecx
  001b3	53		 push	 ebx
  001b4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001b9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@ProcOpen@2:

; 666  : 
; 667  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  001bc	81 c6 64 15 00
	00		 add	 esi, 5476		; 00001564H
  001c2	43		 inc	 ebx
  001c3	81 fe a9 53 6a
	02		 cmp	 esi, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522665
  001c9	7c a5		 jl	 SHORT $LL8@ProcOpen@2

; 676  : 							}
; 677  : 						}
; 678  : 					}
; 679  : 				}
; 680  : 
; 681  : 				LogAdd(LOG_BLACK, (char*)pNotice.Notice);

  001cb	8d 95 f9 fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$157557[ebp+13]
  001d1	52		 push	 edx
  001d2	6a 00		 push	 0
  001d4	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  001d9	83 c4 08	 add	 esp, 8

; 682  : 
; 683  : 				this->m_iTime = GetTickCount();

  001dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001e2	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  001e8	89 47 08	 mov	 DWORD PTR [edi+8], eax
  001eb	83 ce ff	 or	 esi, -1
$LN9@ProcOpen@2:

; 684  : 			}
; 685  : 
; 686  : 			if (this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1)

  001ee	83 7f 0c 01	 cmp	 DWORD PTR [edi+12], 1
  001f2	75 22		 jne	 SHORT $LN2@ProcOpen@2
  001f4	39 77 10	 cmp	 DWORD PTR [edi+16], esi
  001f7	75 1d		 jne	 SHORT $LN2@ProcOpen@2

; 687  : 			{
; 688  : 				this->m_iremainTimeSec = 60;

  001f9	c7 47 10 3c 00
	00 00		 mov	 DWORD PTR [edi+16], 60	; 0000003cH

; 689  : 				this->m_iTime = GetTickCount();

  00200	ff d3		 call	 ebx

; 690  : 			}
; 691  : 			else
; 692  : 			{
; 693  : 				this->m_iTime = GetTickCount() + 60000;

  00202	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00205	5f		 pop	 edi
  00206	5e		 pop	 esi
  00207	5b		 pop	 ebx

; 694  : 			}
; 695  : 		}
; 696  : 	}
; 697  : }

  00208	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020b	33 cd		 xor	 ecx, ebp
  0020d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00212	8b e5		 mov	 esp, ebp
  00214	5d		 pop	 ebp
  00215	c3		 ret	 0
$LN2@ProcOpen@2:

; 690  : 			}
; 691  : 			else
; 692  : 			{
; 693  : 				this->m_iTime = GetTickCount() + 60000;

  00216	ff d3		 call	 ebx
  00218	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  0021d	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN1@ProcOpen@2:

; 694  : 			}
; 695  : 		}
; 696  : 	}
; 697  : }

  00220	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00223	5f		 pop	 edi
  00224	5e		 pop	 esi
  00225	33 cd		 xor	 ecx, ebp
  00227	5b		 pop	 ebx
  00228	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022d	8b e5		 mov	 esp, ebp
  0022f	5d		 pop	 ebp
  00230	c3		 ret	 0
?ProcOpen@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcOpen
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ProcPlaying@CDevilSquare@@AAEXXZ		; CDevilSquare::ProcPlaying
EXTRN	?RegenBossMonster@CDevilSquareGround@@QAEXH@Z:PROC ; CDevilSquareGround::RegenBossMonster
EXTRN	?AllSendSameMapMsg@@YAXPAEHE@Z:PROC		; AllSendSameMapMsg
; Function compile flags: /Ogtp
;	COMDAT ?ProcPlaying@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pMsg$157576 = -280					; size = 4
_pNotice$157584 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?ProcPlaying@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcPlaying, COMDAT
; _this$ = ecx

; 700  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f1		 mov	 esi, ecx

; 701  : 	if ( this->m_iremainTimeSec != -1 )

  00017	83 cf ff	 or	 edi, -1
  0001a	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  0001d	0f 84 90 00 00
	00		 je	 $LN13@ProcPlayin

; 702  : 	{
; 703  : 
; 704  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  00023	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002c	8b c8		 mov	 ecx, eax
  0002e	2b cf		 sub	 ecx, edi
  00030	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00035	f7 e1		 mul	 ecx
  00037	c1 ea 06	 shr	 edx, 6

; 705  : 
; 706  : 		if ( lc2 != 0 )

  0003a	85 d2		 test	 edx, edx
  0003c	0f 84 40 01 00
	00		 je	 $LN1@ProcPlayin

; 707  : 		{
; 708  : 			this->m_iremainTimeSec -= lc2;

  00042	29 56 10	 sub	 DWORD PTR [esi+16], edx

; 709  : 			this->m_iTime += lc2 * 1000;

  00045	69 d2 e8 03 00
	00		 imul	 edx, 1000		; 000003e8H
  0004b	03 d7		 add	 edx, edi

; 710  : 
; 711  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  0004d	83 7e 10 1e	 cmp	 DWORD PTR [esi+16], 30	; 0000001eH
  00051	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00054	7f 3a		 jg	 SHORT $LN18@ProcPlayin
  00056	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0005a	75 34		 jne	 SHORT $LN18@ProcPlayin

; 712  : 			{
; 713  : 				PMSG_SET_DEVILSQUARE pMsg;
; 714  : 
; 715  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  0005c	6a 04		 push	 4
  0005e	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _pMsg$157576[ebp]
  00064	68 92 00 00 00	 push	 146			; 00000092H
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 716  : 				pMsg.Type = DevilSquare_PLAYING;
; 717  : 				AllSendSameMapMsg((UCHAR*)&pMsg, sizeof(pMsg), MAP_INDEX_DEVILSQUARE);

  0006f	6a 09		 push	 9
  00071	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$157576[ebp]
  00077	6a 04		 push	 4
  00079	50		 push	 eax
  0007a	c6 85 eb fe ff
	ff 02		 mov	 BYTE PTR _pMsg$157576[ebp+3], 2
  00081	e8 00 00 00 00	 call	 ?AllSendSameMapMsg@@YAXPAEHE@Z ; AllSendSameMapMsg
  00086	83 c4 18	 add	 esp, 24			; 00000018H

; 718  : 
; 719  : 				this->m_bSendTimeCount = TRUE;

  00089	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
$LN18@ProcPlayin:

; 720  : 			}
; 721  : 
; 722  : 
; 723  : 
; 724  : 			if ( this->m_iremainTimeSec < 1 )

  00090	83 7e 10 01	 cmp	 DWORD PTR [esi+16], 1
  00094	0f 8d e8 00 00
	00		 jge	 $LN1@ProcPlayin

; 725  : 			{
; 726  : 				this->SetState(DevilSquare_CLOSE);

  0009a	6a 00		 push	 0
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi

; 760  : 				}
; 761  : 			}
; 762  : 		}
; 763  : 	}
; 764  : }

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	33 cd		 xor	 ecx, ebp
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
$LN13@ProcPlayin:

; 727  : 			}
; 728  : 		}
; 729  : 	}
; 730  : 	else
; 731  : 	{
; 732  : 		if ( this->m_iTime < GetTickCount() )

  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000b9	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  000bc	0f 83 c0 00 00
	00		 jae	 $LN1@ProcPlayin

; 733  : 		{
; 734  : 			this->m_iRemainTime--;

  000c2	01 7e 0c	 add	 DWORD PTR [esi+12], edi
  000c5	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 735  : 
; 736  : 			if ( this->m_iRemainTime > 0 )

  000c8	85 c9		 test	 ecx, ecx
  000ca	0f 8e b2 00 00
	00		 jle	 $LN1@ProcPlayin

; 737  : 			{
; 738  : 				if ( (this->m_iRemainTime%5) == 0 )

  000d0	8b c1		 mov	 eax, ecx
  000d2	99		 cdq
  000d3	bf 05 00 00 00	 mov	 edi, 5
  000d8	f7 ff		 idiv	 edi
  000da	85 d2		 test	 edx, edx
  000dc	75 46		 jne	 SHORT $LN6@ProcPlayin

; 739  : 				{
; 740  : 					PMSG_NOTICE pNotice;
; 741  : 
; 742  : 					TNotice::MakeNoticeMsgEx((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 194)), this->m_iRemainTime);

  000de	51		 push	 ecx
  000df	68 c2 02 00 00	 push	 706			; 000002c2H
  000e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  000e9	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  000ee	50		 push	 eax
  000ef	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$157584[ebp]
  000f5	6a 00		 push	 0
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 743  : 					LogAdd(LOG_BLACK, (char*)pNotice.Notice);

  000fd	8d 95 f9 fe ff
	ff		 lea	 edx, DWORD PTR _pNotice$157584[ebp+13]
  00103	52		 push	 edx
  00104	6a 00		 push	 0
  00106	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 744  : 					AllSendSameMapMsg((UCHAR*)&pNotice, pNotice.h.size, MAP_INDEX_DEVILSQUARE);

  0010b	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$157584[ebp+1]
  00112	6a 09		 push	 9
  00114	50		 push	 eax
  00115	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _pNotice$157584[ebp]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 ?AllSendSameMapMsg@@YAXPAEHE@Z ; AllSendSameMapMsg
  00121	83 c4 24	 add	 esp, 36			; 00000024H
$LN6@ProcPlayin:

; 745  : 				}
; 746  : 
; 747  : 				for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  00124	53		 push	 ebx
  00125	8d 7e 30	 lea	 edi, DWORD PTR [esi+48]
  00128	bb 06 00 00 00	 mov	 ebx, 6
  0012d	8d 49 00	 npad	 3
$LL5@ProcPlayin:

; 748  : 				{
; 749  : 					this->m_DevilSquareGround[i].RegenBossMonster(this->m_iPlaytime - this->m_iRemainTime);

  00130	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00133	2b 56 0c	 sub	 edx, DWORD PTR [esi+12]
  00136	8b cf		 mov	 ecx, edi
  00138	52		 push	 edx
  00139	e8 00 00 00 00	 call	 ?RegenBossMonster@CDevilSquareGround@@QAEXH@Z ; CDevilSquareGround::RegenBossMonster
  0013e	81 c7 94 04 00
	00		 add	 edi, 1172		; 00000494H
  00144	4b		 dec	 ebx
  00145	75 e9		 jne	 SHORT $LL5@ProcPlayin

; 750  : 				}
; 751  : 
; 752  : 				if ( this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1 )

  00147	83 7e 0c 01	 cmp	 DWORD PTR [esi+12], 1
  0014b	5b		 pop	 ebx
  0014c	75 26		 jne	 SHORT $LN2@ProcPlayin
  0014e	83 7e 10 ff	 cmp	 DWORD PTR [esi+16], -1
  00152	75 20		 jne	 SHORT $LN2@ProcPlayin

; 753  : 				{
; 754  : 					this->m_iremainTimeSec = 60;

  00154	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH

; 755  : 					this->m_iTime = GetTickCount();

  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00161	5f		 pop	 edi

; 756  : 				}
; 757  : 				else
; 758  : 				{
; 759  : 					this->m_iTime = GetTickCount() + 60000;

  00162	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00165	5e		 pop	 esi

; 760  : 				}
; 761  : 			}
; 762  : 		}
; 763  : 	}
; 764  : }

  00166	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00169	33 cd		 xor	 ecx, ebp
  0016b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
$LN2@ProcPlayin:

; 756  : 				}
; 757  : 				else
; 758  : 				{
; 759  : 					this->m_iTime = GetTickCount() + 60000;

  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0017a	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  0017f	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN1@ProcPlayin:

; 760  : 				}
; 761  : 			}
; 762  : 		}
; 763  : 	}
; 764  : }

  00182	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00185	5f		 pop	 edi
  00186	33 cd		 xor	 ecx, ebp
  00188	5e		 pop	 esi
  00189	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c3		 ret	 0
?ProcPlaying@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcPlaying
_TEXT	ENDS
PUBLIC	?Run@CDevilSquare@@QAEHXZ			; CDevilSquare::Run
EXTRN	?gDevilSquareEvent@@3HA:DWORD			; gDevilSquareEvent
EXTRN	__imp__Sleep@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Run@CDevilSquare@@QAEHXZ
_TEXT	SEGMENT
?Run@CDevilSquare@@QAEHXZ PROC				; CDevilSquare::Run, COMDAT
; _this$ = ecx

; 421  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 422  : 	int count = 0;

  00004	33 ff		 xor	 edi, edi

; 423  : 
; 424  : 	while ( this->m_bQuit == FALSE )

  00006	39 7e 18	 cmp	 DWORD PTR [esi+24], edi
  00009	75 54		 jne	 SHORT $LN13@Run
  0000b	53		 push	 ebx
  0000c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
$LL9@Run:

; 425  : 	{
; 426  : 		if ( gDevilSquareEvent != FALSE )

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00019	74 27		 je	 SHORT $LN5@Run

; 427  : 		{
; 428  : 			switch ( this->m_eState )

  0001b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001e	83 e8 00	 sub	 eax, 0
  00021	74 18		 je	 SHORT $LN4@Run
  00023	48		 dec	 eax
  00024	74 0c		 je	 SHORT $LN3@Run
  00026	48		 dec	 eax
  00027	75 19		 jne	 SHORT $LN5@Run

; 432  : 				case DevilSquare_PLAYING:	this->ProcPlaying();	break;

  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?ProcPlaying@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcPlaying
  00030	eb 10		 jmp	 SHORT $LN5@Run
$LN3@Run:

; 431  : 				case DevilSquare_OPEN:		this->ProcOpen();		break;

  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?ProcOpen@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcOpen
  00039	eb 07		 jmp	 SHORT $LN5@Run
$LN4@Run:

; 429  : 			{
; 430  : 				case DevilSquare_CLOSE:	this->ProcClose();		break;

  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?ProcClose@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcClose
$LN5@Run:

; 433  : 			}
; 434  : 		}
; 435  : 
; 436  : 		Sleep(100);

  00042	6a 64		 push	 100			; 00000064H
  00044	ff d3		 call	 ebx

; 437  : 		count++;

  00046	47		 inc	 edi

; 438  : 
; 439  : 		if ( count > 600 )

  00047	81 ff 58 02 00
	00		 cmp	 edi, 600		; 00000258H
  0004d	7e 09		 jle	 SHORT $LN15@Run

; 440  : 		{
; 441  : 			this->SendLiveCall();

  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?SendLiveCall@CDevilSquare@@AAEXXZ ; CDevilSquare::SendLiveCall

; 442  : 			count = 0;

  00056	33 ff		 xor	 edi, edi
$LN15@Run:

; 423  : 
; 424  : 	while ( this->m_bQuit == FALSE )

  00058	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  0005c	74 b4		 je	 SHORT $LL9@Run
  0005e	5b		 pop	 ebx
$LN13@Run:
  0005f	5f		 pop	 edi

; 443  : 
; 444  : 			/*if ( szAuthKey[12] != AUTHKEY12 )
; 445  : 			{
; 446  : 				DestroyGIocp();
; 447  : 			}*/
; 448  : 		}
; 449  : 	}
; 450  : 
; 451  : 	return TRUE;

  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	5e		 pop	 esi

; 452  : }

  00066	c3		 ret	 0
?Run@CDevilSquare@@QAEHXZ ENDP				; CDevilSquare::Run
_TEXT	ENDS
PUBLIC	?DevilSquareThreadFunc@@YGIPAX@Z		; DevilSquareThreadFunc
; Function compile flags: /Ogtp
;	COMDAT ?DevilSquareThreadFunc@@YGIPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?DevilSquareThreadFunc@@YGIPAX@Z PROC			; DevilSquareThreadFunc, COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	CDevilSquare * pDevilSquare = (CDevilSquare *)p;
; 25   : 	return pDevilSquare->Run();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00006	e8 00 00 00 00	 call	 ?Run@CDevilSquare@@QAEHXZ ; CDevilSquare::Run

; 26   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?DevilSquareThreadFunc@@YGIPAX@Z ENDP			; DevilSquareThreadFunc
_TEXT	ENDS
PUBLIC	?Init@CDevilSquare@@QAEXXZ			; CDevilSquare::Init
EXTRN	__beginthreadex:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
_dwThreadId$ = -4					; size = 4
?Init@CDevilSquare@@QAEXXZ PROC				; CDevilSquare::Init, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 118  : 	this->m_bQuit = TRUE;
; 119  : 	Sleep(500);

  00007	68 f4 01 00 00	 push	 500			; 000001f4H
  0000c	c7 46 18 01 00
	00 00		 mov	 DWORD PTR [esi+24], 1
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 120  : 
; 121  : 	this->SetState(DevilSquare_CLOSE);

  00019	6a 00		 push	 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState

; 122  : 	this->m_bQuit = FALSE;
; 123  : 
; 124  : 	DWORD dwThreadId;
; 125  : 
; 126  : //#ifdef _DEBUG
; 127  : 	this->m_hThread = (UINT)_beginthreadex( 0, 0, DevilSquareThreadFunc, this, 0, (LPUINT)&dwThreadId);

  00022	8d 45 fc	 lea	 eax, DWORD PTR _dwThreadId$[ebp]
  00025	50		 push	 eax
  00026	6a 00		 push	 0
  00028	56		 push	 esi
  00029	68 00 00 00 00	 push	 OFFSET ?DevilSquareThreadFunc@@YGIPAX@Z ; DevilSquareThreadFunc
  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00039	e8 00 00 00 00	 call	 __beginthreadex
  0003e	83 c4 18	 add	 esp, 24			; 00000018H
  00041	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00044	5e		 pop	 esi

; 128  : //#else
; 129  : //	this->m_hThread = (UINT)CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)DevilSquareThreadFunc, this, 0, (LPDWORD)&dwThreadId);
; 130  : //#endif
; 131  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?Init@CDevilSquare@@QAEXXZ ENDP				; CDevilSquare::Init
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_DevilSquare@@YAXXZ
text$yc	SEGMENT
??__Eg_DevilSquare@@YAXXZ PROC				; `dynamic initializer for 'g_DevilSquare'', COMDAT

; 20   : CDevilSquare g_DevilSquare;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  00005	e8 00 00 00 00	 call	 ??0CDevilSquare@@QAE@XZ	; CDevilSquare::CDevilSquare
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_DevilSquare@@YAXXZ ; `dynamic atexit destructor for 'g_DevilSquare''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_DevilSquare@@YAXXZ ENDP				; `dynamic initializer for 'g_DevilSquare''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_DevilSquare@@YAXXZ
text$yd	SEGMENT
??__Fg_DevilSquare@@YAXXZ PROC				; `dynamic atexit destructor for 'g_DevilSquare'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  00005	e9 00 00 00 00	 jmp	 ??1CDevilSquare@@UAE@XZ	; CDevilSquare::~CDevilSquare
??__Fg_DevilSquare@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_DevilSquare''
text$yd	ENDS
PUBLIC	?g_DevilSquare@@3VCDevilSquare@@A		; g_DevilSquare
_BSS	SEGMENT
?g_DevilSquare@@3VCDevilSquare@@A DB 01c20H DUP (?)	; g_DevilSquare
_BSS	ENDS
CRT$XCU	SEGMENT
_g_DevilSquare$initializer$ DD FLAT:??__Eg_DevilSquare@@YAXXZ
CRT$XCU	ENDS
END
