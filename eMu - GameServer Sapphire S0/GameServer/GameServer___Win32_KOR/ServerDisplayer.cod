; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\ServerDisplayer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@FONBBGJD@?$FL?9?5GameServer?5?9?$FN?$AA@ ; `string'
PUBLIC	?TitleText@@3PAPADA				; TitleText
_DATA	SEGMENT
?TitleText@@3PAPADA DD FLAT:??_C@_0BB@FONBBGJD@?$FL?9?5GameServer?5?9?$FN?$AA@ ; TitleText
_DATA	ENDS
;	COMDAT ??_C@_0BB@FONBBGJD@?$FL?9?5GameServer?5?9?$FN?$AA@
CONST	SEGMENT
??_C@_0BB@FONBBGJD@?$FL?9?5GameServer?5?9?$FN?$AA@ DB '[- GameServer -]', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_06HMOALFIN@Impact?$AA@			; `string'
PUBLIC	??_7CServerDisplayer@@6B@			; CServerDisplayer::`vftable'
PUBLIC	??0CServerDisplayer@@QAE@XZ			; CServerDisplayer::CServerDisplayer
PUBLIC	??_R4CServerDisplayer@@6B@			; CServerDisplayer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCServerDisplayer@@@8			; CServerDisplayer `RTTI Type Descriptor'
PUBLIC	??_R3CServerDisplayer@@8			; CServerDisplayer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CServerDisplayer@@8			; CServerDisplayer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CServerDisplayer@@8		; CServerDisplayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECServerDisplayer@@UAEPAXI@Z:PROC		; CServerDisplayer::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CServerDisplayer@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\serverdisplayer.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CServerDisplayer@@8 DD FLAT:??_R0?AVCServerDisplayer@@@8 ; CServerDisplayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CServerDisplayer@@8
rdata$r	ENDS
;	COMDAT ??_R2CServerDisplayer@@8
rdata$r	SEGMENT
??_R2CServerDisplayer@@8 DD FLAT:??_R1A@?0A@EA@CServerDisplayer@@8 ; CServerDisplayer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CServerDisplayer@@8
rdata$r	SEGMENT
??_R3CServerDisplayer@@8 DD 00H				; CServerDisplayer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CServerDisplayer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCServerDisplayer@@@8
_DATA	SEGMENT
??_R0?AVCServerDisplayer@@@8 DD FLAT:??_7type_info@@6B@	; CServerDisplayer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCServerDisplayer@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CServerDisplayer@@6B@
rdata$r	SEGMENT
??_R4CServerDisplayer@@6B@ DD 00H			; CServerDisplayer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCServerDisplayer@@@8
	DD	FLAT:??_R3CServerDisplayer@@8
rdata$r	ENDS
;	COMDAT ??_C@_06HMOALFIN@Impact?$AA@
CONST	SEGMENT
??_C@_06HMOALFIN@Impact?$AA@ DB 'Impact', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CServerDisplayer@@6B@
CONST	SEGMENT
??_7CServerDisplayer@@6B@ DD FLAT:??_R4CServerDisplayer@@6B@ ; CServerDisplayer::`vftable'
	DD	FLAT:??_ECServerDisplayer@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CServerDisplayer@@QAE@XZ
_TEXT	SEGMENT
??0CServerDisplayer@@QAE@XZ PROC			; CServerDisplayer::CServerDisplayer, COMDAT
; _this$ = ecx

; 19   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 20   : 	for(int n = 0; n < MAX_LOG_TEXT_LINE; n++)
; 21   : 	{
; 22   : 		memset(&this->m_log[n], 0, sizeof(this->m_log[n]));

  00003	68 98 0d 00 00	 push	 3480			; 00000d98H
  00008	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CServerDisplayer@@6B@
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 23   : 	}
; 24   : 	// ---
; 25   : 	this->Font = CreateFontA(80, 0, 0, 0, FW_NORMAL, FALSE, TRUE, FALSE, 1, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, "Impact");

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_06HMOALFIN@Impact?$AA@
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	6a 00		 push	 0
  00029	6a 01		 push	 1
  0002b	6a 00		 push	 0
  0002d	6a 01		 push	 1
  0002f	6a 00		 push	 0
  00031	68 90 01 00 00	 push	 400			; 00000190H
  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 50		 push	 80			; 00000050H
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontA@56

; 26   : 	// ---
; 27   : 	this->Background = CreateSolidBrush(RGB(0, 76, 153));

  00044	68 00 4c 99 00	 push	 10046464		; 00994c00H
  00049	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  00052	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 28   : }

  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	c3		 ret	 0
??0CServerDisplayer@@QAE@XZ ENDP			; CServerDisplayer::CServerDisplayer
_TEXT	ENDS
PUBLIC	??1CServerDisplayer@@UAE@XZ			; CServerDisplayer::~CServerDisplayer
EXTRN	__imp__DeleteObject@4:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1CServerDisplayer@@UAE@XZ
_TEXT	SEGMENT
??1CServerDisplayer@@UAE@XZ PROC			; CServerDisplayer::~CServerDisplayer, COMDAT
; _this$ = ecx

; 31   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 32   : 	DeleteObject(this->Font);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	57		 push	 edi
  00007	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeleteObject@4
  0000d	50		 push	 eax
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CServerDisplayer@@6B@
  00014	ff d7		 call	 edi

; 33   : 	DeleteObject(this->Background);

  00016	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00019	51		 push	 ecx
  0001a	ff d7		 call	 edi
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 34   : }

  0001e	c3		 ret	 0
??1CServerDisplayer@@UAE@XZ ENDP			; CServerDisplayer::~CServerDisplayer
_TEXT	ENDS
PUBLIC	??_C@_0O@LCHMOEP@Log?2TRADE_LOG?$AA@		; `string'
PUBLIC	??_C@_0N@JAMGPJDP@Log?2CHAT_LOG?$AA@		; `string'
PUBLIC	??_C@_0BE@OLCPKKDK@Log?2BOT_MANAGER_LOG?$AA@	; `string'
PUBLIC	??_C@_0BA@HKOPHEGB@Log?2COMMAND_LOG?$AA@	; `string'
PUBLIC	??_C@_0BC@CBJFKLGC@Log?2GAME_SHOP_LOG?$AA@	; `string'
PUBLIC	??_C@_0P@HLABGKH@Log?2NORMAL_LOG?$AA@		; `string'
PUBLIC	?Load@CServerDisplayer@@QAEXPAUHWND__@@@Z	; CServerDisplayer::Load
EXTRN	?AddLog@CLog@@QAEXHPAD@Z:PROC			; CLog::AddLog
EXTRN	?gLog@@3VCLog@@A:BYTE				; gLog
;	COMDAT ??_C@_0O@LCHMOEP@Log?2TRADE_LOG?$AA@
CONST	SEGMENT
??_C@_0O@LCHMOEP@Log?2TRADE_LOG?$AA@ DB 'Log\TRADE_LOG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JAMGPJDP@Log?2CHAT_LOG?$AA@
CONST	SEGMENT
??_C@_0N@JAMGPJDP@Log?2CHAT_LOG?$AA@ DB 'Log\CHAT_LOG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OLCPKKDK@Log?2BOT_MANAGER_LOG?$AA@
CONST	SEGMENT
??_C@_0BE@OLCPKKDK@Log?2BOT_MANAGER_LOG?$AA@ DB 'Log\BOT_MANAGER_LOG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HKOPHEGB@Log?2COMMAND_LOG?$AA@
CONST	SEGMENT
??_C@_0BA@HKOPHEGB@Log?2COMMAND_LOG?$AA@ DB 'Log\COMMAND_LOG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CBJFKLGC@Log?2GAME_SHOP_LOG?$AA@
CONST	SEGMENT
??_C@_0BC@CBJFKLGC@Log?2GAME_SHOP_LOG?$AA@ DB 'Log\GAME_SHOP_LOG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HLABGKH@Log?2NORMAL_LOG?$AA@
CONST	SEGMENT
??_C@_0P@HLABGKH@Log?2NORMAL_LOG?$AA@ DB 'Log\NORMAL_LOG', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CServerDisplayer@@QAEXPAUHWND__@@@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?Load@CServerDisplayer@@QAEXPAUHWND__@@@Z PROC		; CServerDisplayer::Load, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	this->m_hWnd = hWnd;

  00003	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]

; 39   : 	// ---
; 40   : 	gLog.AddLog(true, "Log\\NORMAL_LOG");

  00006	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HLABGKH@Log?2NORMAL_LOG?$AA@
  0000b	89 81 ac 0d 00
	00		 mov	 DWORD PTR [ecx+3500], eax
  00011	6a 01		 push	 1
  00013	b9 00 00 00 00	 mov	 ecx, OFFSET ?gLog@@3VCLog@@A ; gLog
  00018	e8 00 00 00 00	 call	 ?AddLog@CLog@@QAEXHPAD@Z ; CLog::AddLog

; 41   : 	// ---
; 42   : 	gLog.AddLog(false, "Log\\GAME_SHOP_LOG");

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CBJFKLGC@Log?2GAME_SHOP_LOG?$AA@
  00022	6a 00		 push	 0
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?gLog@@3VCLog@@A ; gLog
  00029	e8 00 00 00 00	 call	 ?AddLog@CLog@@QAEXHPAD@Z ; CLog::AddLog

; 43   : 	gLog.AddLog(false, "Log\\COMMAND_LOG");

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HKOPHEGB@Log?2COMMAND_LOG?$AA@
  00033	6a 00		 push	 0
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?gLog@@3VCLog@@A ; gLog
  0003a	e8 00 00 00 00	 call	 ?AddLog@CLog@@QAEXHPAD@Z ; CLog::AddLog

; 44   : 	gLog.AddLog(false, "Log\\BOT_MANAGER_LOG");

  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OLCPKKDK@Log?2BOT_MANAGER_LOG?$AA@
  00044	6a 00		 push	 0
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?gLog@@3VCLog@@A ; gLog
  0004b	e8 00 00 00 00	 call	 ?AddLog@CLog@@QAEXHPAD@Z ; CLog::AddLog

; 45   : 	gLog.AddLog(false, "Log\\CHAT_LOG");

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JAMGPJDP@Log?2CHAT_LOG?$AA@
  00055	6a 00		 push	 0
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?gLog@@3VCLog@@A ; gLog
  0005c	e8 00 00 00 00	 call	 ?AddLog@CLog@@QAEXHPAD@Z ; CLog::AddLog

; 46   : 	gLog.AddLog(false, "Log\\TRADE_LOG");

  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LCHMOEP@Log?2TRADE_LOG?$AA@
  00066	6a 00		 push	 0
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?gLog@@3VCLog@@A ; gLog
  0006d	e8 00 00 00 00	 call	 ?AddLog@CLog@@QAEXHPAD@Z ; CLog::AddLog

; 47   : }

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?Load@CServerDisplayer@@QAEXPAUHWND__@@@Z ENDP		; CServerDisplayer::Load
_TEXT	ENDS
PUBLIC	??_C@_0FL@BKCHDLOP@Monster?5Count?3?5?$FL?$CFd?5?1?5?$CFd?$FN?5?$HM?5Users@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?PaintTopInfo@CServerDisplayer@@QAEXXZ		; CServerDisplayer::PaintTopInfo
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?gObjTotalUser@@3HA:DWORD			; gObjTotalUser
EXTRN	?gServerMaxUser@@3HA:DWORD			; gServerMaxUser
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
EXTRN	__imp__GetDC@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0FL@BKCHDLOP@Monster?5Count?3?5?$FL?$CFd?5?1?5?$CFd?$FN?5?$HM?5Users@
CONST	SEGMENT
??_C@_0FL@BKCHDLOP@Monster?5Count?3?5?$FL?$CFd?5?1?5?$CFd?$FN?5?$HM?5Users@ DB 'M'
	DB	'onster Count: [%d / %d] | Users Online: [%d / %d] | Bots Onli'
	DB	'ne: [%d] | Vips Online: [%d]', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?PaintTopInfo@CServerDisplayer@@QAEXXZ
_TEXT	SEGMENT
_szBuffer$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
?PaintTopInfo@CServerDisplayer@@QAEXXZ PROC		; CServerDisplayer::PaintTopInfo, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 58   : 	if(!OBJMAX_RANGE(this->m_PaintIndex))

  00016	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00019	85 c0		 test	 eax, eax
  0001b	0f 88 6e 01 00
	00		 js	 $LN8@PaintTopIn
  00021	33 c9		 xor	 ecx, ecx
  00023	3d e7 1c 00 00	 cmp	 eax, 7399		; 00001ce7H
  00028	0f 9e c1	 setle	 cl
  0002b	8b c1		 mov	 eax, ecx
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 5a 01 00
	00		 je	 $LN8@PaintTopIn

; 59   : 	{
; 60   : 		return;
; 61   : 	}
; 62   : 	// ---
; 63   : 	HDC hDC = GetDC(this->m_hWnd);

  00035	8b 93 ac 0d 00
	00		 mov	 edx, DWORD PTR [ebx+3500]
  0003b	56		 push	 esi
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 64   : 	// ---
; 65   : 	char szBuffer[256] = {0};

  00044	68 ff 00 00 00	 push	 255			; 000000ffH
  00049	8b f8		 mov	 edi, eax
  0004b	8d 85 fd fe ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp+1]
  00051	6a 00		 push	 0
  00053	50		 push	 eax
  00054	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _szBuffer$[ebp], 0
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : 	// ---
; 67   : 	int TotalPlayer = 0;

  00063	33 c9		 xor	 ecx, ecx

; 68   : 	int TotalMonster = 0;

  00065	33 d2		 xor	 edx, edx
  00067	b8 04 00 00 00	 mov	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+4
  0006c	be 01 00 00 00	 mov	 esi, 1
$LL6@PaintTopIn:

; 73   : 	{
; 74   : 		if(gObj[i].Type == OBJ_USER && gObj[i].Connected != PLAYER_EMPTY)

  00071	66 39 70 5c	 cmp	 WORD PTR [eax+92], si
  00075	75 09		 jne	 SHORT $LN3@PaintTopIn
  00077	80 38 00	 cmp	 BYTE PTR [eax], 0
  0007a	74 0b		 je	 SHORT $LN5@PaintTopIn

; 75   : 		{
; 76   : 			TotalPlayer++;

  0007c	03 ce		 add	 ecx, esi
  0007e	eb 07		 jmp	 SHORT $LN5@PaintTopIn
$LN3@PaintTopIn:

; 77   : 		}
; 78   : 		else if(gObj[i].Connected != PLAYER_EMPTY)

  00080	80 38 00	 cmp	 BYTE PTR [eax], 0
  00083	74 02		 je	 SHORT $LN5@PaintTopIn

; 79   : 		{
; 80   : 			TotalMonster++;

  00085	03 d6		 add	 edx, esi
$LN5@PaintTopIn:

; 73   : 	{
; 74   : 		if(gObj[i].Type == OBJ_USER && gObj[i].Connected != PLAYER_EMPTY)

  00087	66 39 b0 c0 15
	00 00		 cmp	 WORD PTR [eax+5568], si
  0008e	75 0d		 jne	 SHORT $LN15@PaintTopIn
  00090	80 b8 64 15 00
	00 00		 cmp	 BYTE PTR [eax+5476], 0
  00097	74 0f		 je	 SHORT $LN16@PaintTopIn

; 75   : 		{
; 76   : 			TotalPlayer++;

  00099	03 ce		 add	 ecx, esi
  0009b	eb 0b		 jmp	 SHORT $LN16@PaintTopIn
$LN15@PaintTopIn:

; 77   : 		}
; 78   : 		else if(gObj[i].Connected != PLAYER_EMPTY)

  0009d	80 b8 64 15 00
	00 00		 cmp	 BYTE PTR [eax+5476], 0
  000a4	74 02		 je	 SHORT $LN16@PaintTopIn

; 79   : 		{
; 80   : 			TotalMonster++;

  000a6	03 d6		 add	 edx, esi
$LN16@PaintTopIn:

; 73   : 	{
; 74   : 		if(gObj[i].Type == OBJ_USER && gObj[i].Connected != PLAYER_EMPTY)

  000a8	66 39 b0 24 2b
	00 00		 cmp	 WORD PTR [eax+11044], si
  000af	75 0d		 jne	 SHORT $LN17@PaintTopIn
  000b1	80 b8 c8 2a 00
	00 00		 cmp	 BYTE PTR [eax+10952], 0
  000b8	74 0f		 je	 SHORT $LN18@PaintTopIn

; 75   : 		{
; 76   : 			TotalPlayer++;

  000ba	03 ce		 add	 ecx, esi
  000bc	eb 0b		 jmp	 SHORT $LN18@PaintTopIn
$LN17@PaintTopIn:

; 77   : 		}
; 78   : 		else if(gObj[i].Connected != PLAYER_EMPTY)

  000be	80 b8 c8 2a 00
	00 00		 cmp	 BYTE PTR [eax+10952], 0
  000c5	74 02		 je	 SHORT $LN18@PaintTopIn

; 79   : 		{
; 80   : 			TotalMonster++;

  000c7	03 d6		 add	 edx, esi
$LN18@PaintTopIn:

; 73   : 	{
; 74   : 		if(gObj[i].Type == OBJ_USER && gObj[i].Connected != PLAYER_EMPTY)

  000c9	66 39 b0 88 40
	00 00		 cmp	 WORD PTR [eax+16520], si
  000d0	75 0d		 jne	 SHORT $LN19@PaintTopIn
  000d2	80 b8 2c 40 00
	00 00		 cmp	 BYTE PTR [eax+16428], 0
  000d9	74 0f		 je	 SHORT $LN20@PaintTopIn

; 75   : 		{
; 76   : 			TotalPlayer++;

  000db	03 ce		 add	 ecx, esi
  000dd	eb 0b		 jmp	 SHORT $LN20@PaintTopIn
$LN19@PaintTopIn:

; 77   : 		}
; 78   : 		else if(gObj[i].Connected != PLAYER_EMPTY)

  000df	80 b8 2c 40 00
	00 00		 cmp	 BYTE PTR [eax+16428], 0
  000e6	74 02		 je	 SHORT $LN20@PaintTopIn

; 79   : 		{
; 80   : 			TotalMonster++;

  000e8	03 d6		 add	 edx, esi
$LN20@PaintTopIn:

; 73   : 	{
; 74   : 		if(gObj[i].Type == OBJ_USER && gObj[i].Connected != PLAYER_EMPTY)

  000ea	66 39 b0 ec 55
	00 00		 cmp	 WORD PTR [eax+21996], si
  000f1	75 0d		 jne	 SHORT $LN21@PaintTopIn
  000f3	80 b8 90 55 00
	00 00		 cmp	 BYTE PTR [eax+21904], 0
  000fa	74 0f		 je	 SHORT $LN22@PaintTopIn

; 75   : 		{
; 76   : 			TotalPlayer++;

  000fc	03 ce		 add	 ecx, esi
  000fe	eb 0b		 jmp	 SHORT $LN22@PaintTopIn
$LN21@PaintTopIn:

; 77   : 		}
; 78   : 		else if(gObj[i].Connected != PLAYER_EMPTY)

  00100	80 b8 90 55 00
	00 00		 cmp	 BYTE PTR [eax+21904], 0
  00107	74 02		 je	 SHORT $LN22@PaintTopIn

; 79   : 		{
; 80   : 			TotalMonster++;

  00109	03 d6		 add	 edx, esi
$LN22@PaintTopIn:

; 59   : 	{
; 60   : 		return;
; 61   : 	}
; 62   : 	// ---
; 63   : 	HDC hDC = GetDC(this->m_hWnd);

  0010b	05 f4 6a 00 00	 add	 eax, 27380		; 00006af4H

; 69   : 	int BotCount = 0;
; 70   : 	int VipCount = 0;
; 71   : 	// ---
; 72   : 	for(int i = 0; i < OBJMAX; i++)

  00110	3d a4 52 6a 02	 cmp	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A+40522404
  00115	0f 8c 56 ff ff
	ff		 jl	 $LL6@PaintTopIn

; 81   : 		}
; 82   : 	}
; 83   : 	// ---
; 84   : 	gObjTotalUser = TotalPlayer;
; 85   : 	// ---
; 86   : 	wsprintf(szBuffer, "Monster Count: [%d / %d] | Users Online: [%d / %d] | Bots Online: [%d] | Vips Online: [%d]", TotalMonster, OBJ_MAXMONSTER, TotalPlayer, gServerMaxUser, BotCount, VipCount);

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gServerMaxUser@@3HA ; gServerMaxUser
  00120	6a 00		 push	 0
  00122	6a 00		 push	 0
  00124	50		 push	 eax
  00125	51		 push	 ecx
  00126	68 a8 16 00 00	 push	 5800			; 000016a8H
  0012b	52		 push	 edx
  0012c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?gObjTotalUser@@3HA, ecx ; gObjTotalUser
  00132	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@BKCHDLOP@Monster?5Count?3?5?$FL?$CFd?5?1?5?$CFd?$FN?5?$HM?5Users@
  0013d	51		 push	 ecx
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00144	83 c4 20	 add	 esp, 32			; 00000020H

; 87   : 	// ---
; 88   : 	SetBkMode(hDC, TRANSPARENT);

  00147	56		 push	 esi
  00148	57		 push	 edi
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 89   : 	// ---
; 90   : 	SetTextColor(hDC, RGB(171,171,171));

  0014f	68 ab ab ab 00	 push	 11250603		; 00abababH
  00154	57		 push	 edi
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 91   : 	// ---
; 92   : 	TextOut(hDC, GAMESERVER_WIDTH / 2 - 280, 1, szBuffer, strlen(szBuffer));

  0015b	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00161	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL23@PaintTopIn:
  00164	8a 08		 mov	 cl, BYTE PTR [eax]
  00166	40		 inc	 eax
  00167	84 c9		 test	 cl, cl
  00169	75 f9		 jne	 SHORT $LL23@PaintTopIn
  0016b	2b c2		 sub	 eax, edx
  0016d	50		 push	 eax
  0016e	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szBuffer$[ebp]
  00174	52		 push	 edx
  00175	56		 push	 esi
  00176	6a 5f		 push	 95			; 0000005fH
  00178	57		 push	 edi
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20

; 93   : 	// ---
; 94   : 	ReleaseDC(this->m_hWnd, hDC);

  0017f	8b 83 ac 0d 00
	00		 mov	 eax, DWORD PTR [ebx+3500]
  00185	57		 push	 edi
  00186	50		 push	 eax
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  0018d	5f		 pop	 edi
  0018e	5e		 pop	 esi
$LN8@PaintTopIn:

; 95   : }

  0018f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00192	33 cd		 xor	 ecx, ebp
  00194	5b		 pop	 ebx
  00195	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
?PaintTopInfo@CServerDisplayer@@QAEXXZ ENDP		; CServerDisplayer::PaintTopInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?PaintAllInfo@CServerDisplayer@@QAEXXZ		; CServerDisplayer::PaintAllInfo
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__FillRect@12:PROC
EXTRN	__imp__GetClientRect@8:PROC
; Function compile flags: /Ogtp
;	COMDAT ?PaintAllInfo@CServerDisplayer@@QAEXXZ
_TEXT	SEGMENT
tv162 = -32						; size = 4
_iOldBkMode$ = -28					; size = 4
_pOldFont$ = -24					; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?PaintAllInfo@CServerDisplayer@@QAEXXZ PROC		; CServerDisplayer::PaintAllInfo, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b f9		 mov	 edi, ecx

; 99   : 	HDC hDC = GetDC(this->m_hWnd);

  00015	8b 87 ac 0d 00
	00		 mov	 eax, DWORD PTR [edi+3500]
  0001b	50		 push	 eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 100  : 	// --
; 101  : 	RECT rect;
; 102  : 	// --
; 103  : 	GetClientRect(this->m_hWnd, &rect);

  00022	8b 97 ac 0d 00
	00		 mov	 edx, DWORD PTR [edi+3500]
  00028	8d 4d ec	 lea	 ecx, DWORD PTR _rect$[ebp]
  0002b	51		 push	 ecx
  0002c	52		 push	 edx
  0002d	8b f0		 mov	 esi, eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 104  : 	// --
; 105  : 	rect.top = 20;
; 106  : 	rect.bottom = 100;
; 107  : 	// ---
; 108  : 	FillRect(hDC, &rect, this->Background);

  00035	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00038	50		 push	 eax
  00039	8d 4d ec	 lea	 ecx, DWORD PTR _rect$[ebp]
  0003c	51		 push	 ecx
  0003d	56		 push	 esi
  0003e	c7 45 f0 14 00
	00 00		 mov	 DWORD PTR _rect$[ebp+4], 20 ; 00000014H
  00045	c7 45 f8 64 00
	00 00		 mov	 DWORD PTR _rect$[ebp+12], 100 ; 00000064H
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 109  : 	// ---
; 110  : 	HFONT pOldFont = (HFONT)SelectObject(hDC, this->Font);

  00052	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00055	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SelectObject@8
  0005b	52		 push	 edx
  0005c	56		 push	 esi
  0005d	ff d3		 call	 ebx

; 111  : 	// ---
; 112  : 	SetTextColor(hDC, RGB(250, 250, 250));

  0005f	68 fa fa fa 00	 push	 16448250		; 00fafafaH
  00064	56		 push	 esi
  00065	89 45 e8	 mov	 DWORD PTR _pOldFont$[ebp], eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 113  : 	// ---
; 114  : 	int iOldBkMode = SetBkMode(hDC, TRANSPARENT);

  0006e	6a 01		 push	 1
  00070	56		 push	 esi
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 115  : 	// ---
; 116  : 	TextOutA(hDC, 140, 20, TitleText[0], strlen(TitleText[0]));

  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?TitleText@@3PAPADA ; TitleText
  0007d	89 45 e4	 mov	 DWORD PTR _iOldBkMode$[ebp], eax
  00080	8b c1		 mov	 eax, ecx
  00082	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00085	89 55 e0	 mov	 DWORD PTR tv162[ebp], edx
$LL3@PaintAllIn:
  00088	8a 10		 mov	 dl, BYTE PTR [eax]
  0008a	40		 inc	 eax
  0008b	84 d2		 test	 dl, dl
  0008d	75 f9		 jne	 SHORT $LL3@PaintAllIn
  0008f	2b 45 e0	 sub	 eax, DWORD PTR tv162[ebp]
  00092	50		 push	 eax
  00093	51		 push	 ecx
  00094	6a 14		 push	 20			; 00000014H
  00096	68 8c 00 00 00	 push	 140			; 0000008cH
  0009b	56		 push	 esi
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20

; 117  : 	// ---
; 118  : 	SelectObject(hDC, pOldFont);

  000a2	8b 45 e8	 mov	 eax, DWORD PTR _pOldFont$[ebp]
  000a5	50		 push	 eax
  000a6	56		 push	 esi
  000a7	ff d3		 call	 ebx

; 119  : 	// ---
; 120  : 	SetBkMode(hDC, iOldBkMode);

  000a9	8b 4d e4	 mov	 ecx, DWORD PTR _iOldBkMode$[ebp]
  000ac	51		 push	 ecx
  000ad	56		 push	 esi
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 121  : 	// ---
; 122  : 	ReleaseDC(this->m_hWnd, hDC);

  000b4	8b 97 ac 0d 00
	00		 mov	 edx, DWORD PTR [edi+3500]
  000ba	56		 push	 esi
  000bb	52		 push	 edx
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 123  : }

  000c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	33 cd		 xor	 ecx, ebp
  000c9	5b		 pop	 ebx
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
?PaintAllInfo@CServerDisplayer@@QAEXXZ ENDP		; CServerDisplayer::PaintAllInfo
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?LogTextPaint@CServerDisplayer@@QAEXXZ		; CServerDisplayer::LogTextPaint
; Function compile flags: /Ogtp
;	COMDAT ?LogTextPaint@CServerDisplayer@@QAEXXZ
_TEXT	SEGMENT
_brush$ = -40						; size = 4
_this$GSCopy$ = -36					; size = 4
tv256 = -32						; size = 4
tv172 = -28						; size = 4
_count$ = -24						; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?LogTextPaint@CServerDisplayer@@QAEXXZ PROC		; CServerDisplayer::LogTextPaint, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b f9		 mov	 edi, ecx

; 127  : 	RECT rect;
; 128  : 	// ---
; 129  : 	GetClientRect(this->m_hWnd, &rect);

  00015	8b 8f ac 0d 00
	00		 mov	 ecx, DWORD PTR [edi+3500]
  0001b	8d 45 ec	 lea	 eax, DWORD PTR _rect$[ebp]
  0001e	50		 push	 eax
  0001f	51		 push	 ecx

; 130  : 	// ---
; 131  : 	HDC hdc = GetDC(this->m_hWnd);
; 132  : 	// ---
; 133  : 	HBRUSH brush = CreateSolidBrush(RGB(24, 24, 24));

  00020	89 7d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00029	8b 97 ac 0d 00
	00		 mov	 edx, DWORD PTR [edi+3500]
  0002f	52		 push	 edx
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00036	68 18 18 18 00	 push	 1579032			; 00181818H
  0003b	8b f0		 mov	 esi, eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4

; 134  : 	// ---
; 135  : 	FillRect(hdc, &rect, brush);

  00043	50		 push	 eax
  00044	89 45 d8	 mov	 DWORD PTR _brush$[ebp], eax
  00047	8d 45 ec	 lea	 eax, DWORD PTR _rect$[ebp]
  0004a	50		 push	 eax
  0004b	56		 push	 esi
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 136  : 	// ---
; 137  : 	int line = MAX_LOG_TEXT_LINE;
; 138  : 	// ---
; 139  : 	int count = (((this->m_count-1) >= 0) ? (this->m_count-1):(MAX_LOG_TEXT_LINE-1));

  00052	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00055	48		 dec	 eax
  00056	89 45 e8	 mov	 DWORD PTR _count$[ebp], eax
  00059	79 07		 jns	 SHORT $LN17@LogTextPai
  0005b	c7 45 e8 1d 00
	00 00		 mov	 DWORD PTR _count$[ebp], 29 ; 0000001dH
$LN17@LogTextPai:

; 140  : 	// ---
; 141  : 	SetBkMode(hdc, TRANSPARENT);

  00062	6a 01		 push	 1
  00064	56		 push	 esi
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  0006b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__SetTextColor@8
  00071	c7 45 e0 1c 02
	00 00		 mov	 DWORD PTR tv256[ebp], 540 ; 0000021cH
  00078	c7 45 e4 1e 00
	00 00		 mov	 DWORD PTR tv172[ebp], 30 ; 0000001eH
  0007f	eb 03		 jmp	 SHORT $LN13@LogTextPai
$LL23@LogTextPai:
  00081	8b 7d dc	 mov	 edi, DWORD PTR _this$GSCopy$[ebp]
$LN13@LogTextPai:

; 144  : 	{
; 145  : 		switch(this->m_log[count].Color)

  00084	8b 4d e8	 mov	 ecx, DWORD PTR _count$[ebp]
  00087	6b c9 74	 imul	 ecx, 116		; 00000074H
  0008a	8b 84 0f 84 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx+132]
  00091	03 f9		 add	 edi, ecx
  00093	83 f8 06	 cmp	 eax, 6
  00096	77 39		 ja	 SHORT $LN9@LogTextPai
  00098	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN25@LogTextPai[eax*4]
$LN8@LogTextPai:

; 146  : 		{
; 147  : 		case LOG_BLACK:
; 148  : 			SetTextColor(hdc,RGB(171, 171, 171));

  0009f	68 ab ab ab 00	 push	 11250603		; 00abababH

; 149  : 			break;

  000a4	eb 28		 jmp	 SHORT $LN24@LogTextPai
$LN7@LogTextPai:

; 150  : 		case LOG_RED:
; 151  : 			SetTextColor(hdc,RGB(240, 25, 25));

  000a6	68 f0 19 19 00	 push	 1645040			; 001919f0H

; 152  : 			break;

  000ab	eb 21		 jmp	 SHORT $LN24@LogTextPai
$LN6@LogTextPai:

; 153  : 		case LOG_ORANGE:
; 154  : 			SetTextColor(hdc,RGB(255, 69, 0));

  000ad	68 ff 45 00 00	 push	 17919			; 000045ffH

; 155  : 			break;

  000b2	eb 1a		 jmp	 SHORT $LN24@LogTextPai
$LN5@LogTextPai:

; 156  : 		case LOG_GREEN:
; 157  : 			SetTextColor(hdc,RGB(127, 255, 0));

  000b4	68 7f ff 00 00	 push	 65407			; 0000ff7fH

; 158  : 			break;

  000b9	eb 13		 jmp	 SHORT $LN24@LogTextPai
$LN4@LogTextPai:

; 159  : 		case LOG_BLUE:
; 160  : 			SetTextColor(hdc,RGB(0, 255, 255));

  000bb	68 00 ff ff 00	 push	 16776960		; 00ffff00H

; 161  : 			break;

  000c0	eb 0c		 jmp	 SHORT $LN24@LogTextPai
$LN3@LogTextPai:

; 162  : 		case LOG_GOLD:
; 163  : 			SetTextColor(hdc,RGB(255, 215, 0));

  000c2	68 ff d7 00 00	 push	 55295			; 0000d7ffH

; 164  : 			break;

  000c7	eb 05		 jmp	 SHORT $LN24@LogTextPai
$LN2@LogTextPai:

; 165  : 		case LOG_PINK:
; 166  : 			SetTextColor(hdc,RGB(255, 93, 233));

  000c9	68 ff 5d e9 00	 push	 15293951		; 00e95dffH
$LN24@LogTextPai:
  000ce	56		 push	 esi
  000cf	ff d3		 call	 ebx
$LN9@LogTextPai:

; 167  : 			break;
; 168  : 		}
; 169  : 		// ---
; 170  : 		int size = strlen(this->m_log[count].szText);

  000d1	8d 57 14	 lea	 edx, DWORD PTR [edi+20]
  000d4	8b c2		 mov	 eax, edx
  000d6	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  000d9	8d a4 24 00 00
	00 00		 npad	 7
$LL22@LogTextPai:
  000e0	8a 08		 mov	 cl, BYTE PTR [eax]
  000e2	40		 inc	 eax
  000e3	84 c9		 test	 cl, cl
  000e5	75 f9		 jne	 SHORT $LL22@LogTextPai
  000e7	2b c7		 sub	 eax, edi

; 171  : 		// ---
; 172  : 		if(size > 1)

  000e9	83 f8 01	 cmp	 eax, 1
  000ec	7e 15		 jle	 SHORT $LN1@LogTextPai

; 173  : 		{
; 174  : 			TextOut(hdc, 2 ,((line * 15) + 90), this->m_log[count].szText, size);

  000ee	8b 7d e0	 mov	 edi, DWORD PTR tv256[ebp]
  000f1	50		 push	 eax
  000f2	52		 push	 edx
  000f3	57		 push	 edi
  000f4	6a 02		 push	 2
  000f6	56		 push	 esi
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20

; 175  : 			// ---
; 176  : 			line--;

  000fd	83 ef 0f	 sub	 edi, 15			; 0000000fH
  00100	89 7d e0	 mov	 DWORD PTR tv256[ebp], edi
$LN1@LogTextPai:

; 177  : 		}
; 178  : 		// ---
; 179  : 		count = (((--count) >= 0) ? count:(MAX_LOG_TEXT_LINE-1));

  00103	b8 01 00 00 00	 mov	 eax, 1
  00108	29 45 e8	 sub	 DWORD PTR _count$[ebp], eax
  0010b	79 07		 jns	 SHORT $LN19@LogTextPai
  0010d	c7 45 e8 1d 00
	00 00		 mov	 DWORD PTR _count$[ebp], 29 ; 0000001dH
$LN19@LogTextPai:

; 142  : 	// ---
; 143  : 	for(int n = 0; n < MAX_LOG_TEXT_LINE; n++)

  00114	29 45 e4	 sub	 DWORD PTR tv172[ebp], eax
  00117	0f 85 64 ff ff
	ff		 jne	 $LL23@LogTextPai

; 180  : 	}
; 181  : 	// ---
; 182  : 	ReleaseDC(this->m_hWnd, hdc);

  0011d	8b 55 dc	 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  00120	8b 82 ac 0d 00
	00		 mov	 eax, DWORD PTR [edx+3500]
  00126	56		 push	 esi
  00127	50		 push	 eax
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 183  : 	// ---
; 184  : 	DeleteObject(brush);

  0012e	8b 4d d8	 mov	 ecx, DWORD PTR _brush$[ebp]
  00131	51		 push	 ecx
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 185  : }

  00138	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	33 cd		 xor	 ecx, ebp
  0013f	5b		 pop	 ebx
  00140	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c3		 ret	 0
  00149	8d 49 00	 npad	 3
$LN25@LogTextPai:
  0014c	00 00 00 00	 DD	 $LN8@LogTextPai
  00150	00 00 00 00	 DD	 $LN7@LogTextPai
  00154	00 00 00 00	 DD	 $LN6@LogTextPai
  00158	00 00 00 00	 DD	 $LN5@LogTextPai
  0015c	00 00 00 00	 DD	 $LN4@LogTextPai
  00160	00 00 00 00	 DD	 $LN3@LogTextPai
  00164	00 00 00 00	 DD	 $LN2@LogTextPai
?LogTextPaint@CServerDisplayer@@QAEXXZ ENDP		; CServerDisplayer::LogTextPaint
_TEXT	ENDS
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	?LogAddText@CServerDisplayer@@QAEXW4eLogColor@@PADH@Z ; CServerDisplayer::LogAddText
EXTRN	?Output@CLog@@QAAXW4eLogType@@PADZZ:PROC	; CLog::Output
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LogAddText@CServerDisplayer@@QAEXW4eLogColor@@PADH@Z
_TEXT	SEGMENT
_color$ = 8						; size = 4
_text$ = 12						; size = 4
_size$ = 16						; size = 4
?LogAddText@CServerDisplayer@@QAEXW4eLogColor@@PADH@Z PROC ; CServerDisplayer::LogAddText, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 189  : 	size = ((size>=MAX_LOG_TEXT_SIZE)?(MAX_LOG_TEXT_SIZE-1):size);

  00005	8b 7d 10	 mov	 edi, DWORD PTR _size$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	83 ff 6e	 cmp	 edi, 110		; 0000006eH
  0000d	7c 05		 jl	 SHORT $LN3@LogAddText
  0000f	bf 6d 00 00 00	 mov	 edi, 109		; 0000006dH
$LN3@LogAddText:

; 190  : 	// ---
; 191  : 	memset(&this->m_log[this->m_count].szText, 0, sizeof(this->m_log[this->m_count].szText));

  00014	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00017	6b c0 74	 imul	 eax, 116		; 00000074H
  0001a	6a 6e		 push	 110			; 0000006eH
  0001c	8d 4c 30 14	 lea	 ecx, DWORD PTR [eax+esi+20]
  00020	6a 00		 push	 0
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 _memset

; 192  : 	// ---
; 193  : 	memcpy(&this->m_log[this->m_count].szText, text, size);

  00028	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0002b	6b d2 74	 imul	 edx, 116		; 00000074H
  0002e	57		 push	 edi
  0002f	8b 7d 0c	 mov	 edi, DWORD PTR _text$[ebp]
  00032	8d 44 32 14	 lea	 eax, DWORD PTR [edx+esi+20]
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _memcpy

; 194  : 	// ---
; 195  : 	this->m_log[this->m_count].Color = color;

  0003d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00040	8b 55 08	 mov	 edx, DWORD PTR _color$[ebp]
  00043	6b c9 74	 imul	 ecx, 116		; 00000074H
  00046	89 94 31 84 00
	00 00		 mov	 DWORD PTR [ecx+esi+132], edx

; 196  : 	// ---
; 197  : 	this->m_count = (((++this->m_count) >= MAX_LOG_TEXT_LINE)?0:this->m_count);

  0004d	ff 46 10	 inc	 DWORD PTR [esi+16]
  00050	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00053	33 c9		 xor	 ecx, ecx
  00055	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00058	0f 9d c1	 setge	 cl

; 198  : 	// ---
; 199  : 	gLog.Output(LOG_GENERAL, "%s", &text[9]);

  0005b	83 c7 09	 add	 edi, 9
  0005e	57		 push	 edi
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00064	6a 00		 push	 0
  00066	68 00 00 00 00	 push	 OFFSET ?gLog@@3VCLog@@A	; gLog
  0006b	49		 dec	 ecx
  0006c	23 c1		 and	 eax, ecx
  0006e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00071	e8 00 00 00 00	 call	 ?Output@CLog@@QAAXW4eLogType@@PADZZ ; CLog::Output
  00076	83 c4 28	 add	 esp, 40			; 00000028H
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi

; 200  : }

  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
?LogAddText@CServerDisplayer@@QAEXW4eLogColor@@PADH@Z ENDP ; CServerDisplayer::LogAddText
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCServerDisplayer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCServerDisplayer@@UAEPAXI@Z PROC			; CServerDisplayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CServerDisplayer@@UAE@XZ ; CServerDisplayer::~CServerDisplayer
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCServerDisplayer@@UAEPAXI@Z ENDP			; CServerDisplayer::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Run@CServerDisplayer@@QAEXXZ			; CServerDisplayer::Run
; Function compile flags: /Ogtp
;	COMDAT ?Run@CServerDisplayer@@QAEXXZ
_TEXT	SEGMENT
?Run@CServerDisplayer@@QAEXXZ PROC			; CServerDisplayer::Run, COMDAT
; _this$ = ecx

; 50   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 51   : 	this->LogTextPaint();

  00003	e8 00 00 00 00	 call	 ?LogTextPaint@CServerDisplayer@@QAEXXZ ; CServerDisplayer::LogTextPaint

; 52   : 	this->PaintAllInfo();

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?PaintAllInfo@CServerDisplayer@@QAEXXZ ; CServerDisplayer::PaintAllInfo

; 53   : 	this->PaintTopInfo();

  0000f	8b ce		 mov	 ecx, esi
  00011	5e		 pop	 esi
  00012	e9 00 00 00 00	 jmp	 ?PaintTopInfo@CServerDisplayer@@QAEXXZ ; CServerDisplayer::PaintTopInfo
?Run@CServerDisplayer@@QAEXXZ ENDP			; CServerDisplayer::Run
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgServerDisplayer@@YAXXZ
text$yc	SEGMENT
??__EgServerDisplayer@@YAXXZ PROC			; `dynamic initializer for 'gServerDisplayer'', COMDAT

; 7    : CServerDisplayer gServerDisplayer;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gServerDisplayer@@3VCServerDisplayer@@A ; gServerDisplayer
  00005	e8 00 00 00 00	 call	 ??0CServerDisplayer@@QAE@XZ ; CServerDisplayer::CServerDisplayer
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgServerDisplayer@@YAXXZ ; `dynamic atexit destructor for 'gServerDisplayer''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgServerDisplayer@@YAXXZ ENDP			; `dynamic initializer for 'gServerDisplayer''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgServerDisplayer@@YAXXZ
text$yd	SEGMENT
??__FgServerDisplayer@@YAXXZ PROC			; `dynamic atexit destructor for 'gServerDisplayer'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gServerDisplayer@@3VCServerDisplayer@@A ; gServerDisplayer
  00005	e9 00 00 00 00	 jmp	 ??1CServerDisplayer@@UAE@XZ ; CServerDisplayer::~CServerDisplayer
??__FgServerDisplayer@@YAXXZ ENDP			; `dynamic atexit destructor for 'gServerDisplayer''
text$yd	ENDS
PUBLIC	?gServerDisplayer@@3VCServerDisplayer@@A	; gServerDisplayer
_BSS	SEGMENT
?gServerDisplayer@@3VCServerDisplayer@@A DB 0db0H DUP (?) ; gServerDisplayer
_BSS	ENDS
CRT$XCU	SEGMENT
_gServerDisplayer$initializer$ DD FLAT:??__EgServerDisplayer@@YAXXZ
CRT$XCU	ENDS
END
