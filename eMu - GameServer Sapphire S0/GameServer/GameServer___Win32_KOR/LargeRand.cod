; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\LargeRand.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CLargeRand@@6B@				; CLargeRand::`vftable'
PUBLIC	??0CLargeRand@@QAE@XZ				; CLargeRand::CLargeRand
PUBLIC	??_R4CLargeRand@@6B@				; CLargeRand::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLargeRand@@@8				; CLargeRand `RTTI Type Descriptor'
PUBLIC	??_R3CLargeRand@@8				; CLargeRand::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLargeRand@@8				; CLargeRand::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLargeRand@@8			; CLargeRand::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECLargeRand@@UAEPAXI@Z:PROC			; CLargeRand::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CLargeRand@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\largerand.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CLargeRand@@8 DD FLAT:??_R0?AVCLargeRand@@@8 ; CLargeRand::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_R2CLargeRand@@8
rdata$r	SEGMENT
??_R2CLargeRand@@8 DD FLAT:??_R1A@?0A@EA@CLargeRand@@8	; CLargeRand::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CLargeRand@@8
rdata$r	SEGMENT
??_R3CLargeRand@@8 DD 00H				; CLargeRand::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLargeRand@@@8
_DATA	SEGMENT
??_R0?AVCLargeRand@@@8 DD FLAT:??_7type_info@@6B@	; CLargeRand `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLargeRand@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLargeRand@@6B@
rdata$r	SEGMENT
??_R4CLargeRand@@6B@ DD 00H				; CLargeRand::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLargeRand@@@8
	DD	FLAT:??_R3CLargeRand@@8
rdata$r	ENDS
;	COMDAT ??_7CLargeRand@@6B@
CONST	SEGMENT
??_7CLargeRand@@6B@ DD FLAT:??_R4CLargeRand@@6B@	; CLargeRand::`vftable'
	DD	FLAT:??_ECLargeRand@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CLargeRand@@QAE@XZ
_TEXT	SEGMENT
??0CLargeRand@@QAE@XZ PROC				; CLargeRand::CLargeRand, COMDAT
; _this$ = ecx

; 15   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CLargeRand@@6B@

; 16   : 	this->left = -1;

  00008	c7 80 cc 09 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+2508], -1

; 17   : }

  00012	c3		 ret	 0
??0CLargeRand@@QAE@XZ ENDP				; CLargeRand::CLargeRand
_TEXT	ENDS
PUBLIC	??1CLargeRand@@UAE@XZ				; CLargeRand::~CLargeRand
; Function compile flags: /Ogtp
;	COMDAT ??1CLargeRand@@UAE@XZ
_TEXT	SEGMENT
??1CLargeRand@@UAE@XZ PROC				; CLargeRand::~CLargeRand, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CLargeRand@@6B@

; 21   : 	return;
; 22   : }

  00006	c3		 ret	 0
??1CLargeRand@@UAE@XZ ENDP				; CLargeRand::~CLargeRand
_TEXT	ENDS
PUBLIC	?seedMT@CLargeRand@@QAEXK@Z			; CLargeRand::seedMT
; Function compile flags: /Ogtp
;	COMDAT ?seedMT@CLargeRand@@QAEXK@Z
_TEXT	SEGMENT
_seed$ = 8						; size = 4
?seedMT@CLargeRand@@QAEXK@Z PROC			; CLargeRand::seedMT, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 26   : 	DWORD x = seed | 1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]

; 27   : 	DWORD * s = this->state;

  00006	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  00009	83 c8 01	 or	 eax, 1

; 28   : 	this->left = 0;

  0000c	c7 81 cc 09 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2508], 0

; 29   : 	*s = x;

  00016	89 02		 mov	 DWORD PTR [edx], eax

; 30   : 	s++;

  00018	83 c2 04	 add	 edx, 4

; 31   : 
; 32   : 	for ( int j = MAX_LARGE_RAND_STATE-1 ; --j != 0 ;  x *= 69069, *s = x, s++);

  0001b	b9 6f 02 00 00	 mov	 ecx, 623		; 0000026fH
$LL3@seedMT:
  00020	69 c0 cd 0d 01
	00		 imul	 eax, 69069		; 00010dcdH
  00026	89 02		 mov	 DWORD PTR [edx], eax
  00028	83 c2 04	 add	 edx, 4
  0002b	49		 dec	 ecx
  0002c	75 f2		 jne	 SHORT $LL3@seedMT

; 33   : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?seedMT@CLargeRand@@QAEXK@Z ENDP			; CLargeRand::seedMT
_TEXT	ENDS
PUBLIC	?reloadMT@CLargeRand@@QAEKXZ			; CLargeRand::reloadMT
; Function compile flags: /Ogtp
;	COMDAT ?reloadMT@CLargeRand@@QAEKXZ
_TEXT	SEGMENT
tv194 = -12						; size = 4
_j$153459 = -8						; size = 4
_j$153455 = -8						; size = 4
tv192 = -4						; size = 4
?reloadMT@CLargeRand@@QAEKXZ PROC			; CLargeRand::reloadMT, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 37   : 	DWORD * p0 = this->state;
; 38   : 	DWORD * p2 = &this->state[2];
; 39   : 	DWORD * pM = &this->state[397];
; 40   : 
; 41   : 	if ( this->left < -1 )

  00009	83 bb cc 09 00
	00 ff		 cmp	 DWORD PTR [ebx+2508], -1
  00010	56		 push	 esi
  00011	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00014	8d 83 38 06 00
	00		 lea	 eax, DWORD PTR [ebx+1592]
  0001a	57		 push	 edi
  0001b	89 4d fc	 mov	 DWORD PTR tv192[ebp], ecx
  0001e	8b f9		 mov	 edi, ecx
  00020	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
  00023	89 45 f4	 mov	 DWORD PTR tv194[ebp], eax
  00026	7d 0e		 jge	 SHORT $LN7@reloadMT

; 42   : 		this->seedMT(0x1105);

  00028	68 05 11 00 00	 push	 4357			; 00001105H
  0002d	8b cb		 mov	 ecx, ebx
  0002f	e8 00 00 00 00	 call	 ?seedMT@CLargeRand@@QAEXK@Z ; CLargeRand::seedMT
  00034	8b cf		 mov	 ecx, edi
$LN7@reloadMT:

; 43   : 
; 44   : 	this->left = MAX_LARGE_RAND_STATE-2;
; 45   : 	this->next = &this->state[1];
; 46   : 	DWORD s0 = this->state[0];	

  00036	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00038	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0003b	89 83 c8 09 00
	00		 mov	 DWORD PTR [ebx+2504], eax

; 47   : 	DWORD s1 = this->state[1];

  00041	8b 00		 mov	 eax, DWORD PTR [eax]
  00043	c7 83 cc 09 00
	00 6f 02 00 00	 mov	 DWORD PTR [ebx+2508], 623 ; 0000026fH

; 48   : 
; 49   : 	for ( int j= 228; --j != 0 ; s0 = s1, s1 = *p2, p2++)

  0004d	8b 5d f4	 mov	 ebx, DWORD PTR tv194[ebp]
  00050	c7 45 f8 e3 00
	00 00		 mov	 DWORD PTR _j$153455[ebp], 227 ; 000000e3H
  00057	2b de		 sub	 ebx, esi
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL6@reloadMT:

; 50   : 	{
; 51   : 		*p0++ = (*pM++ ^ (((s0 & 0x80000000) | (s1 & 0x7FFFFFFF)) >> 1)) ^ (((s1&1!=0)?-1:0)&0x9908B0DF);

  00060	8b d0		 mov	 edx, eax
  00062	33 d1		 xor	 edx, ecx
  00064	81 e2 fe ff ff
	7f		 and	 edx, 2147483646		; 7ffffffeH
  0006a	33 d1		 xor	 edx, ecx
  0006c	8b c8		 mov	 ecx, eax
  0006e	80 e1 01	 and	 cl, 1
  00071	0f b6 c9	 movzx	 ecx, cl
  00074	d1 ea		 shr	 edx, 1
  00076	f7 d9		 neg	 ecx
  00078	1b c9		 sbb	 ecx, ecx
  0007a	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  00080	33 d1		 xor	 edx, ecx
  00082	33 14 33	 xor	 edx, DWORD PTR [ebx+esi]
  00085	8b c8		 mov	 ecx, eax
  00087	89 17		 mov	 DWORD PTR [edi], edx
  00089	8b 06		 mov	 eax, DWORD PTR [esi]
  0008b	83 c7 04	 add	 edi, 4
  0008e	83 c6 04	 add	 esi, 4
  00091	ff 4d f8	 dec	 DWORD PTR _j$153455[ebp]
  00094	75 ca		 jne	 SHORT $LL6@reloadMT

; 52   : 	}
; 53   : 
; 54   : 	pM = this->state;

  00096	8b 5d fc	 mov	 ebx, DWORD PTR tv192[ebp]

; 55   : 
; 56   : 	for (int j=0x18D ; --j != 0 ; s0=s1 , s1 = *p2 , p2++ )

  00099	c7 45 f8 8c 01
	00 00		 mov	 DWORD PTR _j$153459[ebp], 396 ; 0000018cH
$LL3@reloadMT:

; 57   : 	{
; 58   : 		*p0++ = (*pM++ ^ (((s0 & 0x80000000) | (s1 & 0x7FFFFFFF)) >> 1)) ^ (((s1&1!=0)?-1:0)&0x9908B0DF);

  000a0	8b d0		 mov	 edx, eax
  000a2	33 d1		 xor	 edx, ecx
  000a4	81 e2 fe ff ff
	7f		 and	 edx, 2147483646		; 7ffffffeH
  000aa	33 d1		 xor	 edx, ecx
  000ac	8b c8		 mov	 ecx, eax
  000ae	80 e1 01	 and	 cl, 1
  000b1	0f b6 c9	 movzx	 ecx, cl
  000b4	d1 ea		 shr	 edx, 1
  000b6	f7 d9		 neg	 ecx
  000b8	1b c9		 sbb	 ecx, ecx
  000ba	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  000c0	33 d1		 xor	 edx, ecx
  000c2	33 13		 xor	 edx, DWORD PTR [ebx]
  000c4	8b c8		 mov	 ecx, eax
  000c6	89 17		 mov	 DWORD PTR [edi], edx
  000c8	8b 06		 mov	 eax, DWORD PTR [esi]
  000ca	83 c7 04	 add	 edi, 4
  000cd	83 c3 04	 add	 ebx, 4
  000d0	83 c6 04	 add	 esi, 4
  000d3	ff 4d f8	 dec	 DWORD PTR _j$153459[ebp]
  000d6	75 c8		 jne	 SHORT $LL3@reloadMT

; 59   : 	}
; 60   : 
; 61   : 	s1 = this->state[0];

  000d8	8b 55 fc	 mov	 edx, DWORD PTR tv192[ebp]
  000db	8b 12		 mov	 edx, DWORD PTR [edx]

; 62   : 	*p0 = (*pM ^ (((s0 & 0x80000000) | (s1 & 0x7FFFFFFF)) >> 1)) ^ (((s1&1!=0)?-1:0)&0x9908B0DF);

  000dd	8b c2		 mov	 eax, edx
  000df	33 c1		 xor	 eax, ecx
  000e1	25 fe ff ff 7f	 and	 eax, 2147483646		; 7ffffffeH
  000e6	33 c1		 xor	 eax, ecx
  000e8	8b ca		 mov	 ecx, edx
  000ea	80 e1 01	 and	 cl, 1
  000ed	d1 e8		 shr	 eax, 1
  000ef	0f b6 c9	 movzx	 ecx, cl
  000f2	f7 d9		 neg	 ecx
  000f4	1b c9		 sbb	 ecx, ecx
  000f6	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  000fc	33 c1		 xor	 eax, ecx
  000fe	33 03		 xor	 eax, DWORD PTR [ebx]
  00100	89 07		 mov	 DWORD PTR [edi], eax

; 63   : 	s1 ^= s1 >> 11;

  00102	8b c2		 mov	 eax, edx
  00104	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00107	33 d0		 xor	 edx, eax

; 64   : 	s1 ^= (s1 << 7) & 0x9D2C5680;

  00109	8b ca		 mov	 ecx, edx
  0010b	81 e1 ad 58 3a
	ff		 and	 ecx, -12953427		; ff3a58adH
  00111	c1 e1 07	 shl	 ecx, 7
  00114	33 d1		 xor	 edx, ecx

; 65   : 	s1 ^= (s1 << 15) & 0xEFC60000;

  00116	8b c2		 mov	 eax, edx
  00118	25 8c df ff ff	 and	 eax, -8308		; ffffdf8cH
  0011d	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00120	33 d0		 xor	 edx, eax
  00122	5f		 pop	 edi

; 66   : 
; 67   : 	return s1 ^ ( s1 >> 18 );

  00123	8b c2		 mov	 eax, edx
  00125	c1 e8 12	 shr	 eax, 18			; 00000012H
  00128	5e		 pop	 esi
  00129	33 c2		 xor	 eax, edx
  0012b	5b		 pop	 ebx

; 68   : }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c3		 ret	 0
?reloadMT@CLargeRand@@QAEKXZ ENDP			; CLargeRand::reloadMT
_TEXT	ENDS
PUBLIC	?randomMT@CLargeRand@@QAEKXZ			; CLargeRand::randomMT
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\largerand.h
;	COMDAT ?randomMT@CLargeRand@@QAEKXZ
_TEXT	SEGMENT
?randomMT@CLargeRand@@QAEKXZ PROC			; CLargeRand::randomMT, COMDAT
; _this$ = ecx

; 22   : 		this->left--;

  00000	ff 89 cc 09 00
	00		 dec	 DWORD PTR [ecx+2508]

; 23   : 
; 24   : 		if ( this->left< 0 )

  00006	79 05		 jns	 SHORT $LN1@randomMT

; 25   : 		{
; 26   : 			return this->reloadMT();

  00008	e9 00 00 00 00	 jmp	 ?reloadMT@CLargeRand@@QAEKXZ ; CLargeRand::reloadMT
$LN1@randomMT:

; 27   : 		}
; 28   : 
; 29   : 		DWORD y = *next;

  0000d	8b 81 c8 09 00
	00		 mov	 eax, DWORD PTR [ecx+2504]
  00013	8b 10		 mov	 edx, DWORD PTR [eax]

; 30   : 		next++;

  00015	83 c0 04	 add	 eax, 4
  00018	89 81 c8 09 00
	00		 mov	 DWORD PTR [ecx+2504], eax

; 31   : 		y ^= ( (DWORD)y >> (DWORD)11 );

  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00023	33 d0		 xor	 edx, eax

; 32   : 		y ^= ( y << 7 ) & 2636928640;

  00025	8b ca		 mov	 ecx, edx
  00027	81 e1 ad 58 3a
	ff		 and	 ecx, -12953427		; ff3a58adH
  0002d	c1 e1 07	 shl	 ecx, 7
  00030	33 d1		 xor	 edx, ecx

; 33   : 		y ^= ( y << 15 ) & 4022730752;

  00032	8b c2		 mov	 eax, edx
  00034	25 8c df ff ff	 and	 eax, -8308		; ffffdf8cH
  00039	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  0003c	33 d0		 xor	 edx, eax

; 34   : 
; 35   : 		return y ^ ( y >> 18 );

  0003e	8b c2		 mov	 eax, edx
  00040	c1 e8 12	 shr	 eax, 18			; 00000012H
  00043	33 c2		 xor	 eax, edx

; 36   : 	};

  00045	c3		 ret	 0
?randomMT@CLargeRand@@QAEKXZ ENDP			; CLargeRand::randomMT
_TEXT	ENDS
PUBLIC	?GetLargeRand@@YAKXZ				; GetLargeRand
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\largerand.cpp
;	COMDAT ?GetLargeRand@@YAKXZ
_TEXT	SEGMENT
?GetLargeRand@@YAKXZ PROC				; GetLargeRand, COMDAT

; 11   : 	return g_LargLand.randomMT();

  00000	ff 0d cc 09 00
	00		 dec	 DWORD PTR ?g_LargLand@@3VCLargeRand@@A+2508
  00006	79 0a		 jns	 SHORT $LN3@GetLargeRa
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  0000d	e9 00 00 00 00	 jmp	 ?reloadMT@CLargeRand@@QAEKXZ ; CLargeRand::reloadMT
$LN3@GetLargeRa:
  00012	a1 c8 09 00 00	 mov	 eax, DWORD PTR ?g_LargLand@@3VCLargeRand@@A+2504
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	83 c0 04	 add	 eax, 4
  0001c	a3 c8 09 00 00	 mov	 DWORD PTR ?g_LargLand@@3VCLargeRand@@A+2504, eax
  00021	8b c1		 mov	 eax, ecx
  00023	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00026	33 c8		 xor	 ecx, eax
  00028	8b d1		 mov	 edx, ecx
  0002a	81 e2 ad 58 3a
	ff		 and	 edx, -12953427		; ff3a58adH
  00030	c1 e2 07	 shl	 edx, 7
  00033	33 ca		 xor	 ecx, edx
  00035	8b c1		 mov	 eax, ecx
  00037	25 8c df ff ff	 and	 eax, -8308		; ffffdf8cH
  0003c	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  0003f	33 c8		 xor	 ecx, eax
  00041	8b c1		 mov	 eax, ecx
  00043	c1 e8 12	 shr	 eax, 18			; 00000012H
  00046	33 c1		 xor	 eax, ecx

; 12   : }

  00048	c3		 ret	 0
?GetLargeRand@@YAKXZ ENDP				; GetLargeRand
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCLargeRand@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLargeRand@@UAEPAXI@Z PROC				; CLargeRand::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLargeRand@@UAE@XZ	; CLargeRand::~CLargeRand
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCLargeRand@@UAEPAXI@Z ENDP				; CLargeRand::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__Eg_LargLand@@YAXXZ
text$yc	SEGMENT
??__Eg_LargLand@@YAXXZ PROC				; `dynamic initializer for 'g_LargLand'', COMDAT

; 7    : CLargeRand g_LargLand;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  00005	e8 00 00 00 00	 call	 ??0CLargeRand@@QAE@XZ	; CLargeRand::CLargeRand
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_LargLand@@YAXXZ ; `dynamic atexit destructor for 'g_LargLand''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_LargLand@@YAXXZ ENDP				; `dynamic initializer for 'g_LargLand''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__Fg_LargLand@@YAXXZ
text$yd	SEGMENT
??__Fg_LargLand@@YAXXZ PROC				; `dynamic atexit destructor for 'g_LargLand'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_LargLand@@3VCLargeRand@@A ; g_LargLand
  00005	e9 00 00 00 00	 jmp	 ??1CLargeRand@@UAE@XZ	; CLargeRand::~CLargeRand
??__Fg_LargLand@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_LargLand''
text$yd	ENDS
PUBLIC	?g_LargLand@@3VCLargeRand@@A			; g_LargLand
_BSS	SEGMENT
?g_LargLand@@3VCLargeRand@@A DB 09d0H DUP (?)		; g_LargLand
_BSS	ENDS
CRT$XCU	SEGMENT
_g_LargLand$initializer$ DD FLAT:??__Eg_LargLand@@YAXXZ
CRT$XCU	ENDS
END
