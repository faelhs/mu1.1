; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\PacketCheckSum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CPacketCheckSum@@6B@			; CPacketCheckSum::`vftable'
PUBLIC	??1CPacketCheckSum@@UAE@XZ			; CPacketCheckSum::~CPacketCheckSum
PUBLIC	??_R4CPacketCheckSum@@6B@			; CPacketCheckSum::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPacketCheckSum@@@8			; CPacketCheckSum `RTTI Type Descriptor'
PUBLIC	??_R3CPacketCheckSum@@8				; CPacketCheckSum::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPacketCheckSum@@8				; CPacketCheckSum::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPacketCheckSum@@8		; CPacketCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECPacketCheckSum@@UAEPAXI@Z:PROC		; CPacketCheckSum::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CPacketCheckSum@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\packetchecksum.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CPacketCheckSum@@8 DD FLAT:??_R0?AVCPacketCheckSum@@@8 ; CPacketCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R2CPacketCheckSum@@8
rdata$r	SEGMENT
??_R2CPacketCheckSum@@8 DD FLAT:??_R1A@?0A@EA@CPacketCheckSum@@8 ; CPacketCheckSum::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPacketCheckSum@@8
rdata$r	SEGMENT
??_R3CPacketCheckSum@@8 DD 00H				; CPacketCheckSum::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPacketCheckSum@@@8
_DATA	SEGMENT
??_R0?AVCPacketCheckSum@@@8 DD FLAT:??_7type_info@@6B@	; CPacketCheckSum `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPacketCheckSum@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPacketCheckSum@@6B@
rdata$r	SEGMENT
??_R4CPacketCheckSum@@6B@ DD 00H			; CPacketCheckSum::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPacketCheckSum@@@8
	DD	FLAT:??_R3CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_7CPacketCheckSum@@6B@
CONST	SEGMENT
??_7CPacketCheckSum@@6B@ DD FLAT:??_R4CPacketCheckSum@@6B@ ; CPacketCheckSum::`vftable'
	DD	FLAT:??_ECPacketCheckSum@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CPacketCheckSum@@UAE@XZ
_TEXT	SEGMENT
??1CPacketCheckSum@@UAE@XZ PROC				; CPacketCheckSum::~CPacketCheckSum, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CPacketCheckSum@@6B@

; 23   : 	return;
; 24   : }

  00006	c3		 ret	 0
??1CPacketCheckSum@@UAE@XZ ENDP				; CPacketCheckSum::~CPacketCheckSum
_TEXT	ENDS
PUBLIC	?Init@CPacketCheckSum@@QAEXXZ			; CPacketCheckSum::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CPacketCheckSum@@QAEXXZ
_TEXT	SEGMENT
?Init@CPacketCheckSum@@QAEXXZ PROC			; CPacketCheckSum::Init, COMDAT
; _this$ = ecx

; 27   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 28   : 	this->m_ChecksumTableAllClearState = 0;
; 29   : 	memset(this->m_ChecksumTableClearState, 0, sizeof(this->m_ChecksumTableClearState));

  00003	6a 58		 push	 88			; 00000058H
  00005	8d 86 c8 ef 09
	00		 lea	 eax, DWORD PTR [esi+651208]
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	c7 86 c4 ef 09
	00 00 00 00 00	 mov	 DWORD PTR [esi+651204], 0
  00018	e8 00 00 00 00	 call	 _memset

; 30   : 	memset(this->m_ChecksumTableAVGCount, 0, sizeof(this->m_ChecksumTableAVGCount));

  0001d	6a 58		 push	 88			; 00000058H
  0001f	8d 8e 20 f0 09
	00		 lea	 ecx, DWORD PTR [esi+651296]
  00025	6a 00		 push	 0
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _memset

; 31   : 	memset(this->m_ChecksumTableAVG, 0, sizeof(this->m_ChecksumTableAVG));

  0002d	68 60 22 00 00	 push	 8800			; 00002260H
  00032	8d 96 78 f0 09
	00		 lea	 edx, DWORD PTR [esi+651384]
  00038	6a 00		 push	 0
  0003a	52		 push	 edx
  0003b	e8 00 00 00 00	 call	 _memset

; 32   : 	memset(this->PaketChecksum, 0, sizeof(this->PaketChecksum));

  00040	68 c0 ef 09 00	 push	 651200			; 0009efc0H
  00045	6a 00		 push	 0
  00047	83 c6 04	 add	 esi, 4
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _memset
  00050	83 c4 30	 add	 esp, 48			; 00000030H
  00053	5e		 pop	 esi

; 33   : }

  00054	c3		 ret	 0
?Init@CPacketCheckSum@@QAEXXZ ENDP			; CPacketCheckSum::Init
_TEXT	ENDS
PUBLIC	?ClearCheckSum@CPacketCheckSum@@QAEXH@Z		; CPacketCheckSum::ClearCheckSum
; Function compile flags: /Ogtp
;	COMDAT ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?ClearCheckSum@CPacketCheckSum@@QAEXH@Z PROC		; CPacketCheckSum::ClearCheckSum, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	memset(&this->PaketChecksum[aIndex], 0, sizeof(PAKETCHECKSUM) );

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	6b c0 58	 imul	 eax, 88			; 00000058H
  00009	6a 58		 push	 88			; 00000058H
  0000b	8d 4c 08 04	 lea	 ecx, DWORD PTR [eax+ecx+4]
  0000f	6a 00		 push	 0
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 74   : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ENDP		; CPacketCheckSum::ClearCheckSum
_TEXT	ENDS
PUBLIC	??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ ; `string'
PUBLIC	??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Add@CPacketCheckSum@@QAEHHHK@Z			; CPacketCheckSum::Add
EXTRN	?gObjCloseSet@@YAXHH@Z:PROC			; gObjCloseSet
EXTRN	?gDisconnectHackUser@@3HA:DWORD			; gDisconnectHackUser
EXTRN	?Send@CSendHackLog@@QAEXHEPAD@Z:PROC		; CSendHackLog::Send
EXTRN	?gSendHackLog@@3VCSendHackLog@@A:BYTE		; gSendHackLog
EXTRN	__imp__wsprintfA:PROC
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
CONST	SEGMENT
??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ DB 'PacketChec'
	DB	'kSum : Compare Fail : (%d,%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
CONST	SEGMENT
??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ DB 'PacketChe'
	DB	'ckSum : Compare Fail : [%d][%s][%s] (%d,%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Add@CPacketCheckSum@@QAEHHHK@Z
_TEXT	SEGMENT
_szPacketError$153542 = -260				; size = 256
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_funcindex$ = 12					; size = 4
_checksum$ = 16						; size = 4
?Add@CPacketCheckSum@@QAEHHHK@Z PROC			; CPacketCheckSum::Add, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00017	8b c1		 mov	 eax, ecx

; 78   : 	/*if ( gObj[aIndex].m_InWebzen != false )
; 79   : 	{
; 80   : 		return true;
; 81   : 	}*/
; 82   : 
; 83   : 	if ( this->m_ChecksumTableAllClearState == 0 )

  00019	83 b8 c4 ef 09
	00 00		 cmp	 DWORD PTR [eax+651204], 0
  00020	57		 push	 edi
  00021	8b 7d 0c	 mov	 edi, DWORD PTR _funcindex$[ebp]
  00024	75 0e		 jne	 SHORT $LN4@Add

; 84   : 	{
; 85   : 		this->PaketChecksum[aIndex].Check[funcindex] = checksum;

  00026	8b 4d 10	 mov	 ecx, DWORD PTR _checksum$[ebp]
  00029	6b f6 16	 imul	 esi, 22			; 00000016H
  0002c	03 f7		 add	 esi, edi
  0002e	89 4c b0 04	 mov	 DWORD PTR [eax+esi*4+4], ecx

; 86   : 		return TRUE;

  00032	eb 7d		 jmp	 SHORT $LN7@Add
$LN4@Add:
  00034	53		 push	 ebx

; 87   : 	}
; 88   : 	if ( this->m_ChecksumTable[funcindex] == checksum )

  00035	8b 5d 10	 mov	 ebx, DWORD PTR _checksum$[ebp]
  00038	39 9c b8 d8 12
	0a 00		 cmp	 DWORD PTR [eax+edi*4+660184], ebx
  0003f	75 0b		 jne	 SHORT $LN3@Add

; 89   : 	{
; 90   : 		this->PaketChecksum[aIndex].Check[funcindex] = checksum;

  00041	6b f6 16	 imul	 esi, 22			; 00000016H
  00044	03 f7		 add	 esi, edi
  00046	89 5c b0 04	 mov	 DWORD PTR [eax+esi*4+4], ebx

; 91   : 	}
; 92   : 	else

  0004a	eb 64		 jmp	 SHORT $LN1@Add
$LN3@Add:

; 93   : 	{
; 94   : 		char szPacketError[256];
; 95   : 
; 96   : 		LogAdd(LOG_BLACK, "PacketCheckSum : Compare Fail : [%d][%s][%s] (%d,%d)", aIndex,
; 97   : 			gObj[aIndex].AccountID, gObj[aIndex].Name, funcindex, checksum);

  0004c	8b c6		 mov	 eax, esi
  0004e	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  00054	53		 push	 ebx
  00055	57		 push	 edi
  00056	8d 90 6f 00 00
	00		 lea	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+111]
  0005c	52		 push	 edx
  0005d	8d 80 64 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+100]
  00063	50		 push	 eax
  00064	56		 push	 esi
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
  0006a	6a 00		 push	 0
  0006c	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 98   : 
; 99   : 		wsprintf(szPacketError, "PacketCheckSum : Compare Fail : (%d,%d)", funcindex, checksum);

  00071	53		 push	 ebx
  00072	57		 push	 edi
  00073	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szPacketError$153542[ebp]
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EDBIGLK@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
  0007e	51		 push	 ecx
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00085	83 c4 2c	 add	 esp, 44			; 0000002cH

; 100  : 		gSendHackLog.Send(aIndex, 1, szPacketError);

  00088	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szPacketError$153542[ebp]
  0008e	52		 push	 edx
  0008f	6a 01		 push	 1
  00091	56		 push	 esi
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSendHackLog@@3VCSendHackLog@@A ; gSendHackLog
  00097	e8 00 00 00 00	 call	 ?Send@CSendHackLog@@QAEXHEPAD@Z ; CSendHackLog::Send

; 101  : 
; 102  : 		if ( gDisconnectHackUser != FALSE )

  0009c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDisconnectHackUser@@3HA, 0 ; gDisconnectHackUser
  000a3	74 0b		 je	 SHORT $LN1@Add

; 103  : 		{
; 104  : 			gObjCloseSet(aIndex, 0);

  000a5	6a 00		 push	 0
  000a7	56		 push	 esi
  000a8	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet
  000ad	83 c4 08	 add	 esp, 8
$LN1@Add:
  000b0	5b		 pop	 ebx
$LN7@Add:

; 105  : 		}
; 106  : 	}
; 107  : 
; 108  : 	return TRUE;
; 109  : }

  000b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b4	5f		 pop	 edi
  000b5	33 cd		 xor	 ecx, ebp
  000b7	b8 01 00 00 00	 mov	 eax, 1
  000bc	5e		 pop	 esi
  000bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 0c 00	 ret	 12			; 0000000cH
?Add@CPacketCheckSum@@QAEHHHK@Z ENDP			; CPacketCheckSum::Add
_TEXT	ENDS
PUBLIC	??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@ ; `string'
PUBLIC	?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z	; CPacketCheckSum::SetClearChecksumFunc
;	COMDAT ??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@ DB '%d, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@
CONST	SEGMENT
??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@ DB 'Complete Init Checks'
	DB	'um', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
tv799 = 8						; size = 4
_funcindex$ = 8						; size = 4
?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z PROC	; CPacketCheckSum::SetClearChecksumFunc, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 148  : 	int Checksum = this->m_ChecksumTableAVG[funcindex][0];

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _funcindex$[ebp]
  00007	8b c3		 mov	 eax, ebx
  00009	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  0000f	56		 push	 esi
  00010	8b b4 08 78 f0
	09 00		 mov	 esi, DWORD PTR [eax+ecx+651384]
  00017	03 c1		 add	 eax, ecx
  00019	33 d2		 xor	 edx, edx
  0001b	57		 push	 edi
  0001c	05 7c f0 09 00	 add	 eax, 651388		; 0009f07cH
  00021	8d 7a 14	 lea	 edi, DWORD PTR [edx+20]
$LL13@SetClearCh:

; 151  : 	{
; 152  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  00024	39 70 fc	 cmp	 DWORD PTR [eax-4], esi
  00027	75 01		 jne	 SHORT $LN12@SetClearCh

; 153  : 		{
; 154  : 			iCount++;

  00029	42		 inc	 edx
$LN12@SetClearCh:

; 151  : 	{
; 152  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  0002a	39 30		 cmp	 DWORD PTR [eax], esi
  0002c	75 01		 jne	 SHORT $LN23@SetClearCh

; 153  : 		{
; 154  : 			iCount++;

  0002e	42		 inc	 edx
$LN23@SetClearCh:

; 151  : 	{
; 152  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  0002f	39 70 04	 cmp	 DWORD PTR [eax+4], esi
  00032	75 01		 jne	 SHORT $LN24@SetClearCh

; 153  : 		{
; 154  : 			iCount++;

  00034	42		 inc	 edx
$LN24@SetClearCh:

; 151  : 	{
; 152  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  00035	39 70 08	 cmp	 DWORD PTR [eax+8], esi
  00038	75 01		 jne	 SHORT $LN25@SetClearCh

; 153  : 		{
; 154  : 			iCount++;

  0003a	42		 inc	 edx
$LN25@SetClearCh:

; 151  : 	{
; 152  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  0003b	39 70 0c	 cmp	 DWORD PTR [eax+12], esi
  0003e	75 01		 jne	 SHORT $LN26@SetClearCh

; 153  : 		{
; 154  : 			iCount++;

  00040	42		 inc	 edx
$LN26@SetClearCh:

; 147  : 	int iCount = 0;

  00041	83 c0 14	 add	 eax, 20			; 00000014H

; 149  : 
; 150  : 	for (int i=0;i<MAX_CHECKSUM_TABLE_AVG;i++)

  00044	4f		 dec	 edi
  00045	75 dd		 jne	 SHORT $LL13@SetClearCh

; 155  : 		}
; 156  : 	}
; 157  : 
; 158  : 	if ( iCount >= MAX_CHECKSUM_TABLE_AVG-1 )

  00047	83 fa 63	 cmp	 edx, 99			; 00000063H
  0004a	0f 8c 94 00 00
	00		 jl	 $LN1@SetClearCh

; 159  : 	{
; 160  : 		this->m_ChecksumTableClearState[funcindex] = 1;

  00050	b8 01 00 00 00	 mov	 eax, 1
  00055	89 84 99 c8 ef
	09 00		 mov	 DWORD PTR [ecx+ebx*4+651208], eax
  0005c	8d b9 d8 12 0a
	00		 lea	 edi, DWORD PTR [ecx+660184]
  00062	8d 91 78 f0 09
	00		 lea	 edx, DWORD PTR [ecx+651384]

; 161  : 		this->m_ChecksumTableAllClearState = TRUE;

  00068	89 81 c4 ef 09
	00		 mov	 DWORD PTR [ecx+651204], eax
  0006e	8b c7		 mov	 eax, edi
  00070	89 55 08	 mov	 DWORD PTR tv799[ebp], edx
  00073	be 16 00 00 00	 mov	 esi, 22			; 00000016H
  00078	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL28@SetClearCh:

; 162  : 
; 163  : 		for (int i=0;i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX;i++)
; 164  : 		{
; 165  : 			if ( this->m_ChecksumTableClearState[i] == 0 )

  00080	83 b8 f0 dc ff
	ff 00		 cmp	 DWORD PTR [eax-8976], 0
  00087	75 0a		 jne	 SHORT $LN5@SetClearCh

; 166  : 			{
; 167  : 				this->m_ChecksumTableAllClearState = FALSE;

  00089	c7 81 c4 ef 09
	00 00 00 00 00	 mov	 DWORD PTR [ecx+651204], 0
$LN5@SetClearCh:

; 168  : 			}
; 169  : 
; 170  : 			this->m_ChecksumTable[i] = this->m_ChecksumTableAVG[i][0];

  00093	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00095	89 18		 mov	 DWORD PTR [eax], ebx
  00097	83 c0 04	 add	 eax, 4
  0009a	81 c2 90 01 00
	00		 add	 edx, 400		; 00000190H
  000a0	4e		 dec	 esi
  000a1	75 dd		 jne	 SHORT $LL28@SetClearCh

; 171  : 		}
; 172  : 
; 173  : 		if ( this->m_ChecksumTableAllClearState != FALSE )

  000a3	39 b1 c4 ef 09
	00		 cmp	 DWORD PTR [ecx+651204], esi
  000a9	74 39		 je	 SHORT $LN1@SetClearCh

; 174  : 		{
; 175  : 			LogAdd(LOG_BLACK, "Complete Init Checksum");

  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@
  000b0	56		 push	 esi
  000b1	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000b6	8b 5d 08	 mov	 ebx, DWORD PTR tv799[ebp]
  000b9	83 c4 08	 add	 esp, 8
  000bc	8d 64 24 00	 npad	 4
$LL3@SetClearCh:

; 176  : 
; 177  : 			for (int i=0;i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX;i++)
; 178  : 			{
; 179  : 				this->m_ChecksumTable[i] = this->m_ChecksumTableAVG[i][0];

  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 180  : 				LogAdd(LOG_BLACK, "%d, %d", i, this->m_ChecksumTable[i]);

  000c2	50		 push	 eax
  000c3	56		 push	 esi
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@
  000c9	6a 00		 push	 0
  000cb	89 07		 mov	 DWORD PTR [edi], eax
  000cd	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  000d2	46		 inc	 esi
  000d3	83 c4 10	 add	 esp, 16			; 00000010H
  000d6	83 c7 04	 add	 edi, 4
  000d9	81 c3 90 01 00
	00		 add	 ebx, 400		; 00000190H
  000df	83 fe 16	 cmp	 esi, 22			; 00000016H
  000e2	7c dc		 jl	 SHORT $LL3@SetClearCh
$LN1@SetClearCh:
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx

; 181  : 			}
; 182  : 		}
; 183  : 	}
; 184  : }

  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z ENDP	; CPacketCheckSum::SetClearChecksumFunc
_TEXT	ENDS
PUBLIC	??0CPacketCheckSum@@QAE@XZ			; CPacketCheckSum::CPacketCheckSum
; Function compile flags: /Ogtp
;	COMDAT ??0CPacketCheckSum@@QAE@XZ
_TEXT	SEGMENT
??0CPacketCheckSum@@QAE@XZ PROC				; CPacketCheckSum::CPacketCheckSum, COMDAT
; _this$ = ecx

; 16   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPacketCheckSum@@6B@

; 17   : 	this->Init();

  00009	e8 00 00 00 00	 call	 ?Init@CPacketCheckSum@@QAEXXZ ; CPacketCheckSum::Init

; 18   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CPacketCheckSum@@QAE@XZ ENDP				; CPacketCheckSum::CPacketCheckSum
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCPacketCheckSum@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPacketCheckSum@@UAEPAXI@Z PROC			; CPacketCheckSum::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPacketCheckSum@@UAE@XZ ; CPacketCheckSum::~CPacketCheckSum
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCPacketCheckSum@@UAEPAXI@Z ENDP			; CPacketCheckSum::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Check@CPacketCheckSum@@QAEXH@Z			; CPacketCheckSum::Check
;	COMDAT ??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@ DB 'PacketCheckSum E'
	DB	'rror %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ DB 'P'
	DB	'acketCheckSum Error [%d][%s][%s] %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ DB 'C'
	DB	'heck PacketCheckSum [%d][%s][%s]', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Check@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
_szPacketError$153523 = -260				; size = 256
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?Check@CPacketCheckSum@@QAEXH@Z PROC			; CPacketCheckSum::Check, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00018	57		 push	 edi

; 44   : 	{
; 45   : 		if ( this->PaketChecksum[aIndex].Check[i] == 0 )

  00019	8b c6		 mov	 eax, esi
  0001b	33 ff		 xor	 edi, edi
  0001d	6b c0 58	 imul	 eax, 88			; 00000058H
  00020	8b d9		 mov	 ebx, ecx
  00022	8d 44 18 04	 lea	 eax, DWORD PTR [eax+ebx+4]
$LL5@Check:
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	74 4a		 je	 SHORT $LN9@Check

; 38   : 	//if ( gObj[aIndex].m_InWebzen != false )	// Olny for Local Test and Test Mains
; 39   : 	//{
; 40   : 	//	return;
; 41   : 	//}
; 42   : 
; 43   : 	for (int i=0 ; i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX ; i++)

  0002b	47		 inc	 edi
  0002c	83 c0 04	 add	 eax, 4
  0002f	83 ff 16	 cmp	 edi, 22			; 00000016H
  00032	7c f2		 jl	 SHORT $LL5@Check

; 61   : 			}
; 62   : 
; 63   : 			return;
; 64   : 		}
; 65   : 	}
; 66   : 
; 67   : 	LogAdd(LOG_BLACK, "Check PacketCheckSum [%d][%s][%s]", aIndex, gObj[aIndex].AccountID, gObj[aIndex].Name);

  00034	8b c6		 mov	 eax, esi
  00036	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  0003c	8d 90 6f 00 00
	00		 lea	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+111]
  00042	52		 push	 edx
  00043	8d 80 64 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+100]
  00049	50		 push	 eax
  0004a	56		 push	 esi
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
  00050	6a 00		 push	 0
  00052	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00057	83 c4 14	 add	 esp, 20			; 00000014H

; 68   : 	this->ClearCheckSum(aIndex);

  0005a	56		 push	 esi
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::ClearCheckSum
$LN6@Check:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx

; 69   : }

  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN9@Check:

; 46   : 		{
; 47   : 			char szPacketError[256];
; 48   : 
; 49   : 			LogAdd(LOG_BLACK, "PacketCheckSum Error [%d][%s][%s] %d",
; 50   : 				aIndex, gObj[aIndex].AccountID, gObj[aIndex].Name, i);

  00075	8b c6		 mov	 eax, esi
  00077	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  0007d	57		 push	 edi
  0007e	8d 88 6f 00 00
	00		 lea	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+111]
  00084	51		 push	 ecx
  00085	8d 90 64 00 00
	00		 lea	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+100]
  0008b	52		 push	 edx
  0008c	56		 push	 esi
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
  00092	6a 00		 push	 0
  00094	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 51   : 			
; 52   : 			wsprintf(szPacketError, "PacketCheckSum Error %d", i);

  00099	57		 push	 edi
  0009a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szPacketError$153523[ebp]
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GEHHKNPN@PacketCheckSum?5Error?5?$CFd?$AA@
  000a5	50		 push	 eax
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000ac	83 c4 24	 add	 esp, 36			; 00000024H

; 53   : 
; 54   : 			gSendHackLog.Send(aIndex, 1, szPacketError);	// Hack Log Server

  000af	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szPacketError$153523[ebp]
  000b5	51		 push	 ecx
  000b6	6a 01		 push	 1
  000b8	56		 push	 esi
  000b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSendHackLog@@3VCSendHackLog@@A ; gSendHackLog
  000be	e8 00 00 00 00	 call	 ?Send@CSendHackLog@@QAEXHEPAD@Z ; CSendHackLog::Send

; 55   : 
; 56   : 			this->ClearCheckSum(aIndex);

  000c3	56		 push	 esi
  000c4	8b cb		 mov	 ecx, ebx
  000c6	e8 00 00 00 00	 call	 ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::ClearCheckSum

; 57   : 
; 58   : 			if ( gDisconnectHackUser != FALSE )

  000cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDisconnectHackUser@@3HA, 0 ; gDisconnectHackUser
  000d2	74 8e		 je	 SHORT $LN6@Check

; 59   : 			{
; 60   : 				gObjCloseSet(aIndex, 0);

  000d4	6a 00		 push	 0
  000d6	56		 push	 esi
  000d7	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet

; 69   : }

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000df	83 c4 08	 add	 esp, 8
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	33 cd		 xor	 ecx, ebp
  000e6	5b		 pop	 ebx
  000e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c2 04 00	 ret	 4
?Check@CPacketCheckSum@@QAEXH@Z ENDP			; CPacketCheckSum::Check
_TEXT	ENDS
PUBLIC	??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@ ; `string'
PUBLIC	??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z		; CPacketCheckSum::AddCheckSum
;	COMDAT ??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@
CONST	SEGMENT
??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@ DB 'PacketCheckS'
	DB	'um : Invalid FuncIndex : %d, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@ DB 'I'
	DB	'nsert PacketCheckSum %d, %d,%d', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_funcindex$ = 12					; size = 4
_checksum$ = 16						; size = 4
?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z PROC		; CPacketCheckSum::AddCheckSum, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 113  : 	if ( funcindex < 0 || funcindex >= MAX_PACKET_CHECKSUM_FUNCTION_INDEX )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _funcindex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 fe 15	 cmp	 esi, 21			; 00000015H
  0000d	77 78		 ja	 SHORT $LN4@AddCheckSu

; 116  : 		return;
; 117  : 	}
; 118  : 
; 119  : 	this->Add(aIndex, funcindex, checksum);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00012	53		 push	 ebx
  00013	8b 5d 10	 mov	 ebx, DWORD PTR _checksum$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Add@CPacketCheckSum@@QAEHHHK@Z ; CPacketCheckSum::Add

; 120  : 
; 121  : 	if ( this->m_ChecksumTableAllClearState != 0 )

  0001e	83 bf c4 ef 09
	00 00		 cmp	 DWORD PTR [edi+651204], 0
  00025	75 59		 jne	 SHORT $LN8@AddCheckSu

; 122  : 	{
; 123  : 		return;
; 124  : 	}
; 125  : 
; 126  : 	if ( this->m_ChecksumTableClearState[funcindex] != 0 )

  00027	83 bc b7 c8 ef
	09 00 00	 cmp	 DWORD PTR [edi+esi*4+651208], 0
  0002f	75 4f		 jne	 SHORT $LN8@AddCheckSu

; 127  : 	{
; 128  : 		return;
; 129  : 	}
; 130  : 
; 131  : 	this->m_ChecksumTableAVG[funcindex][this->m_ChecksumTableAVGCount[funcindex] % MAX_CHECKSUM_TABLE_AVG] = checksum;

  00031	8b 84 b7 20 f0
	09 00		 mov	 eax, DWORD PTR [edi+esi*4+651296]
  00038	99		 cdq
  00039	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003e	f7 f9		 idiv	 ecx
  00040	8b c6		 mov	 eax, esi
  00042	6b c0 64	 imul	 eax, 100		; 00000064H

; 132  : 	this->m_ChecksumTableAVGCount[funcindex]++;
; 133  : 
; 134  : 	LogAdd(LOG_BLACK, "Insert PacketCheckSum %d, %d,%d", funcindex, this->m_ChecksumTableAVGCount[funcindex], checksum);

  00045	53		 push	 ebx
  00046	03 d0		 add	 edx, eax
  00048	89 9c 97 78 f0
	09 00		 mov	 DWORD PTR [edi+edx*4+651384], ebx
  0004f	ff 84 b7 20 f0
	09 00		 inc	 DWORD PTR [edi+esi*4+651296]
  00056	8b 84 b7 20 f0
	09 00		 mov	 eax, DWORD PTR [edi+esi*4+651296]
  0005d	50		 push	 eax
  0005e	56		 push	 esi
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@
  00064	6a 00		 push	 0
  00066	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0006b	83 c4 14	 add	 esp, 20			; 00000014H

; 135  : 
; 136  : 	if ( this->m_ChecksumTableAVGCount[funcindex] >= MAX_CHECKSUM_TABLE_AVG )

  0006e	83 bc b7 20 f0
	09 00 64	 cmp	 DWORD PTR [edi+esi*4+651296], 100 ; 00000064H
  00076	7c 08		 jl	 SHORT $LN8@AddCheckSu

; 137  : 	{
; 138  : 		this->SetClearChecksumFunc(funcindex);

  00078	56		 push	 esi
  00079	8b cf		 mov	 ecx, edi
  0007b	e8 00 00 00 00	 call	 ?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::SetClearChecksumFunc
$LN8@AddCheckSu:
  00080	5b		 pop	 ebx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 139  : 	}
; 140  : }

  00083	5d		 pop	 ebp
  00084	c2 0c 00	 ret	 12			; 0000000cH
$LN4@AddCheckSu:

; 114  : 	{
; 115  : 		LogAdd(LOG_BLACK, "PacketCheckSum : Invalid FuncIndex : %d, %d", aIndex, funcindex);

  00087	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0008a	56		 push	 esi
  0008b	51		 push	 ecx
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@
  00091	6a 00		 push	 0
  00093	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00098	83 c4 10	 add	 esp, 16			; 00000010H
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi

; 139  : 	}
; 140  : }

  0009d	5d		 pop	 ebp
  0009e	c2 0c 00	 ret	 12			; 0000000cH
?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z ENDP		; CPacketCheckSum::AddCheckSum
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgPacketCheckSum@@YAXXZ
text$yc	SEGMENT
??__EgPacketCheckSum@@YAXXZ PROC			; `dynamic initializer for 'gPacketCheckSum'', COMDAT

; 11   : CPacketCheckSum gPacketCheckSum;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPacketCheckSum@@3VCPacketCheckSum@@A ; gPacketCheckSum
  00005	e8 00 00 00 00	 call	 ??0CPacketCheckSum@@QAE@XZ ; CPacketCheckSum::CPacketCheckSum
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgPacketCheckSum@@YAXXZ ; `dynamic atexit destructor for 'gPacketCheckSum''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgPacketCheckSum@@YAXXZ ENDP			; `dynamic initializer for 'gPacketCheckSum''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgPacketCheckSum@@YAXXZ
text$yd	SEGMENT
??__FgPacketCheckSum@@YAXXZ PROC			; `dynamic atexit destructor for 'gPacketCheckSum'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPacketCheckSum@@3VCPacketCheckSum@@A ; gPacketCheckSum
  00005	e9 00 00 00 00	 jmp	 ??1CPacketCheckSum@@UAE@XZ ; CPacketCheckSum::~CPacketCheckSum
??__FgPacketCheckSum@@YAXXZ ENDP			; `dynamic atexit destructor for 'gPacketCheckSum''
text$yd	ENDS
PUBLIC	?gPacketCheckSum@@3VCPacketCheckSum@@A		; gPacketCheckSum
_BSS	SEGMENT
?gPacketCheckSum@@3VCPacketCheckSum@@A DB 0a1330H DUP (?) ; gPacketCheckSum
_BSS	ENDS
CRT$XCU	SEGMENT
_gPacketCheckSum$initializer$ DD FLAT:??__EgPacketCheckSum@@YAXXZ
CRT$XCU	ENDS
END
