; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\TUnionInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SetUnionMaster@TUnionInfo@@QAEHHPAD@Z		; TUnionInfo::SetUnionMaster
EXTRN	?Unlock@TSync@@QAEXXZ:PROC			; TSync::Unlock
EXTRN	?Lock@TSync@@QAEXXZ:PROC			; TSync::Lock
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\tunioninfo.cpp
;	COMDAT ?SetUnionMaster@TUnionInfo@@QAEHHPAD@Z
_TEXT	SEGMENT
_iGuildNumber$ = 8					; size = 4
_szGuildName$ = 12					; size = 4
?SetUnionMaster@TUnionInfo@@QAEHHPAD@Z PROC		; TUnionInfo::SetUnionMaster, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 83   : 	this->m_Sync.Lock();

  00007	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0000a	e8 00 00 00 00	 call	 ?Lock@TSync@@QAEXXZ	; TSync::Lock

; 84   : 	this->m_iMasterGuild = iGuildNumber;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _iGuildNumber$[ebp]
  00012	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 85   : 	memcpy(this->m_szMasterGuild, szGuildName, sizeof(this->m_szMasterGuild)-1);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _szGuildName$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0001d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 86   : 	this->m_Sync.Unlock();

  00020	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00023	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00026	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  0002b	5f		 pop	 edi

; 87   : 
; 88   : 	return TRUE;

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	5e		 pop	 esi

; 89   : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?SetUnionMaster@TUnionInfo@@QAEHHPAD@Z ENDP		; TUnionInfo::SetUnionMaster
_TEXT	ENDS
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	83 c4 04	 add	 esp, 4

; 183  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Find@PAHH@std@@YAPAHPAH0ABH@Z		; std::_Find<int *,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Find@PAHH@std@@YAPAHPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Find@PAHH@std@@YAPAHPAH0ABH@Z PROC			; std::_Find<int *,int>, COMDAT

; 39   : 	{	// find first matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	for (; _First != _Last; ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	3b c1		 cmp	 eax, ecx
  0000b	74 10		 je	 SHORT $LN8@Find
  0000d	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00010	8b 12		 mov	 edx, DWORD PTR [edx]
$LL4@Find:

; 41   : 		if (*_First == _Val)

  00012	39 10		 cmp	 DWORD PTR [eax], edx
  00014	74 07		 je	 SHORT $LN8@Find

; 40   : 	for (; _First != _Last; ++_First)

  00016	83 c0 04	 add	 eax, 4
  00019	3b c1		 cmp	 eax, ecx
  0001b	75 f5		 jne	 SHORT $LL4@Find
$LN8@Find:

; 42   : 			break;
; 43   : 	return (_First);
; 44   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Find@PAHH@std@@YAPAHPAH0ABH@Z ENDP			; std::_Find<int *,int>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<int *,int *>
EXTRN	_memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,int *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	2b c1		 sub	 eax, ecx
  0000c	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	c1 f8 02	 sar	 eax, 2
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0001a	56		 push	 esi
  0001b	51		 push	 ecx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00025	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2527 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	?_Rechecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV12@PAH@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Rechecked
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Rechecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV12@PAH@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV12@PAH@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Rechecked, COMDAT
; _this$ = ecx

; 310  : 		{	// reset from unchecked iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 311  : 		this->_Ptr = _Right;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 312  : 		return (*this);
; 313  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAEAAV12@PAH@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Rechecked
_TEXT	ENDS
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked
; Function compile flags: /Ogtp
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked, COMDAT
; _this$ = ecx

; 317  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 318  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBEPAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Unchecked
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 38   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?GetUnionMemberCount@TUnionInfo@@QAEHXZ		; TUnionInfo::GetUnionMemberCount
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\tunioninfo.cpp
;	COMDAT ?GetUnionMemberCount@TUnionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetUnionMemberCount@TUnionInfo@@QAEHXZ PROC		; TUnionInfo::GetUnionMemberCount, COMDAT
; _this$ = ecx

; 24   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 25   : 	int iCount = 0;
; 26   : 
; 27   : 	this->m_Sync.Lock();

  00005	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00008	e8 00 00 00 00	 call	 ?Lock@TSync@@QAEXXZ	; TSync::Lock

; 28   : 	iCount = this->m_vtUnionMember.size();

  0000d	8b 77 20	 mov	 esi, DWORD PTR [edi+32]
  00010	2b 77 1c	 sub	 esi, DWORD PTR [edi+28]

; 29   : 	this->m_Sync.Unlock();

  00013	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00016	c1 fe 02	 sar	 esi, 2
  00019	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  0001e	5f		 pop	 edi

; 30   : 
; 31   : 	return iCount;

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx

; 32   : }

  00023	c3		 ret	 0
?GetUnionMemberCount@TUnionInfo@@QAEHXZ ENDP		; TUnionInfo::GetUnionMemberCount
_TEXT	ENDS
PUBLIC	?GetRivalMemberCount@TUnionInfo@@QAEHXZ		; TUnionInfo::GetRivalMemberCount
; Function compile flags: /Ogtp
;	COMDAT ?GetRivalMemberCount@TUnionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetRivalMemberCount@TUnionInfo@@QAEHXZ PROC		; TUnionInfo::GetRivalMemberCount, COMDAT
; _this$ = ecx

; 36   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 37   : 	int iCount = 0;
; 38   : 
; 39   : 	this->m_Sync.Lock();

  00005	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00008	e8 00 00 00 00	 call	 ?Lock@TSync@@QAEXXZ	; TSync::Lock

; 40   : 	iCount = this->m_vtRivalMember.size();

  0000d	8b 77 30	 mov	 esi, DWORD PTR [edi+48]
  00010	2b 77 2c	 sub	 esi, DWORD PTR [edi+44]

; 41   : 	this->m_Sync.Unlock();

  00013	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00016	c1 fe 02	 sar	 esi, 2
  00019	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  0001e	5f		 pop	 edi

; 42   : 
; 43   : 	return iCount;

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx

; 44   : }

  00023	c3		 ret	 0
?GetRivalMemberCount@TUnionInfo@@QAEHXZ ENDP		; TUnionInfo::GetRivalMemberCount
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 94 c0	 sete	 al

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??$_Move@PAHPAH@std@@YAPAHPAH00@Z		; std::_Move<int *,int *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAHPAH@std@@YAPAHPAH00@Z PROC			; std::_Move<int *,int *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi
  0000a	2b c1		 sub	 eax, ecx
  0000c	57		 push	 edi
  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00010	c1 f8 02	 sar	 eax, 2
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  0001a	56		 push	 esi
  0001b	51		 push	 ecx
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2536 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00@Z ENDP			; std::_Move<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >, COMDAT

; 393  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 394  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 395  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??$_Rechecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAV10@PAH@Z ; std::_Rechecked<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Rechecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAV10@PAH@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Rechecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAV10@PAH@Z PROC ; std::_Rechecked<std::_Vector_val<int,std::allocator<int> > >, COMDAT

; 402  : 	{	// convert to checked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 403  : 	return (_Iter._Rechecked(_Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 404  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@AAV10@PAH@Z ENDP ; std::_Rechecked<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<int,std::allocator<int> > >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Ogtp
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	??$find@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@H@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@V10@0ABH@Z ; std::find<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >,int>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$find@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@H@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@V10@0ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$find@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@H@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@V10@0ABH@Z PROC ; std::find<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >,int>, COMDAT

; 71   : 	{	// find first matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 	_DEBUG_RANGE(_First, _Last);
; 73   : 	return (_Rechecked(_First,
; 74   : 		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	3b c8		 cmp	 ecx, eax
  0000b	74 10		 je	 SHORT $LN25@find
  0000d	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  00010	8b 12		 mov	 edx, DWORD PTR [edx]
$LL14@find:
  00012	39 11		 cmp	 DWORD PTR [ecx], edx
  00014	74 07		 je	 SHORT $LN25@find
  00016	83 c1 04	 add	 ecx, 4
  00019	3b c8		 cmp	 ecx, eax
  0001b	75 f5		 jne	 SHORT $LL14@find
$LN25@find:
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 75   : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$find@V?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@std@@H@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@0@V10@0ABH@Z ENDP ; std::find<std::_Vector_iterator<std::_Vector_val<int,std::allocator<int> > >,int>
_TEXT	ENDS
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);
; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  00003	8b 55 10	 mov	 edx, DWORD PTR __Last_arg$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
  00011	3b ca		 cmp	 ecx, edx
  00013	74 28		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00015	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00018	53		 push	 ebx
  00019	2b c2		 sub	 eax, edx
  0001b	56		 push	 esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00026	56		 push	 esi
  00027	52		 push	 edx
  00028	51		 push	 ecx
  00029	8b d9		 mov	 ebx, ecx
  0002b	e8 00 00 00 00	 call	 _memmove

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;
; 1212 : 			}
; 1213 : 		return (_First);

  00030	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	03 f3		 add	 esi, ebx
  00038	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
$LN1@erase:
  0003d	5f		 pop	 edi

; 1214 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@HV?$allocator@H@std@@@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();
; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN6@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 1312 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	?IsUnionMember@TUnionInfo@@QAEHH@Z		; TUnionInfo::IsUnionMember
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\tunioninfo.cpp
;	COMDAT ?IsUnionMember@TUnionInfo@@QAEHH@Z
_TEXT	SEGMENT
_iGuildNumber$ = 8					; size = 4
?IsUnionMember@TUnionInfo@@QAEHH@Z PROC			; TUnionInfo::IsUnionMember, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 49   : 	this->m_Sync.Lock();

  00007	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0000a	e8 00 00 00 00	 call	 ?Lock@TSync@@QAEXXZ	; TSync::Lock

; 50   : 	std::vector<int>::iterator _Itor = std::find(this->m_vtUnionMember.begin(), this->m_vtUnionMember.end(), iGuildNumber );

  0000f	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00012	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00015	3b c1		 cmp	 eax, ecx
  00017	74 29		 je	 SHORT $LN1@IsUnionMem
  00019	8b 55 08	 mov	 edx, DWORD PTR _iGuildNumber$[ebp]
  0001c	8d 64 24 00	 npad	 4
$LL33@IsUnionMem:
  00020	39 10		 cmp	 DWORD PTR [eax], edx
  00022	74 07		 je	 SHORT $LN55@IsUnionMem
  00024	83 c0 04	 add	 eax, 4
  00027	3b c1		 cmp	 eax, ecx
  00029	75 f5		 jne	 SHORT $LL33@IsUnionMem
$LN55@IsUnionMem:

; 51   : 	
; 52   : 	if ( _Itor != this->m_vtUnionMember.end() )

  0002b	3b c1		 cmp	 eax, ecx
  0002d	74 13		 je	 SHORT $LN1@IsUnionMem

; 53   : 	{
; 54   : 		this->m_Sync.Unlock();

  0002f	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00032	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  00037	5f		 pop	 edi

; 55   : 		return TRUE;

  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	5e		 pop	 esi

; 60   : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN1@IsUnionMem:

; 56   : 	}
; 57   : 
; 58   : 	this->m_Sync.Unlock();

  00042	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00045	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  0004a	5f		 pop	 edi

; 59   : 	return FALSE;

  0004b	33 c0		 xor	 eax, eax
  0004d	5e		 pop	 esi

; 60   : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?IsUnionMember@TUnionInfo@@QAEHH@Z ENDP			; TUnionInfo::IsUnionMember
_TEXT	ENDS
PUBLIC	?IsRivalMember@TUnionInfo@@QAEHH@Z		; TUnionInfo::IsRivalMember
; Function compile flags: /Ogtp
;	COMDAT ?IsRivalMember@TUnionInfo@@QAEHH@Z
_TEXT	SEGMENT
_iGuildNumber$ = 8					; size = 4
?IsRivalMember@TUnionInfo@@QAEHH@Z PROC			; TUnionInfo::IsRivalMember, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 66   : 	this->m_Sync.Lock();

  00007	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0000a	e8 00 00 00 00	 call	 ?Lock@TSync@@QAEXXZ	; TSync::Lock

; 67   : 	std::vector<int>::iterator _Itor = std::find(this->m_vtRivalMember.begin(), this->m_vtRivalMember.end(), iGuildNumber );

  0000f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00012	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00015	3b c1		 cmp	 eax, ecx
  00017	74 29		 je	 SHORT $LN1@IsRivalMem
  00019	8b 55 08	 mov	 edx, DWORD PTR _iGuildNumber$[ebp]
  0001c	8d 64 24 00	 npad	 4
$LL33@IsRivalMem:
  00020	39 10		 cmp	 DWORD PTR [eax], edx
  00022	74 07		 je	 SHORT $LN55@IsRivalMem
  00024	83 c0 04	 add	 eax, 4
  00027	3b c1		 cmp	 eax, ecx
  00029	75 f5		 jne	 SHORT $LL33@IsRivalMem
$LN55@IsRivalMem:

; 68   : 	
; 69   : 	if ( _Itor != this->m_vtRivalMember.end() )

  0002b	3b c1		 cmp	 eax, ecx
  0002d	74 13		 je	 SHORT $LN1@IsRivalMem

; 70   : 	{
; 71   : 		this->m_Sync.Unlock();

  0002f	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00032	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  00037	5f		 pop	 edi

; 72   : 		return TRUE;

  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	5e		 pop	 esi

; 77   : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN1@IsRivalMem:

; 73   : 	}
; 74   : 
; 75   : 	this->m_Sync.Unlock();

  00042	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00045	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  0004a	5f		 pop	 edi

; 76   : 	return FALSE;

  0004b	33 c0		 xor	 eax, eax
  0004d	5e		 pop	 esi

; 77   : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?IsRivalMember@TUnionInfo@@QAEHH@Z ENDP			; TUnionInfo::IsRivalMember
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 705  : 		_Tidy();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@vector
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN8@vector:
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00026	5e		 pop	 esi

; 706  : 		}

  00027	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 1218 : 		erase(begin(), end());

  00003	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00006	56		 push	 esi
  00007	8b 33		 mov	 esi, DWORD PTR [ebx]
  00009	3b f1		 cmp	 esi, ecx
  0000b	74 20		 je	 SHORT $LN19@clear
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c1		 sub	 eax, ecx
  00011	57		 push	 edi
  00012	c1 f8 02	 sar	 eax, 2
  00015	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 _memmove
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	03 fe		 add	 edi, esi
  00029	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  0002c	5f		 pop	 edi
$LN19@clear:

; 1219 : 		}

  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	c3		 ret	 0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
PUBLIC	??_7TUnionInfo@@6B@				; TUnionInfo::`vftable'
PUBLIC	??0TUnionInfo@@QAE@XZ				; TUnionInfo::TUnionInfo
PUBLIC	??_R4TUnionInfo@@6B@				; TUnionInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTUnionInfo@@@8				; TUnionInfo `RTTI Type Descriptor'
PUBLIC	??_R3TUnionInfo@@8				; TUnionInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TUnionInfo@@8				; TUnionInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TUnionInfo@@8			; TUnionInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??0TSync@@QAE@XZ:PROC				; TSync::TSync
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETUnionInfo@@UAEPAXI@Z:PROC			; TUnionInfo::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@TUnionInfo@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@TUnionInfo@@8 DD FLAT:??_R0?AVTUnionInfo@@@8 ; TUnionInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TUnionInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2TUnionInfo@@8
rdata$r	SEGMENT
??_R2TUnionInfo@@8 DD FLAT:??_R1A@?0A@EA@TUnionInfo@@8	; TUnionInfo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TUnionInfo@@8
rdata$r	SEGMENT
??_R3TUnionInfo@@8 DD 00H				; TUnionInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TUnionInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTUnionInfo@@@8
_DATA	SEGMENT
??_R0?AVTUnionInfo@@@8 DD FLAT:??_7type_info@@6B@	; TUnionInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTUnionInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TUnionInfo@@6B@
rdata$r	SEGMENT
??_R4TUnionInfo@@6B@ DD 00H				; TUnionInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTUnionInfo@@@8
	DD	FLAT:??_R3TUnionInfo@@8
rdata$r	ENDS
;	COMDAT ??_7TUnionInfo@@6B@
CONST	SEGMENT
??_7TUnionInfo@@6B@ DD FLAT:??_R4TUnionInfo@@6B@	; TUnionInfo::`vftable'
	DD	FLAT:??_ETUnionInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TUnionInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TUnionInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TUnionInfo@@QAE@XZ$1
__ehfuncinfo$??0TUnionInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TUnionInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\tunioninfo.cpp
xdata$x	ENDS
;	COMDAT ??0TUnionInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0TUnionInfo@@QAE@XZ PROC				; TUnionInfo::TUnionInfo, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0TUnionInfo@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	33 ff		 xor	 edi, edi
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7TUnionInfo@@6B@
  00032	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00035	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  00038	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  0003b	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0003e	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  00041	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00044	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  00047	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004e	e8 00 00 00 00	 call	 ??0TSync@@QAE@XZ	; TSync::TSync

; 10   : 	this->m_iUnionTimeStamp = 0;
; 11   : 	this->m_iRivalTimeStamp = 0;
; 12   : 	this->m_iMasterGuild = 0;
; 13   : 	memset(this->m_szMasterGuild, 0, sizeof(this->m_szMasterGuild));

  00053	33 c0		 xor	 eax, eax
  00055	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00058	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0005b	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0005e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	88 46 18	 mov	 BYTE PTR [esi+24], al

; 14   : 
; 15   : }

  00067	8b c6		 mov	 eax, esi
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TUnionInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0TUnionInfo@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??0TUnionInfo@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0TUnionInfo@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0TUnionInfo@@QAE@XZ ENDP				; TUnionInfo::TUnionInfo
PUBLIC	?Clear@TUnionInfo@@QAEXH@Z			; TUnionInfo::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@TUnionInfo@@QAEXH@Z
_TEXT	SEGMENT
tv576 = -4						; size = 4
_iRelationShipType$ = 8					; size = 4
?Clear@TUnionInfo@@QAEXH@Z PROC				; TUnionInfo::Clear, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 94   : 	this->m_Sync.Lock();

  00008	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR tv576[ebp], ecx
  0000f	e8 00 00 00 00	 call	 ?Lock@TSync@@QAEXXZ	; TSync::Lock

; 95   : 
; 96   : 	if ( iRelationShipType == 0 )

  00014	8b 45 08	 mov	 eax, DWORD PTR _iRelationShipType$[ebp]
  00017	85 c0		 test	 eax, eax
  00019	75 61		 jne	 SHORT $LN5@Clear

; 97   : 	{
; 98   : 		this->m_vtRivalMember.clear();

  0001b	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0001e	8b 7e 2c	 mov	 edi, DWORD PTR [esi+44]
  00021	3b f9		 cmp	 edi, ecx
  00023	74 1e		 je	 SHORT $LN26@Clear
  00025	8b c1		 mov	 eax, ecx
  00027	2b c1		 sub	 eax, ecx
  00029	c1 f8 02	 sar	 eax, 2
  0002c	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]
  00033	53		 push	 ebx
  00034	51		 push	 ecx
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 _memmove
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	03 df		 add	 ebx, edi
  00040	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
$LN26@Clear:

; 99   : 		this->m_vtUnionMember.clear();

  00043	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00046	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00049	3b f9		 cmp	 edi, ecx
  0004b	74 41		 je	 SHORT $LN1@Clear
  0004d	8b c1		 mov	 eax, ecx
  0004f	2b c1		 sub	 eax, ecx
  00051	c1 f8 02	 sar	 eax, 2
  00054	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]
  0005b	53		 push	 ebx
  0005c	51		 push	 ecx
  0005d	57		 push	 edi
  0005e	e8 00 00 00 00	 call	 _memmove

; 108  : 	}
; 109  : 
; 110  : 	this->m_Sync.Unlock();

  00063	8b 4d fc	 mov	 ecx, DWORD PTR tv576[ebp]
  00066	03 df		 add	 ebx, edi
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  0006e	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx

; 111  : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN5@Clear:

; 100  : 	}
; 101  : 	else if ( iRelationShipType == 1 ) // Union

  0007c	83 f8 01	 cmp	 eax, 1

; 102  : 	{
; 103  : 		this->m_vtUnionMember.clear();

  0007f	74 c2		 je	 SHORT $LN26@Clear

; 104  : 	}
; 105  : 	else if ( iRelationShipType == 2 ) // Rival

  00081	83 f8 02	 cmp	 eax, 2
  00084	75 08		 jne	 SHORT $LN1@Clear

; 106  : 	{
; 107  : 		this->m_vtRivalMember.clear();

  00086	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00089	e8 00 00 00 00	 call	 ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
$LN1@Clear:

; 108  : 	}
; 109  : 
; 110  : 	this->m_Sync.Unlock();

  0008e	8b 4d fc	 mov	 ecx, DWORD PTR tv576[ebp]
  00091	e8 00 00 00 00	 call	 ?Unlock@TSync@@QAEXXZ	; TSync::Unlock
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx

; 111  : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
?Clear@TUnionInfo@@QAEXH@Z ENDP				; TUnionInfo::Clear
_TEXT	ENDS
PUBLIC	??1TUnionInfo@@UAE@XZ				; TUnionInfo::~TUnionInfo
EXTRN	??1TSync@@QAE@XZ:PROC				; TSync::~TSync
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1TUnionInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TUnionInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TUnionInfo@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1TUnionInfo@@UAE@XZ$2
__ehfuncinfo$??1TUnionInfo@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1TUnionInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\tunioninfo.cpp
xdata$x	ENDS
;	COMDAT ??1TUnionInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1TUnionInfo@@UAE@XZ PROC				; TUnionInfo::~TUnionInfo, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1TUnionInfo@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7TUnionInfo@@6B@

; 19   : 	this->Clear(0);

  00030	33 ff		 xor	 edi, edi
  00032	57		 push	 edi
  00033	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0003a	e8 00 00 00 00	 call	 ?Clear@TUnionInfo@@QAEXH@Z ; TUnionInfo::Clear

; 20   : }

  0003f	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00042	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00046	e8 00 00 00 00	 call	 ??1TSync@@QAE@XZ	; TSync::~TSync
  0004b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0004e	3b c7		 cmp	 eax, edi
  00050	74 09		 je	 SHORT $LN13@TUnionInfo
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00058	83 c4 04	 add	 esp, 4
$LN13@TUnionInfo:
  0005b	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  0005e	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00061	89 7e 34	 mov	 DWORD PTR [esi+52], edi
  00064	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00067	3b c7		 cmp	 eax, edi
  00069	74 09		 je	 SHORT $LN24@TUnionInfo
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00071	83 c4 04	 add	 esp, 4
$LN24@TUnionInfo:
  00074	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00077	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  0007a	89 7e 24	 mov	 DWORD PTR [esi+36], edi
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TUnionInfo@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1TUnionInfo@@UAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1TUnionInfo@@UAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001c	e9 00 00 00 00	 jmp	 ??1TSync@@QAE@XZ	; TSync::~TSync
__ehhandler$??1TUnionInfo@@UAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1TUnionInfo@@UAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1TUnionInfo@@UAE@XZ ENDP				; TUnionInfo::~TUnionInfo
; Function compile flags: /Ogtp
;	COMDAT ??_GTUnionInfo@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTUnionInfo@@UAEPAXI@Z PROC				; TUnionInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TUnionInfo@@UAE@XZ	; TUnionInfo::~TUnionInfo
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GTUnionInfo@@UAEPAXI@Z ENDP				; TUnionInfo::`scalar deleting destructor'
_TEXT	ENDS
END
