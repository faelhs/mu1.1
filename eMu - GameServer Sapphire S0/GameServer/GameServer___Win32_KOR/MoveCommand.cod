; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\MoveCommand.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttDEVILSQUARE_LEVEL DD 0fH
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	070H
_g_sttKALIMAGATE_LEVEL DD 028H
	DD	082H
	DD	014H
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	015dH
	DD	0137H
	DD	015dH
	DD	015eH
	DD	0190H
	DD	015eH
	DD	0190H
_g_iKalimaGateGateIndex DD 058H
	DD	059H
	DD	05aH
	DD	05bH
	DD	05cH
	DD	05dH
	DD	074H
	ORG $+4
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
_g_sttCHAOSCASTLE_LEVEL DD 0aH
	DD	031H
	DD	0aH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	?GetCastleState@CCastleSiegeSync@@QAEHXZ	; CCastleSiegeSync::GetCastleState
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\castlesiegesync.h
;	COMDAT ?GetCastleState@CCastleSiegeSync@@QAEHXZ
_TEXT	SEGMENT
?GetCastleState@CCastleSiegeSync@@QAEHXZ PROC		; CCastleSiegeSync::GetCastleState, COMDAT
; _this$ = ecx

; 34   : 	int  GetCastleState(){return this->m_iCurCastleState;};	// line : 70

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetCastleState@CCastleSiegeSync@@QAEHXZ ENDP		; CCastleSiegeSync::GetCastleState
_TEXT	ENDS
PUBLIC	??_7CMoveCommand@@6B@				; CMoveCommand::`vftable'
PUBLIC	??0CMoveCommand@@QAE@XZ				; CMoveCommand::CMoveCommand
PUBLIC	??_R4CMoveCommand@@6B@				; CMoveCommand::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMoveCommand@@@8			; CMoveCommand `RTTI Type Descriptor'
PUBLIC	??_R3CMoveCommand@@8				; CMoveCommand::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMoveCommand@@8				; CMoveCommand::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMoveCommand@@8			; CMoveCommand::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMoveCommand@@UAEPAXI@Z:PROC		; CMoveCommand::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMoveCommand@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\movecommand.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CMoveCommand@@8 DD FLAT:??_R0?AVCMoveCommand@@@8 ; CMoveCommand::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_R2CMoveCommand@@8
rdata$r	SEGMENT
??_R2CMoveCommand@@8 DD FLAT:??_R1A@?0A@EA@CMoveCommand@@8 ; CMoveCommand::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMoveCommand@@8
rdata$r	SEGMENT
??_R3CMoveCommand@@8 DD 00H				; CMoveCommand::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMoveCommand@@@8
_DATA	SEGMENT
??_R0?AVCMoveCommand@@@8 DD FLAT:??_7type_info@@6B@	; CMoveCommand `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMoveCommand@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMoveCommand@@6B@
rdata$r	SEGMENT
??_R4CMoveCommand@@6B@ DD 00H				; CMoveCommand::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMoveCommand@@@8
	DD	FLAT:??_R3CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_7CMoveCommand@@6B@
CONST	SEGMENT
??_7CMoveCommand@@6B@ DD FLAT:??_R4CMoveCommand@@6B@	; CMoveCommand::`vftable'
	DD	FLAT:??_ECMoveCommand@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CMoveCommand@@QAE@XZ
_TEXT	SEGMENT
??0CMoveCommand@@QAE@XZ PROC				; CMoveCommand::CMoveCommand, COMDAT
; _this$ = ecx

; 23   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMoveCommand@@6B@

; 24   : 	return;
; 25   : }

  00008	c3		 ret	 0
??0CMoveCommand@@QAE@XZ ENDP				; CMoveCommand::CMoveCommand
_TEXT	ENDS
PUBLIC	??1CMoveCommand@@UAE@XZ				; CMoveCommand::~CMoveCommand
; Function compile flags: /Ogtp
;	COMDAT ??1CMoveCommand@@UAE@XZ
_TEXT	SEGMENT
??1CMoveCommand@@UAE@XZ PROC				; CMoveCommand::~CMoveCommand, COMDAT
; _this$ = ecx

; 29   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMoveCommand@@6B@

; 30   : 	return;
; 31   : }

  00006	c3		 ret	 0
??1CMoveCommand@@UAE@XZ ENDP				; CMoveCommand::~CMoveCommand
_TEXT	ENDS
PUBLIC	?Init@CMoveCommand@@QAEXXZ			; CMoveCommand::Init
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Init@CMoveCommand@@QAEXXZ
_TEXT	SEGMENT
?Init@CMoveCommand@@QAEXXZ PROC				; CMoveCommand::Init, COMDAT
; _this$ = ecx

; 35   : {

  00000	56		 push	 esi

; 36   : 	memset(this->m_MoveCommandData, 0, sizeof(this->m_MoveCommandData));

  00001	68 e0 3d 00 00	 push	 15840			; 00003de0H
  00006	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00009	6a 00		 push	 0
  0000b	56		 push	 esi
  0000c	e8 00 00 00 00	 call	 _memset
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH
  00014	8b c6		 mov	 eax, esi
  00016	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  0001b	5e		 pop	 esi
  0001c	8d 64 24 00	 npad	 4
$LL3@Init:

; 37   : 
; 38   : 	for (int i =0;i<MAX_MOVE_COMMAND;i++)
; 39   : 	{
; 40   : 		this->m_MoveCommandData[i].Index = -1;

  00020	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00026	05 10 02 00 00	 add	 eax, 528		; 00000210H
  0002b	49		 dec	 ecx
  0002c	75 f2		 jne	 SHORT $LL3@Init

; 41   : 	}
; 42   : }

  0002e	c3		 ret	 0
?Init@CMoveCommand@@QAEXXZ ENDP				; CMoveCommand::Init
_TEXT	ENDS
PUBLIC	??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@ ; `string'
PUBLIC	??_C@_0BP@OIMJHLAA@MoveCommand?5?$CFs?5File?5Load?5Error?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?Load@CMoveCommand@@QAEHPAD@Z			; CMoveCommand::Load
EXTRN	_fclose:PROC
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@
CONST	SEGMENT
??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@ DB 'MoveCommand s'
	DB	'cript load fail', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OIMJHLAA@MoveCommand?5?$CFs?5File?5Load?5Error?$AA@
CONST	SEGMENT
??_C@_0BP@OIMJHLAA@MoveCommand?5?$CFs?5File?5Load?5Error?$AA@ DB 'MoveCom'
	DB	'mand %s File Load Error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Load@CMoveCommand@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv406 = 8						; size = 4
_filename$ = 8						; size = 4
?Load@CMoveCommand@@QAEHPAD@Z PROC			; CMoveCommand::Load, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx

; 47   : 	int Token;
; 48   : 	int counter;
; 49   : 
; 50   : 	this->Init();

  0000b	e8 00 00 00 00	 call	 ?Init@CMoveCommand@@QAEXXZ ; CMoveCommand::Init

; 51   : 
; 52   : 	SMDFile=fopen(filename, "r");

  00010	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 _fopen
  0001e	83 c4 08	 add	 esp, 8
  00021	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 53   : 
; 54   : 	if ( SMDFile == 0 )

  00026	85 c0		 test	 eax, eax
  00028	75 18		 jne	 SHORT $LN6@Load

; 55   : 	{
; 56   : 		MsgBox("MoveCommand %s File Load Error", filename);

  0002a	56		 push	 esi
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OIMJHLAA@MoveCommand?5?$CFs?5File?5Load?5Error?$AA@
  00030	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00035	83 c4 08	 add	 esp, 8
  00038	5e		 pop	 esi

; 57   : 		return 0;

  00039	33 c0		 xor	 eax, eax
  0003b	5b		 pop	 ebx

; 103  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@Load:
  00042	57		 push	 edi

; 61   : 
; 62   : 	while ( true )
; 63   : 	{
; 64   : 		Token=GetToken();

  00043	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 65   : 
; 66   : 		if ( Token == 2)

  00048	83 f8 02	 cmp	 eax, 2
  0004b	0f 84 d0 00 00
	00		 je	 $LN14@Load

; 58   : 	}
; 59   : 
; 60   : 	counter=0;

  00051	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00054	81 ee 00 00 00
	00		 sub	 esi, OFFSET _TokenString
  0005a	8d bb 10 02 00
	00		 lea	 edi, DWORD PTR [ebx+528]

; 65   : 
; 66   : 		if ( Token == 2)

  00060	b9 00 00 00 00	 mov	 ecx, OFFSET _TokenString
  00065	81 c3 08 02 00
	00		 add	 ebx, 520		; 00000208H
  0006b	81 c6 07 01 00
	00		 add	 esi, 263		; 00000107H
  00071	81 e9 03 01 00
	00		 sub	 ecx, 259		; 00000103H
  00077	89 4d 08	 mov	 DWORD PTR tv406[ebp], ecx
  0007a	8d 9b 00 00 00
	00		 npad	 6
$LL5@Load:

; 67   : 		{
; 68   : 			break;
; 69   : 		}
; 70   : 		
; 71   : 		
; 72   : 		if ( Token == 1)

  00080	83 f8 01	 cmp	 eax, 1
  00083	0f 85 b5 00 00
	00		 jne	 $LN2@Load

; 73   : 		{
; 74   : 			this->m_MoveCommandData[counter].Index = TokenNumber;

  00089	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0008f	e8 00 00 00 00	 call	 __ftol2_sse
  00094	8b 4d 08	 mov	 ecx, DWORD PTR tv406[ebp]
  00097	89 04 31	 mov	 DWORD PTR [ecx+esi], eax

; 75   : 
; 76   : 			Token = GetToken();

  0009a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 77   : 			strcpy(this->m_MoveCommandData[counter].Name, TokenString);

  0009f	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
$LL9@Load:
  000a4	8a 08		 mov	 cl, BYTE PTR [eax]
  000a6	88 8c 06 01 ff
	ff ff		 mov	 BYTE PTR [esi+eax-255], cl
  000ad	40		 inc	 eax
  000ae	84 c9		 test	 cl, cl
  000b0	75 f2		 jne	 SHORT $LL9@Load

; 78   : 
; 79   : 			Token = GetToken();

  000b2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 			strcpy(this->m_MoveCommandData[counter].EngName, TokenString);

  000b7	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
  000bc	8d 64 24 00	 npad	 4
$LL10@Load:
  000c0	8a 08		 mov	 cl, BYTE PTR [eax]
  000c2	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  000c5	40		 inc	 eax
  000c6	84 c9		 test	 cl, cl
  000c8	75 f6		 jne	 SHORT $LL10@Load

; 81   : 
; 82   : 			Token = GetToken();

  000ca	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 83   : 			this->m_MoveCommandData[counter].NeedZen = TokenNumber;

  000cf	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000d5	e8 00 00 00 00	 call	 __ftol2_sse
  000da	89 03		 mov	 DWORD PTR [ebx], eax

; 84   : 
; 85   : 			Token = GetToken();

  000dc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 86   : 			this->m_MoveCommandData[counter].NeedLevel = TokenNumber;

  000e1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000e7	e8 00 00 00 00	 call	 __ftol2_sse
  000ec	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 87   : 
; 88   : 			Token = GetToken();

  000ef	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 			this->m_MoveCommandData[counter].GateNumber = TokenNumber;

  000f4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000fa	e8 00 00 00 00	 call	 __ftol2_sse
  000ff	89 07		 mov	 DWORD PTR [edi], eax

; 90   : 
; 91   : 			counter++;

  00101	81 c6 10 02 00
	00		 add	 esi, 528		; 00000210H
  00107	81 c3 10 02 00
	00		 add	 ebx, 528		; 00000210H
  0010d	81 c7 10 02 00
	00		 add	 edi, 528		; 00000210H
  00113	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00118	83 f8 02	 cmp	 eax, 2
  0011b	0f 85 5f ff ff
	ff		 jne	 $LL5@Load
$LN14@Load:

; 99   : 		}
; 100  : 	}
; 101  : 	fclose(SMDFile);

  00121	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 _fclose
  0012d	83 c4 04	 add	 esp, 4
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi

; 102  : 	return TRUE;

  00132	b8 01 00 00 00	 mov	 eax, 1
  00137	5b		 pop	 ebx

; 103  : }

  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c2 04 00	 ret	 4
$LN2@Load:

; 92   : 		}
; 93   : 		else
; 94   : 		{
; 95   : 			this->Init();

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	e8 00 00 00 00	 call	 ?Init@CMoveCommand@@QAEXXZ ; CMoveCommand::Init

; 96   : 			fclose(SMDFile);

  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 _fclose

; 97   : 			MsgBox("MoveCommand script load fail");

  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DLJJBGJJ@MoveCommand?5script?5load?5fail?$AA@
  00156	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0015b	83 c4 08	 add	 esp, 8
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi

; 98   : 			return FALSE;

  00160	33 c0		 xor	 eax, eax
  00162	5b		 pop	 ebx

; 103  : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 04 00	 ret	 4
?Load@CMoveCommand@@QAEHPAD@Z ENDP			; CMoveCommand::Load
_TEXT	ENDS
PUBLIC	??_C@_0BL@MDABMPEB@MoveLevel?5script?5load?5fail?$AA@ ; `string'
PUBLIC	??_C@_0BN@FOCHKGPP@MoveLevel?5?$CFs?5File?5Load?5Error?$AA@ ; `string'
PUBLIC	?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z		; CMoveCommand::LoadMoveLevel
;	COMDAT ??_C@_0BL@MDABMPEB@MoveLevel?5script?5load?5fail?$AA@
CONST	SEGMENT
??_C@_0BL@MDABMPEB@MoveLevel?5script?5load?5fail?$AA@ DB 'MoveLevel scrip'
	DB	't load fail', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FOCHKGPP@MoveLevel?5?$CFs?5File?5Load?5Error?$AA@
CONST	SEGMENT
??_C@_0BN@FOCHKGPP@MoveLevel?5?$CFs?5File?5Load?5Error?$AA@ DB 'MoveLevel'
	DB	' %s File Load Error', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z PROC		; CMoveCommand::LoadMoveLevel, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 107  : 	int Token;
; 108  : 	int counter;
; 109  : 
; 110  : 	memset(this->m_MoveLevel, -1, sizeof(this->m_MoveLevel));

  00007	68 d0 02 00 00	 push	 720			; 000002d0H
  0000c	8d 87 e4 3d 00
	00		 lea	 eax, DWORD PTR [edi+15844]
  00012	6a ff		 push	 -1
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _memset

; 111  : 
; 112  : 	SMDFile=fopen(filename, "r");

  0001a	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 _fopen
  00028	83 c4 14	 add	 esp, 20			; 00000014H
  0002b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 113  : 
; 114  : 	if ( SMDFile == 0 )

  00030	85 c0		 test	 eax, eax
  00032	75 16		 jne	 SHORT $LN6@LoadMoveLe

; 115  : 	{
; 116  : 		MsgBox("MoveLevel %s File Load Error", filename);

  00034	56		 push	 esi
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FOCHKGPP@MoveLevel?5?$CFs?5File?5Load?5Error?$AA@

; 157  : 			MsgBox("MoveLevel script load fail");

  0003a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0003f	83 c4 08	 add	 esp, 8
  00042	5f		 pop	 edi

; 158  : 			return FALSE;

  00043	33 c0		 xor	 eax, eax
  00045	5e		 pop	 esi

; 163  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN6@LoadMoveLe:

; 121  : 
; 122  : 	while ( true )
; 123  : 	{
; 124  : 		Token=GetToken();

  0004a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 
; 126  : 		if ( Token == 2)

  0004f	83 f8 02	 cmp	 eax, 2
  00052	0f 84 8e 00 00
	00		 je	 $LN10@LoadMoveLe

; 117  : 		return 0;
; 118  : 	}
; 119  : 
; 120  : 	counter=0;

  00058	8d b7 e8 3d 00
	00		 lea	 esi, DWORD PTR [edi+15848]
  0005e	8b ff		 npad	 2
$LL5@LoadMoveLe:

; 127  : 		{
; 128  : 			break;
; 129  : 		}
; 130  : 		
; 131  : 		
; 132  : 		if ( Token == 1)

  00060	83 f8 01	 cmp	 eax, 1
  00063	0f 85 97 00 00
	00		 jne	 $LN2@LoadMoveLe

; 133  : 		{
; 134  : 			this->m_MoveLevel[counter].MoveLevel = TokenNumber;

  00069	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0006f	e8 00 00 00 00	 call	 __ftol2_sse
  00074	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 135  : 
; 136  : 			Token = GetToken();

  00077	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 137  : 			this->m_MoveLevel[counter].MapNumber = TokenNumber;

  0007c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00082	e8 00 00 00 00	 call	 __ftol2_sse
  00087	89 06		 mov	 DWORD PTR [esi], eax

; 138  : 
; 139  : 			Token = GetToken();

  00089	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 			this->m_MoveLevel[counter].X = TokenNumber;

  0008e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00094	e8 00 00 00 00	 call	 __ftol2_sse
  00099	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 141  : 
; 142  : 			Token = GetToken();

  0009c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 143  : 			this->m_MoveLevel[counter].Y = TokenNumber;

  000a1	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000a7	e8 00 00 00 00	 call	 __ftol2_sse
  000ac	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 144  : 
; 145  : 			Token = GetToken();

  000af	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 146  : 			this->m_MoveLevel[counter].TX = TokenNumber;

  000b4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ba	e8 00 00 00 00	 call	 __ftol2_sse
  000bf	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 147  : 
; 148  : 			Token = GetToken();

  000c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 149  : 			this->m_MoveLevel[counter].TY = TokenNumber;

  000c7	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000cd	e8 00 00 00 00	 call	 __ftol2_sse
  000d2	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 150  : 
; 151  : 			counter++;

  000d5	83 c6 18	 add	 esi, 24			; 00000018H
  000d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  000dd	83 f8 02	 cmp	 eax, 2
  000e0	0f 85 7a ff ff
	ff		 jne	 $LL5@LoadMoveLe
$LN10@LoadMoveLe:

; 159  : 		}
; 160  : 	}
; 161  : 	fclose(SMDFile);

  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _fclose
  000f2	83 c4 04	 add	 esp, 4
  000f5	5f		 pop	 edi

; 162  : 	return TRUE;

  000f6	b8 01 00 00 00	 mov	 eax, 1
  000fb	5e		 pop	 esi

; 163  : }

  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
$LN2@LoadMoveLe:

; 152  : 		}
; 153  : 		else
; 154  : 		{
; 155  : 			this->Init();

  00100	8b cf		 mov	 ecx, edi
  00102	e8 00 00 00 00	 call	 ?Init@CMoveCommand@@QAEXXZ ; CMoveCommand::Init

; 156  : 			fclose(SMDFile);

  00107	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0010d	52		 push	 edx
  0010e	e8 00 00 00 00	 call	 _fclose

; 157  : 			MsgBox("MoveLevel script load fail");

  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MDABMPEB@MoveLevel?5script?5load?5fail?$AA@
  00118	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0011d	83 c4 08	 add	 esp, 8
  00120	5f		 pop	 edi

; 158  : 			return FALSE;

  00121	33 c0		 xor	 eax, eax
  00123	5e		 pop	 esi

; 163  : }

  00124	5d		 pop	 ebp
  00125	c2 04 00	 ret	 4
?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z ENDP		; CMoveCommand::LoadMoveLevel
_TEXT	ENDS
PUBLIC	?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z		; CMoveCommand::GetMoveLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z
_TEXT	SEGMENT
_mapnumber$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Class$ = 20						; size = 4
?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z PROC		; CMoveCommand::GetMoveLevel, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 167  : 	for( int i=0;i<MAX_MOVE_COMMAND;i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _mapnumber$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR _y$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _x$[ebp]
  0000f	33 d2		 xor	 edx, edx
  00011	8d 81 ec 3d 00
	00		 lea	 eax, DWORD PTR [ecx+15852]
$LL8@GetMoveLev:

; 168  : 	{
; 169  : 		if ( this->m_MoveLevel[i].MapNumber == mapnumber )

  00017	39 58 fc	 cmp	 DWORD PTR [eax-4], ebx
  0001a	75 13		 jne	 SHORT $LN7@GetMoveLev

; 170  : 		{
; 171  : 			if ( x >= this->m_MoveLevel[i].X && x <= this->m_MoveLevel[i].TX && y >= this->m_MoveLevel[i].Y && y <= this->m_MoveLevel[i].TY )

  0001c	3b 38		 cmp	 edi, DWORD PTR [eax]
  0001e	7c 0f		 jl	 SHORT $LN7@GetMoveLev
  00020	3b 78 08	 cmp	 edi, DWORD PTR [eax+8]
  00023	7f 0a		 jg	 SHORT $LN7@GetMoveLev
  00025	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00028	7c 05		 jl	 SHORT $LN7@GetMoveLev
  0002a	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  0002d	7e 13		 jle	 SHORT $LN12@GetMoveLev
$LN7@GetMoveLev:

; 167  : 	for( int i=0;i<MAX_MOVE_COMMAND;i++)

  0002f	42		 inc	 edx
  00030	83 c0 18	 add	 eax, 24			; 00000018H
  00033	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  00036	7c df		 jl	 SHORT $LL8@GetMoveLev

; 180  : 				}
; 181  : 			}
; 182  : 		}
; 183  : 	}
; 184  : 
; 185  : 	return -1;

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	83 c8 ff	 or	 eax, -1
  0003d	5b		 pop	 ebx

; 186  : }

  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
$LN12@GetMoveLev:

; 172  : 			{
; 173  : 				if ( Class == 4 || Class == 3 )

  00042	8b 45 14	 mov	 eax, DWORD PTR _Class$[ebp]
  00045	83 f8 04	 cmp	 eax, 4
  00048	74 16		 je	 SHORT $LN2@GetMoveLev
  0004a	83 f8 03	 cmp	 eax, 3
  0004d	74 11		 je	 SHORT $LN2@GetMoveLev

; 176  : 				}
; 177  : 				else
; 178  : 				{
; 179  : 					return this->m_MoveLevel[i].MoveLevel;

  0004f	5f		 pop	 edi
  00050	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00053	8b 84 c1 e4 3d
	00 00		 mov	 eax, DWORD PTR [ecx+eax*8+15844]
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 186  : }

  0005c	5d		 pop	 ebp
  0005d	c2 10 00	 ret	 16			; 00000010H
$LN2@GetMoveLev:

; 174  : 				{
; 175  : 					return this->m_MoveLevel[i].MoveLevel * 2 / 3;

  00060	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  00063	8b 8c d1 e4 3d
	00 00		 mov	 ecx, DWORD PTR [ecx+edx*8+15844]
  0006a	03 c9		 add	 ecx, ecx
  0006c	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00071	f7 e9		 imul	 ecx
  00073	5f		 pop	 edi
  00074	8b c2		 mov	 eax, edx
  00076	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00079	5e		 pop	 esi
  0007a	03 c2		 add	 eax, edx
  0007c	5b		 pop	 ebx

; 186  : }

  0007d	5d		 pop	 ebp
  0007e	c2 10 00	 ret	 16			; 00000010H
?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z ENDP		; CMoveCommand::GetMoveLevel
_TEXT	ENDS
PUBLIC	?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::CheckMainToMove
; Function compile flags: /Ogtp
;	COMDAT ?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::CheckMainToMove, COMDAT
; _this$ = ecx

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : 	if ( BC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8a 80 09 01 00
	00		 mov	 al, BYTE PTR [eax+265]
  0000c	3c 0b		 cmp	 al, 11			; 0000000bH
  0000e	72 12		 jb	 SHORT $LN4@CheckMainT
  00010	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00015	3a c8		 cmp	 cl, al
  00017	1b c9		 sbb	 ecx, ecx
  00019	41		 inc	 ecx
  0001a	74 06		 je	 SHORT $LN4@CheckMainT
$LN19@CheckMainT:

; 191  : 	{
; 192  : 		return FALSE;

  0001c	33 c0		 xor	 eax, eax

; 211  : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN4@CheckMainT:

; 193  : 	}
; 194  : 
; 195  : 	if ( CC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00022	3c 12		 cmp	 al, 18			; 00000012H
  00024	72 09		 jb	 SHORT $LN3@CheckMainT
  00026	b2 17		 mov	 dl, 23			; 00000017H
  00028	3a d0		 cmp	 dl, al
  0002a	1b c9		 sbb	 ecx, ecx
  0002c	41		 inc	 ecx

; 196  : 	{
; 197  : 		return FALSE;

  0002d	75 ed		 jne	 SHORT $LN19@CheckMainT
$LN3@CheckMainT:

; 198  : 	}
; 199  : 
; 200  : 	if ( KALIMA_MAP_RANGE(lpObj->MapNumber) != FALSE )

  0002f	3c 18		 cmp	 al, 24			; 00000018H
  00031	72 0f		 jb	 SHORT $LN2@CheckMainT
  00033	3c 1d		 cmp	 al, 29			; 0000001dH
  00035	76 e5		 jbe	 SHORT $LN19@CheckMainT
  00037	33 c9		 xor	 ecx, ecx
  00039	3c 24		 cmp	 al, 36			; 00000024H
  0003b	0f 94 c1	 sete	 cl
  0003e	85 c9		 test	 ecx, ecx

; 201  : 	{
; 202  : 		return FALSE;

  00040	75 da		 jne	 SHORT $LN19@CheckMainT
$LN2@CheckMainT:

; 203  : 	}
; 204  : 
; 205  : 	if ( DS_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00042	3c 09		 cmp	 al, 9
  00044	74 d6		 je	 SHORT $LN19@CheckMainT
  00046	33 c9		 xor	 ecx, ecx
  00048	3c 20		 cmp	 al, 32			; 00000020H
  0004a	0f 94 c1	 sete	 cl
  0004d	8b c1		 mov	 eax, ecx
  0004f	85 c0		 test	 eax, eax

; 206  : 	{
; 207  : 		return FALSE;

  00051	75 c9		 jne	 SHORT $LN19@CheckMainT

; 208  : 	}
; 209  : 
; 210  : 	return TRUE;

  00053	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 211  : }

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::CheckMainToMove
_TEXT	ENDS
PUBLIC	?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMoveCommand::CheckEquipmentToMove
EXTRN	?gObjMonsterCallKill@@YAXH@Z:PROC		; gObjMonsterCallKill
EXTRN	?GCRecallMonLife@@YAXHHH@Z:PROC			; GCRecallMonLife
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
; Function compile flags: /Ogtp
;	COMDAT ?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iTargetMapNumber$ = 12					; size = 4
?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMoveCommand::CheckEquipmentToMove, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  : 	if ( iTargetMapNumber == MAP_INDEX_ATHLANSE )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iTargetMapNumber$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	83 f8 07	 cmp	 eax, 7
  0000b	75 49		 jne	 SHORT $LN6@CheckEquip

; 216  : 	{
; 217  : 		if ( lpObj->pInventory[8].IsItem() != FALSE )

  0000d	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00010	8b 8e 8c 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3212]
  00016	81 c1 40 05 00
	00		 add	 ecx, 1344		; 00000540H
  0001c	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00021	85 c0		 test	 eax, eax
  00023	0f 84 df 00 00
	00		 je	 $LN1@CheckEquip

; 218  : 		{
; 219  : 			if ( lpObj->pInventory[8].m_Type == ITEMGET(13,2) ) // Uniria

  00029	8b 86 8c 0c 00
	00		 mov	 eax, DWORD PTR [esi+3212]
  0002f	0f b7 80 46 05
	00 00		 movzx	 eax, WORD PTR [eax+1350]
  00036	b9 02 1a 00 00	 mov	 ecx, 6658		; 00001a02H
  0003b	66 3b c1	 cmp	 ax, cx

; 220  : 			{
; 221  : 				return FALSE;

  0003e	74 0e		 je	 SHORT $LN15@CheckEquip

; 222  : 			}
; 223  : 
; 224  : 			if ( lpObj->pInventory[8].m_Type == ITEMGET(13,3) ) // Dino

  00040	ba 03 1a 00 00	 mov	 edx, 6659		; 00001a03H
  00045	66 3b c2	 cmp	 ax, dx
  00048	0f 85 ba 00 00
	00		 jne	 $LN1@CheckEquip
$LN15@CheckEquip:
  0004e	5f		 pop	 edi

; 225  : 			{
; 226  : 				return FALSE;

  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi

; 252  : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN6@CheckEquip:

; 227  : 			}
; 228  : 		}
; 229  : 	}
; 230  : 
; 231  : 	if ( iTargetMapNumber == MAP_INDEX_ICARUS )

  00056	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00059	0f 85 a9 00 00
	00		 jne	 $LN1@CheckEquip

; 232  : 	{
; 233  : 		if ( (lpObj->pInventory[8].m_Type != ITEMGET(13,3) &&
; 234  : 			 lpObj->pInventory[7].m_Type != ITEMGET(13,30) &&
; 235  : 			 !NEWWINGS(lpObj->pInventory[7].m_Type) &&
; 236  : 			 (lpObj->pInventory[7].m_Type < ITEMGET(12,0) || lpObj->pInventory[7].m_Type > ITEMGET(12,6)) ) ||
; 237  : 			 lpObj->pInventory[8].m_Type == ITEMGET(13,2) ||
; 238  : 			 lpObj->pInventory[11].m_Type == ITEMGET(13,10) ||
; 239  : 			 lpObj->pInventory[10].m_Type == ITEMGET(13,10)  )

  0005f	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00062	8b 87 8c 0c 00
	00		 mov	 eax, DWORD PTR [edi+3212]
  00068	0f b7 b0 46 05
	00 00		 movzx	 esi, WORD PTR [eax+1350]
  0006f	b9 03 1a 00 00	 mov	 ecx, 6659		; 00001a03H
  00074	66 3b f1	 cmp	 si, cx
  00077	74 44		 je	 SHORT $LN2@CheckEquip
  00079	0f b7 88 9e 04
	00 00		 movzx	 ecx, WORD PTR [eax+1182]
  00080	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  00085	66 3b ca	 cmp	 cx, dx
  00088	74 33		 je	 SHORT $LN2@CheckEquip
  0008a	ba 64 18 00 00	 mov	 edx, 6244		; 00001864H
  0008f	66 3b ca	 cmp	 cx, dx
  00092	7c 15		 jl	 SHORT $LN14@CheckEquip
  00094	53		 push	 ebx
  00095	33 db		 xor	 ebx, ebx
  00097	ba 7d 18 00 00	 mov	 edx, 6269		; 0000187dH
  0009c	66 3b ca	 cmp	 cx, dx
  0009f	0f 9e c3	 setle	 bl
  000a2	8b d3		 mov	 edx, ebx
  000a4	5b		 pop	 ebx
  000a5	85 d2		 test	 edx, edx
  000a7	75 14		 jne	 SHORT $LN2@CheckEquip
$LN14@CheckEquip:
  000a9	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  000ae	66 3b ca	 cmp	 cx, dx
  000b1	7c 9b		 jl	 SHORT $LN15@CheckEquip
  000b3	ba 06 18 00 00	 mov	 edx, 6150		; 00001806H
  000b8	66 3b ca	 cmp	 cx, dx
  000bb	7f 91		 jg	 SHORT $LN15@CheckEquip
$LN2@CheckEquip:
  000bd	b9 02 1a 00 00	 mov	 ecx, 6658		; 00001a02H
  000c2	66 3b f1	 cmp	 si, cx
  000c5	74 87		 je	 SHORT $LN15@CheckEquip
  000c7	ba 0a 1a 00 00	 mov	 edx, 6666		; 00001a0aH
  000cc	66 39 90 3e 07
	00 00		 cmp	 WORD PTR [eax+1854], dx
  000d3	0f 84 75 ff ff
	ff		 je	 $LN15@CheckEquip
  000d9	8b ca		 mov	 ecx, edx
  000db	66 39 88 96 06
	00 00		 cmp	 WORD PTR [eax+1686], cx
  000e2	0f 84 66 ff ff
	ff		 je	 $LN15@CheckEquip

; 240  : 		{
; 241  : 			return FALSE;
; 242  : 		}
; 243  : 
; 244  : 		if ( lpObj->m_RecallMon >= 0 )

  000e8	83 bf cc 02 00
	00 00		 cmp	 DWORD PTR [edi+716], 0
  000ef	7c 17		 jl	 SHORT $LN1@CheckEquip

; 245  : 		{
; 246  : 			GCRecallMonLife(lpObj->m_Index, 60, 0);

  000f1	8b 17		 mov	 edx, DWORD PTR [edi]
  000f3	6a 00		 push	 0
  000f5	6a 3c		 push	 60			; 0000003cH
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ?GCRecallMonLife@@YAXHHH@Z ; GCRecallMonLife

; 247  : 			gObjMonsterCallKill(lpObj->m_Index);

  000fd	8b 07		 mov	 eax, DWORD PTR [edi]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?gObjMonsterCallKill@@YAXH@Z ; gObjMonsterCallKill
  00105	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@CheckEquip:

; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	return TRUE;

  00108	5f		 pop	 edi
  00109	b8 01 00 00 00	 mov	 eax, 1
  0010e	5e		 pop	 esi

; 252  : }

  0010f	5d		 pop	 ebp
  00110	c2 08 00	 ret	 8
?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMoveCommand::CheckEquipmentToMove
_TEXT	ENDS
PUBLIC	?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::CheckInterfaceToMove
; Function compile flags: /Ogtp
;	COMDAT ?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::CheckInterfaceToMove, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 256  : 	if ( lpObj->m_IfState.use == 1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 88 84 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3204]
  0000c	80 e1 03	 and	 cl, 3
  0000f	80 f9 01	 cmp	 cl, 1
  00012	75 06		 jne	 SHORT $LN2@CheckInter

; 257  : 	{
; 258  : 		return FALSE;

  00014	33 c0		 xor	 eax, eax

; 262  : 	{
; 263  : 		return FALSE;
; 264  : 	}
; 265  : 
; 266  : 	return TRUE;
; 267  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@CheckInter:

; 259  : 	}
; 260  : 
; 261  : 	if ( lpObj->m_bPShopOpen == true )

  0001a	33 d2		 xor	 edx, edx
  0001c	80 b8 28 0d 00
	00 01		 cmp	 BYTE PTR [eax+3368], 1
  00023	0f 95 c2	 setne	 dl
  00026	8b c2		 mov	 eax, edx

; 262  : 	{
; 263  : 		return FALSE;
; 264  : 	}
; 265  : 
; 266  : 	return TRUE;
; 267  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::CheckInterfaceToMove
_TEXT	ENDS
PUBLIC	?FindIndex@CMoveCommand@@AAEHPAD@Z		; CMoveCommand::FindIndex
EXTRN	_strcmpi:PROC
; Function compile flags: /Ogtp
;	COMDAT ?FindIndex@CMoveCommand@@AAEHPAD@Z
_TEXT	SEGMENT
_mapname$ = 8						; size = 4
?FindIndex@CMoveCommand@@AAEHPAD@Z PROC			; CMoveCommand::FindIndex, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 271  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _mapname$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  0000e	8b ff		 npad	 2
$LL6@FindIndex:

; 272  : 	{
; 273  : 		if ( this->m_MoveCommandData[i].Index == -1 )

  00010	83 c8 ff	 or	 eax, -1
  00013	39 46 fc	 cmp	 DWORD PTR [esi-4], eax
  00016	74 54		 je	 SHORT $LN7@FindIndex

; 274  : 		{
; 275  : 			return -1;
; 276  : 		}
; 277  : 
; 278  : 		if ( strcmp(mapname, this->m_MoveCommandData[i].Name) == 0 || strcmpi(mapname, this->m_MoveCommandData[i].EngName) == 0  )

  00018	8b ce		 mov	 ecx, esi
  0001a	8b c3		 mov	 eax, ebx
  0001c	8d 64 24 00	 npad	 4
$LL13@FindIndex:
  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00024	75 1a		 jne	 SHORT $LN14@FindIndex
  00026	84 d2		 test	 dl, dl
  00028	74 12		 je	 SHORT $LN15@FindIndex
  0002a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00030	75 0e		 jne	 SHORT $LN14@FindIndex
  00032	83 c0 02	 add	 eax, 2
  00035	83 c1 02	 add	 ecx, 2
  00038	84 d2		 test	 dl, dl
  0003a	75 e4		 jne	 SHORT $LL13@FindIndex
$LN15@FindIndex:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN16@FindIndex
$LN14@FindIndex:
  00040	1b c0		 sbb	 eax, eax
  00042	83 d8 ff	 sbb	 eax, -1
$LN16@FindIndex:
  00045	85 c0		 test	 eax, eax
  00047	74 2a		 je	 SHORT $LN11@FindIndex
  00049	8d 86 ff 00 00
	00		 lea	 eax, DWORD PTR [esi+255]
  0004f	50		 push	 eax
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 _strcmpi
  00056	83 c4 08	 add	 esp, 8
  00059	85 c0		 test	 eax, eax
  0005b	74 16		 je	 SHORT $LN11@FindIndex

; 271  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  0005d	47		 inc	 edi
  0005e	81 c6 10 02 00
	00		 add	 esi, 528		; 00000210H
  00064	83 ff 1e	 cmp	 edi, 30			; 0000001eH
  00067	7c a7		 jl	 SHORT $LL6@FindIndex

; 281  : 		}
; 282  : 	}
; 283  : 
; 284  : 	return -1;

  00069	83 c8 ff	 or	 eax, -1
$LN7@FindIndex:
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 285  : }

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN11@FindIndex:

; 279  : 		{
; 280  : 			return i;

  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 285  : }

  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?FindIndex@CMoveCommand@@AAEHPAD@Z ENDP			; CMoveCommand::FindIndex
_TEXT	ENDS
PUBLIC	?CheckMoveMapBound@CMoveCommand@@QAEHH@Z	; CMoveCommand::CheckMoveMapBound
; Function compile flags: /Ogtp
;	COMDAT ?CheckMoveMapBound@CMoveCommand@@QAEHH@Z
_TEXT	SEGMENT
_iMapIndex$ = 8						; size = 4
?CheckMoveMapBound@CMoveCommand@@QAEHH@Z PROC		; CMoveCommand::CheckMoveMapBound, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 290  : 	switch ( iMapIndex )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMapIndex$[ebp]
  00006	48		 dec	 eax
  00007	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0000a	77 17		 ja	 SHORT $LN2@CheckMoveM
  0000c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN6@CheckMoveM[eax]
  00013	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN7@CheckMoveM[eax*4]
$LN1@CheckMoveM:

; 291  : 	{
; 292  : 		case 1:	case 2:	case 3:	case 7:	case 13:
; 293  : 			return TRUE;

  0001a	b8 01 00 00 00	 mov	 eax, 1

; 297  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN2@CheckMoveM:

; 294  : 	}
; 295  : 	
; 296  : 	return FALSE;

  00023	33 c0		 xor	 eax, eax

; 297  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
  00029	8d 49 00	 npad	 3
$LN7@CheckMoveM:
  0002c	00 00 00 00	 DD	 $LN1@CheckMoveM
  00030	00 00 00 00	 DD	 $LN2@CheckMoveM
$LN6@CheckMoveM:
  00034	00		 DB	 0
  00035	00		 DB	 0
  00036	00		 DB	 0
  00037	01		 DB	 1
  00038	01		 DB	 1
  00039	01		 DB	 1
  0003a	00		 DB	 0
  0003b	01		 DB	 1
  0003c	01		 DB	 1
  0003d	01		 DB	 1
  0003e	01		 DB	 1
  0003f	01		 DB	 1
  00040	00		 DB	 0
?CheckMoveMapBound@CMoveCommand@@QAEHH@Z ENDP		; CMoveCommand::CheckMoveMapBound
_TEXT	ENDS
PUBLIC	??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@ ; `string'
PUBLIC	??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@ ; `string'
PUBLIC	_mapname$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z	; CMoveCommand::Move
EXTRN	__imp__wsprintfA:PROC
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?Get@CMsg@@QAEPADH@Z:PROC			; CMsg::Get
EXTRN	?lMsg@@3VCMsg@@A:BYTE				; lMsg
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z:PROC ; CCastleSiegeSync::CheckCastleOwnerUnionMember
EXTRN	?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z:PROC ; CCastleSiegeSync::CheckCastleOwnerMember
EXTRN	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A:BYTE	; g_CastleSiegeSync
;	COMDAT ??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\castlesiegesync.h
CONST	SEGMENT
??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@ DB '['
	DB	'%s][%s] Use [%s %s] Fail GateNumber = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@
CONST	SEGMENT
??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@ DB '['
	DB	'%s][%s] Use [%s %s] Success : reduces money %d - %d', 00H ; `string'
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\movecommand.cpp
CONST	ENDS
;	COMDAT ?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_GateNumber$ = -268					; size = 4
_mapname$GSCopy$ = -264					; size = 4
_szTemp$156082 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_mapname$ = 12						; size = 4
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z PROC	; CMoveCommand::Move, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _mapname$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001b	57		 push	 edi

; 301  : 	int m_number = -1;
; 302  : 	int overlevel = 0;
; 303  : 	int subMoney = 2000;
; 304  : 	int index = this->FindIndex(mapname);

  0001c	50		 push	 eax
  0001d	8b d9		 mov	 ebx, ecx

; 322  : 	}
; 323  : 
; 324  : 	int NeedLevel = this->m_MoveCommandData[index].NeedLevel;

  0001f	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _mapname$GSCopy$[ebp], eax
  00025	e8 00 00 00 00	 call	 ?FindIndex@CMoveCommand@@AAEHPAD@Z ; CMoveCommand::FindIndex
  0002a	8b f8		 mov	 edi, eax
  0002c	83 ff 17	 cmp	 edi, 23			; 00000017H
  0002f	75 34		 jne	 SHORT $LN11@Move

; 305  : 
; 306  : 	if ( index == 23 )
; 307  : 	{
; 308  : 		if ( g_CastleSiegeSync.GetCastleState() == 7 )

  00031	83 3d 04 00 00
	00 07		 cmp	 DWORD PTR ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A+4, 7

; 309  : 		{
; 310  : 			return FALSE;

  00038	0f 84 9c 01 00
	00		 je	 $LN21@Move

; 311  : 		}
; 312  : 
; 313  : 		if ( g_CastleSiegeSync.CheckCastleOwnerMember(lpObj->m_Index) == FALSE && g_CastleSiegeSync.CheckCastleOwnerUnionMember(lpObj->m_Index) == FALSE)

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	50		 push	 eax
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00046	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerMember
  0004b	85 c0		 test	 eax, eax
  0004d	75 1f		 jne	 SHORT $LN10@Move
  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00051	51		 push	 ecx
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00057	e8 00 00 00 00	 call	 ?CheckCastleOwnerUnionMember@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::CheckCastleOwnerUnionMember
  0005c	85 c0		 test	 eax, eax
  0005e	75 0e		 jne	 SHORT $LN10@Move

; 314  : 		{
; 315  : 			return FALSE;

  00060	e9 75 01 00 00	 jmp	 $LN21@Move
$LN11@Move:

; 316  : 		}
; 317  : 	}
; 318  : 
; 319  : 	if ( index == -1 )

  00065	83 ff ff	 cmp	 edi, -1

; 320  : 	{
; 321  : 		return FALSE;

  00068	0f 84 6c 01 00
	00		 je	 $LN21@Move
$LN10@Move:

; 322  : 	}
; 323  : 
; 324  : 	int NeedLevel = this->m_MoveCommandData[index].NeedLevel;

  0006e	69 ff 10 02 00
	00		 imul	 edi, 528		; 00000210H

; 325  : 	int NeedZen   = this->m_MoveCommandData[index].NeedZen;
; 326  : 	int GateNumber= this->m_MoveCommandData[index].GateNumber;

  00074	8b 8c 1f 10 02
	00 00		 mov	 ecx, DWORD PTR [edi+ebx+528]
  0007b	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0007e	8b b8 0c 02 00
	00		 mov	 edi, DWORD PTR [eax+524]
  00084	8b 98 08 02 00
	00		 mov	 ebx, DWORD PTR [eax+520]

; 327  : 
; 328  : 	if ( lpObj->Class == 4 || lpObj->Class == 3 )

  0008a	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  00091	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _GateNumber$[ebp], ecx
  00097	83 f8 04	 cmp	 eax, 4
  0009a	74 05		 je	 SHORT $LN8@Move
  0009c	83 f8 03	 cmp	 eax, 3
  0009f	75 14		 jne	 SHORT $LN18@Move
$LN8@Move:

; 329  : 	{
; 330  : 		if ( NeedLevel > 0 )

  000a1	85 ff		 test	 edi, edi
  000a3	7e 10		 jle	 SHORT $LN18@Move

; 331  : 		{
; 332  : 			NeedLevel = NeedLevel *2 / 3;

  000a5	03 ff		 add	 edi, edi
  000a7	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  000ac	f7 ef		 imul	 edi
  000ae	8b fa		 mov	 edi, edx
  000b0	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  000b3	03 fa		 add	 edi, edx
$LN18@Move:

; 333  : 		}
; 334  : 	}
; 335  : 
; 336  : 	if ( GateNumber >= 0 )

  000b5	85 c9		 test	 ecx, ecx
  000b7	0f 88 e8 00 00
	00		 js	 $LN19@Move

; 337  : 	{
; 338  : 		if ( NeedLevel <= lpObj->Level )

  000bd	0f bf 96 9c 00
	00 00		 movsx	 edx, WORD PTR [esi+156]
  000c4	3b fa		 cmp	 edi, edx
  000c6	0f 8f a7 00 00
	00		 jg	 $LN5@Move

; 339  : 		{
; 340  : 			if ( (lpObj->Money - NeedZen ) >= 0 )

  000cc	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]
  000d2	2b c3		 sub	 eax, ebx
  000d4	78 7e		 js	 SHORT $LN4@Move

; 341  : 			{
; 342  : 				if ( gObjMoveGate(lpObj->m_Index, GateNumber ) != FALSE )

  000d6	51		 push	 ecx
  000d7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  000df	83 c4 08	 add	 esp, 8
  000e2	85 c0		 test	 eax, eax
  000e4	0f 84 bb 00 00
	00		 je	 $LN19@Move

; 343  : 				{
; 344  : 					lpObj->m_bPShopRedrawAbs = true;
; 345  : 					lpObj->Money -= NeedZen;

  000ea	29 9e b0 00 00
	00		 sub	 DWORD PTR [esi+176], ebx
  000f0	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]

; 346  : 
; 347  : 					LogAdd(LOG_BLACK, "[%s][%s] Use [%s %s] Success : reduces money %d - %d"
; 348  : 						, lpObj->AccountID, lpObj->Name,
; 349  : 						lMsg.Get(MSGGET(11, 185)), mapname, lpObj->Money, NeedLevel);

  000f6	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _mapname$GSCopy$[ebp]
  000fc	57		 push	 edi
  000fd	50		 push	 eax
  000fe	52		 push	 edx
  000ff	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  00104	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00109	c6 86 2b 0d 00
	00 01		 mov	 BYTE PTR [esi+3371], 1
  00110	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00115	50		 push	 eax
  00116	8d 46 6f	 lea	 eax, DWORD PTR [esi+111]
  00119	50		 push	 eax
  0011a	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  0011d	51		 push	 ecx
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@
  00123	6a 00		 push	 0
  00125	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd

; 350  : 
; 351  : 					GCMoneySend(lpObj->m_Index, lpObj->Money );

  0012a	8b 96 b0 00 00
	00		 mov	 edx, DWORD PTR [esi+176]
  00130	8b 06		 mov	 eax, DWORD PTR [esi]
  00132	52		 push	 edx
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00139	83 c4 28	 add	 esp, 40			; 00000028H
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi

; 352  : 					return TRUE;

  0013e	b8 01 00 00 00	 mov	 eax, 1
  00143	5b		 pop	 ebx

; 372  : 	return FALSE;
; 373  : 
; 374  : }

  00144	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00147	33 cd		 xor	 ecx, ebp
  00149	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c2 08 00	 ret	 8
$LN4@Move:

; 353  : 				}
; 354  : 			}
; 355  : 			else
; 356  : 			{
; 357  : 				::GCServerMsgStringSend(lMsg.Get(MSGGET(4, 102)), lpObj->m_Index, 1);

  00154	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00156	6a 01		 push	 1
  00158	51		 push	 ecx
  00159	68 66 04 00 00	 push	 1126			; 00000466H
  0015e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  00163	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 358  : 			}
; 359  : 		}
; 360  : 		else

  00171	eb 32		 jmp	 SHORT $LN19@Move
$LN5@Move:

; 361  : 		{
; 362  : 			char szTemp[256];
; 363  : 
; 364  : 			wsprintf(szTemp, lMsg.Get(MSGGET(4, 93)), NeedLevel);

  00173	57		 push	 edi
  00174	68 5d 04 00 00	 push	 1117			; 0000045dH
  00179	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  0017e	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  00183	50		 push	 eax
  00184	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$156082[ebp]
  0018a	52		 push	 edx
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 365  : 			::GCServerMsgStringSend(szTemp, lpObj->m_Index, 1);

  00191	8b 06		 mov	 eax, DWORD PTR [esi]
  00193	6a 01		 push	 1
  00195	50		 push	 eax
  00196	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$156082[ebp]
  0019c	51		 push	 ecx
  0019d	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  001a2	83 c4 18	 add	 esp, 24			; 00000018H
$LN19@Move:

; 366  : 		}
; 367  : 	}
; 368  : 
; 369  : 	LogAdd(LOG_BLACK, "[%s][%s] Use [%s %s] Fail GateNumber = %d",
; 370  : 		lpObj->AccountID, lpObj->Name,
; 371  : 		lMsg.Get(MSGGET(11, 185)), mapname, GateNumber);

  001a5	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _GateNumber$[ebp]
  001ab	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _mapname$GSCopy$[ebp]
  001b1	52		 push	 edx
  001b2	50		 push	 eax
  001b3	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  001b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VCMsg@@A ; lMsg
  001bd	e8 00 00 00 00	 call	 ?Get@CMsg@@QAEPADH@Z	; CMsg::Get
  001c2	50		 push	 eax
  001c3	8d 4e 6f	 lea	 ecx, DWORD PTR [esi+111]
  001c6	51		 push	 ecx
  001c7	83 c6 64	 add	 esi, 100		; 00000064H
  001ca	56		 push	 esi
  001cb	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@DALHCGNG@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateNu@
  001d0	6a 00		 push	 0
  001d2	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  001d7	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN21@Move:

; 372  : 	return FALSE;
; 373  : 
; 374  : }

  001da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
  001df	33 cd		 xor	 ecx, ebp
  001e1	33 c0		 xor	 eax, eax
  001e3	5b		 pop	 ebx
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c2 08 00	 ret	 8
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z ENDP	; CMoveCommand::Move
_TEXT	ENDS
PUBLIC	?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z	; GetKalimaGateLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z PROC	; GetKalimaGateLevel, COMDAT

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 379  : 	if ( lpObj->Class == 3 || lpObj->Class == 4 )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	0f b7 81 98 00
	00 00		 movzx	 eax, WORD PTR [ecx+152]
  0000d	83 f8 03	 cmp	 eax, 3
  00010	74 2d		 je	 SHORT $LN10@GetKalimaG
  00012	83 f8 04	 cmp	 eax, 4
  00015	74 28		 je	 SHORT $LN10@GetKalimaG

; 384  : 			{
; 385  : 				return i;
; 386  : 			}
; 387  : 		}
; 388  : 	}
; 389  : 	else
; 390  : 	{
; 391  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  00017	0f bf 91 9c 00
	00 00		 movsx	 edx, WORD PTR [ecx+156]
  0001e	33 c0		 xor	 eax, eax
  00020	b9 04 00 00 00	 mov	 ecx, OFFSET _g_sttKALIMAGATE_LEVEL+4
$LL4@GetKalimaG:

; 392  : 		{
; 393  : 			if ( lpObj->Level >= g_sttKALIMAGATE_LEVEL[i].iLOWER_BOUND && lpObj->Level <= g_sttKALIMAGATE_LEVEL[i].iUPPER_BOUND )

  00025	3b 51 fc	 cmp	 edx, DWORD PTR [ecx-4]
  00028	7c 04		 jl	 SHORT $LN3@GetKalimaG
  0002a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002c	7e 3a		 jle	 SHORT $LN12@GetKalimaG
$LN3@GetKalimaG:

; 384  : 			{
; 385  : 				return i;
; 386  : 			}
; 387  : 		}
; 388  : 	}
; 389  : 	else
; 390  : 	{
; 391  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  0002e	83 c1 10	 add	 ecx, 16			; 00000010H
  00031	40		 inc	 eax
  00032	81 f9 74 00 00
	00		 cmp	 ecx, OFFSET _g_sttKALIMAGATE_LEVEL+116
  00038	7c eb		 jl	 SHORT $LL4@GetKalimaG

; 394  : 			{
; 395  : 				return i;
; 396  : 			}
; 397  : 		}
; 398  : 	}
; 399  : 
; 400  : 	return -1;

  0003a	83 c8 ff	 or	 eax, -1

; 401  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN10@GetKalimaG:

; 380  : 	{
; 381  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  0003f	0f bf 91 9c 00
	00 00		 movsx	 edx, WORD PTR [ecx+156]
  00046	33 c0		 xor	 eax, eax
  00048	b9 0c 00 00 00	 mov	 ecx, OFFSET _g_sttKALIMAGATE_LEVEL+12
  0004d	8d 49 00	 npad	 3
$LL9@GetKalimaG:

; 382  : 		{
; 383  : 			if ( lpObj->Level >= g_sttKALIMAGATE_LEVEL[i].iLOWER_BOUND_MAGUMSA && lpObj->Level <= g_sttKALIMAGATE_LEVEL[i].iUPPER_BOUND_MAGUMSA )

  00050	3b 51 fc	 cmp	 edx, DWORD PTR [ecx-4]
  00053	7c 04		 jl	 SHORT $LN8@GetKalimaG
  00055	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00057	7e 0f		 jle	 SHORT $LN12@GetKalimaG
$LN8@GetKalimaG:

; 380  : 	{
; 381  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  00059	83 c1 10	 add	 ecx, 16			; 00000010H
  0005c	40		 inc	 eax
  0005d	81 f9 7c 00 00
	00		 cmp	 ecx, OFFSET _g_sttKALIMAGATE_LEVEL+124
  00063	7c eb		 jl	 SHORT $LL9@GetKalimaG

; 394  : 			{
; 395  : 				return i;
; 396  : 			}
; 397  : 		}
; 398  : 	}
; 399  : 
; 400  : 	return -1;

  00065	83 c8 ff	 or	 eax, -1
$LN12@GetKalimaG:

; 401  : }

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z ENDP	; GetKalimaGateLevel
_TEXT	ENDS
PUBLIC	?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::MoveFree2Kalima
; Function compile flags: /Ogtp
;	COMDAT ?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::MoveFree2Kalima, COMDAT
; _this$ = ecx

; 407  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 408  : 	int iIdx = GetKalimaGateLevel(lpObj);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z ; GetKalimaGateLevel
  0000d	83 c4 04	 add	 esp, 4

; 409  : 
; 410  : 	if ( iIdx >= 6 )

  00010	83 f8 06	 cmp	 eax, 6
  00013	7c 19		 jl	 SHORT $LN2@MoveFree2K

; 411  : 		iIdx = 5;

  00015	b8 05 00 00 00	 mov	 eax, 5
$LN1@MoveFree2K:

; 416  : 	}
; 417  : 
; 418  : 	int iGateNumber = iIdx + 88;

  0001a	83 c0 58	 add	 eax, 88			; 00000058H

; 419  : 
; 420  : 	return gObjMoveGate(lpObj->m_Index, iGateNumber);

  0001d	50		 push	 eax
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00026	83 c4 08	 add	 esp, 8
  00029	5e		 pop	 esi

; 421  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN2@MoveFree2K:

; 412  : 
; 413  : 	if ( iIdx < 0 )

  0002e	85 c0		 test	 eax, eax
  00030	79 e8		 jns	 SHORT $LN1@MoveFree2K

; 414  : 	{
; 415  : 		return FALSE;

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 421  : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::MoveFree2Kalima
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCMoveCommand@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMoveCommand@@UAEPAXI@Z PROC			; CMoveCommand::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMoveCommand@@UAE@XZ	; CMoveCommand::~CMoveCommand
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCMoveCommand@@UAEPAXI@Z ENDP			; CMoveCommand::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgMoveCommand@@YAXXZ
text$yc	SEGMENT
??__EgMoveCommand@@YAXXZ PROC				; `dynamic initializer for 'gMoveCommand'', COMDAT

; 19   : CMoveCommand gMoveCommand;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  00005	e8 00 00 00 00	 call	 ??0CMoveCommand@@QAE@XZ	; CMoveCommand::CMoveCommand
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgMoveCommand@@YAXXZ ; `dynamic atexit destructor for 'gMoveCommand''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgMoveCommand@@YAXXZ ENDP				; `dynamic initializer for 'gMoveCommand''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgMoveCommand@@YAXXZ
text$yd	SEGMENT
??__FgMoveCommand@@YAXXZ PROC				; `dynamic atexit destructor for 'gMoveCommand'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  00005	e9 00 00 00 00	 jmp	 ??1CMoveCommand@@UAE@XZ	; CMoveCommand::~CMoveCommand
??__FgMoveCommand@@YAXXZ ENDP				; `dynamic atexit destructor for 'gMoveCommand''
text$yd	ENDS
PUBLIC	?gMoveCommand@@3VCMoveCommand@@A		; gMoveCommand
_BSS	SEGMENT
?gMoveCommand@@3VCMoveCommand@@A DB 040b4H DUP (?)	; gMoveCommand
_BSS	ENDS
CRT$XCU	SEGMENT
_gMoveCommand$initializer$ DD FLAT:??__EgMoveCommand@@YAXXZ
CRT$XCU	ENDS
END
