; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\ObjAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_sttBLOODCASTLE_LEVEL DD 0fH
	DD	050H
	DD	0aH
	DD	03cH
	DD	051H
	DD	082H
	DD	03dH
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
_g_sttCHAOSCASTLE_LEVEL DD 0aH
	DD	031H
	DD	0aH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
_g_iChaosCastle_BlowOutDistance DD 03H
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
_g_iChaosCastle_BlowOutDamage DD 0fH
	DD	0fH
	DD	0aH
	DD	05H
_g_iChaosCastle_EnterCost DD 061a8H
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
_g_iChaosCastle_GuardSetValue DD 09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
_g_iChaosCastle_MonsterItems DD 01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
_g_iChaosCastle_GroundAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
_g_iChaosCastle_DamageAxis DD 017H
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
_g_iChaosCastle_MapHollowZone DD 017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
PUBLIC	??_7CObjAttack@@6B@				; CObjAttack::`vftable'
PUBLIC	??0CObjAttack@@QAE@XZ				; CObjAttack::CObjAttack
PUBLIC	??_R4CObjAttack@@6B@				; CObjAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCObjAttack@@@8				; CObjAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjAttack@@8				; CObjAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjAttack@@8				; CObjAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObjAttack@@8			; CObjAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CObjBaseAttack@@8			; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObjBaseAttack@@@8			; CObjBaseAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Base Class Array'
EXTRN	??1CObjBaseAttack@@UAE@XZ:PROC			; CObjBaseAttack::~CObjBaseAttack
EXTRN	??0MULua@@QAE@_N@Z:PROC				; MULua::MULua
EXTRN	??0CObjBaseAttack@@QAE@XZ:PROC			; CObjBaseAttack::CObjBaseAttack
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECObjAttack@@UAEPAXI@Z:PROC			; CObjAttack::`vector deleting destructor'
EXTRN	?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAH@Z:PROC ; CObjBaseAttack::MissCheck
;	COMDAT ??_R2CObjBaseAttack@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\objattack.cpp
rdata$r	SEGMENT
??_R2CObjBaseAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8 ; CObjBaseAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObjBaseAttack@@8
rdata$r	SEGMENT
??_R3CObjBaseAttack@@8 DD 00H				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjBaseAttack@@@8
_DATA	SEGMENT
??_R0?AVCObjBaseAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjBaseAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjBaseAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CObjBaseAttack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjBaseAttack@@8 DD FLAT:??_R0?AVCObjBaseAttack@@@8 ; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObjAttack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjAttack@@8 DD FLAT:??_R0?AVCObjAttack@@@8 ; CObjAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CObjAttack@@8
rdata$r	SEGMENT
??_R2CObjAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjAttack@@8	; CObjAttack::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R3CObjAttack@@8
rdata$r	SEGMENT
??_R3CObjAttack@@8 DD 00H				; CObjAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjAttack@@@8
_DATA	SEGMENT
??_R0?AVCObjAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjAttack@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CObjAttack@@6B@
rdata$r	SEGMENT
??_R4CObjAttack@@6B@ DD 00H				; CObjAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCObjAttack@@@8
	DD	FLAT:??_R3CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_7CObjAttack@@6B@
CONST	SEGMENT
??_7CObjAttack@@6B@ DD FLAT:??_R4CObjAttack@@6B@	; CObjAttack::`vftable'
	DD	FLAT:??_ECObjAttack@@UAEPAXI@Z
	DD	FLAT:?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAH@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CObjAttack@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CObjAttack@@QAE@XZ$0
__ehfuncinfo$??0CObjAttack@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CObjAttack@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0CObjAttack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CObjAttack@@QAE@XZ PROC				; CObjAttack::CObjAttack, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CObjAttack@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CObjBaseAttack@@QAE@XZ ; CObjBaseAttack::CObjBaseAttack
  0002e	6a 00		 push	 0
  00030	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CObjAttack@@6B@
  00040	e8 00 00 00 00	 call	 ??0MULua@@QAE@_N@Z	; MULua::MULua

; 17   : 	return;
; 18   : }

  00045	8b c6		 mov	 eax, esi
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CObjAttack@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObjBaseAttack@@UAE@XZ ; CObjBaseAttack::~CObjBaseAttack
__ehhandler$??0CObjAttack@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CObjAttack@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CObjAttack@@QAE@XZ ENDP				; CObjAttack::CObjAttack
PUBLIC	??1CObjAttack@@UAE@XZ				; CObjAttack::~CObjAttack
EXTRN	??1MULua@@QAE@XZ:PROC				; MULua::~MULua
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CObjAttack@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CObjAttack@@UAE@XZ$0
__ehfuncinfo$??1CObjAttack@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CObjAttack@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1CObjAttack@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CObjAttack@@UAE@XZ PROC				; CObjAttack::~CObjAttack, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CObjAttack@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CObjAttack@@6B@

; 22   : 	return;
; 23   : }

  0002f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	e8 00 00 00 00	 call	 ??1MULua@@QAE@XZ	; MULua::~MULua
  0003e	8b ce		 mov	 ecx, esi
  00040	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00047	e8 00 00 00 00	 call	 ??1CObjBaseAttack@@UAE@XZ ; CObjBaseAttack::~CObjBaseAttack
  0004c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00056	59		 pop	 ecx
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CObjAttack@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObjBaseAttack@@UAE@XZ ; CObjBaseAttack::~CObjBaseAttack
__ehhandler$??1CObjAttack@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CObjAttack@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CObjAttack@@UAE@XZ ENDP				; CObjAttack::~CObjAttack
PUBLIC	?Load@CObjAttack@@QAEXXZ			; CObjAttack::Load
; Function compile flags: /Ogtp
;	COMDAT ?Load@CObjAttack@@QAEXXZ
_TEXT	SEGMENT
?Load@CObjAttack@@QAEXXZ PROC				; CObjAttack::Load, COMDAT
; _this$ = ecx

; 27   : 	//this->m_Lua.DoFile(".\\Customs\\Scripts\\Attack.lua");
; 28   : }

  00000	c3		 ret	 0
?Load@CObjAttack@@QAEXXZ ENDP				; CObjAttack::Load
_TEXT	ENDS
PUBLIC	?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z ; CObjAttack::GetAttackDamage
EXTRN	_rand:PROC
EXTRN	?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CObjBaseAttack::GetPartyMemberCount
EXTRN	?GetSkillAttr@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillAttr
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?DefMagicInf@@3PAVCMagicInf@@A:BYTE		; DefMagicInf
EXTRN	__except_handler4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffb4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN58@GetAttackD
	DD	FLAT:$LN59@GetAttackD
	DD	0fffffffeH
	DD	FLAT:$LN62@GetAttackD
	DD	FLAT:$LN63@GetAttackD
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_Right$ = -60						; size = 4
_this$ = -56						; size = 4
_Left$ = -52						; size = 4
_bTwoHandWeapon$ = -48					; size = 4
_cDamage$156002 = -44					; size = 4
_sub$ = -40						; size = 4
_SkillRightMaxDamage$ = -36				; size = 4
_SkillLeftMinDamage$ = -32				; size = 4
_SkillLeftMaxDamage$ = -28				; size = 4
__$SEHRec$ = -24					; size = 24
tv919 = 8						; size = 4
_lpObj$ = 8						; size = 4
_targetDefense$ = 12					; size = 4
_effect$ = 16						; size = 4
_bIsOnDuel$ = 20					; size = 4
tv915 = 24						; size = 4
tv622 = 24						; size = 4
tv620 = 24						; size = 4
_lpMagic$ = 24						; size = 4
?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z PROC ; CObjAttack::GetAttackDamage, COMDAT
; _this$ = ecx

; 1106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00033	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 1107 : 	int ad;
; 1108 : 	int sub;
; 1109 : 	int SkillRightMaxDamage =0;

  00036	33 ff		 xor	 edi, edi
  00038	89 7d dc	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], edi

; 1110 : 	int SkillRightMinDamage =0;

  0003b	33 db		 xor	 ebx, ebx

; 1111 : 	int SkillLeftMaxDamage =0;

  0003d	89 7d e4	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], edi

; 1112 : 	int SkillLeftMinDamage =0;

  00040	89 7d e0	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], edi

; 1113 : 	CItem * Right = &lpObj->pInventory[0];

  00043	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00046	8b 86 8c 0c 00
	00		 mov	 eax, DWORD PTR [esi+3212]
  0004c	8b c8		 mov	 ecx, eax
  0004e	89 4d c4	 mov	 DWORD PTR _Right$[ebp], ecx

; 1114 : 	CItem * Left = &lpObj->pInventory[1];

  00051	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  00056	89 45 cc	 mov	 DWORD PTR _Left$[ebp], eax

; 1115 : 	BOOL bTwoHandWeapon = FALSE;

  00059	89 7d d0	 mov	 DWORD PTR _bTwoHandWeapon$[ebp], edi

; 1116 : 
; 1117 : 	if ( lpObj->Type == OBJ_MONSTER || lpObj->Type == OBJ_NPC )

  0005c	0f b7 46 60	 movzx	 eax, WORD PTR [esi+96]
  00060	83 f8 02	 cmp	 eax, 2
  00063	0f 84 8f 03 00
	00		 je	 $LN53@GetAttackD
  00069	83 f8 03	 cmp	 eax, 3
  0006c	0f 84 86 03 00
	00		 je	 $LN53@GetAttackD

; 1124 : 	}
; 1125 : 	else
; 1126 : 	{
; 1127 : 		int cDamage=0;

  00072	89 7d d4	 mov	 DWORD PTR _cDamage$156002[ebp], edi

; 1128 : 
; 1129 : 		if ( lpObj->Class == CLASS_DARKLORD ||
; 1130 : 			 lpObj->Class == CLASS_KNIGHT   ||
; 1131 : 			 lpObj->Class == CLASS_MAGUMSA )

  00075	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  0007c	83 f8 04	 cmp	 eax, 4
  0007f	74 0a		 je	 SHORT $LN50@GetAttackD
  00081	83 f8 01	 cmp	 eax, 1
  00084	74 05		 je	 SHORT $LN50@GetAttackD
  00086	83 f8 03	 cmp	 eax, 3
  00089	75 3e		 jne	 SHORT $LN48@GetAttackD
$LN50@GetAttackD:

; 1132 : 		{
; 1133 : 			if ( Right->m_Type >= ITEMGET(0,0) && Right->m_Type < ITEMGET(4,0) &&
; 1134 : 				 Left->m_Type >= ITEMGET(0,0) && Left->m_Type < ITEMGET(4,0) )

  0008b	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  0008f	66 3b c7	 cmp	 ax, di
  00092	7c 35		 jl	 SHORT $LN48@GetAttackD
  00094	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00099	66 3b c2	 cmp	 ax, dx
  0009c	7d 2b		 jge	 SHORT $LN48@GetAttackD
  0009e	8b 45 cc	 mov	 eax, DWORD PTR _Left$[ebp]
  000a1	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  000a5	66 85 c0	 test	 ax, ax
  000a8	78 1f		 js	 SHORT $LN48@GetAttackD
  000aa	66 3b c2	 cmp	 ax, dx
  000ad	7d 1a		 jge	 SHORT $LN48@GetAttackD

; 1135 : 			{
; 1136 : 				if ( Right->m_IsValidItem && Left->m_IsValidItem )

  000af	38 99 94 00 00
	00		 cmp	 BYTE PTR [ecx+148], bl
  000b5	74 12		 je	 SHORT $LN48@GetAttackD
  000b7	8b 45 cc	 mov	 eax, DWORD PTR _Left$[ebp]
  000ba	38 98 94 00 00
	00		 cmp	 BYTE PTR [eax+148], bl
  000c0	74 07		 je	 SHORT $LN48@GetAttackD

; 1137 : 				{
; 1138 : 					bTwoHandWeapon = TRUE;

  000c2	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _bTwoHandWeapon$[ebp], 1
$LN48@GetAttackD:

; 1139 : 				}
; 1140 : 			}
; 1141 : 		}
; 1142 : 
; 1143 : 		if ( lpMagic )

  000c9	39 5d 18	 cmp	 DWORD PTR _lpMagic$[ebp], ebx
  000cc	0f 84 87 01 00
	00		 je	 $LN37@GetAttackD

; 1144 : 		{
; 1145 : 			if ( lpMagic ->m_Skill == 60 && lpObj->SkillLongSpearChange )	// #error 60 and skil from GEt is 66???

  000d2	8b 45 18	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000d5	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  000d8	80 f9 3c	 cmp	 cl, 60			; 0000003cH
  000db	75 16		 jne	 SHORT $LN46@GetAttackD
  000dd	38 9e bb 10 00
	00		 cmp	 BYTE PTR [esi+4283], bl
  000e3	74 0e		 je	 SHORT $LN46@GetAttackD

; 1146 : 			{
; 1147 : 				SkillRightMaxDamage = DefMagicInf[66].m_DamageMax;// #error ???

  000e5	8b 3d 2c 04 00
	00		 mov	 edi, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A+1068

; 1148 : 				SkillRightMinDamage = DefMagicInf[66].m_DamageMin;// #error ???

  000eb	8b 1d 28 04 00
	00		 mov	 ebx, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A+1064

; 1149 : 			}
; 1150 : 			else

  000f1	eb 06		 jmp	 SHORT $LN45@GetAttackD
$LN46@GetAttackD:

; 1151 : 			{
; 1152 : 				SkillRightMaxDamage = lpMagic->m_DamageMax;

  000f3	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]

; 1153 : 				SkillRightMinDamage = lpMagic->m_DamageMin;

  000f6	8b 58 08	 mov	 ebx, DWORD PTR [eax+8]
$LN45@GetAttackD:

; 1154 : 			}
; 1155 : 
; 1156 : 			if ( bTwoHandWeapon == FALSE )

  000f9	83 7d d0 00	 cmp	 DWORD PTR _bTwoHandWeapon$[ebp], 0
  000fd	75 06		 jne	 SHORT $LN44@GetAttackD

; 1157 : 			{
; 1158 : 				SkillLeftMaxDamage = SkillRightMaxDamage;

  000ff	89 7d e4	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], edi

; 1159 : 				SkillLeftMinDamage = SkillRightMinDamage;

  00102	89 5d e0	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], ebx
$LN44@GetAttackD:

; 1160 : 			}
; 1161 : 
; 1162 : 			SkillRightMaxDamage += lpObj->SetOpAddSkillAttack;

  00105	0f bf 86 60 0f
	00 00		 movsx	 eax, WORD PTR [esi+3936]
  0010c	03 f8		 add	 edi, eax
  0010e	89 7d dc	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], edi

; 1163 : 			SkillRightMinDamage += lpObj->SetOpAddSkillAttack;

  00111	03 d8		 add	 ebx, eax

; 1164 : 			SkillLeftMaxDamage += lpObj->SetOpAddSkillAttack;

  00113	01 45 e4	 add	 DWORD PTR _SkillLeftMaxDamage$[ebp], eax

; 1165 : 			SkillLeftMinDamage += lpObj->SetOpAddSkillAttack;

  00116	01 45 e0	 add	 DWORD PTR _SkillLeftMinDamage$[ebp], eax

; 1166 : 
; 1167 : 			int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  00119	0f b6 c9	 movzx	 ecx, cl
  0011c	51		 push	 ecx
  0011d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00122	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr

; 1168 : 
; 1169 : 			if ( SkillAttr != -1 )

  00127	83 f8 ff	 cmp	 eax, -1
  0012a	74 15		 je	 SHORT $LN43@GetAttackD

; 1170 : 			{
; 1171 : 				SkillRightMaxDamage += (BYTE)lpObj->m_AddResistance[SkillAttr];

  0012c	0f b6 84 30 69
	03 00 00	 movzx	 eax, BYTE PTR [eax+esi+873]
  00134	03 f8		 add	 edi, eax
  00136	89 7d dc	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], edi

; 1172 : 				SkillRightMinDamage += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00139	03 d8		 add	 ebx, eax

; 1173 : 				SkillLeftMaxDamage  += (BYTE)lpObj->m_AddResistance[SkillAttr];

  0013b	01 45 e4	 add	 DWORD PTR _SkillLeftMaxDamage$[ebp], eax

; 1174 : 				SkillLeftMinDamage  += (BYTE)lpObj->m_AddResistance[SkillAttr];

  0013e	01 45 e0	 add	 DWORD PTR _SkillLeftMinDamage$[ebp], eax
$LN43@GetAttackD:

; 1175 : 			}
; 1176 : 
; 1177 : 			if ( lpMagic->m_Skill == 65 )

  00141	8b 55 18	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00144	8a 42 05	 mov	 al, BYTE PTR [edx+5]
  00147	3c 41		 cmp	 al, 65			; 00000041H
  00149	75 34		 jne	 SHORT $LN42@GetAttackD

; 1178 : 			{
; 1179 : 				int iPartyCount = this->GetPartyMemberCount(lpObj);

  0014b	56		 push	 esi
  0014c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	e8 00 00 00 00	 call	 ?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::GetPartyMemberCount
  00154	8b c8		 mov	 ecx, eax

; 1180 : 				int addskilldamage = ( lpObj->Leadership + lpObj->AddLeadership ) / 10 + ( iPartyCount * 50 );	// #formula

  00156	0f b7 96 da 00
	00 00		 movzx	 edx, WORD PTR [esi+218]
  0015d	0f b7 86 d8 00
	00 00		 movzx	 eax, WORD PTR [esi+216]
  00164	03 d0		 add	 edx, eax
  00166	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0016b	f7 ea		 imul	 edx
  0016d	c1 fa 02	 sar	 edx, 2
  00170	8b c2		 mov	 eax, edx
  00172	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00175	03 c2		 add	 eax, edx
  00177	6b c9 32	 imul	 ecx, 50			; 00000032H

; 1181 : 
; 1182 : 				SkillRightMaxDamage += addskilldamage;
; 1183 : 				SkillRightMinDamage += addskilldamage;
; 1184 : 				SkillLeftMaxDamage += addskilldamage;
; 1185 : 				SkillLeftMinDamage += addskilldamage;

  0017a	e9 cb 00 00 00	 jmp	 $LN78@GetAttackD
$LN42@GetAttackD:

; 1186 : 			}
; 1187 : 			else if( lpMagic->m_Skill == 62 )

  0017f	3c 3e		 cmp	 al, 62			; 0000003eH
  00181	75 75		 jne	 SHORT $LN40@GetAttackD

; 1188 : 			{
; 1189 : 				if ( lpObj->pInventory[8].m_Type == ITEMGET(13,4) )	// Dark Horse

  00183	8b 86 8c 0c 00
	00		 mov	 eax, DWORD PTR [esi+3212]
  00189	b9 04 1a 00 00	 mov	 ecx, 6660		; 00001a04H
  0018e	66 39 88 46 05
	00 00		 cmp	 WORD PTR [eax+1350], cx
  00195	0f 85 be 00 00
	00		 jne	 $LN37@GetAttackD

; 1190 : 				{
; 1191 : 					int addskilldamage = ( lpObj->Strength + lpObj->AddStrength ) / 10 + ( lpObj->Leadership + lpObj->AddLeadership ) / 5 + lpObj->pInventory[8].m_PetItem_Level * 10;	// #formula

  0019b	0f b7 8e da 00
	00 00		 movzx	 ecx, WORD PTR [esi+218]
  001a2	0f b7 96 d8 00
	00 00		 movzx	 edx, WORD PTR [esi+216]
  001a9	03 ca		 add	 ecx, edx
  001ab	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001b0	f7 e9		 imul	 ecx
  001b2	d1 fa		 sar	 edx, 1
  001b4	8b c2		 mov	 eax, edx
  001b6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b9	03 c2		 add	 eax, edx
  001bb	0f bf 8e e0 00
	00 00		 movsx	 ecx, WORD PTR [esi+224]
  001c2	0f b7 96 b4 00
	00 00		 movzx	 edx, WORD PTR [esi+180]
  001c9	03 ca		 add	 ecx, edx
  001cb	89 45 18	 mov	 DWORD PTR tv622[ebp], eax
  001ce	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001d3	f7 e9		 imul	 ecx
  001d5	c1 fa 02	 sar	 edx, 2
  001d8	8b ca		 mov	 ecx, edx
  001da	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001dd	8b 45 18	 mov	 eax, DWORD PTR tv622[ebp]
  001e0	03 c2		 add	 eax, edx
  001e2	03 c8		 add	 ecx, eax
  001e4	8b 86 8c 0c 00
	00		 mov	 eax, DWORD PTR [esi+3212]
  001ea	8b 80 e0 05 00
	00		 mov	 eax, DWORD PTR [eax+1504]
  001f0	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  001f3	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]

; 1192 : 
; 1193 : 					SkillRightMaxDamage += addskilldamage;
; 1194 : 					SkillRightMinDamage += addskilldamage;
; 1195 : 					SkillLeftMaxDamage += addskilldamage;
; 1196 : 					SkillLeftMinDamage += addskilldamage;
; 1197 : 				}
; 1198 : 			}

  001f6	eb 54		 jmp	 SHORT $LN79@GetAttackD
$LN40@GetAttackD:

; 1199 : 			else if ( lpObj->Class == CLASS_DARKLORD )

  001f8	66 83 be 98 00
	00 00 04	 cmp	 WORD PTR [esi+152], 4
  00200	75 57		 jne	 SHORT $LN37@GetAttackD

; 1200 : 			{
; 1201 : 				int iadddamage = ( lpObj->Strength + lpObj->AddStrength ) / 25 + ( lpObj->Energy + lpObj->AddEnergy ) / 50;	// #formula

  00202	0f bf 8e e6 00
	00 00		 movsx	 ecx, WORD PTR [esi+230]
  00209	0f b7 86 ba 00
	00 00		 movzx	 eax, WORD PTR [esi+186]
  00210	03 c8		 add	 ecx, eax
  00212	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00217	f7 e9		 imul	 ecx
  00219	c1 fa 04	 sar	 edx, 4
  0021c	8b c2		 mov	 eax, edx
  0021e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00221	03 c2		 add	 eax, edx
  00223	0f bf 8e e0 00
	00 00		 movsx	 ecx, WORD PTR [esi+224]
  0022a	0f b7 96 b4 00
	00 00		 movzx	 edx, WORD PTR [esi+180]
  00231	03 ca		 add	 ecx, edx
  00233	89 45 18	 mov	 DWORD PTR tv620[ebp], eax
  00236	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0023b	f7 e9		 imul	 ecx
  0023d	c1 fa 03	 sar	 edx, 3
  00240	8b c2		 mov	 eax, edx
  00242	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00245	8b 4d 18	 mov	 ecx, DWORD PTR tv620[ebp]
  00248	03 ca		 add	 ecx, edx
$LN78@GetAttackD:
  0024a	03 c1		 add	 eax, ecx
$LN79@GetAttackD:

; 1202 : 
; 1203 : 				SkillRightMaxDamage += iadddamage;

  0024c	03 f8		 add	 edi, eax

; 1204 : 				SkillRightMinDamage += iadddamage;

  0024e	03 d8		 add	 ebx, eax

; 1205 : 				SkillLeftMaxDamage += iadddamage;

  00250	01 45 e4	 add	 DWORD PTR _SkillLeftMaxDamage$[ebp], eax

; 1202 : 
; 1203 : 				SkillRightMaxDamage += iadddamage;

  00253	89 7d dc	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], edi

; 1206 : 				SkillLeftMinDamage += iadddamage;

  00256	01 45 e0	 add	 DWORD PTR _SkillLeftMinDamage$[ebp], eax
$LN37@GetAttackD:

; 1207 : 			}
; 1208 : 		}
; 1209 : 
; 1210 : 		if ( lpObj->m_CriticalDamage > 0 )

  00259	83 be 2c 03 00
	00 00		 cmp	 DWORD PTR [esi+812], 0
  00260	7e 22		 jle	 SHORT $LN35@GetAttackD

; 1211 : 		{
; 1212 : 			if ( (rand()%100) < lpObj->m_CriticalDamage )

  00262	e8 00 00 00 00	 call	 _rand
  00267	99		 cdq
  00268	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0026d	f7 f9		 idiv	 ecx
  0026f	3b 96 2c 03 00
	00		 cmp	 edx, DWORD PTR [esi+812]
  00275	7d 0d		 jge	 SHORT $LN35@GetAttackD

; 1213 : 			{
; 1214 : 				cDamage = TRUE;

  00277	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _cDamage$156002[ebp], 1

; 1215 : 				effect = 3;

  0027e	8b 55 10	 mov	 edx, DWORD PTR _effect$[ebp]
  00281	c6 02 03	 mov	 BYTE PTR [edx], 3
$LN35@GetAttackD:

; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 : 		if ( lpObj->m_ExcelentDamage > 0 )

  00284	83 be 30 03 00
	00 00		 cmp	 DWORD PTR [esi+816], 0
  0028b	7e 22		 jle	 SHORT $LN33@GetAttackD

; 1220 : 		{
; 1221 : 			if ( (rand()%100) < lpObj->m_ExcelentDamage )

  0028d	e8 00 00 00 00	 call	 _rand
  00292	99		 cdq
  00293	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00298	f7 f9		 idiv	 ecx
  0029a	3b 96 30 03 00
	00		 cmp	 edx, DWORD PTR [esi+816]
  002a0	7d 0d		 jge	 SHORT $LN33@GetAttackD

; 1222 : 			{
; 1223 : 				cDamage = TRUE;

  002a2	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _cDamage$156002[ebp], 1

; 1224 : 				effect = 2;

  002a9	8b 55 10	 mov	 edx, DWORD PTR _effect$[ebp]
  002ac	c6 02 02	 mov	 BYTE PTR [edx], 2
$LN33@GetAttackD:

; 1225 : 			}
; 1226 : 		}
; 1227 : 
; 1228 : 		__try

  002af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 1229 : 		{
; 1230 : 			sub = ( lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage ) - ( lpObj->m_AttackDamageMinRight + SkillRightMinDamage );	// #formula

  002b6	8b 86 fc 02 00
	00		 mov	 eax, DWORD PTR [esi+764]
  002bc	2b 86 00 03 00
	00		 sub	 eax, DWORD PTR [esi+768]
  002c2	2b c3		 sub	 eax, ebx
  002c4	03 c7		 add	 eax, edi
  002c6	89 45 d8	 mov	 DWORD PTR _sub$[ebp], eax

; 1231 : 			lpObj->m_AttackDamageRight = ( lpObj->m_AttackDamageMinRight + SkillRightMinDamage ) + (rand()%(sub+1));

  002c9	e8 00 00 00 00	 call	 _rand
  002ce	8b 4d d8	 mov	 ecx, DWORD PTR _sub$[ebp]
  002d1	41		 inc	 ecx
  002d2	99		 cdq
  002d3	f7 f9		 idiv	 ecx
  002d5	03 96 00 03 00
	00		 add	 edx, DWORD PTR [esi+768]
  002db	03 d3		 add	 edx, ebx
  002dd	89 96 f0 02 00
	00		 mov	 DWORD PTR [esi+752], edx

; 1232 : 		}

  002e3	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  002ea	eb 19		 jmp	 SHORT $LN61@GetAttackD
$LN58@GetAttackD:
$LN85@GetAttackD:

; 1233 : 		__except ( sub=1, 1 )

  002ec	b8 01 00 00 00	 mov	 eax, 1
  002f1	89 45 d8	 mov	 DWORD PTR _sub$[ebp], eax
$LN76@GetAttackD:
$LN60@GetAttackD:
  002f4	c3		 ret	 0
$LN59@GetAttackD:
  002f5	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 1234 : 		{
; 1235 : 
; 1236 : 		}

  002f8	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  002ff	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00302	8b 7d dc	 mov	 edi, DWORD PTR _SkillRightMaxDamage$[ebp]
$LN61@GetAttackD:

; 1237 : 
; 1238 : 		__try

  00305	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 1

; 1239 : 		{
; 1240 : 			sub = ( lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage ) - ( lpObj->m_AttackDamageMinLeft + SkillLeftMinDamage );	// #formula

  0030c	8b 96 f4 02 00
	00		 mov	 edx, DWORD PTR [esi+756]
  00312	8b 5d e0	 mov	 ebx, DWORD PTR _SkillLeftMinDamage$[ebp]
  00315	2b d3		 sub	 edx, ebx
  00317	2b 96 f8 02 00
	00		 sub	 edx, DWORD PTR [esi+760]
  0031d	03 55 e4	 add	 edx, DWORD PTR _SkillLeftMaxDamage$[ebp]
  00320	89 55 d8	 mov	 DWORD PTR _sub$[ebp], edx

; 1241 : 			lpObj->m_AttackDamageLeft = ( lpObj->m_AttackDamageMinLeft + SkillLeftMinDamage ) + (rand()%(sub+1));

  00323	e8 00 00 00 00	 call	 _rand
  00328	8b 4d d8	 mov	 ecx, DWORD PTR _sub$[ebp]
  0032b	41		 inc	 ecx
  0032c	99		 cdq
  0032d	f7 f9		 idiv	 ecx
  0032f	03 d3		 add	 edx, ebx
  00331	03 96 f8 02 00
	00		 add	 edx, DWORD PTR [esi+760]
  00337	89 96 ec 02 00
	00		 mov	 DWORD PTR [esi+748], edx

; 1242 : 		}

  0033d	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00344	eb 19		 jmp	 SHORT $LN65@GetAttackD
$LN62@GetAttackD:
$LN86@GetAttackD:

; 1243 : 		__except ( sub=1, 1 )

  00346	b8 01 00 00 00	 mov	 eax, 1
  0034b	89 45 d8	 mov	 DWORD PTR _sub$[ebp], eax
$LN77@GetAttackD:
$LN64@GetAttackD:
  0034e	c3		 ret	 0
$LN63@GetAttackD:
  0034f	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 1244 : 		{
; 1245 : 
; 1246 : 		}

  00352	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00359	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0035c	8b 7d dc	 mov	 edi, DWORD PTR _SkillRightMaxDamage$[ebp]
$LN65@GetAttackD:

; 1247 : 
; 1248 : 		if ( cDamage )

  0035f	83 7d d4 00	 cmp	 DWORD PTR _cDamage$156002[ebp], 0
  00363	0f 84 b6 00 00
	00		 je	 $LN29@GetAttackD

; 1249 : 		{
; 1250 : 			lpObj->m_AttackDamageRight = lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage;

  00369	03 be fc 02 00
	00		 add	 edi, DWORD PTR [esi+764]

; 1251 : 			lpObj->m_AttackDamageLeft = lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage;

  0036f	8b 9e f4 02 00
	00		 mov	 ebx, DWORD PTR [esi+756]
  00375	03 5d e4	 add	 ebx, DWORD PTR _SkillLeftMaxDamage$[ebp]

; 1252 : 
; 1253 : 			lpObj->m_AttackDamageRight += lpObj->SetOpAddCriticalDamage;

  00378	0f bf 86 66 0f
	00 00		 movsx	 eax, WORD PTR [esi+3942]

; 1254 : 			lpObj->m_AttackDamageLeft += lpObj->SetOpAddCriticalDamage;
; 1255 : 
; 1256 : 			lpObj->m_AttackDamageRight += lpObj->SkillAddCriticalDamage;

  0037f	0f b7 8e b8 10
	00 00		 movzx	 ecx, WORD PTR [esi+4280]
  00386	8d 14 01	 lea	 edx, DWORD PTR [ecx+eax]
  00389	03 d7		 add	 edx, edi
  0038b	89 55 18	 mov	 DWORD PTR tv915[ebp], edx
  0038e	89 96 f0 02 00
	00		 mov	 DWORD PTR [esi+752], edx

; 1257 : 			lpObj->m_AttackDamageLeft += lpObj->SkillAddCriticalDamage;

  00394	03 c1		 add	 eax, ecx
  00396	03 c3		 add	 eax, ebx
  00398	89 45 08	 mov	 DWORD PTR tv919[ebp], eax
  0039b	89 86 ec 02 00
	00		 mov	 DWORD PTR [esi+748], eax

; 1258 : 
; 1259 : 			if ( effect == 2 )

  003a1	8b 45 10	 mov	 eax, DWORD PTR _effect$[ebp]
  003a4	80 38 02	 cmp	 BYTE PTR [eax], 2
  003a7	75 76		 jne	 SHORT $LN29@GetAttackD

; 1260 : 			{
; 1261 : 				lpObj->m_AttackDamageRight += ( lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage ) * 20 / 100;

  003a9	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  003ac	03 c9		 add	 ecx, ecx
  003ae	03 c9		 add	 ecx, ecx
  003b0	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003b5	f7 e9		 imul	 ecx
  003b7	c1 fa 05	 sar	 edx, 5
  003ba	8b ca		 mov	 ecx, edx
  003bc	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  003bf	03 ca		 add	 ecx, edx

; 1263 : 
; 1264 : 				lpObj->m_AttackDamageRight += lpObj->SetOpAddExDamage;

  003c1	03 4d 18	 add	 ecx, DWORD PTR tv915[ebp]
  003c4	0f bf be 62 0f
	00 00		 movsx	 edi, WORD PTR [esi+3938]
  003cb	03 cf		 add	 ecx, edi
  003cd	89 8e f0 02 00
	00		 mov	 DWORD PTR [esi+752], ecx

; 1262 : 				lpObj->m_AttackDamageLeft += ( lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage ) * 20 / 100;

  003d3	8d 0c 9b	 lea	 ecx, DWORD PTR [ebx+ebx*4]
  003d6	03 c9		 add	 ecx, ecx
  003d8	03 c9		 add	 ecx, ecx
  003da	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003df	f7 e9		 imul	 ecx
  003e1	c1 fa 05	 sar	 edx, 5
  003e4	8b c2		 mov	 eax, edx
  003e6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003e9	03 c2		 add	 eax, edx

; 1265 : 				lpObj->m_AttackDamageLeft += lpObj->SetOpAddExDamage;

  003eb	03 45 08	 add	 eax, DWORD PTR tv919[ebp]
  003ee	03 c7		 add	 eax, edi
  003f0	89 86 ec 02 00
	00		 mov	 DWORD PTR [esi+748], eax
  003f6	eb 27		 jmp	 SHORT $LN29@GetAttackD
$LN53@GetAttackD:

; 1118 : 	{
; 1119 : 		int AttackMin = 0;
; 1120 : 		sub = lpObj->m_AttackDamageMax - lpObj->m_AttackDamageMin;

  003f8	8b be e0 02 00
	00		 mov	 edi, DWORD PTR [esi+736]
  003fe	2b be dc 02 00
	00		 sub	 edi, DWORD PTR [esi+732]

; 1121 : 		AttackMin = lpObj->m_AttackDamageMin + (rand()%(sub+1));

  00404	e8 00 00 00 00	 call	 _rand
  00409	47		 inc	 edi
  0040a	99		 cdq
  0040b	f7 ff		 idiv	 edi
  0040d	03 96 dc 02 00
	00		 add	 edx, DWORD PTR [esi+732]

; 1122 : 		lpObj->m_AttackDamageRight = AttackMin;

  00413	89 96 f0 02 00
	00		 mov	 DWORD PTR [esi+752], edx

; 1123 : 		lpObj->m_AttackDamageLeft = AttackMin;

  00419	89 96 ec 02 00
	00		 mov	 DWORD PTR [esi+748], edx
$LN29@GetAttackD:

; 1266 : 			}
; 1267 : 		}
; 1268 : 	}
; 1269 : 
; 1270 : 	if ( bTwoHandWeapon )

  0041f	83 7d d0 00	 cmp	 DWORD PTR _bTwoHandWeapon$[ebp], 0
  00423	74 44		 je	 SHORT $LN28@GetAttackD

; 1271 : 	{
; 1272 : 		if ( bIsOnDuel )

  00425	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  00429	74 2d		 je	 SHORT $LN27@GetAttackD

; 1273 : 		{
; 1274 : 			ad = ( lpObj->m_AttackDamageRight + lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  0042b	8b 86 f0 02 00
	00		 mov	 eax, DWORD PTR [esi+752]
  00431	03 86 ec 02 00
	00		 add	 eax, DWORD PTR [esi+748]
$LN81@GetAttackD:
  00437	8b c8		 mov	 ecx, eax
  00439	c1 e1 04	 shl	 ecx, 4
  0043c	2b c8		 sub	 ecx, eax
  0043e	03 c9		 add	 ecx, ecx
  00440	03 c9		 add	 ecx, ecx
  00442	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00447	f7 e9		 imul	 ecx
  00449	c1 fa 05	 sar	 edx, 5
  0044c	8b ca		 mov	 ecx, edx
  0044e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00451	03 ca		 add	 ecx, edx

; 1275 : 		}
; 1276 : 		else

  00453	e9 f7 00 00 00	 jmp	 $LN80@GetAttackD
$LN27@GetAttackD:

; 1277 : 		{
; 1278 : 			ad = ( lpObj->m_AttackDamageRight + lpObj->m_AttackDamageLeft ) - targetDefense;

  00458	8b 8e f0 02 00
	00		 mov	 ecx, DWORD PTR [esi+752]
  0045e	03 8e ec 02 00
	00		 add	 ecx, DWORD PTR [esi+748]

; 1279 : 		}
; 1280 : 	}
; 1281 : 	else if ( (Left->m_Type >= ITEMGET(4, 0) && Left->m_Type < ITEMGET(4, 7)) ||

  00464	e9 e6 00 00 00	 jmp	 $LN80@GetAttackD
$LN28@GetAttackD:

; 1282 : 			 Left->m_Type == ITEMGET(4,20) || Left->m_Type == ITEMGET(4,21)  )

  00469	8b 55 cc	 mov	 edx, DWORD PTR _Left$[ebp]
  0046c	0f b7 42 06	 movzx	 eax, WORD PTR [edx+6]
  00470	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00475	66 3b c1	 cmp	 ax, cx
  00478	7c 0e		 jl	 SHORT $LN22@GetAttackD
  0047a	ba 07 08 00 00	 mov	 edx, 2055		; 00000807H
  0047f	66 3b c2	 cmp	 ax, dx
  00482	0f 8c b3 00 00
	00		 jl	 $LN23@GetAttackD
$LN22@GetAttackD:
  00488	b9 14 08 00 00	 mov	 ecx, 2068		; 00000814H
  0048d	66 3b c1	 cmp	 ax, cx
  00490	0f 84 a5 00 00
	00		 je	 $LN23@GetAttackD
  00496	ba 15 08 00 00	 mov	 edx, 2069		; 00000815H
  0049b	66 3b c2	 cmp	 ax, dx
  0049e	0f 84 97 00 00
	00		 je	 $LN23@GetAttackD

; 1291 : 		}
; 1292 : 	}
; 1293 : 	else if ( (Right->m_Type >= ITEMGET(4, 8) && Right->m_Type < ITEMGET(4, 15)) ||
; 1294 : 			  ( Right->m_Type >= ITEMGET(4,16) && Right->m_Type < ITEMGET(5,0) )  )

  004a4	8b 45 c4	 mov	 eax, DWORD PTR _Right$[ebp]
  004a7	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  004ab	b9 08 08 00 00	 mov	 ecx, 2056		; 00000808H
  004b0	66 3b c1	 cmp	 ax, cx
  004b3	7c 0a		 jl	 SHORT $LN16@GetAttackD
  004b5	ba 0f 08 00 00	 mov	 edx, 2063		; 0000080fH
  004ba	66 3b c2	 cmp	 ax, dx
  004bd	7c 14		 jl	 SHORT $LN17@GetAttackD
$LN16@GetAttackD:
  004bf	b9 10 08 00 00	 mov	 ecx, 2064		; 00000810H
  004c4	66 3b c1	 cmp	 ax, cx
  004c7	7c 3e		 jl	 SHORT $LN18@GetAttackD
  004c9	ba 00 0a 00 00	 mov	 edx, 2560		; 00000a00H
  004ce	66 3b c2	 cmp	 ax, dx
  004d1	7d 34		 jge	 SHORT $LN18@GetAttackD
$LN17@GetAttackD:

; 1295 : 	{
; 1296 : 		if ( bIsOnDuel )

  004d3	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  004d7	74 26		 je	 SHORT $LN15@GetAttackD

; 1297 : 		{
; 1298 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;

  004d9	8b 86 f0 02 00
	00		 mov	 eax, DWORD PTR [esi+752]
$LN83@GetAttackD:
  004df	8b c8		 mov	 ecx, eax
  004e1	c1 e1 04	 shl	 ecx, 4
  004e4	2b c8		 sub	 ecx, eax
  004e6	03 c9		 add	 ecx, ecx
  004e8	03 c9		 add	 ecx, ecx
  004ea	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  004ef	f7 e9		 imul	 ecx
  004f1	c1 fa 05	 sar	 edx, 5
  004f4	8b c2		 mov	 eax, edx
  004f6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004f9	03 c2		 add	 eax, edx
  004fb	8b c8		 mov	 ecx, eax

; 1299 : 		}
; 1300 : 		else

  004fd	eb 50		 jmp	 SHORT $LN80@GetAttackD
$LN15@GetAttackD:

; 1301 : 		{
; 1302 : 			ad = lpObj->m_AttackDamageRight - targetDefense;

  004ff	8b 8e f0 02 00
	00		 mov	 ecx, DWORD PTR [esi+752]

; 1303 : 		}

  00505	eb 48		 jmp	 SHORT $LN80@GetAttackD
$LN18@GetAttackD:

; 1304 : 	}
; 1305 : 	else if ( Right->m_Type >= ITEMGET(0,0) && Right->m_Type < ITEMGET(4,0) )

  00507	66 85 c0	 test	 ax, ax
  0050a	78 0a		 js	 SHORT $LN12@GetAttackD
  0050c	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00511	66 3b c1	 cmp	 ax, cx

; 1306 : 	{
; 1307 : 		if ( bIsOnDuel )
; 1308 : 		{
; 1309 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;
; 1310 : 		}
; 1311 : 		else

  00514	7c bd		 jl	 SHORT $LN17@GetAttackD
$LN12@GetAttackD:

; 1312 : 		{
; 1313 : 			ad = lpObj->m_AttackDamageRight - targetDefense;
; 1314 : 		}
; 1315 : 	}
; 1316 : 	else if ( Right->m_Type >= ITEMGET(5,0) && Right->m_Type < ITEMGET(6,0) )

  00516	b9 00 0a 00 00	 mov	 ecx, 2560		; 00000a00H
  0051b	66 3b c1	 cmp	 ax, cx
  0051e	7c 0a		 jl	 SHORT $LN8@GetAttackD
  00520	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  00525	66 3b c2	 cmp	 ax, dx

; 1317 : 	{
; 1318 : 		if ( bIsOnDuel )
; 1319 : 		{
; 1320 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;
; 1321 : 		}
; 1322 : 		else

  00528	7c a9		 jl	 SHORT $LN17@GetAttackD
$LN8@GetAttackD:

; 1323 : 		{
; 1324 : 			ad = lpObj->m_AttackDamageRight - targetDefense;
; 1325 : 		}
; 1326 : 	}
; 1327 : 	else if ( bIsOnDuel )

  0052a	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0052e	74 19		 je	 SHORT $LN21@GetAttackD

; 1328 : 	{
; 1329 : 		ad = ( lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  00530	8b 86 ec 02 00
	00		 mov	 eax, DWORD PTR [esi+748]

; 1330 : 	}
; 1331 : 	else

  00536	e9 fc fe ff ff	 jmp	 $LN81@GetAttackD
$LN23@GetAttackD:

; 1283 : 	{
; 1284 : 		if ( bIsOnDuel )

  0053b	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0053f	74 08		 je	 SHORT $LN21@GetAttackD

; 1285 : 		{
; 1286 : 			ad = ( lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  00541	8b 86 ec 02 00
	00		 mov	 eax, DWORD PTR [esi+748]

; 1287 : 		}
; 1288 : 		else

  00547	eb 96		 jmp	 SHORT $LN83@GetAttackD
$LN21@GetAttackD:

; 1289 : 		{
; 1290 : 			ad = lpObj->m_AttackDamageLeft - targetDefense;

  00549	8b 8e ec 02 00
	00		 mov	 ecx, DWORD PTR [esi+748]
$LN80@GetAttackD:
  0054f	2b 4d 0c	 sub	 ecx, DWORD PTR _targetDefense$[ebp]

; 1332 : 	{
; 1333 : 		ad = lpObj->m_AttackDamageLeft - targetDefense;
; 1334 : 	}
; 1335 : 
; 1336 : 	if ( lpObj->SetOpTwoHandSwordImproveDamage )

  00552	8a 86 7c 0f 00
	00		 mov	 al, BYTE PTR [esi+3964]
  00558	84 c0		 test	 al, al
  0055a	74 19		 je	 SHORT $LN2@GetAttackD

; 1337 : 	{
; 1338 : 		ad += ad * lpObj->SetOpTwoHandSwordImproveDamage  / 100;

  0055c	0f b6 d0	 movzx	 edx, al
  0055f	0f af d1	 imul	 edx, ecx
  00562	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00567	f7 ea		 imul	 edx
  00569	c1 fa 05	 sar	 edx, 5
  0056c	8b c2		 mov	 eax, edx
  0056e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00571	03 c2		 add	 eax, edx
  00573	03 c8		 add	 ecx, eax
$LN2@GetAttackD:

; 1339 : 	}
; 1340 : 
; 1341 : 	ad += lpObj->m_SkillAttack;

  00575	03 8e 80 02 00
	00		 add	 ecx, DWORD PTR [esi+640]

; 1342 : 	
; 1343 : 	if ( lpObj->m_SkillAttack2 )

  0057b	83 be 88 02 00
	00 00		 cmp	 DWORD PTR [esi+648], 0
  00582	74 03		 je	 SHORT $LN1@GetAttackD

; 1344 : 	{
; 1345 : 		ad += 15;

  00584	83 c1 0f	 add	 ecx, 15			; 0000000fH
$LN1@GetAttackD:

; 1346 : 	}
; 1347 : 
; 1348 : 	return ad;

  00587	8b c1		 mov	 eax, ecx

; 1349 : }

  00589	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0058c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00593	59		 pop	 ecx
  00594	5f		 pop	 edi
  00595	5e		 pop	 esi
  00596	5b		 pop	 ebx
  00597	8b e5		 mov	 esp, ebp
  00599	5d		 pop	 ebp
  0059a	c2 14 00	 ret	 20			; 00000014H
?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z ENDP ; CObjAttack::GetAttackDamage
_TEXT	ENDS
PUBLIC	_effect$GSCopy$
PUBLIC	_lpMagic$GSCopy$
PUBLIC	_lpObj$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ; CObjAttack::GetAttackDamageWizard
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?GetDamage@CMagicInf@@QAEHXZ:PROC		; CMagicInf::GetDamage
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z DD 0ffffffe4H
	DD	00H
	DD	0ffffff88H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN28@GetAttackD@2
	DD	FLAT:$LN29@GetAttackD@2
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z
_TEXT	SEGMENT
_effect$GSCopy$ = -104					; size = 4
tv459 = -100						; size = 4
tv457 = -100						; size = 4
_subd$ = -96						; size = 4
_lpMagic$GSCopy$ = -92					; size = 4
_damage$156095 = -92					; size = 4
tv462 = -90						; size = 2
_lpObj$GSCopy$ = -88					; size = 4
_ad$ = -84						; size = 4
_SkillHellFire2CountDamageTable$156076 = -80		; size = 52
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_targetDefense$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_effect$ = 20						; size = 4
_bIsOnDuel$ = 24					; size = 4
?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z PROC ; CObjAttack::GetAttackDamageWizard, COMDAT
; _this$ = ecx

; 1356 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 58	 sub	 esp, 88			; 00000058H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00036	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 1357 : 	int damagemin;
; 1358 : 	int damagemax;
; 1359 : 	int ad;
; 1360 : 
; 1361 : 	if ( lpMagic->m_Skill == 40 )

  00039	89 7d a8	 mov	 DWORD PTR _lpObj$GSCopy$[ebp], edi
  0003c	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]

; 1414 : 		}
; 1415 : 	}
; 1416 : 
; 1417 : 	CItem * Right = &lpObj->pInventory[0];

  0003f	89 75 a4	 mov	 DWORD PTR _lpMagic$GSCopy$[ebp], esi
  00042	8b 45 14	 mov	 eax, DWORD PTR _effect$[ebp]

; 1447 : 		{
; 1448 : 			ad = ( damagemin + (rand()%(subd+1)) ) - targetDefense;

  00045	89 45 98	 mov	 DWORD PTR _effect$GSCopy$[ebp], eax

; 1357 : 	int damagemin;
; 1358 : 	int damagemax;
; 1359 : 	int ad;
; 1360 : 
; 1361 : 	if ( lpMagic->m_Skill == 40 )

  00048	80 7e 05 28	 cmp	 BYTE PTR [esi+5], 40	; 00000028H
  0004c	0f 85 a3 00 00
	00		 jne	 $LN24@GetAttackD@2

; 1362 : 	{
; 1363 : 		if ( lpObj->SkillHellFire2Count >= 0 )
; 1364 : 		{
; 1365 : 			int SkillHellFire2CountDamageTable[13] =
; 1366 : 			{
; 1367 : 				0,	20,	50,	99,	160,

  00052	33 c9		 xor	 ecx, ecx
  00054	89 4d b0	 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp], ecx
  00057	c7 45 b4 14 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+4], 20 ; 00000014H
  0005e	c7 45 b8 32 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+8], 50 ; 00000032H
  00065	c7 45 bc 63 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+12], 99 ; 00000063H
  0006c	c7 45 c0 a0 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+16], 160 ; 000000a0H

; 1368 : 				225,	325,	425,	550,	700,

  00073	c7 45 c4 e1 00
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+20], 225 ; 000000e1H
  0007a	c7 45 c8 45 01
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+24], 325 ; 00000145H
  00081	c7 45 cc a9 01
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+28], 425 ; 000001a9H
  00088	c7 45 d0 26 02
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+32], 550 ; 00000226H
  0008f	c7 45 d4 bc 02
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+36], 700 ; 000002bcH

; 1369 : 				880,	1090,	1320

  00096	c7 45 d8 70 03
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+40], 880 ; 00000370H
  0009d	c7 45 dc 42 04
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+44], 1090 ; 00000442H

; 1370 : 			};

  000a4	c7 45 e0 28 05
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+48], 1320 ; 00000528H

; 1371 : 			int CountDamage;
; 1372 : 
; 1373 : 			if ( lpObj->SkillHellFire2Count > 12 )

  000ab	8a 87 51 0f 00
	00		 mov	 al, BYTE PTR [edi+3921]
  000b1	3c 0c		 cmp	 al, 12			; 0000000cH

; 1374 : 			{
; 1375 : 				CountDamage = 0;
; 1376 : 			}
; 1377 : 			else

  000b3	77 07		 ja	 SHORT $LN21@GetAttackD@2

; 1378 : 			{
; 1379 : 				CountDamage = SkillHellFire2CountDamageTable[lpObj->SkillHellFire2Count];

  000b5	0f b6 c8	 movzx	 ecx, al
  000b8	8b 4c 8d b0	 mov	 ecx, DWORD PTR _SkillHellFire2CountDamageTable$156076[ebp+ecx*4]
$LN21@GetAttackD@2:

; 1380 : 			}
; 1381 : 
; 1382 : 			ad = ( lpObj->Strength + lpObj->AddStrength ) / 2 + CountDamage;

  000bc	0f bf 87 e0 00
	00 00		 movsx	 eax, WORD PTR [edi+224]
  000c3	0f b7 97 b4 00
	00 00		 movzx	 edx, WORD PTR [edi+180]
  000ca	03 c2		 add	 eax, edx
  000cc	99		 cdq
  000cd	2b c2		 sub	 eax, edx
  000cf	d1 f8		 sar	 eax, 1
  000d1	03 c1		 add	 eax, ecx
  000d3	89 45 ac	 mov	 DWORD PTR _ad$[ebp], eax

; 1383 : 			damagemin = ad + lpObj->m_MagicDamageMin;
; 1384 : 			damagemax = ad + lpObj->m_MagicDamageMax;
; 1385 : 
; 1386 : 			damagemin += lpObj->SetOpAddSkillAttack;

  000d6	0f bf 8f 60 0f
	00 00		 movsx	 ecx, WORD PTR [edi+3936]
  000dd	8b 9f e4 02 00
	00		 mov	 ebx, DWORD PTR [edi+740]
  000e3	03 d9		 add	 ebx, ecx
  000e5	03 d8		 add	 ebx, eax

; 1387 : 			damagemax += lpObj->SetOpAddSkillAttack;

  000e7	8b b7 e8 02 00
	00		 mov	 esi, DWORD PTR [edi+744]
  000ed	03 f1		 add	 esi, ecx
  000ef	03 f0		 add	 esi, eax

; 1388 : 
; 1389 : 			int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  000f1	6a 28		 push	 40			; 00000028H

; 1390 : 
; 1391 : 			if ( SkillAttr != -1 )
; 1392 : 			{
; 1393 : 				damagemin += (BYTE)lpObj->m_AddResistance[SkillAttr];
; 1394 : 				damagemax += (BYTE)lpObj->m_AddResistance[SkillAttr];
; 1395 : 			}
; 1396 : 		}
; 1397 : 	}
; 1398 : 	else

  000f3	eb 2f		 jmp	 SHORT $LN41@GetAttackD@2
$LN24@GetAttackD@2:

; 1399 : 	{
; 1400 : 		ad = lpMagic->GetDamage();

  000f5	8b ce		 mov	 ecx, esi
  000f7	e8 00 00 00 00	 call	 ?GetDamage@CMagicInf@@QAEHXZ ; CMagicInf::GetDamage
  000fc	89 45 ac	 mov	 DWORD PTR _ad$[ebp], eax

; 1401 : 
; 1402 : 		damagemin = lpMagic->m_DamageMin + lpObj->m_MagicDamageMin;
; 1403 : 		damagemax = lpMagic->m_DamageMax + lpObj->m_MagicDamageMax;
; 1404 : 
; 1405 : 		damagemin += lpObj->SetOpAddSkillAttack;

  000ff	0f bf 87 60 0f
	00 00		 movsx	 eax, WORD PTR [edi+3936]
  00106	8b 9f e4 02 00
	00		 mov	 ebx, DWORD PTR [edi+740]
  0010c	03 5e 08	 add	 ebx, DWORD PTR [esi+8]
  0010f	03 d8		 add	 ebx, eax

; 1406 : 		damagemax += lpObj->SetOpAddSkillAttack;

  00111	8b b7 e8 02 00
	00		 mov	 esi, DWORD PTR [edi+744]
  00117	8b 4d a4	 mov	 ecx, DWORD PTR _lpMagic$GSCopy$[ebp]
  0011a	03 71 0c	 add	 esi, DWORD PTR [ecx+12]
  0011d	03 f0		 add	 esi, eax

; 1407 : 
; 1408 : 		int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  0011f	0f b6 41 05	 movzx	 eax, BYTE PTR [ecx+5]
  00123	50		 push	 eax
$LN41@GetAttackD@2:
  00124	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00129	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr

; 1409 : 
; 1410 : 		if ( SkillAttr != -1 )

  0012e	83 f8 ff	 cmp	 eax, -1
  00131	74 0c		 je	 SHORT $LN18@GetAttackD@2

; 1411 : 		{
; 1412 : 			damagemin += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00133	0f b6 84 07 69
	03 00 00	 movzx	 eax, BYTE PTR [edi+eax+873]
  0013b	03 d8		 add	 ebx, eax

; 1413 : 			damagemax += (BYTE)lpObj->m_AddResistance[SkillAttr];

  0013d	03 f0		 add	 esi, eax
$LN18@GetAttackD@2:

; 1414 : 		}
; 1415 : 	}
; 1416 : 
; 1417 : 	CItem * Right = &lpObj->pInventory[0];

  0013f	8b bf 8c 0c 00
	00		 mov	 edi, DWORD PTR [edi+3212]

; 1418 : 
; 1419 : 	if ( Right->IsItem() )

  00145	8b cf		 mov	 ecx, edi
  00147	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0014c	85 c0		 test	 eax, eax
  0014e	0f 84 a1 00 00
	00		 je	 $LN13@GetAttackD@2

; 1420 : 	{
; 1421 : 		if ( (Right->m_Type >= ITEMGET(5,0) && Right->m_Type < ITEMGET(6,0) ) ||
; 1422 : 			 Right->m_Type == ITEMGET(0,31) ||
; 1423 : 			 Right->m_Type == ITEMGET(0,21) ||
; 1424 : 			 Right->m_Type == ITEMGET(0,23) ||
; 1425 : 			 Right->m_Type == ITEMGET(0,25) )

  00154	0f b7 47 06	 movzx	 eax, WORD PTR [edi+6]
  00158	b9 00 0a 00 00	 mov	 ecx, 2560		; 00000a00H
  0015d	66 3b c1	 cmp	 ax, cx
  00160	7c 0a		 jl	 SHORT $LN14@GetAttackD@2
  00162	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  00167	66 3b c2	 cmp	 ax, dx
  0016a	7c 18		 jl	 SHORT $LN15@GetAttackD@2
$LN14@GetAttackD@2:
  0016c	66 83 f8 1f	 cmp	 ax, 31			; 0000001fH
  00170	74 12		 je	 SHORT $LN15@GetAttackD@2
  00172	66 83 f8 15	 cmp	 ax, 21			; 00000015H
  00176	74 0c		 je	 SHORT $LN15@GetAttackD@2
  00178	66 83 f8 17	 cmp	 ax, 23			; 00000017H
  0017c	74 06		 je	 SHORT $LN15@GetAttackD@2
  0017e	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00182	75 71		 jne	 SHORT $LN13@GetAttackD@2
$LN15@GetAttackD@2:

; 1426 : 		{
; 1427 : 			if ( Right->m_IsValidItem  )

  00184	80 bf 94 00 00
	00 00		 cmp	 BYTE PTR [edi+148], 0
  0018b	74 68		 je	 SHORT $LN13@GetAttackD@2

; 1428 : 			{
; 1429 : 				int damage = Right->m_Magic / 2 + Right->m_Level * 2;	// #formula

  0018d	0f b7 47 20	 movzx	 eax, WORD PTR [edi+32]
  00191	d1 e8		 shr	 eax, 1
  00193	0f bf 4f 08	 movsx	 ecx, WORD PTR [edi+8]
  00197	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  0019a	89 4d a4	 mov	 DWORD PTR _damage$156095[ebp], ecx

; 1430 : 				damage -= (WORD)(Right->m_CurrentDurabilityState * damage);	// #formula

  0019d	d9 87 8c 00 00
	00		 fld	 DWORD PTR [edi+140]
  001a3	da 4d a4	 fimul	 DWORD PTR _damage$156095[ebp]
  001a6	d9 7d a6	 fnstcw	 WORD PTR tv462[ebp]
  001a9	0f b7 45 a6	 movzx	 eax, WORD PTR tv462[ebp]
  001ad	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  001b2	89 45 9c	 mov	 DWORD PTR tv459[ebp], eax
  001b5	d9 6d 9c	 fldcw	 WORD PTR tv459[ebp]
  001b8	db 5d 9c	 fistp	 DWORD PTR tv457[ebp]
  001bb	d9 6d a6	 fldcw	 WORD PTR tv462[ebp]
  001be	66 8b 55 9c	 mov	 dx, WORD PTR tv457[ebp]
  001c2	0f b7 c2	 movzx	 eax, dx
  001c5	2b c8		 sub	 ecx, eax

; 1431 : 
; 1432 : 				damagemin += damagemin * damage / 100;	// #formula

  001c7	8b d1		 mov	 edx, ecx
  001c9	0f af d3	 imul	 edx, ebx
  001cc	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  001d1	f7 ea		 imul	 edx
  001d3	c1 fa 05	 sar	 edx, 5
  001d6	8b c2		 mov	 eax, edx
  001d8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001db	03 c2		 add	 eax, edx
  001dd	03 d8		 add	 ebx, eax

; 1433 : 				damagemax += damagemax * damage / 100;	// #formula

  001df	0f af ce	 imul	 ecx, esi
  001e2	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  001e7	f7 e9		 imul	 ecx
  001e9	c1 fa 05	 sar	 edx, 5
  001ec	8b ca		 mov	 ecx, edx
  001ee	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001f1	03 ca		 add	 ecx, edx
  001f3	03 f1		 add	 esi, ecx
$LN13@GetAttackD@2:

; 1434 : 			}
; 1435 : 		}
; 1436 : 	}
; 1437 : 
; 1438 : 	int subd = damagemax - damagemin;

  001f5	8b d6		 mov	 edx, esi
  001f7	2b d3		 sub	 edx, ebx
  001f9	89 55 a0	 mov	 DWORD PTR _subd$[ebp], edx

; 1439 : 
; 1440 : 	__try

  001fc	9b		 fwait
  001fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 1443 : 		{
; 1444 : 			ad = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;	// #formula

  00204	e8 00 00 00 00	 call	 _rand
  00209	8b 4d a0	 mov	 ecx, DWORD PTR _subd$[ebp]
  0020c	99		 cdq
  0020d	41		 inc	 ecx
  0020e	f7 f9		 idiv	 ecx

; 1441 : 	{
; 1442 : 		if ( bIsOnDuel )

  00210	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  00214	74 25		 je	 SHORT $LN11@GetAttackD@2

; 1443 : 		{
; 1444 : 			ad = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;	// #formula

  00216	03 d3		 add	 edx, ebx
  00218	8b ca		 mov	 ecx, edx
  0021a	c1 e1 04	 shl	 ecx, 4
  0021d	2b ca		 sub	 ecx, edx
  0021f	03 c9		 add	 ecx, ecx
  00221	03 c9		 add	 ecx, ecx
  00223	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00228	f7 e9		 imul	 ecx
  0022a	c1 fa 05	 sar	 edx, 5
  0022d	8b fa		 mov	 edi, edx
  0022f	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00232	03 fa		 add	 edi, edx
  00234	8b 5d 0c	 mov	 ebx, DWORD PTR _targetDefense$[ebp]
  00237	2b fb		 sub	 edi, ebx

; 1445 : 		}
; 1446 : 		else

  00239	eb 0a		 jmp	 SHORT $LN42@GetAttackD@2
$LN11@GetAttackD@2:

; 1447 : 		{
; 1448 : 			ad = ( damagemin + (rand()%(subd+1)) ) - targetDefense;

  0023b	8b fa		 mov	 edi, edx
  0023d	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  00240	03 fb		 add	 edi, ebx
  00242	8b 5d 0c	 mov	 ebx, DWORD PTR _targetDefense$[ebp]
$LN42@GetAttackD@2:
  00245	89 7d ac	 mov	 DWORD PTR _ad$[ebp], edi

; 1449 : 		}
; 1450 : 
; 1451 : 		if ( lpObj->m_CriticalDamage > 0 )

  00248	8b 55 a8	 mov	 edx, DWORD PTR _lpObj$GSCopy$[ebp]
  0024b	83 ba 2c 03 00
	00 00		 cmp	 DWORD PTR [edx+812], 0
  00252	7e 64		 jle	 SHORT $LN8@GetAttackD@2

; 1452 : 		{
; 1453 : 			if ( (rand()%100) < lpObj->m_CriticalDamage )

  00254	e8 00 00 00 00	 call	 _rand
  00259	99		 cdq
  0025a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0025f	f7 f9		 idiv	 ecx
  00261	8b 45 a8	 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  00264	3b 90 2c 03 00
	00		 cmp	 edx, DWORD PTR [eax+812]
  0026a	7d 4c		 jge	 SHORT $LN8@GetAttackD@2

; 1454 : 			{
; 1455 : 				if ( bIsOnDuel )

  0026c	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  00270	74 21		 je	 SHORT $LN7@GetAttackD@2

; 1456 : 				{
; 1457 : 					ad = damagemax * 60 / 100 - targetDefense;

  00272	8b ce		 mov	 ecx, esi
  00274	c1 e1 04	 shl	 ecx, 4
  00277	2b ce		 sub	 ecx, esi
  00279	03 c9		 add	 ecx, ecx
  0027b	03 c9		 add	 ecx, ecx
  0027d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00282	f7 e9		 imul	 ecx
  00284	c1 fa 05	 sar	 edx, 5
  00287	8b fa		 mov	 edi, edx
  00289	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0028c	03 fa		 add	 edi, edx

; 1458 : 				}
; 1459 : 				else

  0028e	8b 45 a8	 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  00291	eb 02		 jmp	 SHORT $LN43@GetAttackD@2
$LN7@GetAttackD@2:

; 1460 : 				{
; 1461 : 					ad = damagemax - targetDefense;

  00293	8b fe		 mov	 edi, esi
$LN43@GetAttackD@2:
  00295	2b fb		 sub	 edi, ebx
  00297	89 7d ac	 mov	 DWORD PTR _ad$[ebp], edi

; 1462 : 				}
; 1463 : 
; 1464 : 				ad += lpObj->SetOpAddCriticalDamage;

  0029a	0f bf 88 66 0f
	00 00		 movsx	 ecx, WORD PTR [eax+3942]
  002a1	03 f9		 add	 edi, ecx
  002a3	89 7d ac	 mov	 DWORD PTR _ad$[ebp], edi

; 1465 : 				ad += lpObj->SkillAddCriticalDamage;

  002a6	0f b7 90 b8 10
	00 00		 movzx	 edx, WORD PTR [eax+4280]
  002ad	03 fa		 add	 edi, edx
  002af	89 7d ac	 mov	 DWORD PTR _ad$[ebp], edi

; 1466 : 				effect = 3;

  002b2	8b 45 98	 mov	 eax, DWORD PTR _effect$GSCopy$[ebp]
  002b5	c6 00 03	 mov	 BYTE PTR [eax], 3
$LN8@GetAttackD@2:

; 1467 : 			}
; 1468 : 		}
; 1469 : 
; 1470 : 		if ( lpObj->m_ExcelentDamage > 0 )

  002b8	8b 4d a8	 mov	 ecx, DWORD PTR _lpObj$GSCopy$[ebp]
  002bb	83 b9 30 03 00
	00 00		 cmp	 DWORD PTR [ecx+816], 0
  002c2	7e 75		 jle	 SHORT $LN4@GetAttackD@2

; 1471 : 		{
; 1472 : 			if ( (rand()%100) < lpObj->m_ExcelentDamage )

  002c4	e8 00 00 00 00	 call	 _rand
  002c9	99		 cdq
  002ca	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002cf	f7 f9		 idiv	 ecx
  002d1	8b 45 a8	 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  002d4	3b 90 30 03 00
	00		 cmp	 edx, DWORD PTR [eax+816]
  002da	7d 5d		 jge	 SHORT $LN4@GetAttackD@2

; 1473 : 			{
; 1474 : 				if ( bIsOnDuel )

  002dc	83 7d 18 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  002e0	74 1e		 je	 SHORT $LN3@GetAttackD@2

; 1475 : 				{
; 1476 : 					ad = damagemax * 60 / 100 - targetDefense;

  002e2	8b ce		 mov	 ecx, esi
  002e4	c1 e1 04	 shl	 ecx, 4
  002e7	2b ce		 sub	 ecx, esi
  002e9	03 c9		 add	 ecx, ecx
  002eb	03 c9		 add	 ecx, ecx
  002ed	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002f2	f7 e9		 imul	 ecx
  002f4	c1 fa 05	 sar	 edx, 5
  002f7	8b fa		 mov	 edi, edx
  002f9	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  002fc	03 fa		 add	 edi, edx

; 1477 : 				}
; 1478 : 				else

  002fe	eb 02		 jmp	 SHORT $LN44@GetAttackD@2
$LN3@GetAttackD@2:

; 1479 : 				{
; 1480 : 					ad = damagemax - targetDefense;

  00300	8b fe		 mov	 edi, esi
$LN44@GetAttackD@2:
  00302	2b fb		 sub	 edi, ebx
  00304	89 7d ac	 mov	 DWORD PTR _ad$[ebp], edi

; 1481 : 				}
; 1482 : 
; 1483 : 				ad += damagemax * 20 / 100;

  00307	8d 34 b6	 lea	 esi, DWORD PTR [esi+esi*4]
  0030a	03 f6		 add	 esi, esi
  0030c	03 f6		 add	 esi, esi
  0030e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00313	f7 ee		 imul	 esi
  00315	c1 fa 05	 sar	 edx, 5
  00318	8b c2		 mov	 eax, edx
  0031a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0031d	03 c2		 add	 eax, edx
  0031f	03 f8		 add	 edi, eax
  00321	89 7d ac	 mov	 DWORD PTR _ad$[ebp], edi

; 1484 : 				ad += lpObj->SetOpAddExDamage;

  00324	8b 4d a8	 mov	 ecx, DWORD PTR _lpObj$GSCopy$[ebp]
  00327	0f bf 91 62 0f
	00 00		 movsx	 edx, WORD PTR [ecx+3938]
  0032e	03 fa		 add	 edi, edx
  00330	89 7d ac	 mov	 DWORD PTR _ad$[ebp], edi

; 1485 : 				effect = 2;

  00333	8b 45 98	 mov	 eax, DWORD PTR _effect$GSCopy$[ebp]
  00336	c6 00 02	 mov	 BYTE PTR [eax], 2
$LN4@GetAttackD@2:

; 1486 : 			}
; 1487 : 		}
; 1488 : 	}

  00339	9b		 fwait
  0033a	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00341	eb 16		 jmp	 SHORT $LN31@GetAttackD@2
$LN28@GetAttackD@2:
$LN45@GetAttackD@2:

; 1489 : 	__except ( subd=1, 1 )

  00343	b8 01 00 00 00	 mov	 eax, 1
  00348	89 45 a0	 mov	 DWORD PTR _subd$[ebp], eax
$LN39@GetAttackD@2:
$LN30@GetAttackD@2:
  0034b	c3		 ret	 0
$LN29@GetAttackD@2:
  0034c	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 1490 : 	{
; 1491 : 
; 1492 : 	}

  0034f	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00356	8b 7d ac	 mov	 edi, DWORD PTR _ad$[ebp]
$LN31@GetAttackD@2:

; 1493 : 
; 1494 : 	ad += lpObj->m_SkillAttack;

  00359	8b 45 a8	 mov	 eax, DWORD PTR _lpObj$GSCopy$[ebp]
  0035c	03 b8 80 02 00
	00		 add	 edi, DWORD PTR [eax+640]

; 1495 : 
; 1496 : 	if ( lpObj->m_SkillAttack2 )

  00362	83 b8 88 02 00
	00 00		 cmp	 DWORD PTR [eax+648], 0
  00369	74 03		 je	 SHORT $LN1@GetAttackD@2

; 1497 : 	{
; 1498 : 		ad += 10;

  0036b	83 c7 0a	 add	 edi, 10			; 0000000aH
$LN1@GetAttackD@2:

; 1499 : 	}
; 1500 : 
; 1501 : 	return ad;

  0036e	8b c7		 mov	 eax, edi

; 1502 : }

  00370	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00373	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0037a	59		 pop	 ecx
  0037b	5f		 pop	 edi
  0037c	5e		 pop	 esi
  0037d	5b		 pop	 ebx
  0037e	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00381	33 cd		 xor	 ecx, ebp
  00383	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00388	8b e5		 mov	 esp, ebp
  0038a	5d		 pop	 ebp
  0038b	c2 14 00	 ret	 20			; 00000014H
?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ENDP ; CObjAttack::GetAttackDamageWizard
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z	; gObjDenorantSprite
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z PROC	; gObjDenorantSprite, COMDAT

; 1508 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1509 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1

; 1510 : 	{
; 1511 : 		return FALSE;

  0000c	75 40		 jne	 SHORT $LN1@gObjDenora

; 1512 : 	}
; 1513 : 
; 1514 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000e	8b 8e 8c 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3212]
  00014	81 c1 40 05 00
	00		 add	 ecx, 1344		; 00000540H
  0001a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001f	85 c0		 test	 eax, eax

; 1515 : 	{
; 1516 : 		return FALSE;

  00021	74 2b		 je	 SHORT $LN1@gObjDenora

; 1517 : 	}
; 1518 : 
; 1519 : 	CItem * Denorant = & lpObj->pInventory[8];

  00023	8b 86 8c 0c 00
	00		 mov	 eax, DWORD PTR [esi+3212]

; 1520 : 
; 1521 : 	if ( Denorant->m_Type == ITEMGET(13,3) )

  00029	b9 03 1a 00 00	 mov	 ecx, 6659		; 00001a03H
  0002e	66 39 88 46 05
	00 00		 cmp	 WORD PTR [eax+1350], cx
  00035	75 17		 jne	 SHORT $LN1@gObjDenora

; 1522 : 	{
; 1523 : 		if ( Denorant->m_Durability > 0.0f )

  00037	d9 ee		 fldz
  00039	d8 98 64 05 00
	00		 fcomp	 DWORD PTR [eax+1380]
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 08		 jp	 SHORT $LN1@gObjDenora

; 1524 : 		{
; 1525 : 			return TRUE;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5e		 pop	 esi

; 1530 : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN1@gObjDenora:

; 1526 : 		}
; 1527 : 	}
; 1528 : 
; 1529 : 	return FALSE;

  0004e	33 c0		 xor	 eax, eax
  00050	5e		 pop	 esi

; 1530 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ENDP	; gObjDenorantSprite
_TEXT	ENDS
PUBLIC	?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z		; gObjDarkHorse
; Function compile flags: /Ogtp
;	COMDAT ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z PROC		; gObjDarkHorse, COMDAT

; 1536 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1537 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1

; 1538 : 	{
; 1539 : 		return FALSE;

  0000c	75 40		 jne	 SHORT $LN1@gObjDarkHo

; 1540 : 	}
; 1541 : 
; 1542 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000e	8b 8e 8c 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3212]
  00014	81 c1 40 05 00
	00		 add	 ecx, 1344		; 00000540H
  0001a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001f	85 c0		 test	 eax, eax

; 1543 : 	{
; 1544 : 		return FALSE;

  00021	74 2b		 je	 SHORT $LN1@gObjDarkHo

; 1545 : 	}
; 1546 : 
; 1547 : 	CItem * Denorant = & lpObj->pInventory[8];

  00023	8b 86 8c 0c 00
	00		 mov	 eax, DWORD PTR [esi+3212]

; 1548 : 
; 1549 : 	if ( Denorant->m_Type == ITEMGET(13,4) )

  00029	b9 04 1a 00 00	 mov	 ecx, 6660		; 00001a04H
  0002e	66 39 88 46 05
	00 00		 cmp	 WORD PTR [eax+1350], cx
  00035	75 17		 jne	 SHORT $LN1@gObjDarkHo

; 1550 : 	{
; 1551 : 		if ( Denorant->m_Durability > 0.0f )

  00037	d9 ee		 fldz
  00039	d8 98 64 05 00
	00		 fcomp	 DWORD PTR [eax+1380]
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 08		 jp	 SHORT $LN1@gObjDarkHo

; 1552 : 		{
; 1553 : 			return TRUE;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5e		 pop	 esi

; 1558 : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN1@gObjDarkHo:

; 1554 : 		}
; 1555 : 	}
; 1556 : 
; 1557 : 	return FALSE;

  0004e	33 c0		 xor	 eax, eax
  00050	5e		 pop	 esi

; 1558 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ENDP		; gObjDarkHorse
_TEXT	ENDS
PUBLIC	?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z		; gObjFenrir
; Function compile flags: /Ogtp
;	COMDAT ?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z PROC		; gObjFenrir, COMDAT

; 1563 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1564 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1

; 1565 : 	{
; 1566 : 		return FALSE;

  0000c	75 40		 jne	 SHORT $LN1@gObjFenrir

; 1567 : 	}
; 1568 : 
; 1569 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000e	8b 8e 8c 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3212]
  00014	81 c1 40 05 00
	00		 add	 ecx, 1344		; 00000540H
  0001a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001f	85 c0		 test	 eax, eax

; 1570 : 	{
; 1571 : 		return FALSE;

  00021	74 2b		 je	 SHORT $LN1@gObjFenrir

; 1572 : 	}
; 1573 : 
; 1574 : 	CItem * lpFenrir = & lpObj->pInventory[8];

  00023	8b 86 8c 0c 00
	00		 mov	 eax, DWORD PTR [esi+3212]

; 1575 : 
; 1576 : 	if ( lpFenrir->m_Type == ITEMGET(13,37) )	// Fenrir

  00029	b9 25 1a 00 00	 mov	 ecx, 6693		; 00001a25H
  0002e	66 39 88 46 05
	00 00		 cmp	 WORD PTR [eax+1350], cx
  00035	75 17		 jne	 SHORT $LN1@gObjFenrir

; 1577 : 	{
; 1578 : 		if ( lpFenrir->m_Durability > 0.0f )

  00037	d9 ee		 fldz
  00039	d8 98 64 05 00
	00		 fcomp	 DWORD PTR [eax+1380]
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 08		 jp	 SHORT $LN1@gObjFenrir

; 1579 : 		{
; 1580 : 			return TRUE;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	5e		 pop	 esi

; 1585 : }

  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
$LN1@gObjFenrir:

; 1581 : 		}
; 1582 : 	}
; 1583 : 
; 1584 : 	return FALSE;

  0004e	33 c0		 xor	 eax, eax
  00050	5e		 pop	 esi

; 1585 : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z ENDP		; gObjFenrir
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCObjAttack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCObjAttack@@UAEPAXI@Z PROC				; CObjAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CObjAttack@@UAE@XZ	; CObjAttack::~CObjAttack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCObjAttack@@UAEPAXI@Z ENDP				; CObjAttack::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@ ; `string'
PUBLIC	__real@4049000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4008000000000000
PUBLIC	?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z ; CObjAttack::Attack
EXTRN	?SpecificSkillAdditionTreat@CObjUseSkill@@QAEXPAUOBJECTSTRUCT@@0PAVCMagicInf@@H@Z:PROC ; CObjUseSkill::SpecificSkillAdditionTreat
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHE@Z:PROC ; gObjLifeCheck
EXTRN	?FireScreamExplosionAttack@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0H@Z:PROC ; CObjUseSkill::FireScreamExplosionAttack
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?GCManaSend@@YAXHHEEH@Z:PROC			; GCManaSend
EXTRN	?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjUniriaSprite
EXTRN	?GCActionSend@@YAXPAUOBJECTSTRUCT@@EHH@Z:PROC	; GCActionSend
EXTRN	?gObjCheckSelfDefense@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckSelfDefense
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?GCMagicCancelSend@@YAXPAUOBJECTSTRUCT@@E@Z:PROC ; GCMagicCancelSend
EXTRN	?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z:PROC ; gObjArmorRandomDurDown
EXTRN	?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjGetRelationShip
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z:PROC ; gObjWeaponDurDownInCastle
EXTRN	?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ:PROC ; CItem::IsDinorantReduceAttackDamaege
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAngelSprite
EXTRN	?GCReFillSend@@YAXHHEE@Z:PROC			; GCReFillSend
EXTRN	?gServerInfo@@3VCServerInfo@@A:BYTE		; gServerInfo
EXTRN	?gObjSatanSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjSatanSprite
EXTRN	?gObjSpriteDamage@@YAXPAUOBJECTSTRUCT@@H@Z:PROC	; gObjSpriteDamage
EXTRN	?gObjWeaponDurDown@@YAXPAUOBJECTSTRUCT@@0H@Z:PROC ; gObjWeaponDurDown
EXTRN	?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z:PROC ; CObjBaseAttack::GetTargetDefense
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?GCDamageSend@@YAXHHHHH@Z:PROC			; GCDamageSend
EXTRN	?gObjCheckAttackTypeMagic@@YAHHH@Z:PROC		; gObjCheckAttackTypeMagic
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@EHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	?gObjMonsterStateProc@@YAXPAUOBJECTSTRUCT@@HHH@Z:PROC ; gObjMonsterStateProc
EXTRN	?RemoveCloakingEffect@CObjUseSkill@@QAEHH@Z:PROC ; CObjUseSkill::RemoveCloakingEffect
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:BYTE		; gObjUseSkill
EXTRN	?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z:PROC ; CObjBaseAttack::ResistanceCheck
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjDuelCheck
EXTRN	?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z:PROC ; CObjBaseAttack::PkCheck
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
EXTRN	?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z:PROC ; CObjBaseAttack::CheckAttackArea
EXTRN	?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CObjBaseAttack::DecreaseArrow
EXTRN	?gObjCallMonsterSetEnemy@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCallMonsterSetEnemy
EXTRN	?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAttackQ
EXTRN	?SetTarget@CDarkSpirit@@QAEXH@Z:PROC		; CDarkSpirit::SetTarget
EXTRN	?gDarkSpirit@@3PAVCDarkSpirit@@A:BYTE		; gDarkSpirit
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	?GetBattleSoccerGoalMove@@YAHH@Z:PROC		; GetBattleSoccerGoalMove
EXTRN	?g_iCharacterRecuperationMaxLevel@@3HA:DWORD	; g_iCharacterRecuperationMaxLevel
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?g_iUseCharacterAutoRecuperationSystem@@3HA:DWORD ; g_iUseCharacterAutoRecuperationSystem
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@
CONST	SEGMENT
??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@ DB 'e'
	DB	'rror-Level1 : [%s][%s] Str:%d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z
_TEXT	SEGMENT
_Strength$ = -44					; size = 4
_Dexterity$ = -40					; size = 4
tv2240 = -36						; size = 4
tv2005 = -36						; size = 4
tv1815 = -36						; size = 4
tv1800 = -36						; size = 4
tv1797 = -36						; size = 4
tv1604 = -36						; size = 4
_skillIceArrowSuccess$ = -36				; size = 4
_ManaChange$ = -32					; size = 4
_bDamageReflect$ = -28					; size = 4
_bAllMiss$ = -24					; size = 4
_Energy$ = -20						; size = 4
_iEquipmentPos$155911 = -16				; size = 4
_bIsOnDuel$ = -16					; size = 4
_lpCallObj$ = -16					; size = 4
_skillSuccess$ = -12					; size = 4
_this$ = -8						; size = 4
_MsgDamage$ = -1					; size = 1
_skill$ = 8						; size = 4
_lpObj$ = 8						; size = 4
tv2246 = 12						; size = 4
tv2233 = 12						; size = 4
tv2138 = 12						; size = 4
tv2062 = 12						; size = 4
tv2045 = 12						; size = 4
tv1869 = 12						; size = 4
tv1867 = 12						; size = 4
_selfdefense$ = 12					; size = 4
_lpEquipment$155912 = 12				; size = 4
_lpTargetObj$ = 12					; size = 4
tv1804 = 14						; size = 2
_lpMagic$ = 16						; size = 4
tv2358 = 20						; size = 4
_iComboDamage$155968 = 20				; size = 4
_magicsend$ = 20					; size = 4
_MSBFlag$ = 24						; size = 1
tv2186 = 28						; size = 4
tv2029 = 28						; size = 4
tv1985 = 28						; size = 4
tv1983 = 28						; size = 4
tv1977 = 28						; size = 4
tv1975 = 28						; size = 4
tv1961 = 28						; size = 4
_replacemana$155886 = 28				; size = 4
_targetdefense$155782 = 28				; size = 4
_AttackDamage$ = 28					; size = 4
tv1872 = 30						; size = 2
_bCombo$ = 32						; size = 4
?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z PROC ; CObjAttack::Attack, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx

; 32   : 	int skillSuccess = 0;
; 33   : 	LPOBJ lpCallObj;
; 34   : 	LPOBJ lpCallTargetObj;
; 35   : 	unsigned char MsgDamage = 0;
; 36   : 	int ManaChange = 0;
; 37   : 	// ---
; 38   : 	if(lpTargetObj->Authority > 2)

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  0000a	83 bb a4 01 00
	00 02		 cmp	 DWORD PTR [ebx+420], 2
  00011	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00014	c6 45 ff 00	 mov	 BYTE PTR _MsgDamage$[ebp], 0
  00018	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _ManaChange$[ebp], 0
  0001f	76 09		 jbe	 SHORT $LN227@Attack

; 39   : 	{
; 40   : 		return 0;

  00021	33 c0		 xor	 eax, eax
  00023	5b		 pop	 ebx

; 1099 : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 1c 00	 ret	 28			; 0000001cH
$LN227@Attack:
  0002a	56		 push	 esi

; 41   : 	}
; 42   : 	// ---
; 43   : 	if(lpObj->MapNumber != lpTargetObj->MapNumber)

  0002b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0002e	8a 86 09 01 00
	00		 mov	 al, BYTE PTR [esi+265]
  00034	3a 83 09 01 00
	00		 cmp	 al, BYTE PTR [ebx+265]
  0003a	74 0a		 je	 SHORT $LN226@Attack

; 44   : 	{
; 45   : 		return 0;

  0003c	5e		 pop	 esi
  0003d	33 c0		 xor	 eax, eax
  0003f	5b		 pop	 ebx

; 1099 : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 1c 00	 ret	 28			; 0000001cH
$LN226@Attack:

; 46   : 	}
; 47   : 	// ---
; 48   : 	if ( g_iUseCharacterAutoRecuperationSystem && lpObj->Level <= g_iCharacterRecuperationMaxLevel )

  00046	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iUseCharacterAutoRecuperationSystem@@3HA, 0 ; g_iUseCharacterAutoRecuperationSystem
  0004d	57		 push	 edi
  0004e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  00054	74 3c		 je	 SHORT $LN221@Attack
  00056	0f bf 8e 9c 00
	00 00		 movsx	 ecx, WORD PTR [esi+156]
  0005d	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?g_iCharacterRecuperationMaxLevel@@3HA ; g_iCharacterRecuperationMaxLevel
  00063	7f 2d		 jg	 SHORT $LN221@Attack

; 49   : 	{
; 50   : 		if ( lpObj->Type == OBJ_USER )

  00065	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1
  0006a	75 08		 jne	 SHORT $LN223@Attack

; 51   : 		{
; 52   : 			if ( lpObj->Level <= g_iCharacterRecuperationMaxLevel ) // #warning useless code
; 53   : 			{
; 54   : 				lpObj->m_iAutoRecuperationTime = GetTickCount();

  0006c	ff d7		 call	 edi
  0006e	89 86 20 15 00
	00		 mov	 DWORD PTR [esi+5408], eax
$LN223@Attack:

; 55   : 			}
; 56   : 		}
; 57   : 
; 58   : 		if ( lpTargetObj->Type == OBJ_USER )

  00074	66 83 7b 60 01	 cmp	 WORD PTR [ebx+96], 1
  00079	75 17		 jne	 SHORT $LN221@Attack

; 59   : 		{
; 60   : 			if ( lpTargetObj->Level <= g_iCharacterRecuperationMaxLevel )

  0007b	0f bf 93 9c 00
	00 00		 movsx	 edx, WORD PTR [ebx+156]
  00082	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iCharacterRecuperationMaxLevel@@3HA ; g_iCharacterRecuperationMaxLevel
  00088	7f 08		 jg	 SHORT $LN221@Attack

; 61   : 			{
; 62   : 				lpTargetObj->m_iAutoRecuperationTime = GetTickCount();

  0008a	ff d7		 call	 edi
  0008c	89 83 20 15 00
	00		 mov	 DWORD PTR [ebx+5408], eax
$LN221@Attack:

; 63   : 			}
; 64   : 		}
; 65   : 	}
; 66   : 
; 67   : 	int skill = 0;
; 68   : 	
; 69   : 	if ( lpMagic )

  00092	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00095	33 ff		 xor	 edi, edi
  00097	89 7d 08	 mov	 DWORD PTR _skill$[ebp], edi
  0009a	85 c0		 test	 eax, eax
  0009c	74 07		 je	 SHORT $LN220@Attack

; 70   : 		skill = lpMagic->m_Skill;

  0009e	0f b6 78 05	 movzx	 edi, BYTE PTR [eax+5]
  000a2	89 7d 08	 mov	 DWORD PTR _skill$[ebp], edi
$LN220@Attack:

; 71   : 
; 72   : 	if ( lpObj->Class == 77 )

  000a5	66 83 be 98 00
	00 00 4d	 cmp	 WORD PTR [esi+152], 77	; 0000004dH
  000ad	75 16		 jne	 SHORT $LN218@Attack

; 73   : 	{
; 74   : 		if ( lpObj->m_SkyBossMonSheild && skill == 17 )

  000af	83 be f8 0e 00
	00 00		 cmp	 DWORD PTR [esi+3832], 0
  000b6	74 0d		 je	 SHORT $LN218@Attack
  000b8	83 ff 11	 cmp	 edi, 17			; 00000011H
  000bb	75 08		 jne	 SHORT $LN218@Attack

; 75   : 		{
; 76   : 			skill = 3;

  000bd	bf 03 00 00 00	 mov	 edi, 3
  000c2	89 7d 08	 mov	 DWORD PTR _skill$[ebp], edi
$LN218@Attack:

; 77   : 		}
; 78   : 	}
; 79   : 
; 80   : 	skillSuccess = TRUE;
; 81   : 
; 82   : 	if ( lpObj->GuildNumber > 0 )

  000c5	83 be b0 02 00
	00 00		 cmp	 DWORD PTR [esi+688], 0
  000cc	0f 8e ac 02 00
	00		 jle	 $LN279@Attack

; 83   : 	{
; 84   : 		if ( lpObj->lpGuild )

  000d2	8b 86 b4 02 00
	00		 mov	 eax, DWORD PTR [esi+692]
  000d8	85 c0		 test	 eax, eax
  000da	0f 84 9e 02 00
	00		 je	 $LN279@Attack

; 85   : 		{
; 86   : 			if ( lpObj->lpGuild->WarState )

  000e0	80 b8 91 05 00
	00 00		 cmp	 BYTE PTR [eax+1425], 0
  000e7	74 1b		 je	 SHORT $LN275@Attack

; 87   : 			{
; 88   : 				if ( lpObj->lpGuild->WarType == 1 )

  000e9	80 b8 92 05 00
	00 01		 cmp	 BYTE PTR [eax+1426], 1
  000f0	75 12		 jne	 SHORT $LN275@Attack

; 89   : 				{
; 90   : 					if ( !GetBattleSoccerGoalMove(0) )

  000f2	6a 00		 push	 0
  000f4	e8 00 00 00 00	 call	 ?GetBattleSoccerGoalMove@@YAHH@Z ; GetBattleSoccerGoalMove
  000f9	83 c4 04	 add	 esp, 4
  000fc	85 c0		 test	 eax, eax

; 91   : 					{
; 92   : 						return TRUE;

  000fe	0f 84 33 15 00
	00		 je	 $LN1@Attack
$LN275@Attack:

; 93   : 					}
; 94   : 				}
; 95   : 			}
; 96   : 
; 97   : 			if ( lpObj->lpGuild->WarState )

  00104	8b 86 b4 02 00
	00		 mov	 eax, DWORD PTR [esi+692]
  0010a	80 b8 91 05 00
	00 00		 cmp	 BYTE PTR [eax+1425], 0
  00111	0f 84 67 02 00
	00		 je	 $LN279@Attack

; 98   : 			{
; 99   : 				if ( lpObj->lpGuild->WarType == 0 )

  00117	80 b8 92 05 00
	00 00		 cmp	 BYTE PTR [eax+1426], 0
  0011e	0f 85 5a 02 00
	00		 jne	 $LN279@Attack

; 100  : 				{
; 101  : 					if ( lpTargetObj->Type == OBJ_MONSTER )

  00124	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  00129	0f 84 08 15 00
	00		 je	 $LN1@Attack
$LN200@Attack:

; 152  : 				return TRUE;
; 153  : 			}
; 154  : 		}
; 155  : 	}
; 156  : 
; 157  : 	if ( lpObj->Type == OBJ_USER )

  0012f	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1
  00134	75 40		 jne	 SHORT $LN250@Attack

; 158  : 	{
; 159  : 		if ( !gObjIsConnected(lpObj) )

  00136	56		 push	 esi
  00137	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  0013c	83 c4 04	 add	 esp, 4
  0013f	85 c0		 test	 eax, eax

; 160  : 		{
; 161  : 			return FALSE;

  00141	0f 84 2c 02 00
	00		 je	 $LN351@Attack

; 162  : 		}
; 163  : 
; 164  : 		if ( lpObj->m_Change == 8 )

  00147	83 be d0 02 00
	00 08		 cmp	 DWORD PTR [esi+720], 8
  0014e	75 12		 jne	 SHORT $LN249@Attack

; 165  : 		{
; 166  : 			skill = 1;

  00150	b8 01 00 00 00	 mov	 eax, 1
  00155	89 45 08	 mov	 DWORD PTR _skill$[ebp], eax

; 167  : 			lpMagic = &DefMagicInf[1];

  00158	c7 45 10 10 00
	00 00		 mov	 DWORD PTR _lpMagic$[ebp], OFFSET ?DefMagicInf@@3PAVCMagicInf@@A+16

; 168  : 			magicsend = 1;

  0015f	89 45 14	 mov	 DWORD PTR _magicsend$[ebp], eax
$LN249@Attack:

; 169  : 		}
; 170  : 
; 171  : 		gDarkSpirit[lpObj->m_Index].SetTarget(lpTargetObj->m_Index);

  00162	8b 03		 mov	 eax, DWORD PTR [ebx]
  00164	50		 push	 eax
  00165	8b 06		 mov	 eax, DWORD PTR [esi]
  00167	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0016a	8d 0c cd 00 00
	00 00		 lea	 ecx, DWORD PTR ?gDarkSpirit@@3PAVCDarkSpirit@@A[ecx*8]
  00171	e8 00 00 00 00	 call	 ?SetTarget@CDarkSpirit@@QAEXH@Z ; CDarkSpirit::SetTarget
$LN250@Attack:

; 172  : 	}
; 173  : 
; 174  : 	if ( lpTargetObj->Type == OBJ_USER )

  00176	66 83 7b 60 01	 cmp	 WORD PTR [ebx+96], 1
  0017b	75 11		 jne	 SHORT $LN195@Attack

; 175  : 	{
; 176  : 		if ( !gObjIsConnected(lpTargetObj))

  0017d	53		 push	 ebx
  0017e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00183	83 c4 04	 add	 esp, 4
  00186	85 c0		 test	 eax, eax

; 177  : 		{
; 178  : 			return FALSE;

  00188	0f 84 e5 01 00
	00		 je	 $LN351@Attack
$LN195@Attack:

; 179  : 		}
; 180  : 	}
; 181  : 
; 182  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )	// PLAYER VS MONSTER

  0018e	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1
  00193	75 19		 jne	 SHORT $LN277@Attack
  00195	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  0019a	75 12		 jne	 SHORT $LN277@Attack

; 183  : 	{
; 184  : 		if ( lpObj->m_RecallMon >= 0 )

  0019c	8b 86 cc 02 00
	00		 mov	 eax, DWORD PTR [esi+716]
  001a2	85 c0		 test	 eax, eax
  001a4	78 08		 js	 SHORT $LN277@Attack

; 185  : 		{
; 186  : 			if ( lpObj->m_RecallMon == lpTargetObj->m_Index )

  001a6	3b 03		 cmp	 eax, DWORD PTR [ebx]

; 187  : 			{
; 188  : 				return FALSE;

  001a8	0f 84 c5 01 00
	00		 je	 $LN351@Attack
$LN277@Attack:

; 189  : 			}
; 190  : 		}
; 191  : 	}
; 192  : 
; 193  : 	if ( !gObjAttackQ(lpTargetObj))

  001ae	53		 push	 ebx
  001af	e8 00 00 00 00	 call	 ?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAttackQ
  001b4	83 c4 04	 add	 esp, 4
  001b7	85 c0		 test	 eax, eax

; 194  : 		return FALSE;

  001b9	0f 84 b4 01 00
	00		 je	 $LN351@Attack

; 195  : 
; 196  : 	if ( lpObj->m_RecallMon >= 0 )

  001bf	83 be cc 02 00
	00 00		 cmp	 DWORD PTR [esi+716], 0
  001c6	7c 0c		 jl	 SHORT $LN190@Attack

; 197  : 		gObjCallMonsterSetEnemy(lpObj, lpTargetObj->m_Index);

  001c8	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001ca	51		 push	 ecx
  001cb	56		 push	 esi
  001cc	e8 00 00 00 00	 call	 ?gObjCallMonsterSetEnemy@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjCallMonsterSetEnemy
  001d1	83 c4 08	 add	 esp, 8
$LN190@Attack:

; 198  : 
; 199  : 	lpObj->m_TotalAttackCount++;
; 200  : 
; 201  : 	if ( AttackDamage == 0 )

  001d4	8b 7d 1c	 mov	 edi, DWORD PTR _AttackDamage$[ebp]
  001d7	ff 86 f8 01 00
	00		 inc	 DWORD PTR [esi+504]
  001dd	85 ff		 test	 edi, edi
  001df	75 1f		 jne	 SHORT $LN186@Attack

; 202  : 	{
; 203  : 		if ( skill != 76 )

  001e1	83 7d 08 4c	 cmp	 DWORD PTR _skill$[ebp], 76 ; 0000004cH
  001e5	74 19		 je	 SHORT $LN186@Attack

; 204  : 		{
; 205  : 			if ( !lpObj->m_iMuseElfInfinityArrowSkillTime )

  001e7	39 be 30 15 00
	00		 cmp	 DWORD PTR [esi+5424], edi
  001ed	75 11		 jne	 SHORT $LN186@Attack

; 206  : 			{
; 207  : 				if ( !this->DecreaseArrow(lpObj) )

  001ef	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001f2	56		 push	 esi
  001f3	e8 00 00 00 00	 call	 ?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::DecreaseArrow
  001f8	85 c0		 test	 eax, eax

; 208  : 				{
; 209  : 					return FALSE;

  001fa	0f 84 73 01 00
	00		 je	 $LN351@Attack
$LN186@Attack:

; 210  : 				}
; 211  : 			}
; 212  : 		}
; 213  : 	}
; 214  : 
; 215  : 	if ( this->CheckAttackArea(lpObj, lpTargetObj) == FALSE )

  00200	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00203	53		 push	 ebx
  00204	56		 push	 esi
  00205	e8 00 00 00 00	 call	 ?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::CheckAttackArea
  0020a	85 c0		 test	 eax, eax

; 216  : 		return FALSE;

  0020c	0f 84 61 01 00
	00		 je	 $LN351@Attack

; 217  : 
; 218  : 	lpCallObj = lpObj;
; 219  : 
; 220  : 	if ( lpObj->Type == OBJ_MONSTER )

  00212	66 83 7e 60 02	 cmp	 WORD PTR [esi+96], 2
  00217	8b ce		 mov	 ecx, esi
  00219	75 17		 jne	 SHORT $LN183@Attack

; 221  : 	{
; 222  : 		if ( lpObj->m_RecallMon >= 0 )

  0021b	8b 86 cc 02 00
	00		 mov	 eax, DWORD PTR [esi+716]
  00221	85 c0		 test	 eax, eax
  00223	78 0d		 js	 SHORT $LN183@Attack

; 223  : 		{
; 224  : 			lpCallObj = &gObj[lpObj->m_RecallMon];

  00225	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  0022b	05 00 00 00 00	 add	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00230	8b c8		 mov	 ecx, eax
$LN183@Attack:

; 225  : 		}
; 226  : 	}
; 227  : 
; 228  : 	lpCallTargetObj = lpTargetObj;
; 229  : 
; 230  : 	if ( lpTargetObj->Type == OBJ_MONSTER )
; 231  : 	{
; 232  : 		if ( lpTargetObj->m_RecallMon >= 0 )
; 233  : 		{
; 234  : 			lpCallTargetObj = &gObj[lpTargetObj->m_RecallMon];
; 235  : 		}
; 236  : 	}
; 237  : 
; 238  : 	if ( this->PkCheck(lpCallObj, lpTargetObj) == FALSE )

  00232	53		 push	 ebx
  00233	51		 push	 ecx
  00234	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00237	e8 00 00 00 00	 call	 ?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::PkCheck
  0023c	85 c0		 test	 eax, eax

; 239  : 		return FALSE;

  0023e	0f 84 2f 01 00
	00		 je	 $LN351@Attack

; 240  : 
; 241  : 	int Strength = lpObj->Strength + lpObj->AddStrength;

  00244	0f b7 96 b4 00
	00 00		 movzx	 edx, WORD PTR [esi+180]
  0024b	0f bf 86 e0 00
	00 00		 movsx	 eax, WORD PTR [esi+224]

; 242  : 	int Dexterity = lpObj->Dexterity + lpObj->AddDexterity;

  00252	0f b7 8e b6 00
	00 00		 movzx	 ecx, WORD PTR [esi+182]
  00259	03 c2		 add	 eax, edx

; 243  : 	int Vitality = lpObj->Vitality + lpObj->AddVitality;
; 244  : 	int Energy = lpObj->Energy + lpObj->AddEnergy;

  0025b	0f b7 96 ba 00
	00 00		 movzx	 edx, WORD PTR [esi+186]
  00262	89 45 d4	 mov	 DWORD PTR _Strength$[ebp], eax
  00265	0f bf 86 e2 00
	00 00		 movsx	 eax, WORD PTR [esi+226]
  0026c	03 c1		 add	 eax, ecx
  0026e	89 45 d8	 mov	 DWORD PTR _Dexterity$[ebp], eax
  00271	0f bf 86 e6 00
	00 00		 movsx	 eax, WORD PTR [esi+230]
  00278	03 c2		 add	 eax, edx

; 245  : 	BOOL bIsOnDuel = gObjDuelCheck(lpObj, lpTargetObj);

  0027a	53		 push	 ebx
  0027b	56		 push	 esi
  0027c	89 45 ec	 mov	 DWORD PTR _Energy$[ebp], eax
  0027f	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  00284	83 c4 08	 add	 esp, 8
  00287	89 45 f0	 mov	 DWORD PTR _bIsOnDuel$[ebp], eax

; 246  : 
; 247  : 	if ( bIsOnDuel )

  0028a	85 c0		 test	 eax, eax
  0028c	74 18		 je	 SHORT $LN179@Attack

; 248  : 	{
; 249  : 		lpObj->m_iDuelTickCount = GetTickCount();

  0028e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00294	89 86 24 0d 00
	00		 mov	 DWORD PTR [esi+3364], eax

; 250  : 		lpTargetObj->m_iDuelTickCount = GetTickCount();

  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  002a0	89 83 24 0d 00
	00		 mov	 DWORD PTR [ebx+3364], eax
$LN179@Attack:

; 251  : 	}
; 252  : 
; 253  : 	if ( lpObj->pInventory[0].m_Type == ITEMGET(2,5) && lpObj->pInventory[0].m_IsValidItem != false )	// Crystal Sword

  002a6	8b 86 8c 0c 00
	00		 mov	 eax, DWORD PTR [esi+3212]
  002ac	b9 05 04 00 00	 mov	 ecx, 1029		; 00000405H
  002b1	66 39 48 06	 cmp	 WORD PTR [eax+6], cx
  002b5	75 09		 jne	 SHORT $LN178@Attack
  002b7	80 b8 94 00 00
	00 00		 cmp	 BYTE PTR [eax+148], 0

; 254  : 	{
; 255  : 		if ( (rand()%20) == 0 )
; 256  : 		{
; 257  : 			skill = 7;
; 258  : 			lpMagic = &DefMagicInf[7];
; 259  : 			magicsend = 1;
; 260  : 		}
; 261  : 	}

  002be	75 14		 jne	 SHORT $LN335@Attack
$LN178@Attack:

; 262  : 	else if ( lpObj->pInventory[1].m_Type == ITEMGET(2,5) && lpObj->pInventory[1].m_IsValidItem != false )	// Crystal Sword

  002c0	8b d1		 mov	 edx, ecx
  002c2	66 39 90 ae 00
	00 00		 cmp	 WORD PTR [eax+174], dx
  002c9	75 2f		 jne	 SHORT $LN174@Attack
  002cb	80 b8 3c 01 00
	00 00		 cmp	 BYTE PTR [eax+316], 0
  002d2	74 26		 je	 SHORT $LN174@Attack
$LN335@Attack:

; 263  : 	{
; 264  : 		if ( (rand()%20) == 0 )

  002d4	e8 00 00 00 00	 call	 _rand
  002d9	99		 cdq
  002da	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  002df	f7 f9		 idiv	 ecx
  002e1	85 d2		 test	 edx, edx
  002e3	75 15		 jne	 SHORT $LN174@Attack

; 265  : 		{
; 266  : 			skill = 7;
; 267  : 			lpMagic = &DefMagicInf[7];
; 268  : 			magicsend = 1;

  002e5	c7 45 14 01 00
	00 00		 mov	 DWORD PTR _magicsend$[ebp], 1
  002ec	c7 45 10 70 00
	00 00		 mov	 DWORD PTR _lpMagic$[ebp], OFFSET ?DefMagicInf@@3PAVCMagicInf@@A+112
  002f3	c7 45 08 07 00
	00 00		 mov	 DWORD PTR _skill$[ebp], 7
$LN174@Attack:

; 269  : 		}
; 270  : 	}
; 271  : 
; 272  : 	MSBFlag = 0;
; 273  : 	MsgDamage = 0;
; 274  : 	skillSuccess = this->ResistanceCheck(lpObj, lpTargetObj, skill);

  002fa	8b 55 08	 mov	 edx, DWORD PTR _skill$[ebp]
  002fd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00300	52		 push	 edx
  00301	53		 push	 ebx
  00302	56		 push	 esi
  00303	c6 45 18 00	 mov	 BYTE PTR _MSBFlag$[ebp], 0
  00307	c6 45 ff 00	 mov	 BYTE PTR _MsgDamage$[ebp], 0
  0030b	e8 00 00 00 00	 call	 ?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjBaseAttack::ResistanceCheck

; 275  : 	BOOL skillIceArrowSuccess = skillSuccess;
; 276  : 
; 277  : 	if ( skill == 51 )

  00310	83 7d 08 33	 cmp	 DWORD PTR _skill$[ebp], 51 ; 00000033H
  00314	89 45 f4	 mov	 DWORD PTR _skillSuccess$[ebp], eax
  00317	89 45 dc	 mov	 DWORD PTR _skillIceArrowSuccess$[ebp], eax
  0031a	75 07		 jne	 SHORT $LN261@Attack

; 278  : 		skillSuccess = 0;

  0031c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 0
$LN261@Attack:

; 279  : 
; 280  : 	BOOL bAllMiss = FALSE;
; 281  : 	
; 282  : 	if ( lpObj->m_iSkillInvisibleTime > 0 )

  00323	83 be e4 14 00
	00 00		 cmp	 DWORD PTR [esi+5348], 0
  0032a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bAllMiss$[ebp], 0
  00331	7e 0d		 jle	 SHORT $LN172@Attack

; 283  : 		gObjUseSkill.RemoveCloakingEffect(lpObj->m_Index);

  00333	8b 06		 mov	 eax, DWORD PTR [esi]
  00335	50		 push	 eax
  00336	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  0033b	e8 00 00 00 00	 call	 ?RemoveCloakingEffect@CObjUseSkill@@QAEHH@Z ; CObjUseSkill::RemoveCloakingEffect
$LN172@Attack:

; 284  : 
; 285  : 	BOOL bDamageReflect = FALSE;

  00340	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bDamageReflect$[ebp], 0

; 286  : 	
; 287  : 	if ( AttackDamage == 0 )

  00347	85 ff		 test	 edi, edi
  00349	0f 85 72 0d 00
	00		 jne	 $LN171@Attack

; 288  : 	{
; 289  : 		if ( !this->MissCheck(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss) )

  0034f	8b 7d 08	 mov	 edi, DWORD PTR _skill$[ebp]
  00352	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00355	8b 11		 mov	 edx, DWORD PTR [ecx]
  00357	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0035a	8d 45 e8	 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  0035d	50		 push	 eax
  0035e	8b 45 14	 mov	 eax, DWORD PTR _magicsend$[ebp]
  00361	50		 push	 eax
  00362	8b 45 f4	 mov	 eax, DWORD PTR _skillSuccess$[ebp]
  00365	50		 push	 eax
  00366	57		 push	 edi
  00367	53		 push	 ebx
  00368	56		 push	 esi
  00369	ff d2		 call	 edx
  0036b	85 c0		 test	 eax, eax
  0036d	0f 85 f4 00 00
	00		 jne	 $LN170@Attack
$LN351@Attack:
  00373	5f		 pop	 edi
  00374	5e		 pop	 esi

; 290  : 		{
; 291  : 			return FALSE;

  00375	33 c0		 xor	 eax, eax
  00377	5b		 pop	 ebx

; 1099 : }

  00378	8b e5		 mov	 esp, ebp
  0037a	5d		 pop	 ebp
  0037b	c2 1c 00	 ret	 28			; 0000001cH
$LN279@Attack:

; 102  : 					{
; 103  : 						return TRUE;
; 104  : 					}
; 105  : 				}
; 106  : 			}
; 107  : 		}
; 108  : 	}
; 109  : 
; 110  : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  0037e	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  00383	0f 85 a6 fd ff
	ff		 jne	 $LN200@Attack

; 111  : 	{
; 112  : 		if ( lpTargetObj->m_iMonsterBattleDelay > 0 )

  00389	80 bb 2b 02 00
	00 00		 cmp	 BYTE PTR [ebx+555], 0

; 113  : 			return TRUE;

  00390	0f 8f a1 12 00
	00		 jg	 $LN1@Attack

; 114  : 		
; 115  : 		if ( lpTargetObj->Class == 200 )

  00396	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  0039b	66 39 83 98 00
	00 00		 cmp	 WORD PTR [ebx+152], ax
  003a2	75 42		 jne	 SHORT $LN207@Attack

; 116  : 		{
; 117  : 			if ( skill )
; 118  : 			{
; 119  : 				gObjMonsterStateProc(lpTargetObj, 7, lpObj->m_Index, 0);

  003a4	6a 00		 push	 0
  003a6	85 ff		 test	 edi, edi
  003a8	74 07		 je	 SHORT $LN206@Attack
  003aa	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003ac	51		 push	 ecx
  003ad	6a 07		 push	 7

; 120  : 			}
; 121  : 			else

  003af	eb 05		 jmp	 SHORT $LN333@Attack
$LN206@Attack:

; 122  : 			{
; 123  : 				gObjMonsterStateProc(lpTargetObj, 6, lpObj->m_Index, 0);

  003b1	8b 16		 mov	 edx, DWORD PTR [esi]
  003b3	52		 push	 edx
  003b4	6a 06		 push	 6
$LN333@Attack:
  003b6	53		 push	 ebx
  003b7	e8 00 00 00 00	 call	 ?gObjMonsterStateProc@@YAXPAUOBJECTSTRUCT@@HHH@Z ; gObjMonsterStateProc
  003bc	83 c4 10	 add	 esp, 16			; 00000010H

; 124  : 			}
; 125  : 
; 126  : 			if ( magicsend )

  003bf	83 7d 14 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  003c3	0f 84 6e 12 00
	00		 je	 $LN1@Attack

; 127  : 			{
; 128  : 				GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  003c9	8b 03		 mov	 eax, DWORD PTR [ebx]
  003cb	6a 01		 push	 1
  003cd	50		 push	 eax
  003ce	57		 push	 edi
  003cf	56		 push	 esi
  003d0	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@EHE@Z ; GCMagicAttackNumberSend
  003d5	83 c4 10	 add	 esp, 16			; 00000010H
  003d8	5f		 pop	 edi
  003d9	5e		 pop	 esi

; 1096 : 	}
; 1097 : 
; 1098 : 	return TRUE;

  003da	b8 01 00 00 00	 mov	 eax, 1
  003df	5b		 pop	 ebx

; 1099 : }

  003e0	8b e5		 mov	 esp, ebp
  003e2	5d		 pop	 ebp
  003e3	c2 1c 00	 ret	 28			; 0000001cH
$LN207@Attack:

; 129  : 			}
; 130  : 
; 131  : 			return TRUE;
; 132  : 		}
; 133  : 
; 134  : 		if ( lpTargetObj->m_ImmuneToMagicCount > 0 )

  003e6	80 bb 29 02 00
	00 00		 cmp	 BYTE PTR [ebx+553], 0
  003ed	7e 33		 jle	 SHORT $LN202@Attack

; 135  : 		{
; 136  : 			BOOL bCheckAttackIsMagicType = gObjCheckAttackTypeMagic(lpObj->Class, skill);
; 137  : 
; 138  : 			if ( bCheckAttackIsMagicType == TRUE )

  003ef	0f b7 8e 98 00
	00 00		 movzx	 ecx, WORD PTR [esi+152]
  003f6	57		 push	 edi
  003f7	51		 push	 ecx
  003f8	e8 00 00 00 00	 call	 ?gObjCheckAttackTypeMagic@@YAHHH@Z ; gObjCheckAttackTypeMagic
  003fd	83 c4 08	 add	 esp, 8
  00400	83 f8 01	 cmp	 eax, 1
  00403	75 1d		 jne	 SHORT $LN202@Attack

; 139  : 			{
; 140  : 				GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, 0);

  00405	8b 13		 mov	 edx, DWORD PTR [ebx]
  00407	6a 00		 push	 0
  00409	52		 push	 edx
  0040a	57		 push	 edi
  0040b	56		 push	 esi
  0040c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@EHE@Z ; GCMagicAttackNumberSend
  00411	83 c4 10	 add	 esp, 16			; 00000010H
  00414	5f		 pop	 edi
  00415	5e		 pop	 esi

; 1096 : 	}
; 1097 : 
; 1098 : 	return TRUE;

  00416	b8 01 00 00 00	 mov	 eax, 1
  0041b	5b		 pop	 ebx

; 1099 : }

  0041c	8b e5		 mov	 esp, ebp
  0041e	5d		 pop	 ebp
  0041f	c2 1c 00	 ret	 28			; 0000001cH
$LN202@Attack:

; 141  : 				return TRUE;
; 142  : 			}
; 143  : 		}
; 144  : 
; 145  : 		if ( lpTargetObj->m_ImmuneToHarmCount > 0 )

  00422	80 bb 2a 02 00
	00 00		 cmp	 BYTE PTR [ebx+554], 0
  00429	0f 8e 00 fd ff
	ff		 jle	 $LN200@Attack

; 146  : 		{
; 147  : 			BOOL bCheckAttackIsMagicType = gObjCheckAttackTypeMagic(lpObj->Class, skill);
; 148  : 
; 149  : 			if ( bCheckAttackIsMagicType == FALSE )

  0042f	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  00436	57		 push	 edi
  00437	50		 push	 eax
  00438	e8 00 00 00 00	 call	 ?gObjCheckAttackTypeMagic@@YAHHH@Z ; gObjCheckAttackTypeMagic
  0043d	83 c4 08	 add	 esp, 8
  00440	85 c0		 test	 eax, eax
  00442	0f 85 e7 fc ff
	ff		 jne	 $LN200@Attack

; 150  : 			{
; 151  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0);

  00448	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0044a	8b 16		 mov	 edx, DWORD PTR [esi]
  0044c	50		 push	 eax
  0044d	50		 push	 eax
  0044e	50		 push	 eax
  0044f	51		 push	 ecx
  00450	52		 push	 edx
  00451	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHH@Z ; GCDamageSend
  00456	83 c4 14	 add	 esp, 20			; 00000014H
  00459	5f		 pop	 edi
  0045a	5e		 pop	 esi

; 1096 : 	}
; 1097 : 
; 1098 : 	return TRUE;

  0045b	b8 01 00 00 00	 mov	 eax, 1
  00460	5b		 pop	 ebx

; 1099 : }

  00461	8b e5		 mov	 esp, ebp
  00463	5d		 pop	 ebp
  00464	c2 1c 00	 ret	 28			; 0000001cH
$LN170@Attack:

; 292  : 		}
; 293  : 
; 294  : 		if ( skill == 51 && skillIceArrowSuccess == TRUE )

  00467	83 ff 33	 cmp	 edi, 51			; 00000033H
  0046a	75 57		 jne	 SHORT $LN262@Attack
  0046c	83 7d dc 01	 cmp	 DWORD PTR _skillIceArrowSuccess$[ebp], 1
  00470	75 51		 jne	 SHORT $LN262@Attack

; 295  : 		{
; 296  : 			lpTargetObj->m_SkillHarden = 7;
; 297  : 			lpTargetObj->m_SkillHardenTime = 7;
; 298  : 			lpTargetObj->lpAttackObj = lpObj;
; 299  : 			lpTargetObj->m_ViewSkillState |= 0x20;
; 300  : 			lpTargetObj->PathCount = 0;
; 301  : 			lpTargetObj->PathStartEnd = 0;
; 302  : 			skillSuccess = TRUE;
; 303  : 
; 304  : 			gObjSetPosition(lpTargetObj->m_Index, lpTargetObj->X, lpTargetObj->Y);

  00472	0f bf 8b 04 01
	00 00		 movsx	 ecx, WORD PTR [ebx+260]
  00479	8b 13		 mov	 edx, DWORD PTR [ebx]
  0047b	83 8b c4 01 00
	00 20		 or	 DWORD PTR [ebx+452], 32	; 00000020H
  00482	b8 07 00 00 00	 mov	 eax, 7
  00487	89 83 98 02 00
	00		 mov	 DWORD PTR [ebx+664], eax
  0048d	89 83 9c 02 00
	00		 mov	 DWORD PTR [ebx+668], eax
  00493	0f bf 83 06 01
	00 00		 movsx	 eax, WORD PTR [ebx+262]
  0049a	50		 push	 eax
  0049b	51		 push	 ecx
  0049c	52		 push	 edx
  0049d	89 b3 38 02 00
	00		 mov	 DWORD PTR [ebx+568], esi
  004a3	c7 83 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+296], 0
  004ad	c6 83 30 01 00
	00 00		 mov	 BYTE PTR [ebx+304], 0
  004b4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _skillSuccess$[ebp], 1
  004bb	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  004c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN262@Attack:

; 305  : 		}
; 306  : 
; 307  : 		int targetdefense = this->GetTargetDefense(lpObj, lpTargetObj, MsgDamage);

  004c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004c6	8d 45 ff	 lea	 eax, DWORD PTR _MsgDamage$[ebp]
  004c9	50		 push	 eax
  004ca	53		 push	 ebx
  004cb	56		 push	 esi
  004cc	e8 00 00 00 00	 call	 ?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAE@Z ; CObjBaseAttack::GetTargetDefense

; 308  : 
; 309  : 		if ( lpTargetObj->m_iSkillNPCDefense )

  004d1	8b 8b 28 15 00
	00		 mov	 ecx, DWORD PTR [ebx+5416]
  004d7	89 45 1c	 mov	 DWORD PTR _targetdefense$155782[ebp], eax
  004da	85 c9		 test	 ecx, ecx
  004dc	74 05		 je	 SHORT $LN168@Attack

; 310  : 		{
; 311  : 			targetdefense += lpTargetObj->m_iSkillNPCDefense;

  004de	03 c1		 add	 eax, ecx
  004e0	89 45 1c	 mov	 DWORD PTR _targetdefense$155782[ebp], eax
$LN168@Attack:

; 312  : 		}
; 313  : 
; 314  : 		if ( skill == 19
; 315  : 			|| skill == 20
; 316  : 			|| skill == 21
; 317  : 			|| skill == 22
; 318  : 			|| skill == 23
; 319  : 			|| skill == 56
; 320  : 			|| skill == 41
; 321  : 			|| skill == 47
; 322  : 			|| skill == 42
; 323  : 			|| skill == 49
; 324  : 			|| skill == 43
; 325  : 			|| skill == 55
; 326  : 			|| skill == 44
; 327  : 			|| skill == 57
; 328  : 			|| skill == 74 )

  004e3	83 ff 13	 cmp	 edi, 19			; 00000013H
  004e6	0f 84 64 03 00
	00		 je	 $LN166@Attack
  004ec	83 ff 14	 cmp	 edi, 20			; 00000014H
  004ef	0f 84 5b 03 00
	00		 je	 $LN166@Attack
  004f5	83 ff 15	 cmp	 edi, 21			; 00000015H
  004f8	0f 84 52 03 00
	00		 je	 $LN166@Attack
  004fe	83 ff 16	 cmp	 edi, 22			; 00000016H
  00501	0f 84 49 03 00
	00		 je	 $LN166@Attack
  00507	83 ff 17	 cmp	 edi, 23			; 00000017H
  0050a	0f 84 40 03 00
	00		 je	 $LN166@Attack
  00510	83 ff 38	 cmp	 edi, 56			; 00000038H
  00513	0f 84 37 03 00
	00		 je	 $LN166@Attack
  00519	83 ff 29	 cmp	 edi, 41			; 00000029H
  0051c	0f 84 2e 03 00
	00		 je	 $LN166@Attack
  00522	83 ff 2f	 cmp	 edi, 47			; 0000002fH
  00525	0f 84 25 03 00
	00		 je	 $LN166@Attack
  0052b	83 ff 2a	 cmp	 edi, 42			; 0000002aH
  0052e	0f 84 1c 03 00
	00		 je	 $LN166@Attack
  00534	83 ff 31	 cmp	 edi, 49			; 00000031H
  00537	0f 84 13 03 00
	00		 je	 $LN166@Attack
  0053d	83 ff 2b	 cmp	 edi, 43			; 0000002bH
  00540	0f 84 0a 03 00
	00		 je	 $LN166@Attack
  00546	83 ff 37	 cmp	 edi, 55			; 00000037H
  00549	0f 84 01 03 00
	00		 je	 $LN166@Attack
  0054f	83 ff 2c	 cmp	 edi, 44			; 0000002cH
  00552	0f 84 f8 02 00
	00		 je	 $LN166@Attack
  00558	83 ff 39	 cmp	 edi, 57			; 00000039H
  0055b	0f 84 ef 02 00
	00		 je	 $LN166@Attack
  00561	83 ff 4a	 cmp	 edi, 74			; 0000004aH
  00564	0f 84 e6 02 00
	00		 je	 $LN166@Attack

; 336  : 			}
; 337  : 		}
; 338  : 		else if ( skill == 76 )	// pluzzmanton

  0056a	83 ff 4c	 cmp	 edi, 76			; 0000004cH
  0056d	0f 85 91 02 00
	00		 jne	 $LN163@Attack

; 339  : 		{
; 340  : 			int iFenrirAttackDmg = 0;
; 341  : 
; 342  : 			if ( lpObj->Class == CLASS_KNIGHT || lpObj->Class == CLASS_MAGUMSA )

  00573	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  0057a	83 f8 01	 cmp	 eax, 1
  0057d	0f 84 3c 01 00
	00		 je	 $LN161@Attack
  00583	83 f8 03	 cmp	 eax, 3
  00586	0f 84 33 01 00
	00		 je	 $LN161@Attack

; 345  : 			}
; 346  : 			else if ( lpObj->Class == CLASS_WIZARD )

  0058c	66 85 c0	 test	 ax, ax
  0058f	75 5a		 jne	 SHORT $LN159@Attack

; 347  : 			{
; 348  : 				iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 5 + lpObj->Vitality / 7 + lpObj->Energy / 3;	// #formula

  00591	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  00598	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0059d	f7 e9		 imul	 ecx
  0059f	03 d1		 add	 edx, ecx
  005a1	0f b7 8e b6 00
	00 00		 movzx	 ecx, WORD PTR [esi+182]
  005a8	c1 fa 02	 sar	 edx, 2
  005ab	8b fa		 mov	 edi, edx
  005ad	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  005b0	03 fa		 add	 edi, edx
  005b2	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  005b7	f7 e9		 imul	 ecx
  005b9	0f b7 8e b4 00
	00 00		 movzx	 ecx, WORD PTR [esi+180]
  005c0	d1 fa		 sar	 edx, 1
  005c2	03 fa		 add	 edi, edx
  005c4	8b da		 mov	 ebx, edx
  005c6	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  005cb	f7 e9		 imul	 ecx
  005cd	0f b7 8e ba 00
	00 00		 movzx	 ecx, WORD PTR [esi+186]
  005d4	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  005d7	03 df		 add	 ebx, edi
  005d9	d1 fa		 sar	 edx, 1
  005db	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  005e0	8b fa		 mov	 edi, edx
  005e2	03 da		 add	 ebx, edx
  005e4	f7 e9		 imul	 ecx
  005e6	e9 29 01 00 00	 jmp	 $LN336@Attack
$LN159@Attack:

; 349  : 			}
; 350  : 			else if ( lpObj->Class == CLASS_ELF )

  005eb	83 f8 02	 cmp	 eax, 2
  005ee	75 5a		 jne	 SHORT $LN157@Attack

; 351  : 			{
; 352  : 				iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 3 + lpObj->Vitality / 7 + lpObj->Energy / 5;	// #formula

  005f0	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  005f7	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  005fc	f7 e9		 imul	 ecx
  005fe	03 d1		 add	 edx, ecx
  00600	0f b7 8e b6 00
	00 00		 movzx	 ecx, WORD PTR [esi+182]
  00607	c1 fa 02	 sar	 edx, 2
  0060a	8b fa		 mov	 edi, edx
  0060c	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0060f	03 fa		 add	 edi, edx
  00611	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00616	f7 e9		 imul	 ecx
  00618	0f b7 8e b4 00
	00 00		 movzx	 ecx, WORD PTR [esi+180]
  0061f	03 fa		 add	 edi, edx
  00621	8b da		 mov	 ebx, edx
  00623	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00628	f7 e9		 imul	 ecx
  0062a	0f b7 8e ba 00
	00 00		 movzx	 ecx, WORD PTR [esi+186]
  00631	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00634	d1 fa		 sar	 edx, 1
  00636	03 df		 add	 ebx, edi
  00638	8b fa		 mov	 edi, edx
  0063a	03 da		 add	 ebx, edx
  0063c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00641	f7 e9		 imul	 ecx
  00643	d1 fa		 sar	 edx, 1

; 353  : 			}
; 354  : 			else	// Dark Lord

  00645	e9 ca 00 00 00	 jmp	 $LN336@Attack
$LN157@Attack:

; 355  : 			{
; 356  : 				iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 5 + lpObj->Vitality / 7 + lpObj->Energy / 3 + lpObj->Leadership / 3;	// #formula

  0064a	0f b7 8e d8 00
	00 00		 movzx	 ecx, WORD PTR [esi+216]
  00651	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00656	f7 e9		 imul	 ecx
  00658	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  0065f	8b fa		 mov	 edi, edx
  00661	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00664	03 fa		 add	 edi, edx
  00666	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0066b	f7 e9		 imul	 ecx
  0066d	03 d1		 add	 edx, ecx
  0066f	0f b7 8e b6 00
	00 00		 movzx	 ecx, WORD PTR [esi+182]
  00676	c1 fa 02	 sar	 edx, 2
  00679	03 fa		 add	 edi, edx
  0067b	8b da		 mov	 ebx, edx
  0067d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00682	f7 e9		 imul	 ecx
  00684	0f b7 8e b4 00
	00 00		 movzx	 ecx, WORD PTR [esi+180]
  0068b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0068e	03 df		 add	 ebx, edi
  00690	d1 fa		 sar	 edx, 1
  00692	8b fa		 mov	 edi, edx
  00694	03 da		 add	 ebx, edx
  00696	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0069b	f7 e9		 imul	 ecx
  0069d	0f b7 8e ba 00
	00 00		 movzx	 ecx, WORD PTR [esi+186]
  006a4	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  006a7	d1 fa		 sar	 edx, 1
  006a9	03 fb		 add	 edi, ebx
  006ab	8b c2		 mov	 eax, edx
  006ad	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  006b0	03 fa		 add	 edi, edx
  006b2	03 c7		 add	 eax, edi
  006b4	8b f8		 mov	 edi, eax
  006b6	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  006bb	f7 e9		 imul	 ecx
  006bd	eb 5a		 jmp	 SHORT $LN337@Attack
$LN161@Attack:

; 343  : 			{
; 344  : 				iFenrirAttackDmg = lpObj->Strength / 3 + lpObj->Dexterity / 5 + lpObj->Vitality / 5 + lpObj->Energy / 7;	// #formula

  006bf	0f b7 8e b8 00
	00 00		 movzx	 ecx, WORD PTR [esi+184]
  006c6	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  006cb	f7 e9		 imul	 ecx
  006cd	0f b7 8e b6 00
	00 00		 movzx	 ecx, WORD PTR [esi+182]
  006d4	d1 fa		 sar	 edx, 1
  006d6	8b fa		 mov	 edi, edx
  006d8	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  006db	03 fa		 add	 edi, edx
  006dd	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  006e2	f7 e9		 imul	 ecx
  006e4	0f b7 8e b4 00
	00 00		 movzx	 ecx, WORD PTR [esi+180]
  006eb	d1 fa		 sar	 edx, 1
  006ed	03 fa		 add	 edi, edx
  006ef	8b da		 mov	 ebx, edx
  006f1	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  006f6	f7 e9		 imul	 ecx
  006f8	0f b7 8e ba 00
	00 00		 movzx	 ecx, WORD PTR [esi+186]
  006ff	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00702	03 df		 add	 ebx, edi
  00704	8b fa		 mov	 edi, edx
  00706	03 da		 add	 ebx, edx
  00708	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0070d	f7 e9		 imul	 ecx
  0070f	03 d1		 add	 edx, ecx
  00711	c1 fa 02	 sar	 edx, 2
$LN336@Attack:
  00714	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00717	03 fb		 add	 edi, ebx
$LN337@Attack:
  00719	8b da		 mov	 ebx, edx
  0071b	03 fa		 add	 edi, edx
  0071d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00720	03 df		 add	 ebx, edi

; 357  : 			}
; 358  : 
; 359  : 			if ( iFenrirAttackDmg < 0 )

  00722	85 db		 test	 ebx, ebx
  00724	79 02		 jns	 SHORT $LN155@Attack

; 360  : 				iFenrirAttackDmg = 0;

  00726	33 db		 xor	 ebx, ebx
$LN155@Attack:

; 361  : 
; 362  : 			if ( lpObj->m_CriticalDamage > 0 )

  00728	83 be 2c 03 00
	00 00		 cmp	 DWORD PTR [esi+812], 0
  0072f	7e 19		 jle	 SHORT $LN260@Attack

; 363  : 			{
; 364  : 				if ( (rand()%100) < lpObj->m_CriticalDamage )

  00731	e8 00 00 00 00	 call	 _rand
  00736	99		 cdq
  00737	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0073c	f7 f9		 idiv	 ecx
  0073e	3b 96 2c 03 00
	00		 cmp	 edx, DWORD PTR [esi+812]
  00744	7d 04		 jge	 SHORT $LN260@Attack

; 365  : 				{
; 366  : 					MsgDamage = 3;

  00746	c6 45 ff 03	 mov	 BYTE PTR _MsgDamage$[ebp], 3
$LN260@Attack:

; 367  : 				}
; 368  : 			}
; 369  : 
; 370  : 			if ( lpObj->m_ExcelentDamage > 0 )

  0074a	83 be 30 03 00
	00 00		 cmp	 DWORD PTR [esi+816], 0
  00751	7e 1b		 jle	 SHORT $LN252@Attack

; 371  : 			{
; 372  : 				if ( (rand()%100) < lpObj->m_ExcelentDamage )

  00753	e8 00 00 00 00	 call	 _rand
  00758	99		 cdq
  00759	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0075e	f7 f9		 idiv	 ecx
  00760	3b 96 30 03 00
	00		 cmp	 edx, DWORD PTR [esi+816]
  00766	7d 06		 jge	 SHORT $LN252@Attack

; 373  : 				{
; 374  : 					MsgDamage = 2;

  00768	c6 45 ff 02	 mov	 BYTE PTR _MsgDamage$[ebp], 2

; 375  : 				}
; 376  : 			}
; 377  : 
; 378  : 			if ( MsgDamage == 3 )	// Critical Damage

  0076c	eb 31		 jmp	 SHORT $LN244@Attack
$LN252@Attack:
  0076e	8a 45 ff	 mov	 al, BYTE PTR _MsgDamage$[ebp]
  00771	3c 03		 cmp	 al, 3
  00773	75 26		 jne	 SHORT $LN150@Attack

; 379  : 			{
; 380  : 				AttackDamage =  iFenrirAttackDmg + lpMagic->m_DamageMax;
; 381  : 				AttackDamage += lpObj->SetOpAddCriticalDamage;
; 382  : 				AttackDamage += lpObj->SkillAddCriticalDamage;
; 383  : 				AttackDamage -= targetdefense;

  00775	0f b7 be b8 10
	00 00		 movzx	 edi, WORD PTR [esi+4280]
  0077c	0f bf 96 66 0f
	00 00		 movsx	 edx, WORD PTR [esi+3942]
  00783	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00786	03 fa		 add	 edi, edx
  00788	03 78 0c	 add	 edi, DWORD PTR [eax+12]
  0078b	2b 7d 1c	 sub	 edi, DWORD PTR _targetdefense$155782[ebp]
  0078e	03 fb		 add	 edi, ebx
  00790	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  00793	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
  00796	e9 e6 00 00 00	 jmp	 $LN264@Attack
$LN150@Attack:

; 384  : 			}
; 385  : 			else if ( MsgDamage == 2 )	// Excellent

  0079b	3c 02		 cmp	 al, 2
  0079d	75 39		 jne	 SHORT $LN148@Attack
$LN244@Attack:

; 386  : 			{
; 387  : 				AttackDamage = iFenrirAttackDmg + lpMagic->m_DamageMax;

  0079f	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  007a2	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]
  007a5	03 fb		 add	 edi, ebx

; 388  : 				AttackDamage += AttackDamage * 20 / 100;
; 389  : 				AttackDamage += lpObj->SetOpAddExDamage;
; 390  : 				AttackDamage -= targetdefense;

  007a7	0f bf 9e 62 0f
	00 00		 movsx	 ebx, WORD PTR [esi+3938]
  007ae	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  007b1	03 c9		 add	 ecx, ecx
  007b3	03 c9		 add	 ecx, ecx
  007b5	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  007ba	f7 e9		 imul	 ecx
  007bc	c1 fa 05	 sar	 edx, 5
  007bf	8b c2		 mov	 eax, edx
  007c1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  007c4	03 da		 add	 ebx, edx
  007c6	03 c3		 add	 eax, ebx
  007c8	2b 45 1c	 sub	 eax, DWORD PTR _targetdefense$155782[ebp]

; 391  : 			}
; 392  : 			else

  007cb	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  007ce	03 f8		 add	 edi, eax
  007d0	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
  007d3	e9 a9 00 00 00	 jmp	 $LN264@Attack
$LN148@Attack:

; 393  : 			{
; 394  : 				AttackDamage = (iFenrirAttackDmg + lpMagic->m_DamageMin) + (rand()%(lpMagic->m_DamageMax - lpMagic->m_DamageMin + 1));

  007d8	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  007db	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  007de	89 7d dc	 mov	 DWORD PTR tv2005[ebp], edi
  007e1	e8 00 00 00 00	 call	 _rand

; 395  : 				AttackDamage -= targetdefense;

  007e6	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  007e9	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  007ec	2b cf		 sub	 ecx, edi
  007ee	41		 inc	 ecx
  007ef	99		 cdq
  007f0	f7 f9		 idiv	 ecx
  007f2	8b fa		 mov	 edi, edx
  007f4	2b 7d 1c	 sub	 edi, DWORD PTR _targetdefense$155782[ebp]
  007f7	03 7d dc	 add	 edi, DWORD PTR tv2005[ebp]
  007fa	03 fb		 add	 edi, ebx

; 396  : 			}
; 397  : 		}
; 398  : 		else

  007fc	8b 5d 0c	 mov	 ebx, DWORD PTR _lpTargetObj$[ebp]
  007ff	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
  00802	eb 7d		 jmp	 SHORT $LN264@Attack
$LN163@Attack:

; 399  : 		{
; 400  : 			if ( ( lpObj->Class == CLASS_WIZARD || lpObj->Class == CLASS_MAGUMSA ) && skill )

  00804	0f b7 8e 98 00
	00 00		 movzx	 ecx, WORD PTR [esi+152]
  0080b	66 85 c9	 test	 cx, cx
  0080e	74 05		 je	 SHORT $LN144@Attack
  00810	83 f9 03	 cmp	 ecx, 3
  00813	75 2d		 jne	 SHORT $LN145@Attack
$LN144@Attack:
  00815	85 ff		 test	 edi, edi
  00817	74 29		 je	 SHORT $LN145@Attack

; 401  : 			{
; 402  : 				AttackDamage = this->GetAttackDamageWizard(lpObj, targetdefense, lpMagic, MsgDamage, bIsOnDuel);

  00819	8b 55 f0	 mov	 edx, DWORD PTR _bIsOnDuel$[ebp]
  0081c	52		 push	 edx
  0081d	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00820	8d 4d ff	 lea	 ecx, DWORD PTR _MsgDamage$[ebp]
  00823	51		 push	 ecx
  00824	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00827	52		 push	 edx
  00828	50		 push	 eax
  00829	56		 push	 esi
  0082a	e8 00 00 00 00	 call	 ?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAEH@Z ; CObjAttack::GetAttackDamageWizard
  0082f	8b f8		 mov	 edi, eax

; 403  : 				AttackDamage += lpObj->m_iSkillNPCAttack;

  00831	03 be 2c 15 00
	00		 add	 edi, DWORD PTR [esi+5420]
  00837	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi

; 404  : 
; 405  : 				if ( AttackDamage > 0 )

  0083a	85 ff		 test	 edi, edi
  0083c	7e 43		 jle	 SHORT $LN264@Attack

; 406  : 				{
; 407  : 					gObjWeaponDurDown(lpObj, lpTargetObj, 1);

  0083e	6a 01		 push	 1

; 408  : 				}
; 409  : 			}
; 410  : 			else

  00840	eb 35		 jmp	 SHORT $LN338@Attack
$LN145@Attack:

; 411  : 			{
; 412  : 				AttackDamage = this->GetAttackDamage(lpObj, targetdefense, MsgDamage, bIsOnDuel, lpMagic);

  00842	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00845	8b 55 f0	 mov	 edx, DWORD PTR _bIsOnDuel$[ebp]
  00848	51		 push	 ecx
  00849	52		 push	 edx
  0084a	8d 4d ff	 lea	 ecx, DWORD PTR _MsgDamage$[ebp]
  0084d	51		 push	 ecx

; 413  : 				AttackDamage += lpObj->m_iSkillNPCAttack;
; 414  : 
; 415  : 				if ( AttackDamage > 0 )
; 416  : 				{
; 417  : 					gObjWeaponDurDown(lpObj, lpTargetObj, 0);

  0084e	eb 0c		 jmp	 SHORT $LN340@Attack
$LN166@Attack:

; 329  : 		{
; 330  : 			AttackDamage = this->GetAttackDamage(lpObj, targetdefense, MsgDamage, bIsOnDuel, lpMagic);

  00850	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00853	8b 4d f0	 mov	 ecx, DWORD PTR _bIsOnDuel$[ebp]
  00856	52		 push	 edx
  00857	51		 push	 ecx
  00858	8d 55 ff	 lea	 edx, DWORD PTR _MsgDamage$[ebp]
  0085b	52		 push	 edx
$LN340@Attack:
  0085c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0085f	50		 push	 eax
  00860	56		 push	 esi
  00861	e8 00 00 00 00	 call	 ?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAEHPAVCMagicInf@@@Z ; CObjAttack::GetAttackDamage
  00866	8b f8		 mov	 edi, eax

; 331  : 			AttackDamage += lpObj->m_iSkillNPCAttack;

  00868	03 be 2c 15 00
	00		 add	 edi, DWORD PTR [esi+5420]
  0086e	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi

; 332  : 
; 333  : 			if ( AttackDamage > 0 )

  00871	85 ff		 test	 edi, edi
  00873	7e 0c		 jle	 SHORT $LN264@Attack

; 334  : 			{
; 335  : 				gObjWeaponDurDown(lpObj, lpTargetObj, 0);

  00875	6a 00		 push	 0
$LN338@Attack:
  00877	53		 push	 ebx
  00878	56		 push	 esi
  00879	e8 00 00 00 00	 call	 ?gObjWeaponDurDown@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDown
  0087e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN264@Attack:

; 418  : 				}
; 419  : 			}
; 420  : 		}
; 421  : 
; 422  : 		if ( bAllMiss )

  00881	83 7d e8 00	 cmp	 DWORD PTR _bAllMiss$[ebp], 0
  00885	74 1f		 je	 SHORT $LN140@Attack

; 423  : 		{
; 424  : 			AttackDamage = ( AttackDamage * 30 ) / 100;

  00887	8b cf		 mov	 ecx, edi
  00889	c1 e1 04	 shl	 ecx, 4
  0088c	2b cf		 sub	 ecx, edi
  0088e	03 c9		 add	 ecx, ecx
  00890	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00895	f7 e9		 imul	 ecx
  00897	c1 fa 05	 sar	 edx, 5
  0089a	8b c2		 mov	 eax, edx
  0089c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0089f	03 c2		 add	 eax, edx
  008a1	8b f8		 mov	 edi, eax
  008a3	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN140@Attack:

; 425  : 		}
; 426  : 
; 427  : 		if ( lpTargetObj->DamageMinus )

  008a6	8a 83 14 01 00
	00		 mov	 al, BYTE PTR [ebx+276]
  008ac	84 c0		 test	 al, al
  008ae	74 1c		 je	 SHORT $LN139@Attack

; 428  : 		{
; 429  : 			int beforeDamage = AttackDamage;
; 430  : 			AttackDamage -= ( ( AttackDamage * (int)lpTargetObj->DamageMinus) / 100 );

  008b0	0f b6 c8	 movzx	 ecx, al
  008b3	0f af cf	 imul	 ecx, edi
  008b6	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  008bb	f7 e9		 imul	 ecx
  008bd	c1 fa 05	 sar	 edx, 5
  008c0	8b ca		 mov	 ecx, edx
  008c2	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  008c5	03 ca		 add	 ecx, edx
  008c7	03 f9		 add	 edi, ecx
  008c9	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN139@Attack:

; 431  : 		}
; 432  : 
; 433  : 		int tlevel = lpObj->Level / 10;

  008cc	0f bf 8e 9c 00
	00 00		 movsx	 ecx, WORD PTR [esi+156]
  008d3	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  008d8	f7 e9		 imul	 ecx
  008da	c1 fa 02	 sar	 edx, 2
  008dd	8b c2		 mov	 eax, edx
  008df	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  008e2	03 c2		 add	 eax, edx

; 434  : 
; 435  : 		if ( AttackDamage < tlevel )

  008e4	3b f8		 cmp	 edi, eax
  008e6	7d 0f		 jge	 SHORT $LN274@Attack

; 436  : 		{
; 437  : 			if ( tlevel < 1 )

  008e8	83 f8 01	 cmp	 eax, 1
  008eb	7d 05		 jge	 SHORT $LN137@Attack

; 438  : 			{
; 439  : 				tlevel = 1;

  008ed	b8 01 00 00 00	 mov	 eax, 1
$LN137@Attack:

; 440  : 			}
; 441  : 
; 442  : 			AttackDamage = tlevel;

  008f2	8b f8		 mov	 edi, eax
  008f4	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN274@Attack:

; 443  : 		}
; 444  : 
; 445  : 		if ( lpTargetObj->m_SkillNumber == 18 )

  008f7	66 83 bb 3c 02
	00 00 12	 cmp	 WORD PTR [ebx+572], 18	; 00000012H
  008ff	75 0a		 jne	 SHORT $LN135@Attack

; 446  : 		{
; 447  : 			if ( AttackDamage > 1 )

  00901	83 ff 01	 cmp	 edi, 1
  00904	7e 05		 jle	 SHORT $LN135@Attack

; 448  : 			{
; 449  : 				AttackDamage >>= 1;

  00906	d1 ff		 sar	 edi, 1
  00908	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN135@Attack:

; 450  : 			}
; 451  : 		}
; 452  : 
; 453  : 		gObjSpriteDamage(lpTargetObj, AttackDamage);

  0090b	57		 push	 edi
  0090c	53		 push	 ebx
  0090d	e8 00 00 00 00	 call	 ?gObjSpriteDamage@@YAXPAUOBJECTSTRUCT@@H@Z ; gObjSpriteDamage

; 454  : 
; 455  : 		if ( gObjSatanSprite(lpObj) == TRUE )

  00912	56		 push	 esi
  00913	e8 00 00 00 00	 call	 ?gObjSatanSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjSatanSprite
  00918	d9 ee		 fldz
  0091a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0091d	83 f8 01	 cmp	 eax, 1
  00920	75 6b		 jne	 SHORT $LN284@Attack

; 456  : 		{
; 457  : 			lpObj->Life -= 3.0f;

  00922	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  00928	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4008000000000000
  0092e	d9 5d 0c	 fstp	 DWORD PTR tv2045[ebp]
  00931	d9 45 0c	 fld	 DWORD PTR tv2045[ebp]
  00934	d9 96 bc 00 00
	00		 fst	 DWORD PTR [esi+188]

; 458  : 
; 459  : 			if ( lpObj->Life < 0.0f )

  0093a	d8 d9		 fcomp	 ST(1)
  0093c	df e0		 fnstsw	 ax
  0093e	f6 c4 05	 test	 ah, 5
  00941	7a 08		 jp	 SHORT $LN287@Attack

; 460  : 			{
; 461  : 				lpObj->Life = 0.0f;

  00943	d9 9e bc 00 00
	00		 fstp	 DWORD PTR [esi+188]

; 462  : 			}
; 463  : 			else

  00949	eb 22		 jmp	 SHORT $LN132@Attack
$LN287@Attack:

; 464  : 			{
; 465  : 				AttackDamage = AttackDamage * gServerInfo.m_Data.wSatanAddDamage / 10.0f;

  0094b	0f b7 15 32 01
	00 00		 movzx	 edx, WORD PTR ?gServerInfo@@3VCServerInfo@@A+306
  00952	dd d8		 fstp	 ST(0)
  00954	0f af d7	 imul	 edx, edi
  00957	89 55 1c	 mov	 DWORD PTR tv2029[ebp], edx
  0095a	db 45 1c	 fild	 DWORD PTR tv2029[ebp]
  0095d	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  00963	e8 00 00 00 00	 call	 __ftol2_sse
  00968	8b f8		 mov	 edi, eax
  0096a	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN132@Attack:

; 466  : 			}
; 467  : 
; 468  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0);

  0096d	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  00973	6a 00		 push	 0
  00975	68 ff 00 00 00	 push	 255			; 000000ffH
  0097a	e8 00 00 00 00	 call	 __ftol2_sse
  0097f	50		 push	 eax
  00980	8b 06		 mov	 eax, DWORD PTR [esi]
  00982	50		 push	 eax
  00983	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEE@Z ; GCReFillSend
  00988	83 c4 10	 add	 esp, 16			; 00000010H
  0098b	eb 02		 jmp	 SHORT $LN134@Attack
$LN284@Attack:
  0098d	dd d8		 fstp	 ST(0)
$LN134@Attack:

; 469  : 		}
; 470  : 
; 471  : 		if ( gObjAngelSprite(lpTargetObj) == TRUE )

  0098f	53		 push	 ebx
  00990	e8 00 00 00 00	 call	 ?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAngelSprite
  00995	83 c4 04	 add	 esp, 4
  00998	83 f8 01	 cmp	 eax, 1
  0099b	75 22		 jne	 SHORT $LN130@Attack

; 472  : 		{
; 473  : 			if ( AttackDamage > 1 )

  0099d	3b f8		 cmp	 edi, eax
  0099f	7e 1e		 jle	 SHORT $LN130@Attack

; 474  : 			{
; 475  : 				AttackDamage = AttackDamage * gServerInfo.m_Data.wAngelAddDefense / 100;

  009a1	0f b7 0d 30 01
	00 00		 movzx	 ecx, WORD PTR ?gServerInfo@@3VCServerInfo@@A+304
  009a8	0f af cf	 imul	 ecx, edi
  009ab	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  009b0	f7 e9		 imul	 ecx
  009b2	c1 fa 05	 sar	 edx, 5
  009b5	8b fa		 mov	 edi, edx
  009b7	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  009ba	03 fa		 add	 edi, edx
  009bc	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN130@Attack:

; 476  : 			}
; 477  : 		}
; 478  : 
; 479  : 		if ( gObjWingSprite(lpObj) == TRUE )

  009bf	56		 push	 esi
  009c0	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  009c5	83 c4 04	 add	 esp, 4
  009c8	83 f8 01	 cmp	 eax, 1
  009cb	0f 85 bc 00 00
	00		 jne	 $LN129@Attack

; 480  : 		{
; 481  : 			CItem * Wing = &lpObj->pInventory[7];
; 482  : 
; 483  : 			if ( lpObj->Class == CLASS_WIZARD || lpObj->Class == CLASS_ELF )

  009d1	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  009d8	8b 8e 8c 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3212]
  009de	66 85 c0	 test	 ax, ax
  009e1	74 13		 je	 SHORT $LN127@Attack
  009e3	83 f8 02	 cmp	 eax, 2
  009e6	74 0e		 je	 SHORT $LN127@Attack

; 486  : 			}
; 487  : 			else
; 488  : 			{
; 489  : 				lpObj->Life -= 3.0f;

  009e8	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  009ee	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@4008000000000000
  009f4	eb 0c		 jmp	 SHORT $LN341@Attack
$LN127@Attack:

; 484  : 			{
; 485  : 				lpObj->Life -= 1.0f;

  009f6	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  009fc	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
$LN341@Attack:
  00a02	d9 9e bc 00 00
	00		 fstp	 DWORD PTR [esi+188]

; 490  : 			}
; 491  : 
; 492  : 			if ( lpObj->Life < 0.0f )

  00a08	d9 ee		 fldz
  00a0a	d8 96 bc 00 00
	00		 fcom	 DWORD PTR [esi+188]
  00a10	df e0		 fnstsw	 ax
  00a12	f6 c4 41	 test	 ah, 65			; 00000041H
  00a15	75 08		 jne	 SHORT $LN290@Attack

; 493  : 			{
; 494  : 				lpObj->Life = 0.0f;

  00a17	d9 9e bc 00 00
	00		 fstp	 DWORD PTR [esi+188]

; 495  : 			}
; 496  : 			else

  00a1d	eb 50		 jmp	 SHORT $LN120@Attack
$LN290@Attack:

; 497  : 			{
; 498  : 				if ( Wing->m_Type == ITEMGET(13,30) )	// Cape Of Lord

  00a1f	0f b7 81 9e 04
	00 00		 movzx	 eax, WORD PTR [ecx+1182]
  00a26	dd d8		 fstp	 ST(0)

; 499  : 				{
; 500  : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 120) / 100;	// #formula

  00a28	0f bf 89 a0 04
	00 00		 movsx	 ecx, WORD PTR [ecx+1184]
  00a2f	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  00a34	66 3b c2	 cmp	 ax, dx
  00a37	75 05		 jne	 SHORT $LN123@Attack
  00a39	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00a3c	eb 18		 jmp	 SHORT $LN342@Attack
$LN123@Attack:

; 501  : 				}
; 502  : 				else if ( Wing->m_Type > ITEMGET(12,2) )

  00a3e	ba 02 18 00 00	 mov	 edx, 6146		; 00001802H
  00a43	66 3b c2	 cmp	 ax, dx
  00a46	7e 0b		 jle	 SHORT $LN121@Attack

; 503  : 				{
; 504  : 					AttackDamage = AttackDamage * (Wing->m_Level + 132) / 100 ;	// #formula

  00a48	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00a4e	0f af cf	 imul	 ecx, edi

; 505  : 				}
; 506  : 				else

  00a51	eb 08		 jmp	 SHORT $LN343@Attack
$LN121@Attack:

; 507  : 				{
; 508  : 					AttackDamage = AttackDamage * (Wing->m_Level * 2 + 112) / 100;	// #formula

  00a53	83 c1 38	 add	 ecx, 56			; 00000038H
$LN342@Attack:
  00a56	0f af cf	 imul	 ecx, edi
  00a59	03 c9		 add	 ecx, ecx
$LN343@Attack:
  00a5b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00a60	f7 e9		 imul	 ecx
  00a62	c1 fa 05	 sar	 edx, 5
  00a65	8b fa		 mov	 edi, edx
  00a67	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00a6a	03 fa		 add	 edi, edx
  00a6c	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN120@Attack:

; 509  : 				}
; 510  : 			}
; 511  : 
; 512  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0);

  00a6f	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  00a75	6a 00		 push	 0
  00a77	68 ff 00 00 00	 push	 255			; 000000ffH
  00a7c	e8 00 00 00 00	 call	 __ftol2_sse
  00a81	8b 16		 mov	 edx, DWORD PTR [esi]
  00a83	50		 push	 eax
  00a84	52		 push	 edx
  00a85	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEE@Z ; GCReFillSend
  00a8a	83 c4 10	 add	 esp, 16			; 00000010H
$LN129@Attack:

; 513  : 		}
; 514  : 
; 515  : 		if ( gObjWingSprite(lpTargetObj) == TRUE )

  00a8d	53		 push	 ebx
  00a8e	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  00a93	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4059000000000000
  00a99	83 c4 04	 add	 esp, 4
  00a9c	83 f8 01	 cmp	 eax, 1
  00a9f	75 7c		 jne	 SHORT $LN299@Attack

; 516  : 		{
; 517  : 			CItem * Wing = &lpTargetObj->pInventory[7];

  00aa1	8b 83 8c 0c 00
	00		 mov	 eax, DWORD PTR [ebx+3212]

; 518  : 
; 519  : 			if ( Wing->m_Type != ITEMGET(13,30) ) // Cape Of Lord

  00aa7	0f b7 88 9e 04
	00 00		 movzx	 ecx, WORD PTR [eax+1182]
  00aae	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  00ab3	66 3b ca	 cmp	 cx, dx
  00ab6	74 65		 je	 SHORT $LN299@Attack

; 520  : 			{
; 521  : 				if ( AttackDamage > 1 )

  00ab8	83 ff 01	 cmp	 edi, 1
  00abb	7e 60		 jle	 SHORT $LN299@Attack

; 522  : 				{
; 523  : 					if ( Wing->m_Type > ITEMGET(12, 2) )

  00abd	ba 02 18 00 00	 mov	 edx, 6146		; 00001802H
  00ac2	66 3b ca	 cmp	 cx, dx
  00ac5	7e 2b		 jle	 SHORT $LN116@Attack

; 524  : 					{
; 525  : 						float damage = (float)(AttackDamage * (75 - (Wing->m_Level*2))) / 100.0f;
; 526  : 						AttackDamage = (int)(damage);	//  #formula

  00ac7	0f bf 80 a0 04
	00 00		 movsx	 eax, WORD PTR [eax+1184]
  00ace	03 c0		 add	 eax, eax
  00ad0	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00ad5	2b c8		 sub	 ecx, eax
  00ad7	0f af cf	 imul	 ecx, edi
  00ada	89 4d 1c	 mov	 DWORD PTR tv1985[ebp], ecx
  00add	da 7d 1c	 fidivr	 DWORD PTR tv1985[ebp]
  00ae0	d9 5d 1c	 fstp	 DWORD PTR tv1983[ebp]
  00ae3	d9 45 1c	 fld	 DWORD PTR tv1983[ebp]
  00ae6	e8 00 00 00 00	 call	 __ftol2_sse
  00aeb	8b f8		 mov	 edi, eax
  00aed	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi

; 527  : 						
; 528  : 					}
; 529  : 					else

  00af0	eb 2d		 jmp	 SHORT $LN115@Attack
$LN116@Attack:

; 530  : 					{
; 531  : 						float damage = (float)(AttackDamage * (88 - (Wing->m_Level*2))) / 100.0f;
; 532  : 						AttackDamage = (int)(damage);	//  #formula

  00af2	0f bf 90 a0 04
	00 00		 movsx	 edx, WORD PTR [eax+1184]
  00af9	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  00afe	2b c2		 sub	 eax, edx
  00b00	0f af c7	 imul	 eax, edi
  00b03	03 c0		 add	 eax, eax
  00b05	89 45 1c	 mov	 DWORD PTR tv1977[ebp], eax
  00b08	da 7d 1c	 fidivr	 DWORD PTR tv1977[ebp]
  00b0b	d9 5d 1c	 fstp	 DWORD PTR tv1975[ebp]
  00b0e	d9 45 1c	 fld	 DWORD PTR tv1975[ebp]
  00b11	e8 00 00 00 00	 call	 __ftol2_sse
  00b16	8b f8		 mov	 edi, eax
  00b18	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
  00b1b	eb 02		 jmp	 SHORT $LN115@Attack
$LN299@Attack:

; 520  : 			{
; 521  : 				if ( AttackDamage > 1 )

  00b1d	dd d8		 fstp	 ST(0)
$LN115@Attack:

; 533  : 					}
; 534  : 				}
; 535  : 			}
; 536  : 		}
; 537  : 
; 538  : 		if ( gObjDenorantSprite(lpObj ) )

  00b1f	56		 push	 esi
  00b20	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  00b25	83 c4 04	 add	 esp, 4
  00b28	85 c0		 test	 eax, eax
  00b2a	74 6d		 je	 SHORT $LN114@Attack

; 539  : 		{
; 540  : 			lpObj->Life -= 1.0f;

  00b2c	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  00b32	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00b38	d9 5d 0c	 fstp	 DWORD PTR tv2062[ebp]
  00b3b	d9 45 0c	 fld	 DWORD PTR tv2062[ebp]
  00b3e	d9 96 bc 00 00
	00		 fst	 DWORD PTR [esi+188]

; 541  : 
; 542  : 			if ( lpObj->Life < 0.0f )

  00b44	d9 ee		 fldz
  00b46	d8 d1		 fcom	 ST(1)
  00b48	df e0		 fnstsw	 ax
  00b4a	dd d9		 fstp	 ST(1)
  00b4c	f6 c4 41	 test	 ah, 65			; 00000041H
  00b4f	75 08		 jne	 SHORT $LN305@Attack

; 543  : 			{
; 544  : 				lpObj->Life = 0.0f;

  00b51	d9 9e bc 00 00
	00		 fstp	 DWORD PTR [esi+188]

; 545  : 			}
; 546  : 			else

  00b57	eb 22		 jmp	 SHORT $LN112@Attack
$LN305@Attack:

; 547  : 			{
; 548  : 				AttackDamage = AttackDamage * gServerInfo.m_Data.wDinorantAddDamage / 100.0f;

  00b59	0f b7 0d 34 01
	00 00		 movzx	 ecx, WORD PTR ?gServerInfo@@3VCServerInfo@@A+308
  00b60	dd d8		 fstp	 ST(0)
  00b62	0f af cf	 imul	 ecx, edi
  00b65	89 4d 1c	 mov	 DWORD PTR tv1961[ebp], ecx
  00b68	db 45 1c	 fild	 DWORD PTR tv1961[ebp]
  00b6b	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  00b71	e8 00 00 00 00	 call	 __ftol2_sse
  00b76	8b f8		 mov	 edi, eax
  00b78	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN112@Attack:

; 549  : 			}
; 550  : 
; 551  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0);

  00b7b	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  00b81	6a 00		 push	 0
  00b83	68 ff 00 00 00	 push	 255			; 000000ffH
  00b88	e8 00 00 00 00	 call	 __ftol2_sse
  00b8d	8b 16		 mov	 edx, DWORD PTR [esi]
  00b8f	50		 push	 eax
  00b90	52		 push	 edx
  00b91	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEE@Z ; GCReFillSend
  00b96	83 c4 10	 add	 esp, 16			; 00000010H
$LN114@Attack:

; 552  : 		}
; 553  : 
; 554  : 		if ( gObjDenorantSprite(lpTargetObj ) )

  00b99	53		 push	 ebx
  00b9a	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  00b9f	83 c4 04	 add	 esp, 4
  00ba2	85 c0		 test	 eax, eax
  00ba4	74 7c		 je	 SHORT $LN111@Attack

; 555  : 		{
; 556  : 			CItem * Dinorant = &lpTargetObj->pInventory[8];

  00ba6	8b 8b 8c 0c 00
	00		 mov	 ecx, DWORD PTR [ebx+3212]
  00bac	81 c1 40 05 00
	00		 add	 ecx, 1344		; 00000540H

; 557  : 			int dinorantdecdamage = 90 - Dinorant->IsDinorantReduceAttackDamaege();

  00bb2	e8 00 00 00 00	 call	 ?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ ; CItem::IsDinorantReduceAttackDamaege

; 558  : 			lpObj->Life -= 1.0f;

  00bb7	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  00bbd	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00bc3	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00bc8	2b c8		 sub	 ecx, eax
  00bca	d9 5d 0c	 fstp	 DWORD PTR tv2062[ebp]
  00bcd	d9 45 0c	 fld	 DWORD PTR tv2062[ebp]
  00bd0	d9 96 bc 00 00
	00		 fst	 DWORD PTR [esi+188]

; 559  : 
; 560  : 			if ( lpObj->Life < 0.0f )

  00bd6	d9 ee		 fldz
  00bd8	d8 d1		 fcom	 ST(1)
  00bda	df e0		 fnstsw	 ax
  00bdc	dd d9		 fstp	 ST(1)
  00bde	f6 c4 41	 test	 ah, 65			; 00000041H
  00be1	75 08		 jne	 SHORT $LN308@Attack

; 561  : 			{
; 562  : 				lpObj->Life = 0.0f;

  00be3	d9 9e bc 00 00
	00		 fstp	 DWORD PTR [esi+188]

; 563  : 			}
; 564  : 			else

  00be9	eb 19		 jmp	 SHORT $LN109@Attack
$LN308@Attack:

; 565  : 			{
; 566  : 				AttackDamage = AttackDamage * dinorantdecdamage / 100;

  00beb	0f af cf	 imul	 ecx, edi
  00bee	dd d8		 fstp	 ST(0)
  00bf0	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00bf5	f7 e9		 imul	 ecx
  00bf7	c1 fa 05	 sar	 edx, 5
  00bfa	8b fa		 mov	 edi, edx
  00bfc	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00bff	03 fa		 add	 edi, edx
  00c01	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN109@Attack:

; 567  : 			}
; 568  : 
; 569  : 			GCReFillSend(lpObj->m_Index, lpObj->Life, 0xFF, 0);

  00c04	d9 86 bc 00 00
	00		 fld	 DWORD PTR [esi+188]
  00c0a	6a 00		 push	 0
  00c0c	68 ff 00 00 00	 push	 255			; 000000ffH
  00c11	e8 00 00 00 00	 call	 __ftol2_sse
  00c16	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00c18	50		 push	 eax
  00c19	51		 push	 ecx
  00c1a	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEE@Z ; GCReFillSend
  00c1f	83 c4 10	 add	 esp, 16			; 00000010H
$LN111@Attack:

; 570  : 		}
; 571  : 
; 572  : 		if ( gObjDarkHorse(lpTargetObj ) )

  00c22	53		 push	 ebx
  00c23	e8 00 00 00 00	 call	 ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDarkHorse
  00c28	83 c4 04	 add	 esp, 4
  00c2b	85 c0		 test	 eax, eax
  00c2d	0f 84 81 00 00
	00		 je	 $LN108@Attack

; 573  : 		{
; 574  : 			CItem * Darkhorse = &lpTargetObj->pInventory[8];
; 575  : 			int decdamage = gServerInfo.m_Data.wDarkHorseAddDamage - ((Darkhorse->m_PetItem_Level + 30) / 2 );
; 576  : 
; 577  : 			lpTargetObj->Life -= 1.0f;

  00c33	d9 83 bc 00 00
	00		 fld	 DWORD PTR [ebx+188]
  00c39	8b 93 8c 0c 00
	00		 mov	 edx, DWORD PTR [ebx+3212]
  00c3f	dc 25 00 00 00
	00		 fsub	 QWORD PTR __real@3ff0000000000000
  00c45	8b 82 e0 05 00
	00		 mov	 eax, DWORD PTR [edx+1504]
  00c4b	0f b7 0d 36 01
	00 00		 movzx	 ecx, WORD PTR ?gServerInfo@@3VCServerInfo@@A+310
  00c52	83 c0 1e	 add	 eax, 30			; 0000001eH
  00c55	d9 5d 0c	 fstp	 DWORD PTR tv2138[ebp]
  00c58	99		 cdq
  00c59	d9 45 0c	 fld	 DWORD PTR tv2138[ebp]
  00c5c	d9 93 bc 00 00
	00		 fst	 DWORD PTR [ebx+188]
  00c62	2b c2		 sub	 eax, edx

; 578  : 
; 579  : 			if ( lpTargetObj->Life < 0.0f )

  00c64	d9 ee		 fldz
  00c66	d1 f8		 sar	 eax, 1
  00c68	d8 d1		 fcom	 ST(1)
  00c6a	2b c8		 sub	 ecx, eax
  00c6c	df e0		 fnstsw	 ax
  00c6e	dd d9		 fstp	 ST(1)
  00c70	f6 c4 41	 test	 ah, 65			; 00000041H
  00c73	75 08		 jne	 SHORT $LN311@Attack

; 580  : 			{
; 581  : 				lpTargetObj->Life = 0.0f;

  00c75	d9 9b bc 00 00
	00		 fstp	 DWORD PTR [ebx+188]

; 582  : 			}
; 583  : 			else

  00c7b	eb 19		 jmp	 SHORT $LN106@Attack
$LN311@Attack:

; 584  : 			{
; 585  : 				AttackDamage = AttackDamage * decdamage / 100;

  00c7d	0f af cf	 imul	 ecx, edi
  00c80	dd d8		 fstp	 ST(0)
  00c82	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00c87	f7 e9		 imul	 ecx
  00c89	c1 fa 05	 sar	 edx, 5
  00c8c	8b fa		 mov	 edi, edx
  00c8e	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00c91	03 fa		 add	 edi, edx
  00c93	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN106@Attack:

; 586  : 			}
; 587  : 
; 588  : 			GCReFillSend(lpTargetObj->m_Index, lpTargetObj->Life, 0xFF, 0);

  00c96	d9 83 bc 00 00
	00		 fld	 DWORD PTR [ebx+188]
  00c9c	6a 00		 push	 0
  00c9e	68 ff 00 00 00	 push	 255			; 000000ffH
  00ca3	e8 00 00 00 00	 call	 __ftol2_sse
  00ca8	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00caa	50		 push	 eax
  00cab	51		 push	 ecx
  00cac	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHHEE@Z ; GCReFillSend
  00cb1	83 c4 10	 add	 esp, 16			; 00000010H
$LN108@Attack:

; 589  : 		}
; 590  : 
; 591  : 		if ( lpTargetObj->Live )

  00cb4	80 7b 62 00	 cmp	 BYTE PTR [ebx+98], 0
  00cb8	0f 84 79 04 00
	00		 je	 $LN254@Attack

; 592  : 		{
; 593  : 			switch ( skill )

  00cbe	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00cc1	83 c0 ed	 add	 eax, -19		; ffffffedH
  00cc4	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00cc7	0f 87 b6 00 00
	00		 ja	 $LN272@Attack
  00ccd	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR $LN248@Attack[eax]
  00cd4	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN352@Attack[edx*4]
$LN102@Attack:

; 594  : 			{
; 595  : 				case 19:
; 596  : 				case 20:
; 597  : 				case 21:
; 598  : 				case 22:
; 599  : 				case 23:
; 600  : 				case 41:
; 601  : 				case 42:
; 602  : 				case 43:
; 603  : 				case 44:
; 604  : 				case 49:
; 605  : 				case 55:
; 606  : 				case 57:
; 607  : 					if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA )

  00cdb	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  00ce2	83 f8 04	 cmp	 eax, 4
  00ce5	74 12		 je	 SHORT $LN100@Attack
  00ce7	83 f8 03	 cmp	 eax, 3
  00cea	74 0d		 je	 SHORT $LN100@Attack

; 610  : 					}
; 611  : 					else
; 612  : 					{
; 613  : 						AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100;

  00cec	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00cf1	f7 6d ec	 imul	 DWORD PTR _Energy$[ebp]
  00cf4	c1 fa 02	 sar	 edx, 2
  00cf7	eb 6a		 jmp	 SHORT $LN345@Attack
$LN100@Attack:

; 608  : 					{
; 609  : 						AttackDamage *= 2;

  00cf9	03 ff		 add	 edi, edi

; 614  : 					}
; 615  : 					break;

  00cfb	e9 83 00 00 00	 jmp	 $LN272@Attack
$LN98@Attack:

; 616  : 
; 617  : 				case 47:
; 618  : 					if ( lpObj->pInventory[8].m_Type == ITEMGET(13,3) ||
; 619  : 						 lpObj->pInventory[8].m_Type == ITEMGET(13,2) ||
; 620  : 						 lpObj->pInventory[8].m_Type == ITEMGET(13,37) )

  00d00	8b 96 8c 0c 00
	00		 mov	 edx, DWORD PTR [esi+3212]
  00d06	0f b7 82 46 05
	00 00		 movzx	 eax, WORD PTR [edx+1350]
  00d0d	b9 03 1a 00 00	 mov	 ecx, 6659		; 00001a03H
  00d12	66 3b c1	 cmp	 ax, cx
  00d15	74 c4		 je	 SHORT $LN102@Attack
  00d17	ba 02 1a 00 00	 mov	 edx, 6658		; 00001a02H
  00d1c	66 3b c2	 cmp	 ax, dx
  00d1f	74 ba		 je	 SHORT $LN102@Attack
  00d21	b9 25 1a 00 00	 mov	 ecx, 6693		; 00001a25H
  00d26	66 3b c1	 cmp	 ax, cx
  00d29	75 58		 jne	 SHORT $LN272@Attack

; 621  : 					{
; 622  : 						if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA )
; 623  : 						{
; 624  : 							AttackDamage *= 2;
; 625  : 						}
; 626  : 						else
; 627  : 						{
; 628  : 							AttackDamage = ( AttackDamage * ( Energy / 10 + 200 )  ) / 100;

  00d2b	eb ae		 jmp	 SHORT $LN102@Attack
$LN90@Attack:

; 629  : 						}
; 630  : 					}
; 631  : 					break;
; 632  : 
; 633  : 				case 56:
; 634  : 					AttackDamage *= 2;
; 635  : 					break;
; 636  : 
; 637  : 				case 46:
; 638  : 				case 51:
; 639  : 				case 52:
; 640  : 					AttackDamage *= 2;
; 641  : 					break;
; 642  : 
; 643  : 				case 60:
; 644  : 				case 61:
; 645  : 				case 62:
; 646  : 				case 65:
; 647  : 				case 74:
; 648  : 				case 78:
; 649  : 					AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;

  00d2d	0f b7 96 ba 00
	00 00		 movzx	 edx, WORD PTR [esi+186]
  00d34	0f bf 8e e6 00
	00 00		 movsx	 ecx, WORD PTR [esi+230]
  00d3b	03 ca		 add	 ecx, edx
  00d3d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00d42	f7 e9		 imul	 ecx
  00d44	c1 fa 03	 sar	 edx, 3

; 650  : 					break;

  00d47	eb 1a		 jmp	 SHORT $LN345@Attack
$LN89@Attack:

; 651  : 
; 652  : 				case 76:
; 653  : 					int iDamageInc = lpObj->Level - 300;

  00d49	0f bf 8e 9c 00
	00 00		 movsx	 ecx, WORD PTR [esi+156]
  00d50	81 e9 2c 01 00
	00		 sub	 ecx, 300		; 0000012cH

; 654  : 
; 655  : 					if ( iDamageInc < 0 )

  00d56	79 02		 jns	 SHORT $LN265@Attack

; 656  : 						iDamageInc = 0;

  00d58	33 c9		 xor	 ecx, ecx
$LN265@Attack:

; 657  : 
; 658  : 					iDamageInc /= 5;

  00d5a	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00d5f	f7 e9		 imul	 ecx
  00d61	d1 fa		 sar	 edx, 1
$LN345@Attack:
  00d63	8b c2		 mov	 eax, edx
  00d65	c1 e8 1f	 shr	 eax, 31			; 0000001fH

; 659  : 					AttackDamage = ( AttackDamage * ( iDamageInc + 200 ) ) / 100;

  00d68	8d 94 02 c8 00
	00 00		 lea	 edx, DWORD PTR [edx+eax+200]
  00d6f	0f af d7	 imul	 edx, edi
  00d72	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00d77	f7 ea		 imul	 edx
  00d79	c1 fa 05	 sar	 edx, 5
  00d7c	8b fa		 mov	 edi, edx
  00d7e	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00d81	03 fa		 add	 edi, edx
$LN272@Attack:

; 660  : 					break;
; 661  : 			}
; 662  : 
; 663  : 			if ( skill == 0 )

  00d83	83 7d 08 00	 cmp	 DWORD PTR _skill$[ebp], 0
  00d87	75 2b		 jne	 SHORT $LN86@Attack

; 664  : 			{
; 665  : 				if ( lpObj->pInventory[8].m_Type == ITEMGET(13, 3) )

  00d89	8b 96 8c 0c 00
	00		 mov	 edx, DWORD PTR [esi+3212]
  00d8f	b8 03 1a 00 00	 mov	 eax, 6659		; 00001a03H
  00d94	66 39 82 46 05
	00 00		 cmp	 WORD PTR [edx+1350], ax
  00d9b	75 17		 jne	 SHORT $LN86@Attack

; 666  : 				{
; 667  : 					AttackDamage = AttackDamage * 130 / 100;

  00d9d	69 ff 82 00 00
	00		 imul	 edi, 130		; 00000082H
  00da3	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00da8	f7 ef		 imul	 edi
  00daa	c1 fa 05	 sar	 edx, 5
  00dad	8b fa		 mov	 edi, edx
  00daf	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00db2	03 fa		 add	 edi, edx
$LN86@Attack:

; 668  : 				}
; 669  : 			}
; 670  : 			
; 671  : 			if ( lpTargetObj->m_WizardSkillDefense && AttackDamage > 0)

  00db4	8b 8b 04 0f 00
	00		 mov	 ecx, DWORD PTR [ebx+3844]
  00dba	85 c9		 test	 ecx, ecx
  00dbc	0f 84 88 00 00
	00		 je	 $LN273@Attack
  00dc2	85 ff		 test	 edi, edi
  00dc4	0f 8e 80 00 00
	00		 jle	 $LN273@Attack

; 672  : 			{
; 673  : 				int replacemana = (WORD)lpTargetObj->Mana * 2 / 100;

  00dca	d9 83 d0 00 00
	00		 fld	 DWORD PTR [ebx+208]
  00dd0	d9 7d 1e	 fnstcw	 WORD PTR tv1872[ebp]
  00dd3	0f b7 45 1e	 movzx	 eax, WORD PTR tv1872[ebp]
  00dd7	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00ddc	89 45 0c	 mov	 DWORD PTR tv1869[ebp], eax
  00ddf	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00de4	d9 6d 0c	 fldcw	 WORD PTR tv1869[ebp]
  00de7	db 5d 0c	 fistp	 DWORD PTR tv1867[ebp]
  00dea	66 8b 55 0c	 mov	 dx, WORD PTR tv1867[ebp]
  00dee	0f b7 d2	 movzx	 edx, dx
  00df1	03 d2		 add	 edx, edx
  00df3	d9 6d 1e	 fldcw	 WORD PTR tv1872[ebp]
  00df6	f7 ea		 imul	 edx
  00df8	c1 fa 05	 sar	 edx, 5
  00dfb	8b c2		 mov	 eax, edx
  00dfd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00e00	03 c2		 add	 eax, edx
  00e02	89 45 1c	 mov	 DWORD PTR _replacemana$155886[ebp], eax

; 674  : 
; 675  : 				if ( replacemana < lpTargetObj->Mana )

  00e05	db 45 1c	 fild	 DWORD PTR _replacemana$155886[ebp]
  00e08	d9 5d 1c	 fstp	 DWORD PTR tv2186[ebp]
  00e0b	d9 45 1c	 fld	 DWORD PTR tv2186[ebp]
  00e0e	d9 83 d0 00 00
	00		 fld	 DWORD PTR [ebx+208]
  00e14	d8 d9		 fcomp	 ST(1)
  00e16	df e0		 fnstsw	 ax
  00e18	f6 c4 41	 test	 ah, 65			; 00000041H
  00e1b	75 2b		 jne	 SHORT $LN314@Attack

; 676  : 				{
; 677  : 					lpTargetObj->Mana -= replacemana;

  00e1d	d8 ab d0 00 00
	00		 fsubr	 DWORD PTR [ebx+208]

; 678  : 					int decattackdamage = AttackDamage * lpTargetObj->m_WizardSkillDefense / 100;

  00e23	0f af cf	 imul	 ecx, edi
  00e26	d9 9b d0 00 00
	00		 fstp	 DWORD PTR [ebx+208]
  00e2c	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  00e31	f7 e9		 imul	 ecx
  00e33	c1 fa 05	 sar	 edx, 5
  00e36	8b ca		 mov	 ecx, edx
  00e38	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00e3b	03 ca		 add	 ecx, edx

; 679  : 					AttackDamage -= decattackdamage;

  00e3d	03 f9		 add	 edi, ecx

; 680  : 					ManaChange = TRUE;

  00e3f	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _ManaChange$[ebp], 1
  00e46	eb 02		 jmp	 SHORT $LN273@Attack
$LN314@Attack:
  00e48	dd d8		 fstp	 ST(0)
$LN273@Attack:

; 681  : 
; 682  : 				}
; 683  : 			}
; 684  : 
; 685  : 			AttackDamage += lpObj->SetOpAddDamage;

  00e4a	0f bf 96 6c 0f
	00 00		 movsx	 edx, WORD PTR [esi+3948]

; 686  : 
; 687  : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  00e51	0f b7 4e 60	 movzx	 ecx, WORD PTR [esi+96]
  00e55	03 fa		 add	 edi, edx
  00e57	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
  00e5a	83 f9 01	 cmp	 ecx, 1
  00e5d	0f 85 55 01 00
	00		 jne	 $LN69@Attack
  00e63	66 39 4b 60	 cmp	 WORD PTR [ebx+96], cx
  00e67	75 3f		 jne	 SHORT $LN278@Attack

; 688  : 			{
; 689  : 				if ( CC_MAP_RANGE(lpObj->MapNumber ) && CC_MAP_RANGE(lpTargetObj->MapNumber) )

  00e69	0f b6 86 09 01
	00 00		 movzx	 eax, BYTE PTR [esi+265]
  00e70	3c 12		 cmp	 al, 18			; 00000012H
  00e72	72 34		 jb	 SHORT $LN278@Attack
  00e74	b2 17		 mov	 dl, 23			; 00000017H
  00e76	3a d0		 cmp	 dl, al
  00e78	1b c0		 sbb	 eax, eax
  00e7a	40		 inc	 eax
  00e7b	74 2b		 je	 SHORT $LN278@Attack
  00e7d	0f b6 83 09 01
	00 00		 movzx	 eax, BYTE PTR [ebx+265]
  00e84	3c 12		 cmp	 al, 18			; 00000012H
  00e86	72 20		 jb	 SHORT $LN278@Attack
  00e88	3a d0		 cmp	 dl, al
  00e8a	1b c0		 sbb	 eax, eax
  00e8c	40		 inc	 eax
  00e8d	74 19		 je	 SHORT $LN278@Attack

; 690  : 				{
; 691  : 					AttackDamage = AttackDamage * 50 / 100;

  00e8f	6b ff 32	 imul	 edi, 50			; 00000032H
  00e92	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00e97	f7 ef		 imul	 edi
  00e99	c1 fa 05	 sar	 edx, 5
  00e9c	8b c2		 mov	 eax, edx
  00e9e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00ea1	03 c2		 add	 eax, edx
  00ea3	8b f8		 mov	 edi, eax
  00ea5	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN278@Attack:

; 692  : 				}
; 693  : 			}
; 694  : 
; 695  : #if GS_CASTLE == 1
; 696  : 			if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE )
; 697  : 			{
; 698  : 				if ( lpObj->Type == OBJ_USER && lpTargetObj->Type ==OBJ_USER )
; 699  : 				{
; 700  : 					if ( lpObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )
; 701  : 					{
; 702  : 						if ( lpObj->m_btCsJoinSide == lpTargetObj->m_btCsJoinSide )
; 703  : 						{
; 704  : 							AttackDamage = AttackDamage * 20 / 100;
; 705  : 						}
; 706  : 						else
; 707  : 						{
; 708  : 							AttackDamage = AttackDamage * 40 / 100;
; 709  : 						}
; 710  : 					}
; 711  : 				}
; 712  : 			}
; 713  : #endif
; 714  : 
; 715  : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )

  00ea8	83 f9 01	 cmp	 ecx, 1
  00eab	0f 85 07 01 00
	00		 jne	 $LN69@Attack
  00eb1	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  00eb6	0f 85 fc 00 00
	00		 jne	 $LN69@Attack

; 716  : 			{
; 717  : 				if ( lpTargetObj->Class == 283 )

  00ebc	b9 1b 01 00 00	 mov	 ecx, 283		; 0000011bH
  00ec1	66 39 8b 98 00
	00 00		 cmp	 WORD PTR [ebx+152], cx
  00ec8	75 70		 jne	 SHORT $LN268@Attack

; 718  : 				{
; 719  : 					if ( lpObj->m_iPotionBlessTime > 0 )

  00eca	83 be f4 14 00
	00 00		 cmp	 DWORD PTR [esi+5364], 0
  00ed1	7e 1c		 jle	 SHORT $LN79@Attack

; 720  : 					{
; 721  : 						AttackDamage += (AttackDamage * 20) / 100;

  00ed3	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00ed6	03 c9		 add	 ecx, ecx
  00ed8	03 c9		 add	 ecx, ecx
  00eda	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00edf	f7 e9		 imul	 ecx
  00ee1	c1 fa 05	 sar	 edx, 5
  00ee4	8b c2		 mov	 eax, edx
  00ee6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00ee9	03 c2		 add	 eax, edx
  00eeb	03 f8		 add	 edi, eax
  00eed	eb 48		 jmp	 SHORT $LN347@Attack
$LN79@Attack:

; 722  : 					}
; 723  : 					else if ( lpObj->m_iPotionSoulTime > 0 )

  00eef	83 be f8 14 00
	00 00		 cmp	 DWORD PTR [esi+5368], 0
  00ef6	7f 42		 jg	 SHORT $LN268@Attack

; 724  : 					{
; 725  : 						AttackDamage = AttackDamage;
; 726  : 					}
; 727  : 					else 
; 728  : 					{
; 729  : 						if ( lpObj->m_iAccumulatedDamage > 100 )

  00ef8	8b 86 f0 14 00
	00		 mov	 eax, DWORD PTR [esi+5360]
  00efe	83 f8 64	 cmp	 eax, 100		; 00000064H
  00f01	7e 18		 jle	 SHORT $LN75@Attack

; 730  : 						{
; 731  : 							gObjWeaponDurDownInCastle(lpObj, lpTargetObj, 1);

  00f03	6a 01		 push	 1
  00f05	53		 push	 ebx
  00f06	56		 push	 esi
  00f07	e8 00 00 00 00	 call	 ?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDownInCastle
  00f0c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 732  : 							lpObj->m_iAccumulatedDamage = 0;

  00f0f	c7 86 f0 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5360], 0

; 733  : 						}
; 734  : 						else

  00f19	eb 08		 jmp	 SHORT $LN74@Attack
$LN75@Attack:

; 735  : 						{
; 736  : 							lpObj->m_iAccumulatedDamage += AttackDamage;

  00f1b	03 c7		 add	 eax, edi
  00f1d	89 86 f0 14 00
	00		 mov	 DWORD PTR [esi+5360], eax
$LN74@Attack:

; 737  : 						}
; 738  : 
; 739  : 						AttackDamage = AttackDamage * 5 / 100;

  00f23	8d 3c bf	 lea	 edi, DWORD PTR [edi+edi*4]
  00f26	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00f2b	f7 ef		 imul	 edi
  00f2d	c1 fa 05	 sar	 edx, 5
  00f30	8b fa		 mov	 edi, edx
  00f32	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00f35	03 fa		 add	 edi, edx
$LN347@Attack:
  00f37	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN268@Attack:

; 740  : 					}
; 741  : 				}
; 742  : 
; 743  : 				if ( lpTargetObj->Class == 277 )

  00f3a	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00f3f	66 39 93 98 00
	00 00		 cmp	 WORD PTR [ebx+152], dx
  00f46	75 70		 jne	 SHORT $LN69@Attack

; 744  : 				{
; 745  : 					if ( lpObj->m_iPotionBlessTime > 0 )

  00f48	83 be f4 14 00
	00 00		 cmp	 DWORD PTR [esi+5364], 0
  00f4f	7e 1c		 jle	 SHORT $LN72@Attack

; 746  : 					{
; 747  : 						AttackDamage += (AttackDamage * 20) / 100;

  00f51	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00f54	03 c9		 add	 ecx, ecx
  00f56	03 c9		 add	 ecx, ecx
  00f58	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00f5d	f7 e9		 imul	 ecx
  00f5f	c1 fa 05	 sar	 edx, 5
  00f62	8b c2		 mov	 eax, edx
  00f64	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00f67	03 c2		 add	 eax, edx
  00f69	03 f8		 add	 edi, eax
  00f6b	eb 48		 jmp	 SHORT $LN348@Attack
$LN72@Attack:

; 748  : 					}
; 749  : 					else if ( lpObj->m_iPotionSoulTime > 0 )

  00f6d	83 be f8 14 00
	00 00		 cmp	 DWORD PTR [esi+5368], 0
  00f74	7f 42		 jg	 SHORT $LN69@Attack

; 750  : 					{
; 751  : 						AttackDamage = AttackDamage;
; 752  : 					}
; 753  : 					else 
; 754  : 					{
; 755  : 						if ( lpObj->m_iAccumulatedDamage > 100 )

  00f76	8b 86 f0 14 00
	00		 mov	 eax, DWORD PTR [esi+5360]
  00f7c	83 f8 64	 cmp	 eax, 100		; 00000064H
  00f7f	7e 18		 jle	 SHORT $LN68@Attack

; 756  : 						{
; 757  : 							gObjWeaponDurDownInCastle(lpObj, lpTargetObj, 1);

  00f81	6a 01		 push	 1
  00f83	53		 push	 ebx
  00f84	56		 push	 esi
  00f85	e8 00 00 00 00	 call	 ?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDownInCastle
  00f8a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 758  : 							lpObj->m_iAccumulatedDamage = 0;

  00f8d	c7 86 f0 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5360], 0

; 759  : 						}
; 760  : 						else

  00f97	eb 08		 jmp	 SHORT $LN67@Attack
$LN68@Attack:

; 761  : 						{
; 762  : 							lpObj->m_iAccumulatedDamage += AttackDamage;

  00f99	03 c7		 add	 eax, edi
  00f9b	89 86 f0 14 00
	00		 mov	 DWORD PTR [esi+5360], eax
$LN67@Attack:

; 763  : 						}
; 764  : 
; 765  : 						AttackDamage = AttackDamage * 5 / 100;

  00fa1	8d 3c bf	 lea	 edi, DWORD PTR [edi+edi*4]
  00fa4	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00fa9	f7 ef		 imul	 edi
  00fab	c1 fa 05	 sar	 edx, 5
  00fae	8b fa		 mov	 edi, edx
  00fb0	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00fb3	03 fa		 add	 edi, edx
$LN348@Attack:
  00fb5	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN69@Attack:

; 766  : 					}
; 767  : 				}
; 768  : 			}
; 769  : 
; 770  : 			if ( AttackDamage < 0 )

  00fb8	85 ff		 test	 edi, edi
  00fba	79 05		 jns	 SHORT $LN66@Attack

; 771  : 				AttackDamage = 0;

  00fbc	33 ff		 xor	 edi, edi
  00fbe	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
$LN66@Attack:

; 772  : 
; 773  : 			if ( skill == 76 )

  00fc1	83 7d 08 4c	 cmp	 DWORD PTR _skill$[ebp], 76 ; 0000004cH
  00fc5	0f 85 cc 00 00
	00		 jne	 $LN62@Attack

; 774  : 			{
; 775  : 				if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  00fcb	b8 01 00 00 00	 mov	 eax, 1
  00fd0	66 39 46 60	 cmp	 WORD PTR [esi+96], ax
  00fd4	0f 85 bd 00 00
	00		 jne	 $LN62@Attack
  00fda	66 39 43 60	 cmp	 WORD PTR [ebx+96], ax
  00fde	0f 85 b3 00 00
	00		 jne	 $LN62@Attack

; 776  : 				{
; 777  : 					if ( AttackDamage > 0 )

  00fe4	85 ff		 test	 edi, edi
  00fe6	0f 8e ab 00 00
	00		 jle	 $LN62@Attack

; 778  : 					{
; 779  : #if GS_CASTLE == 1
; 780  : 						if ( !lpObj->m_btCsJoinSide || lpObj->m_btCsJoinSide != lpTargetObj->m_btCsJoinSide ) 
; 781  : 						{
; 782  : #endif
; 783  : 							int iEquipmentPos = rand()%5 + 2;	// Select and Armor

  00fec	e8 00 00 00 00	 call	 _rand
  00ff1	99		 cdq
  00ff2	b9 05 00 00 00	 mov	 ecx, 5
  00ff7	f7 f9		 idiv	 ecx
  00ff9	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00ffc	89 45 f0	 mov	 DWORD PTR _iEquipmentPos$155911[ebp], eax

; 784  : 							CItem * lpEquipment = &lpTargetObj->pInventory[iEquipmentPos];

  00fff	69 c0 a8 00 00
	00		 imul	 eax, 168		; 000000a8H
  01005	03 83 8c 0c 00
	00		 add	 eax, DWORD PTR [ebx+3212]
  0100b	89 45 0c	 mov	 DWORD PTR _lpEquipment$155912[ebp], eax

; 785  : 
; 786  : 							if ( lpEquipment && lpEquipment->IsItem() )

  0100e	0f 84 83 00 00
	00		 je	 $LN62@Attack
  01014	8b c8		 mov	 ecx, eax
  01016	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0101b	85 c0		 test	 eax, eax
  0101d	74 78		 je	 SHORT $LN62@Attack

; 787  : 							{
; 788  : 								int iDurEquipment = lpEquipment->m_Durability * 50.0f / 100.0f;

  0101f	8b 45 0c	 mov	 eax, DWORD PTR _lpEquipment$155912[ebp]
  01022	d9 40 24	 fld	 DWORD PTR [eax+36]
  01025	83 c0 24	 add	 eax, 36			; 00000024H
  01028	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4049000000000000
  0102e	89 45 0c	 mov	 DWORD PTR tv2233[ebp], eax
  01031	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4059000000000000
  01037	e8 00 00 00 00	 call	 __ftol2_sse

; 789  : 								lpEquipment->m_Durability = iDurEquipment;

  0103c	8b 55 0c	 mov	 edx, DWORD PTR tv2233[ebp]
  0103f	89 45 dc	 mov	 DWORD PTR tv1815[ebp], eax
  01042	db 45 dc	 fild	 DWORD PTR tv1815[ebp]
  01045	d9 5d dc	 fstp	 DWORD PTR tv2240[ebp]
  01048	d9 45 dc	 fld	 DWORD PTR tv2240[ebp]
  0104b	d9 12		 fst	 DWORD PTR [edx]

; 790  : 
; 791  : 								if ( lpEquipment->m_Durability < 0.0f )

  0104d	d9 ee		 fldz
  0104f	d8 d1		 fcom	 ST(1)
  01051	df e0		 fnstsw	 ax
  01053	dd d9		 fstp	 ST(1)
  01055	f6 c4 41	 test	 ah, 65			; 00000041H
  01058	75 06		 jne	 SHORT $LN317@Attack

; 792  : 								{
; 793  : 									lpEquipment->m_Durability = 0.0f;

  0105a	8b c2		 mov	 eax, edx
  0105c	d9 18		 fstp	 DWORD PTR [eax]
  0105e	eb 02		 jmp	 SHORT $LN61@Attack
$LN317@Attack:
  01060	dd d8		 fstp	 ST(0)
$LN61@Attack:

; 794  : 								}
; 795  : 
; 796  : 								GCItemDurSend(lpTargetObj->m_Index, iEquipmentPos, lpEquipment->m_Durability, 0);

  01062	8b 4d 0c	 mov	 ecx, DWORD PTR tv2233[ebp]
  01065	d9 7d 0e	 fnstcw	 WORD PTR tv1804[ebp]
  01068	0f b7 45 0e	 movzx	 eax, WORD PTR tv1804[ebp]
  0106c	d9 01		 fld	 DWORD PTR [ecx]
  0106e	8b 4d f0	 mov	 ecx, DWORD PTR _iEquipmentPos$155911[ebp]
  01071	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01076	89 45 dc	 mov	 DWORD PTR tv1800[ebp], eax
  01079	6a 00		 push	 0
  0107b	d9 6d dc	 fldcw	 WORD PTR tv1800[ebp]
  0107e	db 5d dc	 fistp	 DWORD PTR tv1797[ebp]
  01081	8a 55 dc	 mov	 dl, BYTE PTR tv1797[ebp]
  01084	0f b6 c2	 movzx	 eax, dl
  01087	8b 13		 mov	 edx, DWORD PTR [ebx]
  01089	d9 6d 0e	 fldcw	 WORD PTR tv1804[ebp]
  0108c	50		 push	 eax
  0108d	51		 push	 ecx
  0108e	52		 push	 edx
  0108f	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  01094	83 c4 10	 add	 esp, 16			; 00000010H
$LN62@Attack:

; 797  : 							}
; 798  : #if GS_CASTLE == 1
; 799  : 						}
; 800  : #endif
; 801  : 					}
; 802  : 				}
; 803  : 			}
; 804  : 
; 805  : 			lpTargetObj->Life -= AttackDamage;

  01097	d9 83 bc 00 00
	00		 fld	 DWORD PTR [ebx+188]
  0109d	da 65 1c	 fisub	 DWORD PTR _AttackDamage$[ebp]
  010a0	d9 5d 0c	 fstp	 DWORD PTR tv2246[ebp]
  010a3	d9 45 0c	 fld	 DWORD PTR tv2246[ebp]
  010a6	d9 93 bc 00 00
	00		 fst	 DWORD PTR [ebx+188]

; 806  : 
; 807  : 			if ( lpTargetObj->Life < 0.0f )

  010ac	d9 ee		 fldz
  010ae	d8 d1		 fcom	 ST(1)
  010b0	df e0		 fnstsw	 ax
  010b2	dd d9		 fstp	 ST(1)
  010b4	f6 c4 41	 test	 ah, 65			; 00000041H
  010b7	75 7c		 jne	 SHORT $LN323@Attack

; 808  : 			{
; 809  : 				lpTargetObj->Life = 0.0f;

  010b9	d9 9b bc 00 00
	00		 fstp	 DWORD PTR [ebx+188]

; 810  : 			}
; 811  : 		}
; 812  : 	}	
; 813  : 	else

  010bf	eb 76		 jmp	 SHORT $LN254@Attack
$LN171@Attack:

; 814  : 	{
; 815  : #if GS_CASTLE == 1
; 816  : 		if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE )
; 817  : 		{
; 818  : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type ==OBJ_USER )
; 819  : 			{
; 820  : 				if ( lpObj->MapNumber == MAP_INDEX_CASTLESIEGE && lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )
; 821  : 				{
; 822  : 					if ( lpObj->m_btCsJoinSide == lpTargetObj->m_btCsJoinSide )
; 823  : 					{
; 824  : 						AttackDamage = AttackDamage * 20 / 100;
; 825  : 					}
; 826  : 					
; 827  : 					AttackDamage = AttackDamage * 40 / 100;
; 828  : 				}
; 829  : 			}
; 830  : 		}
; 831  : #endif
; 832  : 		if ( skill != 79 )

  010c1	83 7d 08 4f	 cmp	 DWORD PTR _skill$[ebp], 79 ; 0000004fH
  010c5	74 0b		 je	 SHORT $LN253@Attack

; 833  : 		{
; 834  : 			bDamageReflect = TRUE;

  010c7	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bDamageReflect$[ebp], 1

; 835  : 			MsgDamage = 4;

  010ce	c6 45 ff 04	 mov	 BYTE PTR _MsgDamage$[ebp], 4
$LN253@Attack:

; 836  : 		}
; 837  : 
; 838  : 		if (lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER)

  010d2	0f b7 46 60	 movzx	 eax, WORD PTR [esi+96]
  010d6	83 f8 01	 cmp	 eax, 1
  010d9	75 bc		 jne	 SHORT $LN62@Attack
  010db	66 39 43 60	 cmp	 WORD PTR [ebx+96], ax
  010df	75 1d		 jne	 SHORT $LN57@Attack

; 839  : 		{
; 840  : 			AttackDamage = AttackDamage * gServerInfo.m_Character.PvPDamageRate[lpObj->Class][lpTargetObj->Class] / 100;

  010e1	0f b7 86 98 00
	00 00		 movzx	 eax, WORD PTR [esi+152]
  010e8	0f b7 8b 98 00
	00 00		 movzx	 ecx, WORD PTR [ebx+152]
  010ef	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  010f2	03 c1		 add	 eax, ecx
  010f4	0f b7 0c 45 98
	01 00 00	 movzx	 ecx, WORD PTR ?gServerInfo@@3VCServerInfo@@A[eax*2+408]
  010fc	eb 1b		 jmp	 SHORT $LN350@Attack
$LN57@Attack:

; 841  : 		}
; 842  : 
; 843  : 		else if (lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER)

  010fe	83 f8 01	 cmp	 eax, 1
  01101	75 94		 jne	 SHORT $LN62@Attack
  01103	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  01108	75 8d		 jne	 SHORT $LN62@Attack

; 844  : 		{
; 845  : 			AttackDamage = AttackDamage * gServerInfo.m_Character.PvMDamageRate[lpObj->Class] / 100;

  0110a	0f b7 8e 98 00
	00 00		 movzx	 ecx, WORD PTR [esi+152]
  01111	0f b7 0c 4d ca
	01 00 00	 movzx	 ecx, WORD PTR ?gServerInfo@@3VCServerInfo@@A[ecx*2+458]
$LN350@Attack:
  01119	0f af cf	 imul	 ecx, edi
  0111c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01121	f7 e9		 imul	 ecx
  01123	c1 fa 05	 sar	 edx, 5
  01126	8b fa		 mov	 edi, edx
  01128	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0112b	03 fa		 add	 edi, edx
  0112d	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi

; 851  : 		{
; 852  : 			lpTargetObj->Life = 0.0f;

  01130	e9 62 ff ff ff	 jmp	 $LN62@Attack
$LN323@Attack:

; 846  : 		}
; 847  : 
; 848  : 		lpTargetObj->Life -= AttackDamage;
; 849  : 
; 850  : 		if ( lpTargetObj->Life < 0.0f )

  01135	dd d8		 fstp	 ST(0)
$LN254@Attack:

; 853  : 		}
; 854  : 	}
; 855  : 
; 856  : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  01137	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  0113c	75 1c		 jne	 SHORT $LN53@Attack

; 857  : 	{
; 858  : 		gObjAddMsgSendDelay(lpTargetObj, 0, lpObj->m_Index, 100, 0);

  0113e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  01140	6a 00		 push	 0
  01142	6a 64		 push	 100			; 00000064H
  01144	51		 push	 ecx
  01145	6a 00		 push	 0
  01147	53		 push	 ebx
  01148	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 859  : 		lpTargetObj->LastAttackerID = lpObj->m_Index;

  0114d	66 8b 16	 mov	 dx, WORD PTR [esi]
  01150	83 c4 14	 add	 esp, 20			; 00000014H
  01153	66 89 93 da 02
	00 00		 mov	 WORD PTR [ebx+730], dx
$LN53@Attack:

; 860  : 	}
; 861  : 
; 862  : 	BOOL selfdefense = 0;
; 863  : 	lpCallObj = lpTargetObj;
; 864  : 	
; 865  : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  0115a	0f b7 4b 60	 movzx	 ecx, WORD PTR [ebx+96]
  0115e	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _selfdefense$[ebp], 0
  01165	89 5d f0	 mov	 DWORD PTR _lpCallObj$[ebp], ebx
  01168	83 f9 02	 cmp	 ecx, 2
  0116b	75 18		 jne	 SHORT $LN51@Attack

; 866  : 	{
; 867  : 		if ( lpTargetObj->m_RecallMon >= 0 )

  0116d	8b 83 cc 02 00
	00		 mov	 eax, DWORD PTR [ebx+716]
  01173	85 c0		 test	 eax, eax
  01175	78 0e		 js	 SHORT $LN51@Attack

; 868  : 		{
; 869  : 			lpCallObj = &gObj[lpTargetObj->m_RecallMon];

  01177	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  0117d	05 00 00 00 00	 add	 eax, OFFSET ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  01182	89 45 f0	 mov	 DWORD PTR _lpCallObj$[ebp], eax
$LN51@Attack:

; 870  : 		}
; 871  : 	}
; 872  : 
; 873  : 	if ( AttackDamage >= 1 )

  01185	83 ff 01	 cmp	 edi, 1
  01188	0f 8c f3 00 00
	00		 jl	 $LN256@Attack

; 874  : 	{
; 875  : 		if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  0118e	0f b7 46 60	 movzx	 eax, WORD PTR [esi+96]
  01192	83 f8 01	 cmp	 eax, 1
  01195	75 62		 jne	 SHORT $LN49@Attack
  01197	3b c8		 cmp	 ecx, eax
  01199	75 5e		 jne	 SHORT $LN49@Attack

; 876  : 		{
; 877  : 			if ( gObjDuelCheck(lpObj, lpTargetObj) )

  0119b	53		 push	 ebx
  0119c	56		 push	 esi
  0119d	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  011a2	83 c4 08	 add	 esp, 8
  011a5	85 c0		 test	 eax, eax

; 878  : 			{
; 879  : 				selfdefense = 0;

  011a7	75 31		 jne	 SHORT $LN45@Attack

; 880  : 			}
; 881  : 			else if ( CC_MAP_RANGE(lpObj->MapNumber) || CC_MAP_RANGE(lpTargetObj->MapNumber) )

  011a9	0f b6 86 09 01
	00 00		 movzx	 eax, BYTE PTR [esi+265]
  011b0	3c 12		 cmp	 al, 18			; 00000012H
  011b2	72 09		 jb	 SHORT $LN269@Attack
  011b4	b1 17		 mov	 cl, 23			; 00000017H
  011b6	3a c8		 cmp	 cl, al
  011b8	1b c0		 sbb	 eax, eax
  011ba	40		 inc	 eax
  011bb	75 1d		 jne	 SHORT $LN45@Attack
$LN269@Attack:
  011bd	0f b6 83 09 01
	00 00		 movzx	 eax, BYTE PTR [ebx+265]
  011c4	3c 12		 cmp	 al, 18			; 00000012H
  011c6	72 09		 jb	 SHORT $LN246@Attack
  011c8	b2 17		 mov	 dl, 23			; 00000017H
  011ca	3a d0		 cmp	 dl, al
  011cc	1b c0		 sbb	 eax, eax
  011ce	40		 inc	 eax
  011cf	75 09		 jne	 SHORT $LN45@Attack
$LN246@Attack:

; 884  : 			}
; 885  : 			else
; 886  : 			{
; 887  : 				selfdefense = 1;

  011d1	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR _selfdefense$[ebp], 1
  011d8	eb 07		 jmp	 SHORT $LN44@Attack
$LN45@Attack:

; 882  : 			{
; 883  : 				selfdefense = 0;

  011da	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _selfdefense$[ebp], 0
$LN44@Attack:

; 888  : 			}
; 889  : 
; 890  : 			if ( gObjGetRelationShip(lpObj, lpTargetObj) == 2 )

  011e1	53		 push	 ebx
  011e2	56		 push	 esi
  011e3	e8 00 00 00 00	 call	 ?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjGetRelationShip
  011e8	83 c4 08	 add	 esp, 8
  011eb	83 f8 02	 cmp	 eax, 2
  011ee	75 1f		 jne	 SHORT $LN255@Attack

; 891  : 			{
; 892  : 				selfdefense = FALSE;

  011f0	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _selfdefense$[ebp], 0

; 893  : 			}
; 894  : #if GS_CASTLE == 1
; 895  : 			if ( g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE )
; 896  : 			{
; 897  : 				if ( lpObj->m_btCsJoinSide > 0 )
; 898  : 				{
; 899  : 					selfdefense = FALSE;
; 900  : 				}
; 901  : 			}
; 902  : #endif
; 903  : 		}

  011f7	eb 16		 jmp	 SHORT $LN255@Attack
$LN49@Attack:

; 904  : 		else if ( lpTargetObj->Type == OBJ_MONSTER && lpObj->Type == OBJ_USER )

  011f9	83 f9 02	 cmp	 ecx, 2
  011fc	75 11		 jne	 SHORT $LN255@Attack
  011fe	83 f8 01	 cmp	 eax, 1
  01201	75 0c		 jne	 SHORT $LN255@Attack

; 905  : 		{
; 906  : 			if ( lpTargetObj->m_RecallMon >= 0 )

  01203	83 bb cc 02 00
	00 00		 cmp	 DWORD PTR [ebx+716], 0
  0120a	7c 03		 jl	 SHORT $LN255@Attack

; 907  : 			{
; 908  : 				selfdefense = TRUE;

  0120c	89 45 0c	 mov	 DWORD PTR _selfdefense$[ebp], eax
$LN255@Attack:

; 909  : 			}
; 910  : 		}
; 911  : 
; 912  : 		if ( lpTargetObj->Type == OBJ_USER )

  0120f	66 83 7b 60 01	 cmp	 WORD PTR [ebx+96], 1
  01214	75 0a		 jne	 SHORT $LN39@Attack

; 913  : 		{
; 914  : 			gObjArmorRandomDurDown(lpTargetObj, lpObj);

  01216	56		 push	 esi
  01217	53		 push	 ebx
  01218	e8 00 00 00 00	 call	 ?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z ; gObjArmorRandomDurDown
  0121d	83 c4 08	 add	 esp, 8
$LN39@Attack:

; 915  : 		}
; 916  : 
; 917  : 		if ( lpTargetObj->m_SkillHarden )

  01220	8b 83 98 02 00
	00		 mov	 eax, DWORD PTR [ebx+664]
  01226	85 c0		 test	 eax, eax
  01228	74 2b		 je	 SHORT $LN37@Attack

; 918  : 		{
; 919  : 			lpTargetObj->m_SkillHarden--;

  0122a	48		 dec	 eax
  0122b	89 83 98 02 00
	00		 mov	 DWORD PTR [ebx+664], eax

; 920  : 
; 921  : 			if ( lpTargetObj->m_SkillHarden <= 0 )

  01231	85 c0		 test	 eax, eax
  01233	7f 20		 jg	 SHORT $LN37@Attack

; 922  : 			{
; 923  : 				lpTargetObj->m_SkillHardenTime = 0;
; 924  : 				lpTargetObj->m_SkillHarden = 0;
; 925  : 				lpTargetObj->m_ViewSkillState &= -33;

  01235	83 a3 c4 01 00
	00 df		 and	 DWORD PTR [ebx+452], -33 ; ffffffdfH
  0123c	33 c0		 xor	 eax, eax

; 926  : 				GCMagicCancelSend(lpTargetObj, 51);

  0123e	6a 33		 push	 51			; 00000033H
  01240	53		 push	 ebx
  01241	89 83 9c 02 00
	00		 mov	 DWORD PTR [ebx+668], eax
  01247	89 83 98 02 00
	00		 mov	 DWORD PTR [ebx+664], eax
  0124d	e8 00 00 00 00	 call	 ?GCMagicCancelSend@@YAXPAUOBJECTSTRUCT@@E@Z ; GCMagicCancelSend
  01252	83 c4 08	 add	 esp, 8
$LN37@Attack:

; 927  : 			}
; 928  : 		}
; 929  : 	}
; 930  : 
; 931  : 	if ( selfdefense == TRUE && bDamageReflect == FALSE )

  01255	83 7d 0c 01	 cmp	 DWORD PTR _selfdefense$[ebp], 1
  01259	75 26		 jne	 SHORT $LN256@Attack
  0125b	83 7d e4 00	 cmp	 DWORD PTR _bDamageReflect$[ebp], 0
  0125f	75 20		 jne	 SHORT $LN256@Attack

; 932  : 	{
; 933  : 		if ( !gObjTargetGuildWarCheck(lpObj, lpCallObj) )

  01261	8b 45 f0	 mov	 eax, DWORD PTR _lpCallObj$[ebp]
  01264	50		 push	 eax
  01265	56		 push	 esi
  01266	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0126b	83 c4 08	 add	 esp, 8
  0126e	85 c0		 test	 eax, eax
  01270	75 0f		 jne	 SHORT $LN256@Attack

; 934  : 		{
; 935  : 			gObjCheckSelfDefense(lpObj, lpCallObj->m_Index);

  01272	8b 4d f0	 mov	 ecx, DWORD PTR _lpCallObj$[ebp]
  01275	8b 11		 mov	 edx, DWORD PTR [ecx]
  01277	52		 push	 edx
  01278	56		 push	 esi
  01279	e8 00 00 00 00	 call	 ?gObjCheckSelfDefense@@YAXPAUOBJECTSTRUCT@@H@Z ; gObjCheckSelfDefense
  0127e	83 c4 08	 add	 esp, 8
$LN256@Attack:

; 936  : 		}
; 937  : 	}
; 938  : 
; 939  : 	if ( lpTargetObj->Class == 275 )	// KUNDUN

  01281	b8 13 01 00 00	 mov	 eax, 275		; 00000113H
  01286	66 39 83 98 00
	00 00		 cmp	 WORD PTR [ebx+152], ax
  0128d	75 42		 jne	 SHORT $LN257@Attack

; 940  : 	{
; 941  : 		if ( lpTargetObj->m_iMonsterBattleDelay <= 0 )

  0128f	80 bb 2b 02 00
	00 00		 cmp	 BYTE PTR [ebx+555], 0
  01296	7f 39		 jg	 SHORT $LN257@Attack

; 942  : 		{
; 943  : 			if ( (rand()%15) < 1 )

  01298	e8 00 00 00 00	 call	 _rand
  0129d	99		 cdq
  0129e	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  012a3	f7 f9		 idiv	 ecx
  012a5	83 fa 01	 cmp	 edx, 1
  012a8	7d 27		 jge	 SHORT $LN257@Attack

; 944  : 			{
; 945  : 				gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  012aa	8b 16		 mov	 edx, DWORD PTR [esi]
  012ac	6a 00		 push	 0
  012ae	6a 64		 push	 100			; 00000064H
  012b0	52		 push	 edx
  012b1	6a 04		 push	 4
  012b3	53		 push	 ebx
  012b4	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 946  : 				lpTargetObj->m_iMonsterBattleDelay = 10;
; 947  : 				GCActionSend(lpTargetObj, 126, lpTargetObj->m_Index, lpObj->m_Index);

  012b9	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  012bb	c6 83 2b 02 00
	00 0a		 mov	 BYTE PTR [ebx+555], 10	; 0000000aH
  012c2	8b 06		 mov	 eax, DWORD PTR [esi]
  012c4	50		 push	 eax
  012c5	51		 push	 ecx
  012c6	6a 7e		 push	 126			; 0000007eH
  012c8	53		 push	 ebx
  012c9	e8 00 00 00 00	 call	 ?GCActionSend@@YAXPAUOBJECTSTRUCT@@EHH@Z ; GCActionSend
  012ce	83 c4 24	 add	 esp, 36			; 00000024H
$LN257@Attack:

; 948  : 			}
; 949  : 		}
; 950  : 	}
; 951  : 
; 952  : 	if ( lpTargetObj->Class == 131 ||BC_STATUE_RANGE(lpTargetObj->Class-132) )

  012d1	0f b7 83 98 00
	00 00		 movzx	 eax, WORD PTR [ebx+152]
  012d8	ba 83 00 00 00	 mov	 edx, 131		; 00000083H
  012dd	66 3b c2	 cmp	 ax, dx
  012e0	74 6b		 je	 SHORT $LN30@Attack
  012e2	05 7c ff ff ff	 add	 eax, -132		; ffffff7cH
  012e7	78 0e		 js	 SHORT $LN247@Attack
  012e9	33 c9		 xor	 ecx, ecx
  012eb	83 f8 02	 cmp	 eax, 2
  012ee	0f 9e c1	 setle	 cl
  012f1	8b c1		 mov	 eax, ecx
  012f3	85 c0		 test	 eax, eax
  012f5	75 56		 jne	 SHORT $LN30@Attack
$LN247@Attack:

; 956  : 	}
; 957  : 	else if ( AttackDamage >= 5 )	// To make strong hit

  012f7	83 ff 05	 cmp	 edi, 5
  012fa	7c 7b		 jl	 SHORT $LN258@Attack

; 958  : 	{
; 959  : 		if ( lpTargetObj->Type == OBJ_MONSTER )

  012fc	66 83 7b 60 02	 cmp	 WORD PTR [ebx+96], 2
  01301	75 24		 jne	 SHORT $LN27@Attack

; 960  : 		{
; 961  : 			if ( (rand()%26) == 0 )

  01303	e8 00 00 00 00	 call	 _rand
  01308	99		 cdq
  01309	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0130e	f7 f9		 idiv	 ecx
  01310	85 d2		 test	 edx, edx
  01312	75 63		 jne	 SHORT $LN258@Attack

; 962  : 			{
; 963  : 				gObjAddMsgSendDelay(lpTargetObj,4, lpObj->m_Index, 100, 0);

  01314	52		 push	 edx
  01315	8b 16		 mov	 edx, DWORD PTR [esi]
  01317	6a 64		 push	 100			; 00000064H
  01319	52		 push	 edx
  0131a	6a 04		 push	 4
  0131c	53		 push	 ebx
  0131d	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  01322	83 c4 14	 add	 esp, 20			; 00000014H

; 964  : 			}
; 965  : 		}

  01325	eb 50		 jmp	 SHORT $LN258@Attack
$LN27@Attack:

; 966  : 		else if ( (rand()%4) == 0 )

  01327	e8 00 00 00 00	 call	 _rand
  0132c	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  01331	79 05		 jns	 SHORT $LN331@Attack
  01333	48		 dec	 eax
  01334	83 c8 fc	 or	 eax, -4			; fffffffcH
  01337	40		 inc	 eax
$LN331@Attack:
  01338	75 3d		 jne	 SHORT $LN258@Attack

; 967  : 		{
; 968  : 			if ( !gObjUniriaSprite(lpTargetObj) )

  0133a	53		 push	 ebx
  0133b	e8 00 00 00 00	 call	 ?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjUniriaSprite
  01340	83 c4 04	 add	 esp, 4
  01343	85 c0		 test	 eax, eax
  01345	75 30		 jne	 SHORT $LN258@Attack

; 969  : 			{
; 970  : 				MSBFlag = 1;

  01347	c6 45 18 01	 mov	 BYTE PTR _MSBFlag$[ebp], 1
  0134b	eb 2a		 jmp	 SHORT $LN258@Attack
$LN30@Attack:

; 953  : 	{
; 954  : 		gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  0134d	8b 06		 mov	 eax, DWORD PTR [esi]
  0134f	6a 00		 push	 0
  01351	6a 64		 push	 100			; 00000064H
  01353	50		 push	 eax
  01354	6a 04		 push	 4
  01356	53		 push	 ebx
  01357	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 955  : 		gObjSetPosition(lpTargetObj->m_Index, lpTargetObj->X, lpTargetObj->Y);

  0135c	0f bf 8b 06 01
	00 00		 movsx	 ecx, WORD PTR [ebx+262]
  01363	0f bf 93 04 01
	00 00		 movsx	 edx, WORD PTR [ebx+260]
  0136a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0136c	51		 push	 ecx
  0136d	52		 push	 edx
  0136e	50		 push	 eax
  0136f	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  01374	83 c4 20	 add	 esp, 32			; 00000020H
$LN258@Attack:

; 971  : 			}
; 972  : 		}
; 973  : 	}
; 974  : 
; 975  : 	if ( ManaChange )

  01377	83 7d e0 00	 cmp	 DWORD PTR _ManaChange$[ebp], 0
  0137b	74 25		 je	 SHORT $LN22@Attack

; 976  : 	{
; 977  : 		GCManaSend(lpTargetObj->m_Index, lpTargetObj->Mana, 0xFF, 0, lpTargetObj->BP);

  0137d	8b 8b e8 00 00
	00		 mov	 ecx, DWORD PTR [ebx+232]
  01383	d9 83 d0 00 00
	00		 fld	 DWORD PTR [ebx+208]
  01389	51		 push	 ecx
  0138a	6a 00		 push	 0
  0138c	68 ff 00 00 00	 push	 255			; 000000ffH
  01391	e8 00 00 00 00	 call	 __ftol2_sse
  01396	8b 13		 mov	 edx, DWORD PTR [ebx]
  01398	50		 push	 eax
  01399	52		 push	 edx
  0139a	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHHEEH@Z	; GCManaSend
  0139f	83 c4 14	 add	 esp, 20			; 00000014H
$LN22@Attack:

; 978  : 	}
; 979  : 
; 980  : 	if ( magicsend )

  013a2	83 7d 14 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  013a6	74 14		 je	 SHORT $LN21@Attack

; 981  : 	{
; 982  : 		GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  013a8	8b 45 f4	 mov	 eax, DWORD PTR _skillSuccess$[ebp]
  013ab	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  013ad	8b 55 08	 mov	 edx, DWORD PTR _skill$[ebp]
  013b0	50		 push	 eax
  013b1	51		 push	 ecx
  013b2	52		 push	 edx
  013b3	56		 push	 esi
  013b4	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@EHE@Z ; GCMagicAttackNumberSend
  013b9	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@Attack:

; 983  : 	}
; 984  : 
; 985  : 	if ( lpObj->Type == OBJ_USER )

  013bc	66 83 7e 60 01	 cmp	 WORD PTR [esi+96], 1
  013c1	75 19		 jne	 SHORT $LN19@Attack

; 986  : 	{
; 987  : 		if ( lpObj->m_Change == 9 )

  013c3	83 be d0 02 00
	00 09		 cmp	 DWORD PTR [esi+720], 9
  013ca	75 10		 jne	 SHORT $LN19@Attack

; 988  : 		{
; 989  : 			GCMagicAttackNumberSend(lpObj, 3, lpTargetObj->m_Index, 1);

  013cc	8b 03		 mov	 eax, DWORD PTR [ebx]
  013ce	6a 01		 push	 1
  013d0	50		 push	 eax
  013d1	6a 03		 push	 3
  013d3	56		 push	 esi
  013d4	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@EHE@Z ; GCMagicAttackNumberSend
  013d9	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@Attack:

; 990  : 		}
; 991  : 	}
; 992  : 
; 993  : 	if ( lpObj->Class == CLASS_ELF && lpObj->Level == 1 && AttackDamage > 10 )

  013dc	66 83 be 98 00
	00 00 02	 cmp	 WORD PTR [esi+152], 2
  013e4	75 58		 jne	 SHORT $LN18@Attack
  013e6	66 83 be 9c 00
	00 00 01	 cmp	 WORD PTR [esi+156], 1
  013ee	75 4e		 jne	 SHORT $LN18@Attack
  013f0	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  013f3	7e 49		 jle	 SHORT $LN18@Attack

; 994  : 	{
; 995  : 		LogAdd(LOG_BLACK, "error-Level1 : [%s][%s] Str:%d %d %d %d %d %d %d",
; 996  : 			lpObj->AccountID, lpObj->Name, lpObj->Strength,
; 997  : 			lpObj->m_AttackDamageMinRight, lpObj->m_AttackDamageMaxRight,
; 998  : 			lpObj->m_AttackDamageMinLeft, lpObj->m_AttackDamageMaxLeft, 
; 999  : 			lpObj->m_AttackDamageMax, lpObj->m_AttackDamageMin);

  013f5	8b 8e dc 02 00
	00		 mov	 ecx, DWORD PTR [esi+732]
  013fb	8b 96 e0 02 00
	00		 mov	 edx, DWORD PTR [esi+736]
  01401	8b 86 f4 02 00
	00		 mov	 eax, DWORD PTR [esi+756]
  01407	51		 push	 ecx
  01408	8b 8e f8 02 00
	00		 mov	 ecx, DWORD PTR [esi+760]
  0140e	52		 push	 edx
  0140f	8b 96 fc 02 00
	00		 mov	 edx, DWORD PTR [esi+764]
  01415	50		 push	 eax
  01416	8b 86 00 03 00
	00		 mov	 eax, DWORD PTR [esi+768]
  0141c	51		 push	 ecx
  0141d	0f b7 8e b4 00
	00 00		 movzx	 ecx, WORD PTR [esi+180]
  01424	52		 push	 edx
  01425	50		 push	 eax
  01426	51		 push	 ecx
  01427	8d 56 6f	 lea	 edx, DWORD PTR [esi+111]
  0142a	52		 push	 edx
  0142b	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  0142e	50		 push	 eax
  0142f	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@
  01434	6a 00		 push	 0
  01436	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0143b	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN18@Attack:

; 1000 : 	}
; 1001 : 
; 1002 : 	lpObj->m_Rest = 0;

  0143e	c6 86 c1 01 00
	00 00		 mov	 BYTE PTR [esi+449], 0

; 1003 : 
; 1004 : 	if ( AttackDamage > 0 )

  01445	85 ff		 test	 edi, edi
  01447	0f 8e 7c 01 00
	00		 jle	 $LN17@Attack

; 1005 : 	{
; 1006 : 		int iReflect = lpTargetObj->DamageReflect;

  0144d	0f b6 83 15 01
	00 00		 movzx	 eax, BYTE PTR [ebx+277]

; 1007 : 
; 1008 : 		if (iReflect > gServerInfo.m_Character.ReflectDamage)

  01454	0f b7 0d d4 01
	00 00		 movzx	 ecx, WORD PTR ?gServerInfo@@3VCServerInfo@@A+468
  0145b	3b c1		 cmp	 eax, ecx
  0145d	7e 02		 jle	 SHORT $LN16@Attack

; 1009 : 		{
; 1010 : 			iReflect = gServerInfo.m_Character.ReflectDamage;

  0145f	8b c1		 mov	 eax, ecx
$LN16@Attack:

; 1011 : 		}
; 1012 : 
; 1013 : 		int atd_reflect = AttackDamage * iReflect / 100;

  01461	0f af c7	 imul	 eax, edi
  01464	8b c8		 mov	 ecx, eax
  01466	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0146b	f7 e9		 imul	 ecx
  0146d	c1 fa 05	 sar	 edx, 5
  01470	8b c2		 mov	 eax, edx
  01472	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01475	03 c2		 add	 eax, edx

; 1014 : 
; 1015 : 		if ( atd_reflect )

  01477	74 11		 je	 SHORT $LN15@Attack

; 1016 : 		{
; 1017 : 			gObjAddMsgSendDelay(lpTargetObj, 10, lpObj->m_Index, 10, atd_reflect);

  01479	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0147b	50		 push	 eax
  0147c	6a 0a		 push	 10			; 0000000aH
  0147e	51		 push	 ecx
  0147f	6a 0a		 push	 10			; 0000000aH
  01481	53		 push	 ebx
  01482	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  01487	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@Attack:

; 1018 : 		}
; 1019 : 
; 1020 : 		if ( (rand()%100) < lpObj->SetOpReflectionDamage )

  0148a	e8 00 00 00 00	 call	 _rand
  0148f	99		 cdq
  01490	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01495	f7 f9		 idiv	 ecx
  01497	0f b6 86 7e 0f
	00 00		 movzx	 eax, BYTE PTR [esi+3966]
  0149e	3b d0		 cmp	 edx, eax
  014a0	7d 11		 jge	 SHORT $LN14@Attack

; 1021 : 		{
; 1022 : 			gObjAddMsgSendDelay(lpTargetObj, 10, lpObj->m_Index, 10, AttackDamage);

  014a2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  014a4	57		 push	 edi
  014a5	6a 0a		 push	 10			; 0000000aH
  014a7	51		 push	 ecx
  014a8	6a 0a		 push	 10			; 0000000aH
  014aa	53		 push	 ebx
  014ab	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  014b0	83 c4 14	 add	 esp, 20			; 00000014H
$LN14@Attack:

; 1023 : 		}
; 1024 : 
; 1025 : 		if ( bCombo )

  014b3	83 7d 20 00	 cmp	 DWORD PTR _bCombo$[ebp], 0
  014b7	74 4d		 je	 SHORT $LN13@Attack

; 1026 : 		{
; 1027 : 			int iComboDamage = ( Strength + Dexterity + Energy ) / 2;	// #formula

  014b9	8b 45 d8	 mov	 eax, DWORD PTR _Dexterity$[ebp]

; 1028 : 			AttackDamage += iComboDamage;
; 1029 : 
; 1030 : 			lpTargetObj->Life -= iComboDamage;

  014bc	d9 83 bc 00 00
	00		 fld	 DWORD PTR [ebx+188]
  014c2	03 45 ec	 add	 eax, DWORD PTR _Energy$[ebp]
  014c5	03 45 d4	 add	 eax, DWORD PTR _Strength$[ebp]
  014c8	99		 cdq
  014c9	2b c2		 sub	 eax, edx
  014cb	d1 f8		 sar	 eax, 1
  014cd	89 45 14	 mov	 DWORD PTR _iComboDamage$155968[ebp], eax
  014d0	03 f8		 add	 edi, eax
  014d2	da 65 14	 fisub	 DWORD PTR _iComboDamage$155968[ebp]
  014d5	89 7d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], edi
  014d8	d9 5d 14	 fstp	 DWORD PTR tv2358[ebp]
  014db	d9 45 14	 fld	 DWORD PTR tv2358[ebp]
  014de	d9 93 bc 00 00
	00		 fst	 DWORD PTR [ebx+188]

; 1031 : 
; 1032 : 			if ( lpTargetObj->Life < 0.0f )

  014e4	d9 ee		 fldz
  014e6	d8 d1		 fcom	 ST(1)
  014e8	df e0		 fnstsw	 ax
  014ea	dd d9		 fstp	 ST(1)
  014ec	f6 c4 41	 test	 ah, 65			; 00000041H
  014ef	75 08		 jne	 SHORT $LN326@Attack

; 1033 : 			{
; 1034 : 				lpTargetObj->Life = 0.0f;

  014f1	d9 9b bc 00 00
	00		 fstp	 DWORD PTR [ebx+188]
  014f7	eb 02		 jmp	 SHORT $LN12@Attack
$LN326@Attack:
  014f9	dd d8		 fstp	 ST(0)
$LN12@Attack:

; 1035 : 			}
; 1036 : 
; 1037 : 			MsgDamage |= 0x80;

  014fb	80 4d ff 80	 or	 BYTE PTR _MsgDamage$[ebp], 128 ; 00000080H

; 1038 : 			skill = 59;

  014ff	c7 45 08 3b 00
	00 00		 mov	 DWORD PTR _skill$[ebp], 59 ; 0000003bH
$LN13@Attack:

; 1039 : 		}
; 1040 : 
; 1041 : 		if ( (rand()%100) < lpObj->SetOpDoubleDamage )

  01506	e8 00 00 00 00	 call	 _rand
  0150b	99		 cdq
  0150c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01511	f7 f9		 idiv	 ecx
  01513	0f b6 86 7b 0f
	00 00		 movzx	 eax, BYTE PTR [esi+3963]
  0151a	3b d0		 cmp	 edx, eax
  0151c	7d 41		 jge	 SHORT $LN259@Attack

; 1042 : 		{
; 1043 : 			if ( skill == 78 )

  0151e	83 7d 08 4e	 cmp	 DWORD PTR _skill$[ebp], 78 ; 0000004eH
  01522	75 0d		 jne	 SHORT $LN10@Attack

; 1044 : 			{
; 1045 : 				gObjUseSkill.FireScreamExplosionAttack(lpObj, lpTargetObj, AttackDamage);

  01524	57		 push	 edi
  01525	53		 push	 ebx
  01526	56		 push	 esi
  01527	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  0152c	e8 00 00 00 00	 call	 ?FireScreamExplosionAttack@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjUseSkill::FireScreamExplosionAttack
$LN10@Attack:

; 1046 : 			}
; 1047 : 
; 1048 : 			lpTargetObj->Life -= AttackDamage;

  01531	d9 83 bc 00 00
	00		 fld	 DWORD PTR [ebx+188]

; 1049 : 			AttackDamage += AttackDamage;

  01537	03 ff		 add	 edi, edi
  01539	da 65 1c	 fisub	 DWORD PTR _AttackDamage$[ebp]
  0153c	d9 9b bc 00 00
	00		 fstp	 DWORD PTR [ebx+188]

; 1050 : 			
; 1051 : 			if ( lpTargetObj->Life < 0.0f )

  01542	d9 ee		 fldz
  01544	d8 93 bc 00 00
	00		 fcom	 DWORD PTR [ebx+188]
  0154a	df e0		 fnstsw	 ax
  0154c	f6 c4 41	 test	 ah, 65			; 00000041H
  0154f	75 08		 jne	 SHORT $LN329@Attack

; 1052 : 			{
; 1053 : 				lpTargetObj->Life = 0.0f;

  01551	d9 9b bc 00 00
	00		 fstp	 DWORD PTR [ebx+188]
  01557	eb 02		 jmp	 SHORT $LN9@Attack
$LN329@Attack:
  01559	dd d8		 fstp	 ST(0)
$LN9@Attack:

; 1054 : 			}
; 1055 : 
; 1056 : 			MsgDamage |= 0x40;

  0155b	80 4d ff 40	 or	 BYTE PTR _MsgDamage$[ebp], 64 ; 00000040H
$LN259@Attack:

; 1057 : 		}
; 1058 : 
; 1059 : 		if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  0155f	b8 01 00 00 00	 mov	 eax, 1
  01564	66 39 46 60	 cmp	 WORD PTR [esi+96], ax
  01568	75 42		 jne	 SHORT $LN7@Attack
  0156a	66 39 43 60	 cmp	 WORD PTR [ebx+96], ax
  0156e	75 3c		 jne	 SHORT $LN7@Attack

; 1060 : 		{
; 1061 : 			if ( CC_MAP_RANGE(lpObj->MapNumber) && CC_MAP_RANGE(lpTargetObj->MapNumber) )

  01570	0f b6 86 09 01
	00 00		 movzx	 eax, BYTE PTR [esi+265]
  01577	3c 12		 cmp	 al, 18			; 00000012H
  01579	72 31		 jb	 SHORT $LN7@Attack
  0157b	b1 17		 mov	 cl, 23			; 00000017H
  0157d	3a c8		 cmp	 cl, al
  0157f	1b c0		 sbb	 eax, eax
  01581	40		 inc	 eax
  01582	74 28		 je	 SHORT $LN7@Attack
  01584	0f b6 83 09 01
	00 00		 movzx	 eax, BYTE PTR [ebx+265]
  0158b	3c 12		 cmp	 al, 18			; 00000012H
  0158d	72 1d		 jb	 SHORT $LN7@Attack
  0158f	8a d1		 mov	 dl, cl
  01591	3a d0		 cmp	 dl, al
  01593	1b c0		 sbb	 eax, eax
  01595	40		 inc	 eax
  01596	74 14		 je	 SHORT $LN7@Attack

; 1062 : 			{
; 1063 : 				AttackDamage = AttackDamage * 50 / 100;

  01598	6b ff 32	 imul	 edi, 50			; 00000032H
  0159b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  015a0	f7 ef		 imul	 edi
  015a2	c1 fa 05	 sar	 edx, 5
  015a5	8b fa		 mov	 edi, edx
  015a7	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  015aa	03 fa		 add	 edi, edx
$LN7@Attack:

; 1064 : 			}
; 1065 : 		}
; 1066 : 
; 1067 : 		gObjLifeCheck(lpTargetObj, lpObj, AttackDamage, 0, MSBFlag, MsgDamage, skill);

  015ac	8b 4d 08	 mov	 ecx, DWORD PTR _skill$[ebp]
  015af	0f b6 55 ff	 movzx	 edx, BYTE PTR _MsgDamage$[ebp]
  015b3	0f b6 45 18	 movzx	 eax, BYTE PTR _MSBFlag$[ebp]
  015b7	51		 push	 ecx
  015b8	52		 push	 edx
  015b9	50		 push	 eax
  015ba	6a 00		 push	 0
  015bc	57		 push	 edi
  015bd	56		 push	 esi
  015be	53		 push	 ebx
  015bf	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHE@Z ; gObjLifeCheck
  015c4	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1068 : 	}
; 1069 : 	else

  015c7	eb 17		 jmp	 SHORT $LN6@Attack
$LN17@Attack:

; 1070 : 	{
; 1071 : 		GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, MsgDamage);

  015c9	0f b6 4d ff	 movzx	 ecx, BYTE PTR _MsgDamage$[ebp]
  015cd	8b 13		 mov	 edx, DWORD PTR [ebx]
  015cf	8b 06		 mov	 eax, DWORD PTR [esi]
  015d1	51		 push	 ecx
  015d2	6a 00		 push	 0
  015d4	6a 00		 push	 0
  015d6	52		 push	 edx
  015d7	50		 push	 eax
  015d8	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHH@Z ; GCDamageSend
  015dd	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@Attack:

; 1072 : 	}
; 1073 : 
; 1074 : 	if ( lpObj->Life <= 0.0f && lpObj->Type == OBJ_USER )

  015e0	d9 ee		 fldz
  015e2	d8 9e bc 00 00
	00		 fcomp	 DWORD PTR [esi+188]
  015e8	df e0		 fnstsw	 ax
  015ea	f6 c4 01	 test	 ah, 1
  015ed	75 31		 jne	 SHORT $LN270@Attack
  015ef	b8 01 00 00 00	 mov	 eax, 1
  015f4	66 39 46 60	 cmp	 WORD PTR [esi+96], ax
  015f8	75 26		 jne	 SHORT $LN270@Attack

; 1075 : 	{
; 1076 : 		if ( lpObj->m_CheckLifeTime <= 0 )

  015fa	83 be 10 0f 00
	00 00		 cmp	 DWORD PTR [esi+3856], 0
  01601	7f 1d		 jg	 SHORT $LN270@Attack

; 1077 : 		{
; 1078 : 			lpObj->lpAttackObj = lpTargetObj;

  01603	89 9e 38 02 00
	00		 mov	 DWORD PTR [esi+568], ebx

; 1079 : 
; 1080 : 			if ( lpTargetObj->Type == OBJ_USER )

  01609	66 39 43 60	 cmp	 WORD PTR [ebx+96], ax

; 1081 : 			{
; 1082 : 				lpObj->m_bAttackerKilled = true;
; 1083 : 			}
; 1084 : 			else
; 1085 : 			{
; 1086 : 				lpObj->m_bAttackerKilled = false;
; 1087 : 			}
; 1088 : 
; 1089 : 			lpObj->m_CheckLifeTime = 3;

  0160d	c7 86 10 0f 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+3856], 3
  01617	0f 94 c1	 sete	 cl
  0161a	88 8e 44 02 00
	00		 mov	 BYTE PTR [esi+580], cl
$LN270@Attack:

; 1090 : 		}
; 1091 : 	}
; 1092 : 
; 1093 : 	if ( lpMagic )

  01620	83 7d 10 00	 cmp	 DWORD PTR _lpMagic$[ebp], 0
  01624	74 11		 je	 SHORT $LN1@Attack

; 1094 : 	{
; 1095 : 		gObjUseSkill.SpecificSkillAdditionTreat(lpObj, lpTargetObj, lpMagic, AttackDamage);

  01626	8b 55 10	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  01629	57		 push	 edi
  0162a	52		 push	 edx
  0162b	53		 push	 ebx
  0162c	56		 push	 esi
  0162d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  01632	e8 00 00 00 00	 call	 ?SpecificSkillAdditionTreat@CObjUseSkill@@QAEXPAUOBJECTSTRUCT@@0PAVCMagicInf@@H@Z ; CObjUseSkill::SpecificSkillAdditionTreat
$LN1@Attack:

; 1096 : 	}
; 1097 : 
; 1098 : 	return TRUE;

  01637	5f		 pop	 edi
  01638	5e		 pop	 esi
  01639	b8 01 00 00 00	 mov	 eax, 1
  0163e	5b		 pop	 ebx

; 1099 : }

  0163f	8b e5		 mov	 esp, ebp
  01641	5d		 pop	 ebp
  01642	c2 1c 00	 ret	 28			; 0000001cH
  01645	8d 49 00	 npad	 3
$LN352@Attack:
  01648	00 00 00 00	 DD	 $LN102@Attack
  0164c	00 00 00 00	 DD	 $LN100@Attack
  01650	00 00 00 00	 DD	 $LN98@Attack
  01654	00 00 00 00	 DD	 $LN90@Attack
  01658	00 00 00 00	 DD	 $LN89@Attack
  0165c	00 00 00 00	 DD	 $LN272@Attack
$LN248@Attack:
  01660	00		 DB	 0
  01661	00		 DB	 0
  01662	00		 DB	 0
  01663	00		 DB	 0
  01664	00		 DB	 0
  01665	05		 DB	 5
  01666	05		 DB	 5
  01667	05		 DB	 5
  01668	05		 DB	 5
  01669	05		 DB	 5
  0166a	05		 DB	 5
  0166b	05		 DB	 5
  0166c	05		 DB	 5
  0166d	05		 DB	 5
  0166e	05		 DB	 5
  0166f	05		 DB	 5
  01670	05		 DB	 5
  01671	05		 DB	 5
  01672	05		 DB	 5
  01673	05		 DB	 5
  01674	05		 DB	 5
  01675	05		 DB	 5
  01676	00		 DB	 0
  01677	00		 DB	 0
  01678	00		 DB	 0
  01679	00		 DB	 0
  0167a	05		 DB	 5
  0167b	01		 DB	 1
  0167c	02		 DB	 2
  0167d	05		 DB	 5
  0167e	00		 DB	 0
  0167f	05		 DB	 5
  01680	01		 DB	 1
  01681	01		 DB	 1
  01682	05		 DB	 5
  01683	05		 DB	 5
  01684	00		 DB	 0
  01685	01		 DB	 1
  01686	00		 DB	 0
  01687	05		 DB	 5
  01688	05		 DB	 5
  01689	03		 DB	 3
  0168a	03		 DB	 3
  0168b	03		 DB	 3
  0168c	05		 DB	 5
  0168d	05		 DB	 5
  0168e	03		 DB	 3
  0168f	05		 DB	 5
  01690	05		 DB	 5
  01691	05		 DB	 5
  01692	05		 DB	 5
  01693	05		 DB	 5
  01694	05		 DB	 5
  01695	05		 DB	 5
  01696	05		 DB	 5
  01697	03		 DB	 3
  01698	05		 DB	 5
  01699	04		 DB	 4
  0169a	05		 DB	 5
  0169b	03		 DB	 3
?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHH@Z ENDP ; CObjAttack::Attack
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgclassObjAttack@@YAXXZ
text$yc	SEGMENT
??__EgclassObjAttack@@YAXXZ PROC			; `dynamic initializer for 'gclassObjAttack'', COMDAT

; 13   : CObjAttack gclassObjAttack;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gclassObjAttack@@3VCObjAttack@@A ; gclassObjAttack
  00005	e8 00 00 00 00	 call	 ??0CObjAttack@@QAE@XZ	; CObjAttack::CObjAttack
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgclassObjAttack@@YAXXZ ; `dynamic atexit destructor for 'gclassObjAttack''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgclassObjAttack@@YAXXZ ENDP			; `dynamic initializer for 'gclassObjAttack''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgclassObjAttack@@YAXXZ
text$yd	SEGMENT
??__FgclassObjAttack@@YAXXZ PROC			; `dynamic atexit destructor for 'gclassObjAttack'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gclassObjAttack@@3VCObjAttack@@A ; gclassObjAttack
  00005	e9 00 00 00 00	 jmp	 ??1CObjAttack@@UAE@XZ	; CObjAttack::~CObjAttack
??__FgclassObjAttack@@YAXXZ ENDP			; `dynamic atexit destructor for 'gclassObjAttack''
text$yd	ENDS
PUBLIC	?gclassObjAttack@@3VCObjAttack@@A		; gclassObjAttack
_BSS	SEGMENT
?gclassObjAttack@@3VCObjAttack@@A DB 024H DUP (?)	; gclassObjAttack
_BSS	ENDS
CRT$XCU	SEGMENT
_gclassObjAttack$initializer$ DD FLAT:??__EgclassObjAttack@@YAXXZ
CRT$XCU	ENDS
END
