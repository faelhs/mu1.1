; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\IpCache.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7CIpCache@@6B@				; CIpCache::`vftable'
PUBLIC	??1CIpCache@@UAE@XZ				; CIpCache::~CIpCache
PUBLIC	??_R4CIpCache@@6B@				; CIpCache::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIpCache@@@8				; CIpCache `RTTI Type Descriptor'
PUBLIC	??_R3CIpCache@@8				; CIpCache::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIpCache@@8				; CIpCache::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIpCache@@8			; CIpCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECIpCache@@UAEPAXI@Z:PROC			; CIpCache::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CIpCache@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\ipcache.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CIpCache@@8 DD FLAT:??_R0?AVCIpCache@@@8	; CIpCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_R2CIpCache@@8
rdata$r	SEGMENT
??_R2CIpCache@@8 DD FLAT:??_R1A@?0A@EA@CIpCache@@8	; CIpCache::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIpCache@@8
rdata$r	SEGMENT
??_R3CIpCache@@8 DD 00H					; CIpCache::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIpCache@@@8
_DATA	SEGMENT
??_R0?AVCIpCache@@@8 DD FLAT:??_7type_info@@6B@		; CIpCache `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIpCache@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CIpCache@@6B@
rdata$r	SEGMENT
??_R4CIpCache@@6B@ DD 00H				; CIpCache::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIpCache@@@8
	DD	FLAT:??_R3CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_7CIpCache@@6B@
CONST	SEGMENT
??_7CIpCache@@6B@ DD FLAT:??_R4CIpCache@@6B@		; CIpCache::`vftable'
	DD	FLAT:??_ECIpCache@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1CIpCache@@UAE@XZ
_TEXT	SEGMENT
??1CIpCache@@UAE@XZ PROC				; CIpCache::~CIpCache, COMDAT
; _this$ = ecx

; 24   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CIpCache@@6B@

; 25   : 
; 26   : }

  00006	c3		 ret	 0
??1CIpCache@@UAE@XZ ENDP				; CIpCache::~CIpCache
_TEXT	ENDS
PUBLIC	?Init@CIpCache@@QAEXXZ				; CIpCache::Init
; Function compile flags: /Ogtp
;	COMDAT ?Init@CIpCache@@QAEXXZ
_TEXT	SEGMENT
?Init@CIpCache@@QAEXXZ PROC				; CIpCache::Init, COMDAT
; _this$ = ecx

; 32   : 	for (int n=0;n<MAX_IP_CACHE; n++)

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00003	b9 d0 07 00 00	 mov	 ecx, 2000		; 000007d0H
  00008	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@Init:

; 33   : 	{
; 34   : 		this->m_IpInfo[n].IpUsed = FALSE;

  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00016	83 c0 18	 add	 eax, 24			; 00000018H
  00019	49		 dec	 ecx
  0001a	75 f4		 jne	 SHORT $LL3@Init

; 35   : 	}
; 36   : }

  0001c	c3		 ret	 0
?Init@CIpCache@@QAEXXZ ENDP				; CIpCache::Init
_TEXT	ENDS
PUBLIC	?AddIp@CIpCache@@QAEHPAD@Z			; CIpCache::AddIp
EXTRN	__imp__GetTickCount@0:PROC
; Function compile flags: /Ogtp
;	COMDAT ?AddIp@CIpCache@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ip$ = 8						; size = 4
?AddIp@CIpCache@@QAEHPAD@Z PROC				; CIpCache::AddIp, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 40   : 	int n;	// Iterator
; 41   : 	int blank=-1;

  00007	83 cf ff	 or	 edi, -1
  0000a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	
; 43   : 	for (n=0;n<MAX_IP_CACHE;n++)

  0000d	33 db		 xor	 ebx, ebx
  0000f	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
$LL27@AddIp:

; 44   : 	{
; 45   : 		if (this->m_IpInfo[n].IpUsed != FALSE)

  00012	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00015	74 11		 je	 SHORT $LN11@AddIp

; 46   : 		{
; 47   : 			if (GetTickCount()>this->m_IpInfo[n].Time )

  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0001d	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00020	76 5e		 jbe	 SHORT $LN10@AddIp

; 48   : 			{
; 49   : 				this->m_IpInfo[n].IpUsed = FALSE;

  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN11@AddIp:

; 68   : 		{
; 69   : 			if (blank < 0)

  00028	85 ff		 test	 edi, edi
  0002a	79 02		 jns	 SHORT $LN13@AddIp

; 70   : 			{
; 71   : 				blank = n;	// Set Array

  0002c	8b fb		 mov	 edi, ebx
$LN13@AddIp:

; 42   : 	
; 43   : 	for (n=0;n<MAX_IP_CACHE;n++)

  0002e	43		 inc	 ebx
  0002f	83 c6 18	 add	 esi, 24			; 00000018H
  00032	81 fb d0 07 00
	00		 cmp	 ebx, 2000		; 000007d0H
  00038	7c d8		 jl	 SHORT $LL27@AddIp

; 72   : 			}
; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	if (blank >= 0 )

  0003a	85 ff		 test	 edi, edi
  0003c	0f 88 80 00 00
	00		 js	 $LN2@AddIp

; 77   : 	{
; 78   : 		strcpy(this->m_IpInfo[blank].IpAddress, ip);

  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	8b 45 08	 mov	 eax, DWORD PTR _ip$[ebp]
  00048	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0004b	8d 34 ca	 lea	 esi, DWORD PTR [edx+ecx*8]
  0004e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00051	2b d0		 sub	 edx, eax
$LL17@AddIp:
  00053	8a 08		 mov	 cl, BYTE PTR [eax]
  00055	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00058	40		 inc	 eax
  00059	84 c9		 test	 cl, cl
  0005b	75 f6		 jne	 SHORT $LL17@AddIp

; 79   : 
; 80   : 		this->m_IpInfo[blank].IpUsed = TRUE;

  0005d	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1

; 81   : 		
; 82   : 		this->m_IpInfo[blank].Time = GetTickCount()+ 30000;		

  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0006a	05 30 75 00 00	 add	 eax, 30000		; 00007530H
  0006f	5f		 pop	 edi
  00070	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00073	5e		 pop	 esi

; 83   : 		return TRUE;

  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	5b		 pop	 ebx

; 88   : 	}
; 89   : 
; 90   : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
$LN10@AddIp:

; 50   : 
; 51   : 				if(blank < 0)
; 52   : 				{
; 53   : 					blank = n;	// Set Array
; 54   : 				}
; 55   : 			}
; 56   : 			else if (this->m_IpInfo[n].IpAddress[0]==ip[0])	// Faster reduce

  00080	8a 56 f0	 mov	 dl, BYTE PTR [esi-16]
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _ip$[ebp]
  00086	8d 46 f0	 lea	 eax, DWORD PTR [esi-16]
  00089	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0008b	75 a1		 jne	 SHORT $LN13@AddIp

; 57   : 			{
; 58   : 				if (this->m_IpInfo[n].IpAddress[4]==ip[4])	// Faster Reduce

  0008d	8a 56 f4	 mov	 dl, BYTE PTR [esi-12]
  00090	3a 51 04	 cmp	 dl, BYTE PTR [ecx+4]
  00093	75 99		 jne	 SHORT $LN13@AddIp
$LL22@AddIp:

; 59   : 				{
; 60   : 					if (!strcmp(this->m_IpInfo[n].IpAddress, ip))

  00095	8a 10		 mov	 dl, BYTE PTR [eax]
  00097	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00099	75 1a		 jne	 SHORT $LN23@AddIp
  0009b	84 d2		 test	 dl, dl
  0009d	74 12		 je	 SHORT $LN24@AddIp
  0009f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000a2	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a5	75 0e		 jne	 SHORT $LN23@AddIp
  000a7	83 c0 02	 add	 eax, 2
  000aa	83 c1 02	 add	 ecx, 2
  000ad	84 d2		 test	 dl, dl
  000af	75 e4		 jne	 SHORT $LL22@AddIp
$LN24@AddIp:
  000b1	33 c0		 xor	 eax, eax
  000b3	eb 05		 jmp	 SHORT $LN25@AddIp
$LN23@AddIp:
  000b5	1b c0		 sbb	 eax, eax
  000b7	83 d8 ff	 sbb	 eax, -1
$LN25@AddIp:
  000ba	85 c0		 test	 eax, eax

; 61   : 					{
; 62   : 						return 0;
; 63   : 					}
; 64   : 				}
; 65   : 			}
; 66   : 		}
; 67   : 		else

  000bc	0f 85 6c ff ff
	ff		 jne	 $LN13@AddIp
$LN2@AddIp:
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi

; 84   : 	}
; 85   : 	else
; 86   : 	{
; 87   : 		return FALSE;

  000c4	33 c0		 xor	 eax, eax
  000c6	5b		 pop	 ebx

; 88   : 	}
; 89   : 
; 90   : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 04 00	 ret	 4
?AddIp@CIpCache@@QAEHPAD@Z ENDP				; CIpCache::AddIp
_TEXT	ENDS
PUBLIC	?DelIp@CIpCache@@QAEXPAD@Z			; CIpCache::DelIp
; Function compile flags: /Ogtp
;	COMDAT ?DelIp@CIpCache@@QAEXPAD@Z
_TEXT	SEGMENT
tv291 = -4						; size = 4
_ip$ = 8						; size = 4
?DelIp@CIpCache@@QAEXPAD@Z PROC				; CIpCache::DelIp, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 94   : 	for (int n=0; n<MAX_IP_CACHE;n++)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _ip$[ebp]
  00009	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0000c	c7 45 fc d0 07
	00 00		 mov	 DWORD PTR tv291[ebp], 2000 ; 000007d0H
$LL7@DelIp:

; 95   : 	{
; 96   : 		if (this->m_IpInfo[n].IpUsed != FALSE )	// Check if it is used

  00013	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00017	74 43		 je	 SHORT $LN6@DelIp

; 97   : 		{
; 98   : 			if (this->m_IpInfo[n].IpAddress[0] == ip[0])	// Fastest Discart

  00019	8a 06		 mov	 al, BYTE PTR [esi]
  0001b	3a 07		 cmp	 al, BYTE PTR [edi]
  0001d	75 3d		 jne	 SHORT $LN6@DelIp

; 99   : 			{
; 100  : 				if (this->m_IpInfo[n].IpAddress[4] == ip[4])	// Fastest Discard

  0001f	8a 4e 04	 mov	 cl, BYTE PTR [esi+4]
  00022	3a 4f 04	 cmp	 cl, BYTE PTR [edi+4]
  00025	75 35		 jne	 SHORT $LN6@DelIp

; 101  : 				{
; 102  : 					if (!strcmp(this->m_IpInfo[n].IpAddress , ip))	// Full Discard

  00027	8b cf		 mov	 ecx, edi
  00029	8b c6		 mov	 eax, esi
  0002b	eb 03 8d 49 00	 npad	 5
$LL12@DelIp:
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00034	75 1a		 jne	 SHORT $LN13@DelIp
  00036	84 d2		 test	 dl, dl
  00038	74 12		 je	 SHORT $LN14@DelIp
  0003a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0003d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00040	75 0e		 jne	 SHORT $LN13@DelIp
  00042	83 c0 02	 add	 eax, 2
  00045	83 c1 02	 add	 ecx, 2
  00048	84 d2		 test	 dl, dl
  0004a	75 e4		 jne	 SHORT $LL12@DelIp
$LN14@DelIp:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 05		 jmp	 SHORT $LN15@DelIp
$LN13@DelIp:
  00050	1b c0		 sbb	 eax, eax
  00052	83 d8 ff	 sbb	 eax, -1
$LN15@DelIp:
  00055	85 c0		 test	 eax, eax
  00057	75 03		 jne	 SHORT $LN6@DelIp

; 103  : 					{
; 104  : 						this->m_IpInfo[n].IpUsed = FALSE;	// Ip- Disconnected

  00059	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN6@DelIp:

; 94   : 	for (int n=0; n<MAX_IP_CACHE;n++)

  0005c	83 c6 18	 add	 esi, 24			; 00000018H
  0005f	ff 4d fc	 dec	 DWORD PTR tv291[ebp]
  00062	75 af		 jne	 SHORT $LL7@DelIp
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi

; 105  : 					}
; 106  : 				}
; 107  : 			}
; 108  : 		}
; 109  : 	}	// Iterator
; 110  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?DelIp@CIpCache@@QAEXPAD@Z ENDP				; CIpCache::DelIp
_TEXT	ENDS
PUBLIC	??0CIpCache@@QAE@XZ				; CIpCache::CIpCache
; Function compile flags: /Ogtp
;	COMDAT ??0CIpCache@@QAE@XZ
_TEXT	SEGMENT
??0CIpCache@@QAE@XZ PROC				; CIpCache::CIpCache, COMDAT
; _this$ = ecx

; 18   : {

  00000	8b d1		 mov	 edx, ecx
  00002	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7CIpCache@@6B@

; 19   : 	this->Init();	

  00008	e8 00 00 00 00	 call	 ?Init@CIpCache@@QAEXXZ	; CIpCache::Init

; 20   : }

  0000d	8b c2		 mov	 eax, edx
  0000f	c3		 ret	 0
??0CIpCache@@QAE@XZ ENDP				; CIpCache::CIpCache
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCIpCache@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCIpCache@@UAEPAXI@Z PROC				; CIpCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CIpCache@@UAE@XZ	; CIpCache::~CIpCache
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCIpCache@@UAEPAXI@Z ENDP				; CIpCache::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EIpCache@@YAXXZ
text$yc	SEGMENT
??__EIpCache@@YAXXZ PROC				; `dynamic initializer for 'IpCache'', COMDAT

; 14   : CIpCache IpCache;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  00005	e8 00 00 00 00	 call	 ??0CIpCache@@QAE@XZ	; CIpCache::CIpCache
  0000a	68 00 00 00 00	 push	 OFFSET ??__FIpCache@@YAXXZ ; `dynamic atexit destructor for 'IpCache''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EIpCache@@YAXXZ ENDP				; `dynamic initializer for 'IpCache''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FIpCache@@YAXXZ
text$yd	SEGMENT
??__FIpCache@@YAXXZ PROC				; `dynamic atexit destructor for 'IpCache'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  00005	e9 00 00 00 00	 jmp	 ??1CIpCache@@UAE@XZ	; CIpCache::~CIpCache
??__FIpCache@@YAXXZ ENDP				; `dynamic atexit destructor for 'IpCache''
text$yd	ENDS
PUBLIC	?IpCache@@3VCIpCache@@A				; IpCache
_BSS	SEGMENT
?IpCache@@3VCIpCache@@A DB 0bb84H DUP (?)		; IpCache
_BSS	ENDS
CRT$XCU	SEGMENT
_IpCache$initializer$ DD FLAT:??__EIpCache@@YAXXZ
CRT$XCU	ENDS
END
