; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\SetItemOption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
EXTRN	_isalnum:PROC
EXTRN	_isalpha:PROC
EXTRN	_atof:PROC
EXTRN	_isdigit:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_isspace:PROC
EXTRN	_fgetc:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
_BSS	SEGMENT
_CurrentToken DD 01H DUP (?)
_TokenNumber DD	01H DUP (?)
_SMDFile DD	01H DUP (?)
_TokenString DB	064H DUP (?)
; Function compile flags: /Ogtp
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\include\readscript.h
_BSS	ENDS
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _TokenString, 0
  00017	53		 push	 ebx
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL31@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	74 64		 je	 SHORT $LN39@GetToken

; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00038	75 31		 jne	 SHORT $LN30@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _fgetc
  00046	8a d8		 mov	 bl, al
  00048	83 c4 04	 add	 esp, 4
  0004b	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0004e	75 1b		 jne	 SHORT $LN30@GetToken
$LL24@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	80 fb ff	 cmp	 bl, -1
  00053	74 44		 je	 SHORT $LN39@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _fgetc
  00061	8a d8		 mov	 bl, al
  00063	83 c4 04	 add	 esp, 4
  00066	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00069	75 e5		 jne	 SHORT $LL24@GetToken
$LN30@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE
; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006b	0f be c3	 movsx	 eax, bl
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _isspace
  00074	83 c4 04	 add	 esp, 4
  00077	85 c0		 test	 eax, eax
  00079	75 a5		 jne	 SHORT $LL31@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  0007b	0f be c3	 movsx	 eax, bl
  0007e	8d 48 de	 lea	 ecx, DWORD PTR [eax-34]
  00081	56		 push	 esi
  00082	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00085	0f 87 2b 01 00
	00		 ja	 $LN6@GetToken
  0008b	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN46@GetToken[ecx]
  00092	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN50@GetToken[ecx*4]
$LN39@GetToken:

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)

  00099	b8 02 00 00 00	 mov	 eax, 2
  0009e	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN19@GetToken:

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000ad	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b2	e9 99 01 00 00	 jmp	 $LN48@GetToken
$LN18@GetToken:

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000b7	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000bc	e9 8f 01 00 00	 jmp	 $LN48@GetToken
$LN17@GetToken:

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000c1	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000c6	e9 85 01 00 00	 jmp	 $LN48@GetToken
$LN16@GetToken:

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  000cb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000d0	e9 7b 01 00 00	 jmp	 $LN48@GetToken
$LN15@GetToken:

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  000d5	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  000da	e9 71 01 00 00	 jmp	 $LN48@GetToken
$LN14@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile
  000e5	52		 push	 edx
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  000f1	50		 push	 eax
  000f2	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  000f5	e8 00 00 00 00	 call	 _getc
  000fa	8a d8		 mov	 bl, al
  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ff	80 fb ff	 cmp	 bl, -1
  00102	74 33		 je	 SHORT $LN12@GetToken
$LL13@GetToken:
  00104	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00107	74 15		 je	 SHORT $LN11@GetToken
  00109	0f be cb	 movsx	 ecx, bl
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 _isdigit
  00112	83 c4 04	 add	 esp, 4
  00115	85 c0		 test	 eax, eax
  00117	75 05		 jne	 SHORT $LN11@GetToken
  00119	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  0011c	75 19		 jne	 SHORT $LN12@GetToken
$LN11@GetToken:
  0011e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00124	88 1e		 mov	 BYTE PTR [esi], bl
  00126	52		 push	 edx

; 102  : 			p++;

  00127	46		 inc	 esi
  00128	e8 00 00 00 00	 call	 _getc
  0012d	8a d8		 mov	 bl, al
  0012f	83 c4 04	 add	 esp, 4
  00132	80 fb ff	 cmp	 bl, -1
  00135	75 cd		 jne	 SHORT $LL13@GetToken
$LN12@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = atof( TempString);	// Select the first Byte as Main ID

  00137	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0013a	50		 push	 eax
  0013b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0013e	e8 00 00 00 00	 call	 _atof
  00143	d9 1d 00 00 00
	00		 fstp	 DWORD PTR _TokenNumber
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi

; 106  : 		return CurrentToken  = NUMBER ;

  0014d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _CurrentToken, 1
  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN10@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  00171	51		 push	 ecx
  00172	be 00 00 00 00	 mov	 esi, OFFSET _TokenString
  00177	e8 00 00 00 00	 call	 _getc
  0017c	83 c4 04	 add	 esp, 4
  0017f	3c ff		 cmp	 al, -1
  00181	74 1e		 je	 SHORT $LN8@GetToken
$LL9@GetToken:
  00183	3c 22		 cmp	 al, 34			; 00000022H
  00185	0f 84 a1 00 00
	00		 je	 $LN7@GetToken
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 113  : 		{
; 114  : 			*p = ch;

  00191	88 06		 mov	 BYTE PTR [esi], al
  00193	52		 push	 edx

; 115  : 			p++;

  00194	46		 inc	 esi
  00195	e8 00 00 00 00	 call	 _getc
  0019a	83 c4 04	 add	 esp, 4
  0019d	3c ff		 cmp	 al, -1
  0019f	75 e2		 jne	 SHORT $LL9@GetToken
$LN8@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001a1	3c 22		 cmp	 al, 34			; 00000022H
  001a3	0f 84 83 00 00
	00		 je	 $LN7@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SMDFile
  001af	0f be d0	 movsx	 edx, al
  001b2	51		 push	 ecx
  001b3	52		 push	 edx

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  001b4	eb 6e		 jmp	 SHORT $LN49@GetToken
$LN6@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _isalpha
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 84 00 00
	00		 je	 $LN5@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  001cc	50		 push	 eax
  001cd	88 1d 00 00 00
	00		 mov	 BYTE PTR _TokenString, bl
  001d3	be 01 00 00 00	 mov	 esi, OFFSET _TokenString+1
  001d8	e8 00 00 00 00	 call	 _getc
  001dd	8a d8		 mov	 bl, al
  001df	83 c4 04	 add	 esp, 4
  001e2	80 fb ff	 cmp	 bl, -1
  001e5	74 33		 je	 SHORT $LN3@GetToken
$LL4@GetToken:
  001e7	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001ea	74 15		 je	 SHORT $LN2@GetToken
  001ec	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  001ef	74 10		 je	 SHORT $LN2@GetToken
  001f1	0f be cb	 movsx	 ecx, bl
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _isalnum
  001fa	83 c4 04	 add	 esp, 4
  001fd	85 c0		 test	 eax, eax
  001ff	74 19		 je	 SHORT $LN3@GetToken
$LN2@GetToken:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SMDFile

; 133  : 			{
; 134  : 				*p=ch;

  00207	88 1e		 mov	 BYTE PTR [esi], bl
  00209	52		 push	 edx

; 135  : 				p++;

  0020a	46		 inc	 esi
  0020b	e8 00 00 00 00	 call	 _getc
  00210	8a d8		 mov	 bl, al
  00212	83 c4 04	 add	 esp, 4
  00215	80 fb ff	 cmp	 bl, -1
  00218	75 cd		 jne	 SHORT $LL4@GetToken
$LN3@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _SMDFile
  0021f	0f be cb	 movsx	 ecx, bl
  00222	50		 push	 eax
  00223	51		 push	 ecx
$LN49@GetToken:
  00224	e8 00 00 00 00	 call	 _ungetc
  00229	83 c4 08	 add	 esp, 8
$LN7@GetToken:

; 140  : 			*p=0;

  0022c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0022f	5e		 pop	 esi

; 141  : 			CurrentToken=NAME;

  00230	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _CurrentToken, 0

; 142  : 			return CurrentToken;

  0023a	33 c0		 xor	 eax, eax
  0023c	5b		 pop	 ebx

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0023d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00240	33 cd		 xor	 ecx, ebp
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN5@GetToken:

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'

  0024b	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
$LN48@GetToken:

; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	5e		 pop	 esi
  00254	33 cd		 xor	 ecx, ebp
  00256	a3 00 00 00 00	 mov	 DWORD PTR _CurrentToken, eax
  0025b	5b		 pop	 ebx
  0025c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c3		 ret	 0
  00265	8d 49 00	 npad	 3
$LN50@GetToken:
  00268	00 00 00 00	 DD	 $LN10@GetToken
  0026c	00 00 00 00	 DD	 $LN19@GetToken
  00270	00 00 00 00	 DD	 $LN17@GetToken
  00274	00 00 00 00	 DD	 $LN14@GetToken
  00278	00 00 00 00	 DD	 $LN18@GetToken
  0027c	00 00 00 00	 DD	 $LN16@GetToken
  00280	00 00 00 00	 DD	 $LN15@GetToken
  00284	00 00 00 00	 DD	 $LN6@GetToken
$LN46@GetToken:
  00288	00		 DB	 0
  00289	01		 DB	 1
  0028a	07		 DB	 7
  0028b	07		 DB	 7
  0028c	07		 DB	 7
  0028d	07		 DB	 7
  0028e	07		 DB	 7
  0028f	07		 DB	 7
  00290	07		 DB	 7
  00291	07		 DB	 7
  00292	02		 DB	 2
  00293	03		 DB	 3
  00294	03		 DB	 3
  00295	07		 DB	 7
  00296	03		 DB	 3
  00297	03		 DB	 3
  00298	03		 DB	 3
  00299	03		 DB	 3
  0029a	03		 DB	 3
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	03		 DB	 3
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	07		 DB	 7
  002a1	04		 DB	 4
  002a2	07		 DB	 7
  002a3	07		 DB	 7
  002a4	07		 DB	 7
  002a5	07		 DB	 7
  002a6	07		 DB	 7
  002a7	07		 DB	 7
  002a8	07		 DB	 7
  002a9	07		 DB	 7
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	05		 DB	 5
  002e2	07		 DB	 7
  002e3	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
PUBLIC	??_7CSetItemOption@@6B@				; CSetItemOption::`vftable'
PUBLIC	??0CSetItemOption@@QAE@XZ			; CSetItemOption::CSetItemOption
PUBLIC	??_R4CSetItemOption@@6B@			; CSetItemOption::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSetItemOption@@@8			; CSetItemOption `RTTI Type Descriptor'
PUBLIC	??_R3CSetItemOption@@8				; CSetItemOption::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSetItemOption@@8				; CSetItemOption::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSetItemOption@@8			; CSetItemOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECSetItemOption@@UAEPAXI@Z:PROC		; CSetItemOption::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CSetItemOption@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\setitemoption.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CSetItemOption@@8 DD FLAT:??_R0?AVCSetItemOption@@@8 ; CSetItemOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CSetItemOption@@8
rdata$r	SEGMENT
??_R2CSetItemOption@@8 DD FLAT:??_R1A@?0A@EA@CSetItemOption@@8 ; CSetItemOption::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSetItemOption@@8
rdata$r	SEGMENT
??_R3CSetItemOption@@8 DD 00H				; CSetItemOption::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSetItemOption@@@8
_DATA	SEGMENT
??_R0?AVCSetItemOption@@@8 DD FLAT:??_7type_info@@6B@	; CSetItemOption `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSetItemOption@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSetItemOption@@6B@
rdata$r	SEGMENT
??_R4CSetItemOption@@6B@ DD 00H				; CSetItemOption::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSetItemOption@@@8
	DD	FLAT:??_R3CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_7CSetItemOption@@6B@
CONST	SEGMENT
??_7CSetItemOption@@6B@ DD FLAT:??_R4CSetItemOption@@6B@ ; CSetItemOption::`vftable'
	DD	FLAT:??_ECSetItemOption@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0CSetItemOption@@QAE@XZ
_TEXT	SEGMENT
??0CSetItemOption@@QAE@XZ PROC				; CSetItemOption::CSetItemOption, COMDAT
; _this$ = ecx

; 21   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSetItemOption@@6B@

; 22   : 	return;
; 23   : }

  00008	c3		 ret	 0
??0CSetItemOption@@QAE@XZ ENDP				; CSetItemOption::CSetItemOption
_TEXT	ENDS
PUBLIC	??1CSetItemOption@@UAE@XZ			; CSetItemOption::~CSetItemOption
; Function compile flags: /Ogtp
;	COMDAT ??1CSetItemOption@@UAE@XZ
_TEXT	SEGMENT
??1CSetItemOption@@UAE@XZ PROC				; CSetItemOption::~CSetItemOption, COMDAT
; _this$ = ecx

; 26   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSetItemOption@@6B@

; 27   : 	return;
; 28   : }

  00006	c3		 ret	 0
??1CSetItemOption@@UAE@XZ ENDP				; CSetItemOption::~CSetItemOption
_TEXT	ENDS
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z		; CSetItemOption::LoadTypeInfo
EXTRN	_fopen:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z PROC		; CSetItemOption::LoadTypeInfo, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 32   : 	int i;
; 33   : 	int Token;
; 34   : 
; 35   : 	SMDFile=fopen(filename,"r");

  00004	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000f	50		 push	 eax
  00010	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 36   : 	if (SMDFile == NULL )

  00020	85 c0		 test	 eax, eax
  00022	75 07		 jne	 SHORT $LN12@LoadTypeIn
  00024	5e		 pop	 esi

; 93   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN12@LoadTypeIn:

; 37   : 	{
; 38   : 		return 0;
; 39   : 	}
; 40   : 	memset(this->m_SetItemTypeInfo , -1, sizeof(this->m_SetItemTypeInfo) );

  0002b	68 00 80 02 00	 push	 163840			; 00028000H
  00030	83 c6 04	 add	 esi, 4
  00033	6a ff		 push	 -1
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	8b c6		 mov	 eax, esi
  00040	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
$LL11@LoadTypeIn:

; 41   : 	
; 42   : 	for ( i=0; i<MAX_ITEMS; i++)
; 43   : 	{
; 44   : 		this->m_SetItemTypeInfo[i].IsLoad = FALSE;

  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0004b	83 c0 14	 add	 eax, 20			; 00000014H
  0004e	49		 dec	 ecx
  0004f	75 f4		 jne	 SHORT $LL11@LoadTypeIn

; 45   : 	}
; 46   : 	
; 47   : 	while ( true )
; 48   : 	{
; 49   : 		int number;
; 50   : 		
; 51   : 		Token=GetToken();

  00051	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 52   : 		if (Token == END)

  00056	83 f8 02	 cmp	 eax, 2
  00059	0f 84 d9 00 00
	00		 je	 $LN27@LoadTypeIn
  0005f	53		 push	 ebx
  00060	57		 push	 edi
$LL8@LoadTypeIn:

; 53   : 		{
; 54   : 			break;
; 55   : 		}
; 56   : 
; 57   : 		if (Token == NUMBER)

  00061	83 f8 01	 cmp	 eax, 1
  00064	0f 85 be 00 00
	00		 jne	 $LN26@LoadTypeIn

; 58   : 		{
; 59   : 			number = TokenNumber;

  0006a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00070	e8 00 00 00 00	 call	 __ftol2_sse
  00075	8b f8		 mov	 edi, eax
$LL4@LoadTypeIn:

; 60   : 			
; 61   : 			while ( true )
; 62   : 			{
; 63   : 				int number2;
; 64   : 				LPSETITEM_TYPEINFO pointer;
; 65   : 
; 66   : 				Token = GetToken();

  00077	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 67   : 				number2=TokenNumber;

  0007c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00082	8b f0		 mov	 esi, eax
  00084	e8 00 00 00 00	 call	 __ftol2_sse

; 68   : 				if ( ( Token== 0) && (strcmp("end", &TokenString[0]) == 0))

  00089	85 f6		 test	 esi, esi
  0008b	75 33		 jne	 SHORT $LN2@LoadTypeIn
  0008d	ba 00 00 00 00	 mov	 edx, OFFSET _TokenString
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL22@LoadTypeIn:
  00097	8a 19		 mov	 bl, BYTE PTR [ecx]
  00099	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0009b	75 1a		 jne	 SHORT $LN23@LoadTypeIn
  0009d	84 db		 test	 bl, bl
  0009f	74 12		 je	 SHORT $LN24@LoadTypeIn
  000a1	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000a4	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  000a7	75 0e		 jne	 SHORT $LN23@LoadTypeIn
  000a9	83 c1 02	 add	 ecx, 2
  000ac	83 c2 02	 add	 edx, 2
  000af	84 db		 test	 bl, bl
  000b1	75 e4		 jne	 SHORT $LL22@LoadTypeIn
$LN24@LoadTypeIn:
  000b3	33 c9		 xor	 ecx, ecx
  000b5	eb 05		 jmp	 SHORT $LN25@LoadTypeIn
$LN23@LoadTypeIn:
  000b7	1b c9		 sbb	 ecx, ecx
  000b9	83 d9 ff	 sbb	 ecx, -1
$LN25@LoadTypeIn:
  000bc	85 c9		 test	 ecx, ecx
  000be	74 68		 je	 SHORT $LN26@LoadTypeIn
$LN2@LoadTypeIn:

; 69   : 				{
; 70   : 					break;
; 71   : 				}
; 72   : 				else
; 73   : 				{
; 74   : 					pointer = &this->m_SetItemTypeInfo[number*MAX_SUBTYPE_ITEMS+number2];

  000c0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c3	8b cf		 mov	 ecx, edi
  000c5	c1 e1 09	 shl	 ecx, 9
  000c8	03 c8		 add	 ecx, eax
  000ca	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  000cd	8d 74 8a 04	 lea	 esi, DWORD PTR [edx+ecx*4+4]

; 75   : 
; 76   : 					Token=GetToken();

  000d1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 77   : 					pointer->OptionIndex[0]=TokenNumber;

  000d6	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000dc	e8 00 00 00 00	 call	 __ftol2_sse
  000e1	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 78   : 					Token=GetToken();

  000e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 79   : 					pointer->OptionIndex[1]=TokenNumber;

  000e9	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  000ef	e8 00 00 00 00	 call	 __ftol2_sse
  000f4	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 80   : 					Token=GetToken();

  000f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 81   : 					pointer->ChaosMixLevel[0]=TokenNumber;

  000fc	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00102	e8 00 00 00 00	 call	 __ftol2_sse
  00107	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 82   : 					Token=GetToken();

  0010a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 83   : 					pointer->ChaosMixLevel[1]=TokenNumber;

  0010f	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00115	e8 00 00 00 00	 call	 __ftol2_sse
  0011a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 84   : 
; 85   : 					pointer->IsLoad=TRUE;

  0011d	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1

; 86   : 				}
; 87   : 			}

  00123	e9 4f ff ff ff	 jmp	 $LL4@LoadTypeIn
$LN26@LoadTypeIn:

; 45   : 	}
; 46   : 	
; 47   : 	while ( true )
; 48   : 	{
; 49   : 		int number;
; 50   : 		
; 51   : 		Token=GetToken();

  00128	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 52   : 		if (Token == END)

  0012d	83 f8 02	 cmp	 eax, 2
  00130	0f 85 2b ff ff
	ff		 jne	 $LL8@LoadTypeIn
  00136	5f		 pop	 edi
  00137	5b		 pop	 ebx
$LN27@LoadTypeIn:

; 88   : 		}
; 89   : 
; 90   : 	}
; 91   : 
; 92   : 	return TRUE;

  00138	b8 01 00 00 00	 mov	 eax, 1
  0013d	5e		 pop	 esi

; 93   : }

  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 04 00	 ret	 4
?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z ENDP		; CSetItemOption::LoadTypeInfo
_TEXT	ENDS
PUBLIC	?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z	; CSetItemOption::LoadOptionInfo
; Function compile flags: /Ogtp
;	COMDAT ?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv477 = -4						; size = 4
tv475 = -4						; size = 4
tv469 = -4						; size = 4
tv467 = -4						; size = 4
tv461 = -4						; size = 4
tv459 = -4						; size = 4
tv453 = -4						; size = 4
tv451 = -4						; size = 4
tv445 = -4						; size = 4
tv443 = -4						; size = 4
_filename$ = 8						; size = 4
tv480 = 10						; size = 2
tv472 = 10						; size = 2
tv464 = 10						; size = 2
tv456 = 10						; size = 2
tv448 = 10						; size = 2
?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z PROC		; CSetItemOption::LoadOptionInfo, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 98   : 	int i;
; 99   : 	int Token;
; 100  : 	
; 101  : 	SMDFile=fopen(filename, "r");

  00006	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00011	50		 push	 eax
  00012	89 5d f8	 mov	 DWORD PTR _this$[ebp], ebx
  00015	e8 00 00 00 00	 call	 _fopen
  0001a	83 c4 08	 add	 esp, 8
  0001d	a3 00 00 00 00	 mov	 DWORD PTR _SMDFile, eax

; 102  : 	if (SMDFile == NULL )

  00022	85 c0		 test	 eax, eax
  00024	75 07		 jne	 SHORT $LN15@LoadOption
  00026	5b		 pop	 ebx

; 219  : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN15@LoadOption:
  0002d	56		 push	 esi
  0002e	57		 push	 edi

; 103  : 	{
; 104  : 		return 0;
; 105  : 	}
; 106  : 	memset(&this->m_SetItemOptionInfo, 0, sizeof(this->m_SetItemOptionInfo));

  0002f	68 80 84 00 00	 push	 33920			; 00008480H
  00034	8d 8b 04 80 02
	00		 lea	 ecx, DWORD PTR [ebx+163844]
  0003a	6a 00		 push	 0
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	8d b3 6c 81 02
	00		 lea	 esi, DWORD PTR [ebx+164204]
  0004b	bf 50 00 00 00	 mov	 edi, 80			; 00000050H
$LL14@LoadOption:

; 107  : 
; 108  : 	for ( i=0;i<MAX_SETITEM_OPTION;i++)
; 109  : 	{
; 110  : 		memset(&this->m_SetItemOptionInfo[i].SetOptionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetOptionTable) );

  00050	6a 30		 push	 48			; 00000030H
  00052	8d 56 a0	 lea	 edx, DWORD PTR [esi-96]
  00055	6a ff		 push	 -1
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _memset

; 111  : 		memset(&this->m_SetItemOptionInfo[i].SetExPOptionTable, -1, sizeof(this->m_SetItemOptionInfo[0].SetExPOptionTable) );

  0005d	83 c8 ff	 or	 eax, -1
  00060	89 06		 mov	 DWORD PTR [esi], eax
  00062	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 112  : 		memset(&this->m_SetItemOptionInfo[i].SetFullOtionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetFullOtionTable) );

  00065	0b c0		 or	 eax, eax
  00067	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0006a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0006d	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00070	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00073	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	81 c6 a8 01 00
	00		 add	 esi, 424		; 000001a8H
  0007f	4f		 dec	 edi
  00080	75 ce		 jne	 SHORT $LL14@LoadOption
$LL11@LoadOption:

; 113  : 	}
; 114  : 
; 115  : 	while ( true )
; 116  : 	{
; 117  : 		Token=GetToken();

  00082	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 118  : 		int number=TokenNumber;

  00087	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0008d	8b f8		 mov	 edi, eax
  0008f	e8 00 00 00 00	 call	 __ftol2_sse
  00094	8b f0		 mov	 esi, eax

; 119  : 		
; 120  : 		if (Token==0 && strcmp("end", &TokenString[0]) == 0)

  00096	85 ff		 test	 edi, edi
  00098	75 37		 jne	 SHORT $LN38@LoadOption
  0009a	ba 00 00 00 00	 mov	 edx, OFFSET _TokenString
  0009f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL43@LoadOption:
  000a4	8a 01		 mov	 al, BYTE PTR [ecx]
  000a6	3a 02		 cmp	 al, BYTE PTR [edx]
  000a8	75 1a		 jne	 SHORT $LN31@LoadOption
  000aa	84 c0		 test	 al, al
  000ac	74 12		 je	 SHORT $LN32@LoadOption
  000ae	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000b1	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  000b4	75 0e		 jne	 SHORT $LN31@LoadOption
  000b6	83 c1 02	 add	 ecx, 2
  000b9	83 c2 02	 add	 edx, 2
  000bc	84 c0		 test	 al, al
  000be	75 e4		 jne	 SHORT $LL43@LoadOption
$LN32@LoadOption:
  000c0	33 c0		 xor	 eax, eax
  000c2	eb 05		 jmp	 SHORT $LN33@LoadOption
$LN31@LoadOption:
  000c4	1b c0		 sbb	 eax, eax
  000c6	83 d8 ff	 sbb	 eax, -1
$LN33@LoadOption:
  000c9	85 c0		 test	 eax, eax
  000cb	0f 84 d8 02 00
	00		 je	 $LN24@LoadOption
$LN38@LoadOption:

; 121  : 		{
; 122  : 			break;
; 123  : 		}
; 124  : 		else
; 125  : 		{
; 126  : 			LPSETITEM_OPTIONINFO p;
; 127  : 			p=&this->m_SetItemOptionInfo[number];

  000d1	69 f6 a8 01 00
	00		 imul	 esi, 424		; 000001a8H
  000d7	8d b4 1e 04 80
	02 00		 lea	 esi, DWORD PTR [esi+ebx+163844]

; 128  : 
; 129  : 			Token=GetToken();

  000de	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 130  : 			strcpy(&p->Name[0], &TokenString[0]);

  000e3	b8 00 00 00 00	 mov	 eax, OFFSET _TokenString
  000e8	8b d6		 mov	 edx, esi
  000ea	2b d0		 sub	 edx, eax
  000ec	8d 64 24 00	 npad	 4
$LL44@LoadOption:
  000f0	8a 08		 mov	 cl, BYTE PTR [eax]
  000f2	88 4c 02 04	 mov	 BYTE PTR [edx+eax+4], cl
  000f6	40		 inc	 eax
  000f7	84 c9		 test	 cl, cl
  000f9	75 f5		 jne	 SHORT $LL44@LoadOption

; 131  : 
; 132  : 			for (i=0;i<OPTION_TABLE_SIZE;i++)

  000fb	8d be 08 01 00
	00		 lea	 edi, DWORD PTR [esi+264]
  00101	bb 06 00 00 00	 mov	 ebx, 6
$LL45@LoadOption:

; 133  : 			{
; 134  : 				Token=GetToken();

  00106	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 135  : 				p->SetOptionTable[i][0] = TokenNumber;

  0010b	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00111	e8 00 00 00 00	 call	 __ftol2_sse
  00116	89 07		 mov	 DWORD PTR [edi], eax

; 136  : 				Token=GetToken();

  00118	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 137  : 				p->SetOptionTableValue[i][0] =TokenNumber;

  0011d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00123	e8 00 00 00 00	 call	 __ftol2_sse
  00128	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 138  : 
; 139  : 				Token=GetToken();

  0012b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 				p->SetOptionTable[i][1] = TokenNumber;

  00130	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00136	e8 00 00 00 00	 call	 __ftol2_sse
  0013b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 141  : 				Token=GetToken();

  0013e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 142  : 				p->SetOptionTableValue[i][1] =TokenNumber;

  00143	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00149	e8 00 00 00 00	 call	 __ftol2_sse

; 143  : 
; 144  : 				if ( (p->SetOptionTable[i][0] != -1) || (p->SetOptionTable[i][1] != -1) )

  0014e	83 3f ff	 cmp	 DWORD PTR [edi], -1
  00151	89 47 34	 mov	 DWORD PTR [edi+52], eax
  00154	75 06		 jne	 SHORT $LN3@LoadOption
  00156	83 7f 04 ff	 cmp	 DWORD PTR [edi+4], -1
  0015a	74 06		 je	 SHORT $LN6@LoadOption
$LN3@LoadOption:

; 145  : 				{
; 146  : 					p->SetOptionCount++;

  0015c	ff 86 04 01 00
	00		 inc	 DWORD PTR [esi+260]
$LN6@LoadOption:

; 131  : 
; 132  : 			for (i=0;i<OPTION_TABLE_SIZE;i++)

  00162	83 c7 08	 add	 edi, 8
  00165	4b		 dec	 ebx
  00166	75 9e		 jne	 SHORT $LL45@LoadOption

; 147  : 				}
; 148  : 			}
; 149  : 			
; 150  : 			// Special Set Item Options
; 151  : 			Token=GetToken();

  00168	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 152  : 			p->SetExPOptionTable[0]  = TokenNumber;

  0016d	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00173	e8 00 00 00 00	 call	 __ftol2_sse
  00178	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax

; 153  : 			Token=GetToken();

  0017e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 154  : 			p->SetExPOptionTableValue[0] = TokenNumber;

  00183	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00189	e8 00 00 00 00	 call	 __ftol2_sse

; 155  : 
; 156  : 			if ( p->SetExPOptionTable[0] != -1)

  0018e	83 cf ff	 or	 edi, -1
  00191	89 86 70 01 00
	00		 mov	 DWORD PTR [esi+368], eax
  00197	39 be 68 01 00
	00		 cmp	 DWORD PTR [esi+360], edi
  0019d	74 06		 je	 SHORT $LN40@LoadOption

; 157  : 			{
; 158  : 				p->SetOptionCount ++;

  0019f	ff 86 04 01 00
	00		 inc	 DWORD PTR [esi+260]
$LN40@LoadOption:

; 159  : 			}
; 160  : 
; 161  : 			Token=GetToken();

  001a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 162  : 			p->SetExPOptionTable[1]  = TokenNumber;

  001aa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001b0	e8 00 00 00 00	 call	 __ftol2_sse
  001b5	89 86 6c 01 00
	00		 mov	 DWORD PTR [esi+364], eax

; 163  : 			Token=GetToken();

  001bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 164  : 			p->SetExPOptionTableValue[1] = TokenNumber;

  001c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001c6	e8 00 00 00 00	 call	 __ftol2_sse
  001cb	89 86 74 01 00
	00		 mov	 DWORD PTR [esi+372], eax

; 165  : 
; 166  : 			if ( p->SetExPOptionTable[1] != -1)

  001d1	39 be 6c 01 00
	00		 cmp	 DWORD PTR [esi+364], edi
  001d7	74 06		 je	 SHORT $LN41@LoadOption

; 167  : 			{
; 168  : 				p->SetOptionCount ++;

  001d9	ff 86 04 01 00
	00		 inc	 DWORD PTR [esi+260]
$LN41@LoadOption:

; 169  : 			}
; 170  : 			
; 171  : 			// Full Type Set Item
; 172  : 			Token=GetToken();

  001df	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 173  : 			p->SetFullOtionTable[0]=TokenNumber;

  001e4	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  001ea	e8 00 00 00 00	 call	 __ftol2_sse
  001ef	89 86 78 01 00
	00		 mov	 DWORD PTR [esi+376], eax

; 174  : 			Token=GetToken();

  001f5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 175  : 			p->SetFullOtionTableValue[0]=TokenNumber;

  001fa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00200	e8 00 00 00 00	 call	 __ftol2_sse
  00205	89 86 8c 01 00
	00		 mov	 DWORD PTR [esi+396], eax

; 176  : 
; 177  : 			Token=GetToken();

  0020b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 178  : 			p->SetFullOtionTable[1]=TokenNumber;

  00210	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00216	e8 00 00 00 00	 call	 __ftol2_sse
  0021b	89 86 7c 01 00
	00		 mov	 DWORD PTR [esi+380], eax

; 179  : 			Token=GetToken();

  00221	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 180  : 			p->SetFullOtionTableValue[1]=TokenNumber;

  00226	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0022c	e8 00 00 00 00	 call	 __ftol2_sse
  00231	89 86 90 01 00
	00		 mov	 DWORD PTR [esi+400], eax

; 181  : 
; 182  : 			Token=GetToken();

  00237	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 183  : 			p->SetFullOtionTable[2]=TokenNumber;

  0023c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00242	e8 00 00 00 00	 call	 __ftol2_sse
  00247	89 86 80 01 00
	00		 mov	 DWORD PTR [esi+384], eax

; 184  : 			Token=GetToken();

  0024d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 185  : 			p->SetFullOtionTableValue[2]=TokenNumber;

  00252	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00258	e8 00 00 00 00	 call	 __ftol2_sse
  0025d	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax

; 186  : 
; 187  : 			Token=GetToken();

  00263	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 188  : 			p->SetFullOtionTable[3]=TokenNumber;

  00268	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0026e	e8 00 00 00 00	 call	 __ftol2_sse
  00273	89 86 84 01 00
	00		 mov	 DWORD PTR [esi+388], eax

; 189  : 			Token=GetToken();

  00279	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 190  : 			p->SetFullOtionTableValue[3]=TokenNumber;

  0027e	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00284	e8 00 00 00 00	 call	 __ftol2_sse
  00289	89 86 98 01 00
	00		 mov	 DWORD PTR [esi+408], eax

; 191  : 
; 192  : 			Token=GetToken();

  0028f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 193  : 			p->SetFullOtionTable[4]=TokenNumber;

  00294	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0029a	e8 00 00 00 00	 call	 __ftol2_sse
  0029f	89 86 88 01 00
	00		 mov	 DWORD PTR [esi+392], eax

; 194  : 			Token=GetToken();

  002a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 195  : 			p->SetFullOtionTableValue[4]=TokenNumber;

  002aa	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002b0	e8 00 00 00 00	 call	 __ftol2_sse
  002b5	89 86 9c 01 00
	00		 mov	 DWORD PTR [esi+412], eax

; 196  : 
; 197  : 			// Save Character Class Disponibility
; 198  : 			Token=GetToken();

  002bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 199  : 			p->RequireClass[CLASS_WIZARD]=TokenNumber;

  002c0	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002c6	d9 7d 0a	 fnstcw	 WORD PTR tv480[ebp]
  002c9	0f b7 45 0a	 movzx	 eax, WORD PTR tv480[ebp]
  002cd	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002d2	89 45 fc	 mov	 DWORD PTR tv477[ebp], eax
  002d5	d9 6d fc	 fldcw	 WORD PTR tv477[ebp]
  002d8	db 5d fc	 fistp	 DWORD PTR tv475[ebp]
  002db	0f b6 55 fc	 movzx	 edx, BYTE PTR tv475[ebp]
  002df	88 96 a0 01 00
	00		 mov	 BYTE PTR [esi+416], dl
  002e5	d9 6d 0a	 fldcw	 WORD PTR tv480[ebp]

; 200  : 
; 201  : 			Token=GetToken();

  002e8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 202  : 			p->RequireClass[CLASS_KNIGHT]=TokenNumber;

  002ed	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  002f3	d9 7d 0a	 fnstcw	 WORD PTR tv472[ebp]
  002f6	0f b7 45 0a	 movzx	 eax, WORD PTR tv472[ebp]
  002fa	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  002ff	89 45 fc	 mov	 DWORD PTR tv469[ebp], eax
  00302	d9 6d fc	 fldcw	 WORD PTR tv469[ebp]
  00305	db 5d fc	 fistp	 DWORD PTR tv467[ebp]
  00308	0f b6 45 fc	 movzx	 eax, BYTE PTR tv467[ebp]
  0030c	88 86 a1 01 00
	00		 mov	 BYTE PTR [esi+417], al
  00312	d9 6d 0a	 fldcw	 WORD PTR tv472[ebp]

; 203  : 
; 204  : 			Token=GetToken();

  00315	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 205  : 			p->RequireClass[CLASS_ELF]=TokenNumber;

  0031a	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00320	d9 7d 0a	 fnstcw	 WORD PTR tv464[ebp]
  00323	0f b7 45 0a	 movzx	 eax, WORD PTR tv464[ebp]
  00327	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0032c	89 45 fc	 mov	 DWORD PTR tv461[ebp], eax
  0032f	d9 6d fc	 fldcw	 WORD PTR tv461[ebp]
  00332	db 5d fc	 fistp	 DWORD PTR tv459[ebp]
  00335	8a 4d fc	 mov	 cl, BYTE PTR tv459[ebp]
  00338	88 8e a2 01 00
	00		 mov	 BYTE PTR [esi+418], cl
  0033e	d9 6d 0a	 fldcw	 WORD PTR tv464[ebp]

; 206  : 
; 207  : 			Token=GetToken();

  00341	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 208  : 			p->RequireClass[CLASS_MAGUMSA]=TokenNumber;

  00346	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  0034c	d9 7d 0a	 fnstcw	 WORD PTR tv456[ebp]
  0034f	0f b7 45 0a	 movzx	 eax, WORD PTR tv456[ebp]
  00353	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  00358	89 45 fc	 mov	 DWORD PTR tv453[ebp], eax
  0035b	d9 6d fc	 fldcw	 WORD PTR tv453[ebp]
  0035e	db 5d fc	 fistp	 DWORD PTR tv451[ebp]
  00361	0f b6 55 fc	 movzx	 edx, BYTE PTR tv451[ebp]
  00365	d9 6d 0a	 fldcw	 WORD PTR tv456[ebp]
  00368	88 96 a3 01 00
	00		 mov	 BYTE PTR [esi+419], dl

; 209  : 
; 210  : 			Token=GetToken();

  0036e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 211  : 			p->RequireClass[CLASS_DARKLORD]=TokenNumber;
; 212  : 			
; 213  : 			// Active SetItem
; 214  : 			p->IsLoad=TRUE;			
; 215  : 		}
; 216  : 	}

  00373	8b 5d f8	 mov	 ebx, DWORD PTR _this$[ebp]
  00376	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  0037c	d9 05 00 00 00
	00		 fld	 DWORD PTR _TokenNumber
  00382	d9 7d 0a	 fnstcw	 WORD PTR tv448[ebp]
  00385	0f b7 45 0a	 movzx	 eax, WORD PTR tv448[ebp]
  00389	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  0038e	89 45 fc	 mov	 DWORD PTR tv445[ebp], eax
  00391	d9 6d fc	 fldcw	 WORD PTR tv445[ebp]
  00394	db 5d fc	 fistp	 DWORD PTR tv443[ebp]
  00397	0f b6 45 fc	 movzx	 eax, BYTE PTR tv443[ebp]
  0039b	88 86 a4 01 00
	00		 mov	 BYTE PTR [esi+420], al
  003a1	d9 6d 0a	 fldcw	 WORD PTR tv448[ebp]
  003a4	e9 d9 fc ff ff	 jmp	 $LL11@LoadOption
$LN24@LoadOption:
  003a9	5f		 pop	 edi
  003aa	5e		 pop	 esi

; 217  : 
; 218  : 	return 1;

  003ab	b8 01 00 00 00	 mov	 eax, 1
  003b0	5b		 pop	 ebx

; 219  : }

  003b1	8b e5		 mov	 esp, ebp
  003b3	5d		 pop	 ebp
  003b4	c2 04 00	 ret	 4
?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z ENDP		; CSetItemOption::LoadOptionInfo
_TEXT	ENDS
PUBLIC	??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@ ; `string'
PUBLIC	?IsSetItem@CSetItemOption@@QAEHH@Z		; CSetItemOption::IsSetItem
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
;	COMDAT ??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@
CONST	SEGMENT
??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@ DB 'IsSetIte'
	DB	'm Check error: (itemnum:%d)', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?IsSetItem@CSetItemOption@@QAEHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
?IsSetItem@CSetItemOption@@QAEHH@Z PROC			; CSetItemOption::IsSetItem, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 223  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  00006	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  0000b	77 0b		 ja	 SHORT $LN1@IsSetItem

; 227  : 	}
; 228  : 	return this->m_SetItemTypeInfo[itemnum].IsLoad ;

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]

; 229  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN1@IsSetItem:

; 224  : 	{
; 225  : 		LogAdd(LOG_BLACK, "IsSetItem Check error: (itemnum:%d)", itemnum);

  00018	50		 push	 eax
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@
  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 226  : 		return 0;

  00028	33 c0		 xor	 eax, eax

; 229  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?IsSetItem@CSetItemOption@@QAEHH@Z ENDP			; CSetItemOption::IsSetItem
_TEXT	ENDS
PUBLIC	??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@ ; `string'
PUBLIC	??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@ ; `string'
PUBLIC	?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z	; CSetItemOption::GetOptionTableIndex
;	COMDAT ??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@
CONST	SEGMENT
??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@ DB 'GetOptionTabl'
	DB	'eIndex Check error: (itemnum:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@
CONST	SEGMENT
??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@ DB 'GetOptionTable'
	DB	'Index setoption Check error: (itemnum:%d)', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
_setoption$ = 12					; size = 4
?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z PROC	; CSetItemOption::GetOptionTableIndex, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  00006	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  0000b	77 3d		 ja	 SHORT $LN3@GetOptionT

; 237  : 	}
; 238  : 
; 239  : 	if (setoption != 1 && setoption != 2)

  0000d	8b 55 0c	 mov	 edx, DWORD PTR _setoption$[ebp]
  00010	83 fa 01	 cmp	 edx, 1
  00013	74 1c		 je	 SHORT $LN2@GetOptionT
  00015	83 fa 02	 cmp	 edx, 2
  00018	74 17		 je	 SHORT $LN2@GetOptionT

; 240  : 	{
; 241  : 		LogAdd(LOG_BLACK, "GetOptionTableIndex setoption Check error: (itemnum:%d)", itemnum);

  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@
  00020	6a 00		 push	 0
  00022	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	83 c8 ff	 or	 eax, -1

; 251  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN2@GetOptionT:
  00031	56		 push	 esi

; 242  : 		return -1;
; 243  : 	}
; 244  : 
; 245  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  00032	8d 34 80	 lea	 esi, DWORD PTR [eax+eax*4]
  00035	83 7c b1 04 00	 cmp	 DWORD PTR [ecx+esi*4+4], 0
  0003a	5e		 pop	 esi

; 246  : 	{
; 247  : 		return -1;

  0003b	74 1d		 je	 SHORT $LN8@GetOptionT

; 248  : 	}
; 249  : 
; 250  : 	return this->m_SetItemTypeInfo[itemnum].OptionIndex[setoption-1];

  0003d	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00040	03 d0		 add	 edx, eax
  00042	8b 44 91 04	 mov	 eax, DWORD PTR [ecx+edx*4+4]

; 251  : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN3@GetOptionT:

; 234  : 	{
; 235  : 		LogAdd(LOG_BLACK, "GetOptionTableIndex Check error: (itemnum:%d)", itemnum);

  0004a	50		 push	 eax
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@
  00050	6a 00		 push	 0
  00052	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@GetOptionT:

; 236  : 		return -1;

  0005a	83 c8 ff	 or	 eax, -1

; 251  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z ENDP	; CSetItemOption::GetOptionTableIndex
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@ ; `string'
PUBLIC	?GetSetOptionName@CSetItemOption@@QAEPADH@Z	; CSetItemOption::GetSetOptionName
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
CONST	SEGMENT
??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@ DB 'GetSetOpt'
	DB	'ionName Check error: (itemnum:%d)', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetSetOptionName@CSetItemOption@@QAEPADH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
?GetSetOptionName@CSetItemOption@@QAEPADH@Z PROC	; CSetItemOption::GetSetOptionName, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  : 	if ( optionindex < 0 || optionindex > MAX_SETITEM_OPTION-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  00006	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00009	77 1a		 ja	 SHORT $LN2@GetSetOpti

; 261  : 	}
; 262  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad   ==0)

  0000b	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  00011	03 c1		 add	 eax, ecx
  00013	83 b8 04 80 02
	00 00		 cmp	 DWORD PTR [eax+163844], 0

; 263  : 	{
; 264  : 		return "";

  0001a	74 19		 je	 SHORT $LN6@GetSetOpti

; 265  : 	}
; 266  : 	return &this->m_SetItemOptionInfo[optionindex].Name[0];

  0001c	05 08 80 02 00	 add	 eax, 163848		; 00028008H

; 267  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN2@GetSetOpti:

; 258  : 	{
; 259  : 		LogAdd(LOG_BLACK, "GetSetOptionName Check error: (itemnum:%d)", optionindex);

  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@GetSetOpti:

; 260  : 		return "";

  00035	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 267  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?GetSetOptionName@CSetItemOption@@QAEPADH@Z ENDP	; CSetItemOption::GetSetOptionName
_TEXT	ENDS
PUBLIC	?GetSetOptionName@CSetItemOption@@QAEPADHH@Z	; CSetItemOption::GetSetOptionName
; Function compile flags: /Ogtp
;	COMDAT ?GetSetOptionName@CSetItemOption@@QAEPADHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
_settype$ = 12						; size = 4
?GetSetOptionName@CSetItemOption@@QAEPADHH@Z PROC	; CSetItemOption::GetSetOptionName, COMDAT
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  : 	int optionindex;
; 277  : 
; 278  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  00006	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  0000b	77 35		 ja	 SHORT $LN5@GetSetOpti@2

; 282  : 	}
; 283  : 
; 284  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  0000d	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00010	83 7c 91 04 00	 cmp	 DWORD PTR [ecx+edx*4+4], 0

; 285  : 	{
; 286  : 		return "";

  00015	74 3b		 je	 SHORT $LN9@GetSetOpti@2

; 287  : 	}
; 288  : 	
; 289  : 	optionindex= this->m_SetItemTypeInfo[itemnum].OptionIndex[settype-1];

  00017	8b 55 0c	 mov	 edx, DWORD PTR _settype$[ebp]
  0001a	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  0001d	03 d0		 add	 edx, eax
  0001f	8b 44 91 04	 mov	 eax, DWORD PTR [ecx+edx*4+4]

; 290  : 	
; 291  : 	if (optionindex<0 || optionindex > MAX_SETITEM_OPTION-1)

  00023	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00026	77 1a		 ja	 SHORT $LN5@GetSetOpti@2

; 292  : 	{	
; 293  : 		LogAdd(LOG_BLACK, "GetSetOptionName Check error: (itemnum:%d)", optionindex);
; 294  : 		return "";
; 295  : 	}
; 296  : 
; 297  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad  == 0)

  00028	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0002e	03 c1		 add	 eax, ecx
  00030	83 b8 04 80 02
	00 00		 cmp	 DWORD PTR [eax+163844], 0

; 298  : 	{
; 299  : 		return "";

  00037	74 19		 je	 SHORT $LN9@GetSetOpti@2

; 300  : 	}
; 301  : 
; 302  : 	return &this->m_SetItemOptionInfo[optionindex].Name[0];

  00039	05 08 80 02 00	 add	 eax, 163848		; 00028008H

; 303  : }

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
$LN5@GetSetOpti@2:

; 279  : 	{
; 280  : 		LogAdd(LOG_BLACK, "GetSetOptionName Check error: (itemnum:%d)", itemnum);

  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@GetSetOpti@2:

; 281  : 		return "";

  00052	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 303  : }

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?GetSetOptionName@CSetItemOption@@QAEPADHH@Z ENDP	; CSetItemOption::GetSetOptionName
_TEXT	ENDS
PUBLIC	??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@ ; `string'
PUBLIC	?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z	; CSetItemOption::GetMaxSetOptionCount
;	COMDAT ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
CONST	SEGMENT
??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@ DB 'GetMaxOpti'
	DB	'onCount Check error: (itemnum:%d)', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z PROC	; CSetItemOption::GetMaxSetOptionCount, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 391  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  00006	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00009	77 1b		 ja	 SHORT $LN2@GetMaxSetO

; 395  : 	}
; 396  : 
; 397  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  0000b	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  00011	83 bc 08 04 80
	02 00 00	 cmp	 DWORD PTR [eax+ecx+163844], 0

; 398  : 	{
; 399  : 		return -1;

  00019	74 1b		 je	 SHORT $LN6@GetMaxSetO

; 400  : 	}
; 401  : 
; 402  : 	return this->m_SetItemOptionInfo[optionindex].SetOptionCount;

  0001b	8b 84 08 08 81
	02 00		 mov	 eax, DWORD PTR [eax+ecx+164104]

; 403  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN2@GetMaxSetO:

; 392  : 	{
; 393  : 		LogAdd(LOG_BLACK, "GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@GetMaxSetO:

; 394  : 		return -1;

  00036	83 c8 ff	 or	 eax, -1

; 403  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z ENDP	; CSetItemOption::GetMaxSetOptionCount
_TEXT	ENDS
PUBLIC	?IsRequireClass@CSetItemOption@@QAEHHHH@Z	; CSetItemOption::IsRequireClass
; Function compile flags: /Ogtp
;	COMDAT ?IsRequireClass@CSetItemOption@@QAEHHHH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
_Class$ = 12						; size = 4
_ChangeUP$ = 16						; size = 4
?IsRequireClass@CSetItemOption@@QAEHHHH@Z PROC		; CSetItemOption::IsRequireClass, COMDAT
; _this$ = ecx

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 510  : 	int requireclass;
; 511  : 	
; 512  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  00006	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00009	77 3c		 ja	 SHORT $LN7@IsRequireC

; 516  : 	}
; 517  : 
; 518  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  0000b	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  00011	83 bc 08 04 80
	02 00 00	 cmp	 DWORD PTR [eax+ecx+163844], 0

; 519  : 	{
; 520  : 		return 0;

  00019	74 3c		 je	 SHORT $LN11@IsRequireC

; 521  : 	}
; 522  : 
; 523  : 	if ( Class <0 || Class > MAX_TYPE_PLAYER-1)

  0001b	8b 55 0c	 mov	 edx, DWORD PTR _Class$[ebp]
  0001e	83 fa 04	 cmp	 edx, 4
  00021	77 34		 ja	 SHORT $LN11@IsRequireC

; 524  : 	{
; 525  : 		return 0;
; 526  : 	}
; 527  : 
; 528  : 	requireclass= this->m_SetItemOptionInfo[optionindex].RequireClass[Class];

  00023	03 c2		 add	 eax, edx
  00025	0f b6 84 08 a4
	81 02 00	 movzx	 eax, BYTE PTR [eax+ecx+164260]

; 529  : 
; 530  : 	if (requireclass == 0)

  0002d	85 c0		 test	 eax, eax

; 531  : 	{
; 532  : 		return 0;

  0002f	74 26		 je	 SHORT $LN11@IsRequireC

; 533  : 	}
; 534  : 
; 535  : 	if (requireclass > 1)

  00031	83 f8 01	 cmp	 eax, 1
  00034	7e 08		 jle	 SHORT $LN1@IsRequireC

; 536  : 	{
; 537  : 		if (requireclass != ChangeUP+1)

  00036	8b 4d 10	 mov	 ecx, DWORD PTR _ChangeUP$[ebp]
  00039	41		 inc	 ecx
  0003a	3b c1		 cmp	 eax, ecx

; 538  : 		{
; 539  : 			return 0;

  0003c	75 19		 jne	 SHORT $LN11@IsRequireC
$LN1@IsRequireC:

; 540  : 		}
; 541  : 	}
; 542  : 	return 1;

  0003e	b8 01 00 00 00	 mov	 eax, 1

; 543  : }

  00043	5d		 pop	 ebp
  00044	c2 0c 00	 ret	 12			; 0000000cH
$LN7@IsRequireC:

; 513  : 	{
; 514  : 		LogAdd(LOG_BLACK, "GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@IsRequireC:

; 515  : 		return 0;

  00057	33 c0		 xor	 eax, eax

; 543  : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?IsRequireClass@CSetItemOption@@QAEHHHH@Z ENDP		; CSetItemOption::IsRequireClass
_TEXT	ENDS
PUBLIC	??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@ ; `string'
PUBLIC	?CheckMixContition@CSetItemOption@@QAEHHH@Z	; CSetItemOption::CheckMixContition
;	COMDAT ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
CONST	SEGMENT
??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@ DB 'MakeSetOp'
	DB	'tion Check error: (itemnum:%d)', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CheckMixContition@CSetItemOption@@QAEHHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
_mixitemlevel$ = 12					; size = 4
?CheckMixContition@CSetItemOption@@QAEHHH@Z PROC	; CSetItemOption::CheckMixContition, COMDAT
; _this$ = ecx

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 549  : 	if (mixitemlevel == -1)

  00003	8b 55 0c	 mov	 edx, DWORD PTR _mixitemlevel$[ebp]
  00006	83 fa ff	 cmp	 edx, -1

; 550  : 	{
; 551  : 		return 0;

  00009	74 3a		 je	 SHORT $LN9@CheckMixCo

; 552  : 	}
; 553  : 
; 554  : 	if ( itemnum <0 || itemnum > MAX_ITEMS-1)

  0000b	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  0000e	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  00013	77 20		 ja	 SHORT $LN4@CheckMixCo

; 558  : 	}
; 559  : 
; 560  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == 0)

  00015	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00018	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  0001d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 561  : 	{
; 562  : 		return 0;

  00020	74 23		 je	 SHORT $LN9@CheckMixCo

; 563  : 	}
; 564  : 
; 565  : 	if (this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == mixitemlevel || this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1] == mixitemlevel)

  00022	39 50 10	 cmp	 DWORD PTR [eax+16], edx
  00025	74 05		 je	 SHORT $LN1@CheckMixCo
  00027	39 50 14	 cmp	 DWORD PTR [eax+20], edx

; 568  : 	}
; 569  : 
; 570  : 	return 0;

  0002a	75 19		 jne	 SHORT $LN9@CheckMixCo
$LN1@CheckMixCo:

; 566  : 	{
; 567  : 		return 1;

  0002c	b8 01 00 00 00	 mov	 eax, 1

; 571  : }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN4@CheckMixCo:

; 555  : 	{
; 556  : 		LogAdd(LOG_BLACK, "MakeSetOption Check error: (itemnum:%d)", itemnum);

  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@CheckMixCo:

; 557  : 		return 0;

  00045	33 c0		 xor	 eax, eax

; 571  : }

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
?CheckMixContition@CSetItemOption@@QAEHHH@Z ENDP	; CSetItemOption::CheckMixContition
_TEXT	ENDS
PUBLIC	?MakeSetOption@CSetItemOption@@QAEHHH@Z		; CSetItemOption::MakeSetOption
EXTRN	_rand:PROC
; Function compile flags: /Ogtp
;	COMDAT ?MakeSetOption@CSetItemOption@@QAEHHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
_mixitemlevel$ = 12					; size = 4
?MakeSetOption@CSetItemOption@@QAEHHH@Z PROC		; CSetItemOption::MakeSetOption, COMDAT
; _this$ = ecx

; 574  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 575  : 	if ( itemnum <0 || itemnum > MAX_ITEMS-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  00006	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  0000b	77 4e		 ja	 SHORT $LN7@MakeSetOpt

; 579  : 	}
; 580  : 
; 581  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  00015	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 582  : 	{
; 583  : 		return 0;

  00018	74 51		 je	 SHORT $LN12@MakeSetOpt

; 584  : 	}
; 585  : 
; 586  : 	if (this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1])

  0001a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00020	3b c8		 cmp	 ecx, eax
  00022	75 16		 jne	 SHORT $LN5@MakeSetOpt

; 587  : 	{
; 588  : 		return (rand() % 2) +1;

  00024	e8 00 00 00 00	 call	 _rand
  00029	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0002e	79 05		 jns	 SHORT $LN11@MakeSetOpt
  00030	48		 dec	 eax
  00031	83 c8 fe	 or	 eax, -2			; fffffffeH
  00034	40		 inc	 eax
$LN11@MakeSetOpt:
  00035	40		 inc	 eax

; 595  : 	{
; 596  : 		return 2;
; 597  : 	}
; 598  : 
; 599  : 	return 0;
; 600  : }

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN5@MakeSetOpt:

; 589  : 	}
; 590  : 	else if ( this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == mixitemlevel )

  0003a	8b 55 0c	 mov	 edx, DWORD PTR _mixitemlevel$[ebp]
  0003d	3b ca		 cmp	 ecx, edx
  0003f	75 09		 jne	 SHORT $LN3@MakeSetOpt

; 591  : 	{
; 592  : 		return 1;

  00041	b8 01 00 00 00	 mov	 eax, 1

; 595  : 	{
; 596  : 		return 2;
; 597  : 	}
; 598  : 
; 599  : 	return 0;
; 600  : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN3@MakeSetOpt:

; 593  : 	}
; 594  : 	else if ( this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1] == mixitemlevel )

  0004a	33 c9		 xor	 ecx, ecx
  0004c	3b c2		 cmp	 eax, edx
  0004e	0f 95 c1	 setne	 cl
  00051	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00054	83 e0 02	 and	 eax, 2

; 595  : 	{
; 596  : 		return 2;
; 597  : 	}
; 598  : 
; 599  : 	return 0;
; 600  : }

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
$LN7@MakeSetOpt:

; 576  : 	{
; 577  : 		LogAdd(LOG_BLACK, "MakeSetOption Check error: (itemnum:%d)", itemnum);

  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@MakeSetOpt:

; 578  : 		return 0;

  0006b	33 c0		 xor	 eax, eax

; 595  : 	{
; 596  : 		return 2;
; 597  : 	}
; 598  : 
; 599  : 	return 0;
; 600  : }

  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?MakeSetOption@CSetItemOption@@QAEHHH@Z ENDP		; CSetItemOption::MakeSetOption
_TEXT	ENDS
PUBLIC	?GenRandomItemNum@CSetItemOption@@QAEHXZ	; CSetItemOption::GenRandomItemNum
EXTRN	?g_MaxItemIndexOfEachItemType@@3PAHA:BYTE	; g_MaxItemIndexOfEachItemType
; Function compile flags: /Ogtp
;	COMDAT ?GenRandomItemNum@CSetItemOption@@QAEHXZ
_TEXT	SEGMENT
?GenRandomItemNum@CSetItemOption@@QAEHXZ PROC		; CSetItemOption::GenRandomItemNum, COMDAT
; _this$ = ecx

; 603  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx
$LL4@GenRandomI:

; 604  : 	int iItemIndex;
; 605  : 	do
; 606  : 	{
; 607  : 		int type = (rand()%MAX_TYPE_ITEMS);

  00005	e8 00 00 00 00	 call	 _rand
  0000a	8b f0		 mov	 esi, eax
  0000c	81 e6 0f 00 00
	80		 and	 esi, -2147483633	; 8000000fH
  00012	79 05		 jns	 SHORT $LN12@GenRandomI
  00014	4e		 dec	 esi
  00015	83 ce f0	 or	 esi, -16		; fffffff0H
  00018	46		 inc	 esi
$LN12@GenRandomI:

; 608  : 		int maxindex = ( g_MaxItemIndexOfEachItemType[type] <= 0 ) ?  MAX_SUBTYPE_ITEMS : g_MaxItemIndexOfEachItemType[type];

  00019	8b 3c b5 00 00
	00 00		 mov	 edi, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[esi*4]
  00020	85 ff		 test	 edi, edi
  00022	7f 05		 jg	 SHORT $LN7@GenRandomI
  00024	bf 00 02 00 00	 mov	 edi, 512		; 00000200H
$LN7@GenRandomI:

; 609  : 		int index = rand() % maxindex;

  00029	e8 00 00 00 00	 call	 _rand
  0002e	99		 cdq
  0002f	f7 ff		 idiv	 edi

; 610  : 		iItemIndex = ITEMGET(type, index);

  00031	c1 e6 09	 shl	 esi, 9

; 611  : 		
; 612  : 		if ( this->IsSetItem(iItemIndex) != FALSE )

  00034	8b cb		 mov	 ecx, ebx
  00036	8d 3c 16	 lea	 edi, DWORD PTR [esi+edx]
  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  0003f	85 c0		 test	 eax, eax
  00041	74 c2		 je	 SHORT $LL4@GenRandomI

; 613  : 			return iItemIndex;

  00043	8b c7		 mov	 eax, edi
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 614  : 	}
; 615  : 	while ( true );
; 616  : 
; 617  : 	return ITEMGET(0,0);
; 618  : }

  00048	c3		 ret	 0
?GenRandomItemNum@CSetItemOption@@QAEHXZ ENDP		; CSetItemOption::GenRandomItemNum
_TEXT	ENDS
PUBLIC	??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@ ; `string'
PUBLIC	?GenSetOption@CSetItemOption@@QAEHH@Z		; CSetItemOption::GenSetOption
;	COMDAT ??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@
CONST	SEGMENT
??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@ DB 'GenSetType'
	DB	' Check error: (itemnum:%d)', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GenSetOption@CSetItemOption@@QAEHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
?GenSetOption@CSetItemOption@@QAEHH@Z PROC		; CSetItemOption::GenSetOption, COMDAT
; _this$ = ecx

; 621  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 	if ( itemnum < 0 || itemnum > MAX_ITEMS-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  00006	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  0000b	77 5f		 ja	 SHORT $LN8@GenSetOpti

; 626  : 	}
; 627  : 
; 628  : 	if ( this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE )

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  00015	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]

; 629  : 		return FALSE;

  00018	74 62		 je	 SHORT $LN13@GenSetOpti

; 630  : 
; 631  : 	int SetOption;
; 632  : 
; 633  : 	if ( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] &&
; 634  : 		 this->m_SetItemTypeInfo[itemnum].OptionIndex[1] )

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001d	56		 push	 esi
  0001e	85 c0		 test	 eax, eax
  00020	74 1d		 je	 SHORT $LN6@GenSetOpti
  00022	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00026	74 17		 je	 SHORT $LN6@GenSetOpti

; 635  : 	{
; 636  : 		SetOption = rand() % 2 + 1;

  00028	e8 00 00 00 00	 call	 _rand
  0002d	8b f0		 mov	 esi, eax
  0002f	81 e6 01 00 00
	80		 and	 esi, -2147483647	; 80000001H
  00035	79 05		 jns	 SHORT $LN12@GenSetOpti
  00037	4e		 dec	 esi
  00038	83 ce fe	 or	 esi, -2			; fffffffeH
  0003b	46		 inc	 esi
$LN12@GenSetOpti:
  0003c	46		 inc	 esi
  0003d	eb 07		 jmp	 SHORT $LN4@GenSetOpti
$LN6@GenSetOpti:

; 637  : 	}
; 638  : 	else if ( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] )

  0003f	f7 d8		 neg	 eax
  00041	1b c0		 sbb	 eax, eax
  00043	8d 70 02	 lea	 esi, DWORD PTR [eax+2]
$LN4@GenSetOpti:

; 639  : 	{
; 640  : 		SetOption = 1;
; 641  : 	}
; 642  : 	else
; 643  : 	{
; 644  : 		SetOption = 2;
; 645  : 	}
; 646  : 
; 647  : 	if ( (rand()%100) < 80 )

  00046	e8 00 00 00 00	 call	 _rand
  0004b	99		 cdq
  0004c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00051	f7 f9		 idiv	 ecx
  00053	83 fa 50	 cmp	 edx, 80			; 00000050H
  00056	7d 0a		 jge	 SHORT $LN2@GenSetOpti

; 648  : 	{
; 649  : 		SetOption |= 4;

  00058	83 ce 04	 or	 esi, 4

; 654  : 	}
; 655  : 
; 656  : 	return SetOption;

  0005b	8b c6		 mov	 eax, esi
  0005d	5e		 pop	 esi

; 657  : }

  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
$LN2@GenSetOpti:

; 650  : 	}
; 651  : 	else
; 652  : 	{
; 653  : 		SetOption |= 8;

  00062	83 ce 08	 or	 esi, 8

; 654  : 	}
; 655  : 
; 656  : 	return SetOption;

  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi

; 657  : }

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN8@GenSetOpti:

; 623  : 	{
; 624  : 		LogAdd(LOG_BLACK, "GenSetType Check error: (itemnum:%d)", itemnum);

  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@
  00072	6a 00		 push	 0
  00074	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@GenSetOpti:

; 625  : 		return FALSE;

  0007c	33 c0		 xor	 eax, eax

; 657  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?GenSetOption@CSetItemOption@@QAEHH@Z ENDP		; CSetItemOption::GenSetOption
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GCSetItemOption@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSetItemOption@@UAEPAXI@Z PROC			; CSetItemOption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSetItemOption@@UAE@XZ ; CSetItemOption::~CSetItemOption
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GCSetItemOption@@UAEPAXI@Z ENDP			; CSetItemOption::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@ ; `string'
PUBLIC	?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z	; CSetItemOption::GetSetOption
;	COMDAT ??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@
CONST	SEGMENT
??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@ DB 'GetSetOpti'
	DB	'on Check error: (itemnum:%d)', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
_optablenum$ = 12					; size = 4
_op1$ = 16						; size = 4
_op2$ = 20						; size = 4
_opvalue1$ = 24						; size = 4
_opvalue2$ = 28						; size = 4
_Class$ = 32						; size = 4
_ChangeUp$ = 36						; size = 4
?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z PROC	; CSetItemOption::GetSetOption, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  : 	opvalue1=0;

  00003	8b 45 18	 mov	 eax, DWORD PTR _opvalue1$[ebp]
  00006	56		 push	 esi

; 309  : 	opvalue2=0;
; 310  : 
; 311  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  00007	8b 75 08	 mov	 esi, DWORD PTR _optionindex$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 4d 1c	 mov	 ecx, DWORD PTR _opvalue2$[ebp]
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0001c	83 fe 4f	 cmp	 esi, 79			; 0000004fH
  0001f	0f 87 2e 01 00
	00		 ja	 $LN14@GetSetOpti@3

; 315  : 	}
; 316  : 
; 317  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad==0)

  00025	8b c6		 mov	 eax, esi
  00027	69 c0 a8 01 00
	00		 imul	 eax, 424		; 000001a8H
  0002d	83 bc 38 04 80
	02 00 00	 cmp	 DWORD PTR [eax+edi+163844], 0

; 318  : 	{
; 319  : 		return 0;

  00035	0f 84 28 01 00
	00		 je	 $LN22@GetSetOpti@3

; 320  : 	}
; 321  : 
; 322  : 	if (optablenum >= this->m_SetItemOptionInfo[optionindex].SetOptionCount)

  0003b	53		 push	 ebx
  0003c	8b 5d 0c	 mov	 ebx, DWORD PTR _optablenum$[ebp]
  0003f	3b 9c 38 08 81
	02 00		 cmp	 ebx, DWORD PTR [eax+edi+164104]
  00046	7c 09		 jl	 SHORT $LN12@GetSetOpti@3

; 323  : 	{
; 324  : 		return 0;

  00048	5b		 pop	 ebx
  00049	5f		 pop	 edi
  0004a	33 c0		 xor	 eax, eax
  0004c	5e		 pop	 esi

; 386  : }

  0004d	5d		 pop	 ebp
  0004e	c2 20 00	 ret	 32			; 00000020H
$LN12@GetSetOpti@3:

; 325  : 	}
; 326  : 	int isRequireClass;
; 327  : 
; 328  : 	isRequireClass=this->IsRequireClass(optionindex, Class, ChangeUp);

  00051	8b 45 24	 mov	 eax, DWORD PTR _ChangeUp$[ebp]
  00054	8b 4d 20	 mov	 ecx, DWORD PTR _Class$[ebp]
  00057	50		 push	 eax
  00058	51		 push	 ecx
  00059	56		 push	 esi
  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 ?IsRequireClass@CSetItemOption@@QAEHHHH@Z ; CSetItemOption::IsRequireClass

; 329  : 
; 330  : 	if (optablenum <OPTION_TABLE_SIZE)

  00061	83 fb 06	 cmp	 ebx, 6
  00064	0f 8d 80 00 00
	00		 jge	 $LN11@GetSetOpti@3

; 331  : 	{
; 332  : 		op1=this->m_SetItemOptionInfo[optionindex].SetOptionTable[optablenum][0];

  0006a	6b f6 35	 imul	 esi, 53			; 00000035H
  0006d	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  00070	8b 94 cf 0c 81
	02 00		 mov	 edx, DWORD PTR [edi+ecx*8+164108]
  00077	8b 75 10	 mov	 esi, DWORD PTR _op1$[ebp]

; 333  : 		opvalue1=this->m_SetItemOptionInfo[optionindex].SetOptionTableValue[optablenum][0];

  0007a	8b 5d 18	 mov	 ebx, DWORD PTR _opvalue1$[ebp]
  0007d	89 16		 mov	 DWORD PTR [esi], edx
  0007f	8b 94 cf 3c 81
	02 00		 mov	 edx, DWORD PTR [edi+ecx*8+164156]
  00086	89 13		 mov	 DWORD PTR [ebx], edx

; 334  : 
; 335  : 		if ( op1 > 183 )

  00088	8b 16		 mov	 edx, DWORD PTR [esi]
  0008a	81 fa b7 00 00
	00		 cmp	 edx, 183		; 000000b7H
  00090	7e 0c		 jle	 SHORT $LN18@GetSetOpti@3

; 336  : 		{
; 337  : 			if ( isRequireClass == 0 )

  00092	85 c0		 test	 eax, eax
  00094	75 08		 jne	 SHORT $LN18@GetSetOpti@3

; 338  : 			{
; 339  : 				op1 = -1;

  00096	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 340  : 			}
; 341  : 		}
; 342  : 
; 343  : 		if ( op1 != -1 )

  0009c	eb 0d		 jmp	 SHORT $LN19@GetSetOpti@3
$LN18@GetSetOpti@3:
  0009e	83 fa ff	 cmp	 edx, -1
  000a1	74 08		 je	 SHORT $LN19@GetSetOpti@3

; 344  : 		{
; 345  : 			op1 += 0xA0;

  000a3	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  000a9	89 16		 mov	 DWORD PTR [esi], edx
$LN19@GetSetOpti@3:

; 346  : 		}
; 347  : 
; 348  : 		op2=this->m_SetItemOptionInfo[optionindex].SetOptionTable[optablenum][1];

  000ab	8b b4 cf 10 81
	02 00		 mov	 esi, DWORD PTR [edi+ecx*8+164112]
  000b2	8b 55 14	 mov	 edx, DWORD PTR _op2$[ebp]
  000b5	89 32		 mov	 DWORD PTR [edx], esi

; 349  : 		opvalue2=this->m_SetItemOptionInfo[optionindex].SetOptionTableValue[optablenum][1];

  000b7	8b 8c cf 40 81
	02 00		 mov	 ecx, DWORD PTR [edi+ecx*8+164160]
  000be	8b 75 1c	 mov	 esi, DWORD PTR _opvalue2$[ebp]
  000c1	89 0e		 mov	 DWORD PTR [esi], ecx

; 350  : 
; 351  : 		if ( op2 > 183 )

  000c3	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000c5	81 f9 b7 00 00
	00		 cmp	 ecx, 183		; 000000b7H
  000cb	7e 04		 jle	 SHORT $LN6@GetSetOpti@3

; 352  : 		{
; 353  : 			if ( isRequireClass == 0 )

  000cd	85 c0		 test	 eax, eax

; 354  : 			{
; 355  : 				op2 = -1;
; 356  : 			}
; 357  : 		}
; 358  : 
; 359  : 		if ( op2 != -1 )

  000cf	74 70		 je	 SHORT $LN21@GetSetOpti@3
$LN6@GetSetOpti@3:
  000d1	83 f9 ff	 cmp	 ecx, -1
  000d4	74 71		 je	 SHORT $LN4@GetSetOpti@3

; 360  : 		{
; 361  : 			op2 += 0xA0;

  000d6	5b		 pop	 ebx
  000d7	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  000dd	5f		 pop	 edi
  000de	89 0a		 mov	 DWORD PTR [edx], ecx

; 383  : 	}
; 384  : 
; 385  : 	return 1;

  000e0	b8 01 00 00 00	 mov	 eax, 1
  000e5	5e		 pop	 esi

; 386  : }

  000e6	5d		 pop	 ebp
  000e7	c2 20 00	 ret	 32			; 00000020H
$LN11@GetSetOpti@3:

; 362  : 		}
; 363  : 	}
; 364  : 	else
; 365  : 	{
; 366  : 		op1=this->m_SetItemOptionInfo[optionindex].SetExPOptionTable[optablenum-OPTION_TABLE_SIZE];

  000ea	8b 55 10	 mov	 edx, DWORD PTR _op1$[ebp]
  000ed	6b f6 6a	 imul	 esi, 106		; 0000006aH
  000f0	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000f3	8b b4 8f 54 81
	02 00		 mov	 esi, DWORD PTR [edi+ecx*4+164180]
  000fa	89 32		 mov	 DWORD PTR [edx], esi

; 367  : 		opvalue1=this->m_SetItemOptionInfo[optionindex].SetExPOptionTableValue[optablenum-OPTION_TABLE_SIZE];

  000fc	8b 8c 8f 5c 81
	02 00		 mov	 ecx, DWORD PTR [edi+ecx*4+164188]
  00103	8b 75 18	 mov	 esi, DWORD PTR _opvalue1$[ebp]
  00106	89 0e		 mov	 DWORD PTR [esi], ecx

; 368  : 
; 369  : 		if ( op1 > 183 )

  00108	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0010a	81 f9 b7 00 00
	00		 cmp	 ecx, 183		; 000000b7H
  00110	7e 1f		 jle	 SHORT $LN2@GetSetOpti@3

; 370  : 		{
; 371  : 			if ( isRequireClass == 0 )

  00112	85 c0		 test	 eax, eax
  00114	75 1b		 jne	 SHORT $LN2@GetSetOpti@3

; 372  : 			{
; 373  : 				op1 = -1;

  00116	5b		 pop	 ebx
  00117	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 380  : 		}
; 381  : 
; 382  : 		op2 = -1;

  0011d	8b 55 14	 mov	 edx, DWORD PTR _op2$[ebp]
  00120	5f		 pop	 edi
  00121	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 383  : 	}
; 384  : 
; 385  : 	return 1;

  00127	b8 01 00 00 00	 mov	 eax, 1
  0012c	5e		 pop	 esi

; 386  : }

  0012d	5d		 pop	 ebp
  0012e	c2 20 00	 ret	 32			; 00000020H
$LN2@GetSetOpti@3:

; 374  : 			}
; 375  : 		}
; 376  : 
; 377  : 		if ( op1 != -1 )

  00131	83 f9 ff	 cmp	 ecx, -1
  00134	74 08		 je	 SHORT $LN1@GetSetOpti@3

; 378  : 		{
; 379  : 			op1 += 0xA0;

  00136	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  0013c	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@GetSetOpti@3:

; 380  : 		}
; 381  : 
; 382  : 		op2 = -1;

  0013e	8b 55 14	 mov	 edx, DWORD PTR _op2$[ebp]
$LN21@GetSetOpti@3:
  00141	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
$LN4@GetSetOpti@3:
  00147	5b		 pop	 ebx
  00148	5f		 pop	 edi

; 383  : 	}
; 384  : 
; 385  : 	return 1;

  00149	b8 01 00 00 00	 mov	 eax, 1
  0014e	5e		 pop	 esi

; 386  : }

  0014f	5d		 pop	 ebp
  00150	c2 20 00	 ret	 32			; 00000020H
$LN14@GetSetOpti@3:

; 312  : 	{
; 313  : 		LogAdd(LOG_BLACK, "GetSetOption Check error: (itemnum:%d)", optionindex);

  00153	56		 push	 esi
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@
  00159	6a 00		 push	 0
  0015b	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00160	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN22@GetSetOpti@3:

; 314  : 		return 0;

  00163	5f		 pop	 edi
  00164	33 c0		 xor	 eax, eax
  00166	5e		 pop	 esi

; 386  : }

  00167	5d		 pop	 ebp
  00168	c2 20 00	 ret	 32			; 00000020H
?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z ENDP	; CSetItemOption::GetSetOption
_TEXT	ENDS
PUBLIC	?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z ; CSetItemOption::GetGetFullSetOption
; Function compile flags: /Ogtp
;	COMDAT ?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
_op1$ = 12						; size = 4
_op2$ = 16						; size = 4
_op3$ = 20						; size = 4
_op4$ = 24						; size = 4
_op5$ = 28						; size = 4
_opvalue1$ = 32						; size = 4
_opvalue2$ = 36						; size = 4
_opvalue3$ = 40						; size = 4
_opvalue4$ = 44						; size = 4
_opvalue5$ = 48						; size = 4
_Class$ = 52						; size = 4
_ChangeUp$ = 56						; size = 4
?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z PROC ; CSetItemOption::GetGetFullSetOption, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 407  : 	opvalue1 = 0;
; 408  : 	opvalue2 = 0;
; 409  : 	opvalue3 = 0;

  00003	8b 45 28	 mov	 eax, DWORD PTR _opvalue3$[ebp]

; 410  : 	opvalue4 = 0;

  00006	8b 55 2c	 mov	 edx, DWORD PTR _opvalue4$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 24	 mov	 ebx, DWORD PTR _opvalue2$[ebp]
  0000d	57		 push	 edi
  0000e	8b 7d 20	 mov	 edi, DWORD PTR _opvalue1$[ebp]
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00017	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 411  : 	opvalue5 = 0;

  00023	8b 45 30	 mov	 eax, DWORD PTR _opvalue5$[ebp]
  00026	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0002c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 412  : 
; 413  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  00032	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  00035	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00038	0f 87 58 01 00
	00		 ja	 $LN17@GetGetFull

; 417  : 	}
; 418  : 
; 419  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  0003e	56		 push	 esi
  0003f	8b f0		 mov	 esi, eax
  00041	69 f6 a8 01 00
	00		 imul	 esi, 424		; 000001a8H
  00047	03 f1		 add	 esi, ecx
  00049	83 be 04 80 02
	00 00		 cmp	 DWORD PTR [esi+163844], 0
  00050	75 09		 jne	 SHORT $LN16@GetGetFull

; 420  : 	{
; 421  : 		return 0;

  00052	5e		 pop	 esi
  00053	5f		 pop	 edi
  00054	33 c0		 xor	 eax, eax
  00056	5b		 pop	 ebx

; 506  : }

  00057	5d		 pop	 ebp
  00058	c2 34 00	 ret	 52			; 00000034H
$LN16@GetGetFull:

; 422  : 	}
; 423  : 
; 424  : 	BOOL isRequireClass=this->IsRequireClass(optionindex, Class, ChangeUp);

  0005b	8b 55 38	 mov	 edx, DWORD PTR _ChangeUp$[ebp]
  0005e	52		 push	 edx
  0005f	8b 55 34	 mov	 edx, DWORD PTR _Class$[ebp]
  00062	52		 push	 edx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?IsRequireClass@CSetItemOption@@QAEHHHH@Z ; CSetItemOption::IsRequireClass

; 425  : 	op1 = this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[0];

  00069	8b 8e 7c 81 02
	00		 mov	 ecx, DWORD PTR [esi+164220]
  0006f	8b 55 0c	 mov	 edx, DWORD PTR _op1$[ebp]
  00072	89 0a		 mov	 DWORD PTR [edx], ecx

; 426  : 	opvalue1 = this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[0];

  00074	8b 8e 90 81 02
	00		 mov	 ecx, DWORD PTR [esi+164240]
  0007a	89 0f		 mov	 DWORD PTR [edi], ecx

; 427  : 
; 428  : 	if ( op1 > 183 )

  0007c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0007e	81 f9 b7 00 00
	00		 cmp	 ecx, 183		; 000000b7H
  00084	7e 0c		 jle	 SHORT $LN21@GetGetFull

; 429  : 	{
; 430  : 		if ( isRequireClass == 0 )

  00086	85 c0		 test	 eax, eax
  00088	75 08		 jne	 SHORT $LN21@GetGetFull

; 431  : 		{
; 432  : 			op1 = -1;

  0008a	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 433  : 		}
; 434  : 	}
; 435  : 
; 436  : 	if ( op1 != -1 )

  00090	eb 0d		 jmp	 SHORT $LN22@GetGetFull
$LN21@GetGetFull:
  00092	83 f9 ff	 cmp	 ecx, -1
  00095	74 08		 je	 SHORT $LN22@GetGetFull

; 437  : 	{
; 438  : 		op1 += 0xA0;

  00097	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  0009d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN22@GetGetFull:

; 439  : 	}
; 440  : 
; 441  : 	op2=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[1];

  0009f	8b 8e 80 81 02
	00		 mov	 ecx, DWORD PTR [esi+164224]
  000a5	8b 55 10	 mov	 edx, DWORD PTR _op2$[ebp]
  000a8	89 0a		 mov	 DWORD PTR [edx], ecx

; 442  : 	opvalue2=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[1];

  000aa	8b 8e 94 81 02
	00		 mov	 ecx, DWORD PTR [esi+164244]
  000b0	89 0b		 mov	 DWORD PTR [ebx], ecx

; 443  : 
; 444  : 	if ( op2 > 183 )

  000b2	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000b4	81 f9 b7 00 00
	00		 cmp	 ecx, 183		; 000000b7H
  000ba	7e 0c		 jle	 SHORT $LN23@GetGetFull

; 445  : 	{
; 446  : 		if ( isRequireClass == 0 )

  000bc	85 c0		 test	 eax, eax
  000be	75 08		 jne	 SHORT $LN23@GetGetFull

; 447  : 		{
; 448  : 			op2 = -1;

  000c0	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 449  : 		}
; 450  : 	}
; 451  : 
; 452  : 	if ( op2 != -1 )

  000c6	eb 0d		 jmp	 SHORT $LN24@GetGetFull
$LN23@GetGetFull:
  000c8	83 f9 ff	 cmp	 ecx, -1
  000cb	74 08		 je	 SHORT $LN24@GetGetFull

; 453  : 	{
; 454  : 		op2 += 0xA0;

  000cd	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  000d3	89 0a		 mov	 DWORD PTR [edx], ecx
$LN24@GetGetFull:

; 455  : 	}
; 456  : 
; 457  : 	op3=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[2];

  000d5	8b 8e 84 81 02
	00		 mov	 ecx, DWORD PTR [esi+164228]
  000db	8b 55 14	 mov	 edx, DWORD PTR _op3$[ebp]

; 458  : 	opvalue3=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[2];

  000de	8b 7d 28	 mov	 edi, DWORD PTR _opvalue3$[ebp]
  000e1	89 0a		 mov	 DWORD PTR [edx], ecx
  000e3	8b 8e 98 81 02
	00		 mov	 ecx, DWORD PTR [esi+164248]
  000e9	89 0f		 mov	 DWORD PTR [edi], ecx

; 459  : 
; 460  : 	if ( op3 > 183 )

  000eb	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000ed	81 f9 b7 00 00
	00		 cmp	 ecx, 183		; 000000b7H
  000f3	7e 0c		 jle	 SHORT $LN25@GetGetFull

; 461  : 	{
; 462  : 		if ( isRequireClass == 0 )

  000f5	85 c0		 test	 eax, eax
  000f7	75 08		 jne	 SHORT $LN25@GetGetFull

; 463  : 		{
; 464  : 			op3 = -1;

  000f9	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 465  : 		}
; 466  : 	}
; 467  : 
; 468  : 	if ( op3 != -1 )

  000ff	eb 0d		 jmp	 SHORT $LN26@GetGetFull
$LN25@GetGetFull:
  00101	83 f9 ff	 cmp	 ecx, -1
  00104	74 08		 je	 SHORT $LN26@GetGetFull

; 469  : 	{
; 470  : 		op3 += 0xA0;

  00106	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  0010c	89 0a		 mov	 DWORD PTR [edx], ecx
$LN26@GetGetFull:

; 471  : 	}
; 472  : 
; 473  : 	op4=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[3];

  0010e	8b 8e 88 81 02
	00		 mov	 ecx, DWORD PTR [esi+164232]
  00114	8b 55 18	 mov	 edx, DWORD PTR _op4$[ebp]

; 474  : 	opvalue4=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[3];

  00117	8b 7d 2c	 mov	 edi, DWORD PTR _opvalue4$[ebp]
  0011a	89 0a		 mov	 DWORD PTR [edx], ecx
  0011c	8b 8e 9c 81 02
	00		 mov	 ecx, DWORD PTR [esi+164252]
  00122	89 0f		 mov	 DWORD PTR [edi], ecx

; 475  : 
; 476  : 	if ( op4 > 183 )

  00124	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00126	81 f9 b7 00 00
	00		 cmp	 ecx, 183		; 000000b7H
  0012c	7e 0c		 jle	 SHORT $LN27@GetGetFull

; 477  : 	{
; 478  : 		if ( isRequireClass == 0 )

  0012e	85 c0		 test	 eax, eax
  00130	75 08		 jne	 SHORT $LN27@GetGetFull

; 479  : 		{
; 480  : 			op4 = -1;

  00132	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 481  : 		}
; 482  : 	}
; 483  : 
; 484  : 	if ( op4 != -1 )

  00138	eb 0d		 jmp	 SHORT $LN28@GetGetFull
$LN27@GetGetFull:
  0013a	83 f9 ff	 cmp	 ecx, -1
  0013d	74 08		 je	 SHORT $LN28@GetGetFull

; 485  : 	{
; 486  : 		op4 += 0xA0;

  0013f	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00145	89 0a		 mov	 DWORD PTR [edx], ecx
$LN28@GetGetFull:

; 487  : 	}
; 488  : 
; 489  : 	op5=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[4];

  00147	8b 8e 8c 81 02
	00		 mov	 ecx, DWORD PTR [esi+164236]
  0014d	8b 55 1c	 mov	 edx, DWORD PTR _op5$[ebp]
  00150	89 0a		 mov	 DWORD PTR [edx], ecx

; 490  : 	opvalue5=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[4];

  00152	8b 8e a0 81 02
	00		 mov	 ecx, DWORD PTR [esi+164256]
  00158	8b 75 30	 mov	 esi, DWORD PTR _opvalue5$[ebp]
  0015b	89 0e		 mov	 DWORD PTR [esi], ecx

; 491  : 
; 492  : 	if ( op5 > 183 )

  0015d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0015f	81 f9 b7 00 00
	00		 cmp	 ecx, 183		; 000000b7H
  00165	7e 16		 jle	 SHORT $LN2@GetGetFull

; 493  : 	{
; 494  : 		if ( isRequireClass == 0 )

  00167	85 c0		 test	 eax, eax
  00169	75 12		 jne	 SHORT $LN2@GetGetFull

; 495  : 		{
; 496  : 			op5 = -1;

  0016b	5e		 pop	 esi
  0016c	5f		 pop	 edi
  0016d	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 503  : 	}
; 504  : 
; 505  : 	return 1;

  00173	b8 01 00 00 00	 mov	 eax, 1
  00178	5b		 pop	 ebx

; 506  : }

  00179	5d		 pop	 ebp
  0017a	c2 34 00	 ret	 52			; 00000034H
$LN2@GetGetFull:

; 497  : 		}
; 498  : 	}
; 499  : 
; 500  : 	if ( op5 != -1 )

  0017d	83 f9 ff	 cmp	 ecx, -1
  00180	74 08		 je	 SHORT $LN1@GetGetFull

; 501  : 	{
; 502  : 		op5 += 0xA0;

  00182	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00188	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@GetGetFull:

; 503  : 	}
; 504  : 
; 505  : 	return 1;

  0018a	5e		 pop	 esi
  0018b	5f		 pop	 edi
  0018c	b8 01 00 00 00	 mov	 eax, 1
  00191	5b		 pop	 ebx

; 506  : }

  00192	5d		 pop	 ebp
  00193	c2 34 00	 ret	 52			; 00000034H
$LN17@GetGetFull:

; 414  : 	{
; 415  : 		LogAdd(LOG_BLACK, "GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  00196	50		 push	 eax
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  0019c	6a 00		 push	 0
  0019e	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  001a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a6	5f		 pop	 edi

; 416  : 		return 0;

  001a7	33 c0		 xor	 eax, eax
  001a9	5b		 pop	 ebx

; 506  : }

  001aa	5d		 pop	 ebp
  001ab	c2 34 00	 ret	 52			; 00000034H
?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z ENDP ; CSetItemOption::GetGetFullSetOption
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Ogtp
;	COMDAT ??__EgSetItemOption@@YAXXZ
text$yc	SEGMENT
??__EgSetItemOption@@YAXXZ PROC				; `dynamic initializer for 'gSetItemOption'', COMDAT

; 16   : CSetItemOption gSetItemOption;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00005	e8 00 00 00 00	 call	 ??0CSetItemOption@@QAE@XZ ; CSetItemOption::CSetItemOption
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgSetItemOption@@YAXXZ ; `dynamic atexit destructor for 'gSetItemOption''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgSetItemOption@@YAXXZ ENDP				; `dynamic initializer for 'gSetItemOption''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__FgSetItemOption@@YAXXZ
text$yd	SEGMENT
??__FgSetItemOption@@YAXXZ PROC				; `dynamic atexit destructor for 'gSetItemOption'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00005	e9 00 00 00 00	 jmp	 ??1CSetItemOption@@UAE@XZ ; CSetItemOption::~CSetItemOption
??__FgSetItemOption@@YAXXZ ENDP				; `dynamic atexit destructor for 'gSetItemOption''
text$yd	ENDS
PUBLIC	?gSetItemOption@@3VCSetItemOption@@A		; gSetItemOption
_BSS	SEGMENT
?gSetItemOption@@3VCSetItemOption@@A DB 030484H DUP (?)	; gSetItemOption
_BSS	ENDS
CRT$XCU	SEGMENT
_gSetItemOption$initializer$ DD FLAT:??__EgSetItemOption@@YAXXZ
CRT$XCU	ENDS
END
