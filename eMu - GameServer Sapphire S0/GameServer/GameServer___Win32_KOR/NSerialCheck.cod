; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\NSerialCheck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7NSerialCheck@@6B@				; NSerialCheck::`vftable'
PUBLIC	??1NSerialCheck@@UAE@XZ				; NSerialCheck::~NSerialCheck
PUBLIC	??_R4NSerialCheck@@6B@				; NSerialCheck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNSerialCheck@@@8			; NSerialCheck `RTTI Type Descriptor'
PUBLIC	??_R3NSerialCheck@@8				; NSerialCheck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NSerialCheck@@8				; NSerialCheck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NSerialCheck@@8			; NSerialCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ENSerialCheck@@UAEPAXI@Z:PROC		; NSerialCheck::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@NSerialCheck@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\nserialcheck.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@NSerialCheck@@8 DD FLAT:??_R0?AVNSerialCheck@@@8 ; NSerialCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_R2NSerialCheck@@8
rdata$r	SEGMENT
??_R2NSerialCheck@@8 DD FLAT:??_R1A@?0A@EA@NSerialCheck@@8 ; NSerialCheck::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NSerialCheck@@8
rdata$r	SEGMENT
??_R3NSerialCheck@@8 DD 00H				; NSerialCheck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNSerialCheck@@@8
_DATA	SEGMENT
??_R0?AVNSerialCheck@@@8 DD FLAT:??_7type_info@@6B@	; NSerialCheck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNSerialCheck@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NSerialCheck@@6B@
rdata$r	SEGMENT
??_R4NSerialCheck@@6B@ DD 00H				; NSerialCheck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNSerialCheck@@@8
	DD	FLAT:??_R3NSerialCheck@@8
rdata$r	ENDS
;	COMDAT ??_7NSerialCheck@@6B@
CONST	SEGMENT
??_7NSerialCheck@@6B@ DD FLAT:??_R4NSerialCheck@@6B@	; NSerialCheck::`vftable'
	DD	FLAT:??_ENSerialCheck@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1NSerialCheck@@UAE@XZ
_TEXT	SEGMENT
??1NSerialCheck@@UAE@XZ PROC				; NSerialCheck::~NSerialCheck, COMDAT
; _this$ = ecx

; 19   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NSerialCheck@@6B@

; 20   : 	return;
; 21   : }

  00006	c3		 ret	 0
??1NSerialCheck@@UAE@XZ ENDP				; NSerialCheck::~NSerialCheck
_TEXT	ENDS
PUBLIC	?init@NSerialCheck@@QAEXXZ			; NSerialCheck::init
; Function compile flags: /Ogtp
;	COMDAT ?init@NSerialCheck@@QAEXXZ
_TEXT	SEGMENT
?init@NSerialCheck@@QAEXXZ PROC				; NSerialCheck::init, COMDAT
; _this$ = ecx

; 25   : 	this->m_serial=-1;

  00000	66 c7 41 04 ff
	00		 mov	 WORD PTR [ecx+4], 255	; 000000ffH

; 26   : 	this->m_SendSeiral=0;
; 27   : }

  00006	c3		 ret	 0
?init@NSerialCheck@@QAEXXZ ENDP				; NSerialCheck::init
_TEXT	ENDS
PUBLIC	?InCheck@NSerialCheck@@QAEHE@Z			; NSerialCheck::InCheck
; Function compile flags: /Ogtp
;	COMDAT ?InCheck@NSerialCheck@@QAEHE@Z
_TEXT	SEGMENT
_serial$ = 8						; size = 1
?InCheck@NSerialCheck@@QAEHE@Z PROC			; NSerialCheck::InCheck, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	BYTE m_s=this->m_serial;
; 32   : 	m_s++;

  00003	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]

; 33   : 
; 34   : 	if ( m_s  == serial )

  00006	8a 45 08	 mov	 al, BYTE PTR _serial$[ebp]
  00009	fe c2		 inc	 dl
  0000b	3a d0		 cmp	 dl, al
  0000d	75 0c		 jne	 SHORT $LN1@InCheck

; 35   : 	{
; 36   : 		this->m_serial = serial;

  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 37   : 		return TRUE;

  00012	b8 01 00 00 00	 mov	 eax, 1

; 41   : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN1@InCheck:

; 38   : 	}
; 39   : 
; 40   : 	return FALSE;

  0001b	33 c0		 xor	 eax, eax

; 41   : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?InCheck@NSerialCheck@@QAEHE@Z ENDP			; NSerialCheck::InCheck
_TEXT	ENDS
PUBLIC	?GetSerial@NSerialCheck@@QAEHXZ			; NSerialCheck::GetSerial
; Function compile flags: /Ogtp
;	COMDAT ?GetSerial@NSerialCheck@@QAEHXZ
_TEXT	SEGMENT
?GetSerial@NSerialCheck@@QAEHXZ PROC			; NSerialCheck::GetSerial, COMDAT
; _this$ = ecx

; 45   : 	return this->m_serial;

  00000	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]

; 46   : }

  00004	c3		 ret	 0
?GetSerial@NSerialCheck@@QAEHXZ ENDP			; NSerialCheck::GetSerial
_TEXT	ENDS
PUBLIC	?GetSendSerial@NSerialCheck@@QAEEXZ		; NSerialCheck::GetSendSerial
; Function compile flags: /Ogtp
;	COMDAT ?GetSendSerial@NSerialCheck@@QAEEXZ
_TEXT	SEGMENT
?GetSendSerial@NSerialCheck@@QAEEXZ PROC		; NSerialCheck::GetSendSerial, COMDAT
; _this$ = ecx

; 50   : 	return this->m_SendSeiral++;

  00000	8a 41 05	 mov	 al, BYTE PTR [ecx+5]
  00003	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00006	88 51 05	 mov	 BYTE PTR [ecx+5], dl

; 51   : }

  00009	c3		 ret	 0
?GetSendSerial@NSerialCheck@@QAEEXZ ENDP		; NSerialCheck::GetSendSerial
_TEXT	ENDS
PUBLIC	??0NSerialCheck@@QAE@XZ				; NSerialCheck::NSerialCheck
; Function compile flags: /Ogtp
;	COMDAT ??0NSerialCheck@@QAE@XZ
_TEXT	SEGMENT
??0NSerialCheck@@QAE@XZ PROC				; NSerialCheck::NSerialCheck, COMDAT
; _this$ = ecx

; 14   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NSerialCheck@@6B@

; 15   : 	this->init();

  00006	e8 00 00 00 00	 call	 ?init@NSerialCheck@@QAEXXZ ; NSerialCheck::init

; 16   : }

  0000b	8b c1		 mov	 eax, ecx
  0000d	c3		 ret	 0
??0NSerialCheck@@QAE@XZ ENDP				; NSerialCheck::NSerialCheck
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GNSerialCheck@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNSerialCheck@@UAEPAXI@Z PROC			; NSerialCheck::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1NSerialCheck@@UAE@XZ	; NSerialCheck::~NSerialCheck
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GNSerialCheck@@UAEPAXI@Z ENDP			; NSerialCheck::`scalar deleting destructor'
_TEXT	ENDS
END
