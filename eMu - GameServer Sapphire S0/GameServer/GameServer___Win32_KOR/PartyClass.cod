; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\faelhs\mu-1.1\eMu - GameServer Sapphire S0\GameServer\PartyClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7PartyClass@@6B@				; PartyClass::`vftable'
PUBLIC	??0PartyClass@@QAE@XZ				; PartyClass::PartyClass
PUBLIC	??_R4PartyClass@@6B@				; PartyClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPartyClass@@@8				; PartyClass `RTTI Type Descriptor'
PUBLIC	??_R3PartyClass@@8				; PartyClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PartyClass@@8				; PartyClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PartyClass@@8			; PartyClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EPartyClass@@UAEPAXI@Z:PROC			; PartyClass::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@PartyClass@@8
; File c:\users\faelhs\mu-1.1\emu - gameserver sapphire s0\gameserver\partyclass.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@PartyClass@@8 DD FLAT:??_R0?AVPartyClass@@@8 ; PartyClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PartyClass@@8
rdata$r	ENDS
;	COMDAT ??_R2PartyClass@@8
rdata$r	SEGMENT
??_R2PartyClass@@8 DD FLAT:??_R1A@?0A@EA@PartyClass@@8	; PartyClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PartyClass@@8
rdata$r	SEGMENT
??_R3PartyClass@@8 DD 00H				; PartyClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PartyClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPartyClass@@@8
_DATA	SEGMENT
??_R0?AVPartyClass@@@8 DD FLAT:??_7type_info@@6B@	; PartyClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPartyClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PartyClass@@6B@
rdata$r	SEGMENT
??_R4PartyClass@@6B@ DD 00H				; PartyClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPartyClass@@@8
	DD	FLAT:??_R3PartyClass@@8
rdata$r	ENDS
;	COMDAT ??_7PartyClass@@6B@
CONST	SEGMENT
??_7PartyClass@@6B@ DD FLAT:??_R4PartyClass@@6B@	; PartyClass::`vftable'
	DD	FLAT:??_EPartyClass@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0PartyClass@@QAE@XZ
_TEXT	SEGMENT
??0PartyClass@@QAE@XZ PROC				; PartyClass::PartyClass, COMDAT
; _this$ = ecx

; 11   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PartyClass@@6B@

; 12   : 	return;
; 13   : }

  00008	c3		 ret	 0
??0PartyClass@@QAE@XZ ENDP				; PartyClass::PartyClass
_TEXT	ENDS
PUBLIC	??1PartyClass@@UAE@XZ				; PartyClass::~PartyClass
; Function compile flags: /Ogtp
;	COMDAT ??1PartyClass@@UAE@XZ
_TEXT	SEGMENT
??1PartyClass@@UAE@XZ PROC				; PartyClass::~PartyClass, COMDAT
; _this$ = ecx

; 17   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7PartyClass@@6B@

; 18   : 	return;
; 19   : }

  00006	c3		 ret	 0
??1PartyClass@@UAE@XZ ENDP				; PartyClass::~PartyClass
_TEXT	ENDS
PUBLIC	?IsParty@PartyClass@@QAEHH@Z			; PartyClass::IsParty
; Function compile flags: /Ogtp
;	COMDAT ?IsParty@PartyClass@@QAEHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?IsParty@PartyClass@@QAEHH@Z PROC			; PartyClass::IsParty, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	if ( party_number < 0 || party_number > OBJMAX )	// #error OBJMAX-1

  00003	8b 45 08	 mov	 eax, DWORD PTR _party_number$[ebp]
  00006	3d e8 1c 00 00	 cmp	 eax, 7400		; 00001ce8H
  0000b	77 14		 ja	 SHORT $LN2@IsParty

; 27   : 	}
; 28   : 
; 29   : 	if ( this->m_PartyS[party_number].Count == 0 )

  0000d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00010	33 d2		 xor	 edx, edx
  00012	03 c0		 add	 eax, eax
  00014	39 54 c1 08	 cmp	 DWORD PTR [ecx+eax*8+8], edx
  00018	0f 95 c2	 setne	 dl
  0001b	8b c2		 mov	 eax, edx

; 30   : 	{
; 31   : 		return FALSE;
; 32   : 	}
; 33   : 
; 34   : 	return TRUE;
; 35   : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@IsParty:

; 25   : 	{
; 26   : 		return FALSE;

  00021	33 c0		 xor	 eax, eax

; 30   : 	{
; 31   : 		return FALSE;
; 32   : 	}
; 33   : 
; 34   : 	return TRUE;
; 35   : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?IsParty@PartyClass@@QAEHH@Z ENDP			; PartyClass::IsParty
_TEXT	ENDS
PUBLIC	?Isleader@PartyClass@@QAEHHHH@Z			; PartyClass::Isleader
; Function compile flags: /Ogtp
;	COMDAT ?Isleader@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
?Isleader@PartyClass@@QAEHHHH@Z PROC			; PartyClass::Isleader, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 40   : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax

; 41   : 	{
; 42   : 		return FALSE;

  0000f	74 22		 je	 SHORT $LN1@Isleader

; 43   : 	}
; 44   : 
; 45   : 	if ( this->m_PartyS[party_number].Number[0] == usernumber && this->m_PartyS[party_number].DbNumber[0] == dbnumber )

  00011	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00014	c1 e0 04	 shl	 eax, 4
  00017	03 c1		 add	 eax, ecx
  00019	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001c	3b 4d 0c	 cmp	 ecx, DWORD PTR _usernumber$[ebp]
  0001f	75 12		 jne	 SHORT $LN1@Isleader
  00021	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00024	3b 55 10	 cmp	 edx, DWORD PTR _dbnumber$[ebp]
  00027	75 0a		 jne	 SHORT $LN1@Isleader

; 46   : 	{
; 47   : 		return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	5e		 pop	 esi

; 51   : }

  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN1@Isleader:

; 48   : 	}
; 49   : 
; 50   : 	return FALSE;

  00033	33 c0		 xor	 eax, eax
  00035	5e		 pop	 esi

; 51   : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
?Isleader@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::Isleader
_TEXT	ENDS
PUBLIC	?GetCount@PartyClass@@QAEHH@Z			; PartyClass::GetCount
; Function compile flags: /Ogtp
;	COMDAT ?GetCount@PartyClass@@QAEHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?GetCount@PartyClass@@QAEHH@Z PROC			; PartyClass::GetCount, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 56   : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 05		 jne	 SHORT $LN1@GetCount
  00011	5e		 pop	 esi

; 62   : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN1@GetCount:

; 57   : 	{
; 58   : 		return 0;
; 59   : 	}
; 60   : 
; 61   : 	return this->m_PartyS[party_number].Count;

  00016	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00019	03 c0		 add	 eax, eax
  0001b	8b 44 c1 08	 mov	 eax, DWORD PTR [ecx+eax*8+8]
  0001f	5e		 pop	 esi

; 62   : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?GetCount@PartyClass@@QAEHH@Z ENDP			; PartyClass::GetCount
_TEXT	ENDS
PUBLIC	?GetIndexUser@PartyClass@@QAEHHHAAH0@Z		; PartyClass::GetIndexUser
; Function compile flags: /Ogtp
;	COMDAT ?GetIndexUser@PartyClass@@QAEHHHAAH0@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_index$ = 12						; size = 4
_usernumber$ = 16					; size = 4
_dbnumber$ = 20						; size = 4
?GetIndexUser@PartyClass@@QAEHHHAAH0@Z PROC		; PartyClass::GetIndexUser, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 67   : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax

; 68   : 	{
; 69   : 		return FALSE;

  0000f	74 2a		 je	 SHORT $LN1@GetIndexUs

; 70   : 	}
; 71   : 
; 72   : 	if ( index <0 || index > MAX_USER_IN_PARTY-1 )

  00011	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00014	83 f8 04	 cmp	 eax, 4
  00017	77 22		 ja	 SHORT $LN1@GetIndexUs

; 75   : 	}
; 76   : 
; 77   : 	usernumber = this->m_PartyS[party_number].Number[index];

  00019	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  0001c	8b 75 10	 mov	 esi, DWORD PTR _usernumber$[ebp]
  0001f	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00022	8b 54 81 0c	 mov	 edx, DWORD PTR [ecx+eax*4+12]
  00026	89 16		 mov	 DWORD PTR [esi], edx

; 78   : 	dbnumber = this->m_PartyS[party_number].DbNumber[index];

  00028	8b 44 81 20	 mov	 eax, DWORD PTR [ecx+eax*4+32]
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR _dbnumber$[ebp]
  0002f	89 01		 mov	 DWORD PTR [ecx], eax

; 79   : 
; 80   : 	return TRUE;

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	5e		 pop	 esi

; 81   : }

  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
$LN1@GetIndexUs:

; 73   : 	{
; 74   : 		return FALSE;

  0003b	33 c0		 xor	 eax, eax
  0003d	5e		 pop	 esi

; 81   : }

  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?GetIndexUser@PartyClass@@QAEHHHAAH0@Z ENDP		; PartyClass::GetIndexUser
_TEXT	ENDS
PUBLIC	?GetIndex@PartyClass@@QAEHHHH@Z			; PartyClass::GetIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetIndex@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
?GetIndex@PartyClass@@QAEHHHH@Z PROC			; PartyClass::GetIndex, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 87   : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 05		 jne	 SHORT $LN6@GetIndex
  00011	5e		 pop	 esi

; 101  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN6@GetIndex:

; 88   : 	{
; 89   : 		return 0;
; 90   : 	}
; 91   : 
; 92   : 	for (int n=0; n<MAX_USER_IN_PARTY;n++)

  00016	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  00019	03 d2		 add	 edx, edx
  0001b	57		 push	 edi
  0001c	8b 7d 10	 mov	 edi, DWORD PTR _dbnumber$[ebp]
  0001f	33 c0		 xor	 eax, eax
  00021	03 d2		 add	 edx, edx
  00023	8d 74 91 0c	 lea	 esi, DWORD PTR [ecx+edx*4+12]
  00027	53		 push	 ebx
$LL12@GetIndex:

; 93   : 	{
; 94   : 		if ( this->m_PartyS[party_number].Number[n] == usernumber || this->m_PartyS[party_number].DbNumber[n] == dbnumber )

  00028	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0002a	3b 5d 0c	 cmp	 ebx, DWORD PTR _usernumber$[ebp]
  0002d	74 15		 je	 SHORT $LN14@GetIndex
  0002f	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  00032	39 7c 99 20	 cmp	 DWORD PTR [ecx+ebx*4+32], edi
  00036	74 0c		 je	 SHORT $LN14@GetIndex

; 88   : 	{
; 89   : 		return 0;
; 90   : 	}
; 91   : 
; 92   : 	for (int n=0; n<MAX_USER_IN_PARTY;n++)

  00038	40		 inc	 eax
  00039	83 c6 04	 add	 esi, 4
  0003c	83 f8 05	 cmp	 eax, 5
  0003f	7c e7		 jl	 SHORT $LL12@GetIndex

; 95   : 		{
; 96   : 			return n;
; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return -1;

  00041	83 c8 ff	 or	 eax, -1
$LN14@GetIndex:
  00044	5b		 pop	 ebx
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 101  : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?GetIndex@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::GetIndex
_TEXT	ENDS
PUBLIC	?SetLevel@PartyClass@@QAEHHH@Z			; PartyClass::SetLevel
; Function compile flags: /Ogtp
;	COMDAT ?SetLevel@PartyClass@@QAEHHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_level$ = 12						; size = 4
?SetLevel@PartyClass@@QAEHHH@Z PROC			; PartyClass::SetLevel, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  : 	if ( this->m_PartyS[party_number].m_MaxLevel  < level )

  00003	8b 45 08	 mov	 eax, DWORD PTR _party_number$[ebp]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	c1 e0 04	 shl	 eax, 4
  0000c	0f bf 54 08 34	 movsx	 edx, WORD PTR [eax+ecx+52]
  00011	03 c1		 add	 eax, ecx
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  00016	3b d1		 cmp	 edx, ecx
  00018	7d 04		 jge	 SHORT $LN3@SetLevel

; 157  : 	{
; 158  : 		this->m_PartyS[party_number].m_MaxLevel  = level;

  0001a	66 89 48 34	 mov	 WORD PTR [eax+52], cx
$LN3@SetLevel:

; 159  : 	}
; 160  : 
; 161  : 	if ( this->m_PartyS[party_number].m_MinLevel  == 0 )

  0001e	66 83 78 36 00	 cmp	 WORD PTR [eax+54], 0
  00023	75 04		 jne	 SHORT $LN2@SetLevel

; 162  : 	{
; 163  : 		this->m_PartyS[party_number].m_MinLevel = level;

  00025	66 89 48 36	 mov	 WORD PTR [eax+54], cx
$LN2@SetLevel:

; 164  : 	}
; 165  : 
; 166  : 	if ( this->m_PartyS[party_number].m_MinLevel > level )	// In Case of Error

  00029	0f bf 50 36	 movsx	 edx, WORD PTR [eax+54]
  0002d	3b d1		 cmp	 edx, ecx
  0002f	7e 04		 jle	 SHORT $LN6@SetLevel

; 167  : 	{
; 168  : 		this->m_PartyS[party_number].m_MinLevel = level;

  00031	66 89 48 36	 mov	 WORD PTR [eax+54], cx
$LN6@SetLevel:

; 169  : 	}
; 170  : 
; 171  : 	return TRUE;

  00035	b8 01 00 00 00	 mov	 eax, 1

; 172  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?SetLevel@PartyClass@@QAEHHH@Z ENDP			; PartyClass::SetLevel
_TEXT	ENDS
PUBLIC	?GetLevel@PartyClass@@QAEHHAAH0@Z		; PartyClass::GetLevel
; Function compile flags: /Ogtp
;	COMDAT ?GetLevel@PartyClass@@QAEHHAAH0@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
_minlevel$ = 16						; size = 4
?GetLevel@PartyClass@@QAEHHAAH0@Z PROC			; PartyClass::GetLevel, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 177  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 05		 jne	 SHORT $LN1@GetLevel
  00011	5e		 pop	 esi

; 186  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN1@GetLevel:

; 178  : 	{
; 179  : 		return FALSE;
; 180  : 	}
; 181  : 
; 182  : 	maxlevel = this->m_PartyS[party_number].m_MaxLevel;

  00016	8b 55 0c	 mov	 edx, DWORD PTR _maxlevel$[ebp]
  00019	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0001c	c1 e0 04	 shl	 eax, 4
  0001f	03 c1		 add	 eax, ecx
  00021	0f bf 48 34	 movsx	 ecx, WORD PTR [eax+52]
  00025	89 0a		 mov	 DWORD PTR [edx], ecx

; 183  : 	minlevel = this->m_PartyS[party_number].m_MinLevel;

  00027	0f bf 40 36	 movsx	 eax, WORD PTR [eax+54]
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _minlevel$[ebp]
  0002e	89 01		 mov	 DWORD PTR [ecx], eax

; 184  : 
; 185  : 	return TRUE;

  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	5e		 pop	 esi

; 186  : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
?GetLevel@PartyClass@@QAEHHAAH0@Z ENDP			; PartyClass::GetLevel
_TEXT	ENDS
PUBLIC	?Destroy@PartyClass@@QAEHH@Z			; PartyClass::Destroy
; Function compile flags: /Ogtp
;	COMDAT ?Destroy@PartyClass@@QAEHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?Destroy@PartyClass@@QAEHH@Z PROC			; PartyClass::Destroy, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 191  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax

; 192  : 	{
; 193  : 		return FALSE;

  0000f	74 1b		 je	 SHORT $LN4@Destroy

; 194  : 	}
; 195  : 
; 196  : 	this->m_PartyS[party_number].Count = 0;

  00011	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00014	03 c0		 add	 eax, eax

; 197  : 	this->m_PartyS[party_number].Number[0] = -1;

  00016	83 ca ff	 or	 edx, -1
  00019	c7 44 c1 08 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+8], 0
  00021	89 54 c1 0c	 mov	 DWORD PTR [ecx+eax*8+12], edx

; 198  : 	this->m_PartyS[party_number].DbNumber[0] = -1;

  00025	89 54 c1 20	 mov	 DWORD PTR [ecx+eax*8+32], edx

; 199  : 	this->m_PartyCount--;

  00029	01 51 04	 add	 DWORD PTR [ecx+4], edx
$LN4@Destroy:

; 200  : 
; 201  : 	return FALSE;

  0002c	33 c0		 xor	 eax, eax
  0002e	5e		 pop	 esi

; 202  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?Destroy@PartyClass@@QAEHH@Z ENDP			; PartyClass::Destroy
_TEXT	ENDS
PUBLIC	?Add@PartyClass@@QAEHHHHH@Z			; PartyClass::Add
; Function compile flags: /Ogtp
;	COMDAT ?Add@PartyClass@@QAEHHHHH@Z
_TEXT	SEGMENT
tv194 = -4						; size = 4
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
_level$ = 20						; size = 4
?Add@PartyClass@@QAEHHHHH@Z PROC			; PartyClass::Add, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 207  : 	if ( this->IsParty(party_number ) == FALSE )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _party_number$[ebp]
  00008	53		 push	 ebx
  00009	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000e	85 c0		 test	 eax, eax
  00010	75 0a		 jne	 SHORT $LN10@Add
$LN23@Add:

; 208  : 	{
; 209  : 		return -1;

  00012	83 c8 ff	 or	 eax, -1
  00015	5b		 pop	 ebx

; 238  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
$LN10@Add:

; 210  : 	}
; 211  : 
; 212  : 	if ( this->m_PartyS[party_number].Count >= OBJMAX )	// Useless

  0001c	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  0001f	c1 e0 04	 shl	 eax, 4
  00022	03 c1		 add	 eax, ecx
  00024	81 78 08 e8 1c
	00 00		 cmp	 DWORD PTR [eax+8], 7400	; 00001ce8H
  0002b	89 45 fc	 mov	 DWORD PTR tv194[ebp], eax

; 213  : 	{
; 214  : 		return -1;

  0002e	7d e2		 jge	 SHORT $LN23@Add

; 215  : 	}
; 216  : 
; 217  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++)

  00030	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00033	03 d2		 add	 edx, edx
  00035	57		 push	 edi
  00036	33 c0		 xor	 eax, eax
  00038	03 d2		 add	 edx, edx
  0003a	8d 7c 91 0c	 lea	 edi, DWORD PTR [ecx+edx*4+12]
  0003e	56		 push	 esi
  0003f	90		 npad	 1
$LL8@Add:

; 218  : 	{
; 219  : 		if ( (this->m_PartyS[party_number].Number[i] >= 0) && (this->m_PartyS[party_number].Number[i] == usernumber) && (this->m_PartyS[party_number].DbNumber[i] == dbnumber) )

  00040	8b 37		 mov	 esi, DWORD PTR [edi]
  00042	85 f6		 test	 esi, esi
  00044	78 14		 js	 SHORT $LN7@Add
  00046	3b 75 0c	 cmp	 esi, DWORD PTR _usernumber$[ebp]
  00049	75 0c		 jne	 SHORT $LN20@Add
  0004b	8b 5d 10	 mov	 ebx, DWORD PTR _dbnumber$[ebp]
  0004e	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  00051	39 5c b1 20	 cmp	 DWORD PTR [ecx+esi*4+32], ebx
  00055	74 33		 je	 SHORT $LN15@Add
$LN20@Add:
  00057	8b 5d 08	 mov	 ebx, DWORD PTR _party_number$[ebp]
$LN7@Add:

; 215  : 	}
; 216  : 
; 217  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++)

  0005a	40		 inc	 eax
  0005b	83 c7 04	 add	 edi, 4
  0005e	83 f8 05	 cmp	 eax, 5
  00061	7c dd		 jl	 SHORT $LL8@Add

; 222  : 		}
; 223  : 	}
; 224  : 
; 225  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00063	8b 7d fc	 mov	 edi, DWORD PTR tv194[ebp]
  00066	33 f6		 xor	 esi, esi
  00068	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  0006b	eb 03 8d 49 00	 npad	 5
$LL4@Add:

; 226  : 	{
; 227  : 		if ( this->m_PartyS[party_number].Number[i] == -1 )

  00070	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00073	74 23		 je	 SHORT $LN16@Add

; 222  : 		}
; 223  : 	}
; 224  : 
; 225  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00075	46		 inc	 esi
  00076	83 c0 04	 add	 eax, 4
  00079	83 fe 05	 cmp	 esi, 5
  0007c	7c f2		 jl	 SHORT $LL4@Add

; 234  : 		}
; 235  : 	}
; 236  : 
; 237  : 	return -1;

  0007e	5e		 pop	 esi
  0007f	5f		 pop	 edi
  00080	83 c8 ff	 or	 eax, -1
  00083	5b		 pop	 ebx

; 238  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 10 00	 ret	 16			; 00000010H
$LN15@Add:
  0008a	5e		 pop	 esi
  0008b	5f		 pop	 edi

; 220  : 		{
; 221  : 			return -2;

  0008c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00091	5b		 pop	 ebx

; 238  : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 10 00	 ret	 16			; 00000010H
$LN16@Add:

; 228  : 		{
; 229  : 			this->m_PartyS[party_number].Number[i] = usernumber;

  00098	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  0009b	8b 55 0c	 mov	 edx, DWORD PTR _usernumber$[ebp]
  0009e	89 54 81 0c	 mov	 DWORD PTR [ecx+eax*4+12], edx

; 230  : 			this->m_PartyS[party_number].DbNumber[i] = dbnumber;

  000a2	8b 55 10	 mov	 edx, DWORD PTR _dbnumber$[ebp]
  000a5	89 54 81 20	 mov	 DWORD PTR [ecx+eax*4+32], edx

; 231  : 			this->m_PartyS[party_number].Count++;
; 232  : 			this->SetLevel(party_number, level);

  000a9	8b 45 14	 mov	 eax, DWORD PTR _level$[ebp]
  000ac	ff 47 08	 inc	 DWORD PTR [edi+8]
  000af	50		 push	 eax
  000b0	53		 push	 ebx
  000b1	e8 00 00 00 00	 call	 ?SetLevel@PartyClass@@QAEHHH@Z ; PartyClass::SetLevel

; 233  : 			return i;

  000b6	8b c6		 mov	 eax, esi
  000b8	5e		 pop	 esi
  000b9	5f		 pop	 edi
  000ba	5b		 pop	 ebx

; 238  : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 10 00	 ret	 16			; 00000010H
?Add@PartyClass@@QAEHHHHH@Z ENDP			; PartyClass::Add
_TEXT	ENDS
PUBLIC	?Delete@PartyClass@@QAEHHHH@Z			; PartyClass::Delete
; Function compile flags: /Ogtp
;	COMDAT ?Delete@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_usernumber$ = 12					; size = 4
_dbnumber$ = 16						; size = 4
?Delete@PartyClass@@QAEHHHH@Z PROC			; PartyClass::Delete, COMDAT
; _this$ = ecx

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 242  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 08		 jne	 SHORT $LN5@Delete

; 243  : 	{
; 244  : 		return -1;

  00011	83 c8 ff	 or	 eax, -1
  00014	5e		 pop	 esi

; 259  : }

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Delete:

; 245  : 	}
; 246  : 
; 247  : 	for (int i = 0 ; i<MAX_USER_IN_PARTY ; i++ )

  00019	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  0001c	03 d2		 add	 edx, edx
  0001e	57		 push	 edi
  0001f	8b 7d 10	 mov	 edi, DWORD PTR _dbnumber$[ebp]
  00022	33 c0		 xor	 eax, eax
  00024	03 d2		 add	 edx, edx
  00026	8d 74 91 0c	 lea	 esi, DWORD PTR [ecx+edx*4+12]
  0002a	53		 push	 ebx
  0002b	eb 03 8d 49 00	 npad	 5
$LL4@Delete:

; 248  : 	{
; 249  : 		if ( (this->m_PartyS[party_number].Number[i] == usernumber) && (this->m_PartyS[party_number].DbNumber[i] == dbnumber) )

  00030	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00032	3b 5d 0c	 cmp	 ebx, DWORD PTR _usernumber$[ebp]
  00035	75 09		 jne	 SHORT $LN3@Delete
  00037	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  0003a	39 7c 99 20	 cmp	 DWORD PTR [ecx+ebx*4+32], edi
  0003e	74 13		 je	 SHORT $LN9@Delete
$LN3@Delete:

; 245  : 	}
; 246  : 
; 247  : 	for (int i = 0 ; i<MAX_USER_IN_PARTY ; i++ )

  00040	40		 inc	 eax
  00041	83 c6 04	 add	 esi, 4
  00044	83 f8 05	 cmp	 eax, 5
  00047	7c e7		 jl	 SHORT $LL4@Delete

; 254  : 			return i;
; 255  : 		}
; 256  : 	}
; 257  : 
; 258  : 	return -1;

  00049	5b		 pop	 ebx
  0004a	5f		 pop	 edi
  0004b	83 c8 ff	 or	 eax, -1
  0004e	5e		 pop	 esi

; 259  : }

  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
$LN9@Delete:

; 250  : 		{
; 251  : 			this->m_PartyS[party_number].Number[i] = -1;

  00053	03 d0		 add	 edx, eax
  00055	83 ce ff	 or	 esi, -1
  00058	89 74 91 0c	 mov	 DWORD PTR [ecx+edx*4+12], esi

; 252  : 			this->m_PartyS[party_number].DbNumber[i] = -1;

  0005c	89 74 91 20	 mov	 DWORD PTR [ecx+edx*4+32], esi

; 253  : 			this->m_PartyS[party_number].Count--;

  00060	8b 55 08	 mov	 edx, DWORD PTR _party_number$[ebp]
  00063	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  00066	03 d2		 add	 edx, edx
  00068	01 74 d1 08	 add	 DWORD PTR [ecx+edx*8+8], esi
  0006c	5b		 pop	 ebx
  0006d	8d 4c d1 08	 lea	 ecx, DWORD PTR [ecx+edx*8+8]
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi

; 259  : }

  00073	5d		 pop	 ebp
  00074	c2 0c 00	 ret	 12			; 0000000cH
?Delete@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::Delete
_TEXT	ENDS
PUBLIC	?Delete@PartyClass@@QAEXHH@Z			; PartyClass::Delete
; Function compile flags: /Ogtp
;	COMDAT ?Delete@PartyClass@@QAEXHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
_index$ = 12						; size = 4
?Delete@PartyClass@@QAEXHH@Z PROC			; PartyClass::Delete, COMDAT
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 264  : 	if ( this->IsParty(party_number) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	74 2d		 je	 SHORT $LN2@Delete@2

; 265  : 	{
; 266  : 		return;
; 267  : 	}
; 268  : 
; 269  : 	if ( index < 0 || index > MAX_USER_IN_PARTY -1 )

  00011	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00014	83 f8 04	 cmp	 eax, 4
  00017	77 25		 ja	 SHORT $LN2@Delete@2

; 270  : 	{
; 271  : 		return;
; 272  : 	}
; 273  : 
; 274  : 	if ( this->m_PartyS[party_number].Number[index] >= 0 )

  00019	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  0001c	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  0001f	83 7c 81 0c 00	 cmp	 DWORD PTR [ecx+eax*4+12], 0
  00024	7c 18		 jl	 SHORT $LN2@Delete@2

; 275  : 	{
; 276  : 		this->m_PartyS[party_number].Number[index] = -1;

  00026	83 ca ff	 or	 edx, -1
  00029	89 54 81 0c	 mov	 DWORD PTR [ecx+eax*4+12], edx

; 277  : 		this->m_PartyS[party_number].DbNumber[index] = -1;

  0002d	89 54 81 20	 mov	 DWORD PTR [ecx+eax*4+32], edx

; 278  : 		this->m_PartyS[party_number].Count--;

  00031	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00034	03 c0		 add	 eax, eax
  00036	01 54 c1 08	 add	 DWORD PTR [ecx+eax*8+8], edx
  0003a	8d 44 c1 08	 lea	 eax, DWORD PTR [ecx+eax*8+8]
$LN2@Delete@2:
  0003e	5e		 pop	 esi

; 279  : 	}
; 280  : }

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?Delete@PartyClass@@QAEXHH@Z ENDP			; PartyClass::Delete
_TEXT	ENDS
PUBLIC	?GetPartyCount@PartyClass@@QAEHH@Z		; PartyClass::GetPartyCount
; Function compile flags: /Ogtp
;	COMDAT ?GetPartyCount@PartyClass@@QAEHH@Z
_TEXT	SEGMENT
_party_number$ = 8					; size = 4
?GetPartyCount@PartyClass@@QAEHH@Z PROC			; PartyClass::GetPartyCount, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 285  : 	if ( this->IsParty( party_number ) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  0000d	85 c0		 test	 eax, eax
  0000f	75 08		 jne	 SHORT $LN1@GetPartyCo

; 286  : 	{
; 287  : 		return -1;

  00011	83 c8 ff	 or	 eax, -1
  00014	5e		 pop	 esi

; 291  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN1@GetPartyCo:

; 288  : 	}
; 289  : 
; 290  : 	return this->m_PartyS[party_number].Count;

  00019	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0001c	03 c0		 add	 eax, eax
  0001e	8b 44 c1 08	 mov	 eax, DWORD PTR [ecx+eax*8+8]
  00022	5e		 pop	 esi

; 291  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?GetPartyCount@PartyClass@@QAEHH@Z ENDP			; PartyClass::GetPartyCount
_TEXT	ENDS
PUBLIC	??_C@_03EDAPGMLK@?$FN?0?5?$AA@			; `string'
PUBLIC	??_C@_02DNJFBPJB@?$FN?$FL?$AA@			; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	??_C@_0BC@JDIKBIFA@PartyMember?$CI?$CFd?$CJ?5?3?$AA@ ; `string'
PUBLIC	?Paint@PartyClass@@QAEXH@Z			; PartyClass::Paint
EXTRN	?LogAdd@@YAXW4eLogColor@@PADZZ:PROC		; LogAdd
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:BYTE			; gObj
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	__imp__wsprintfA:PROC
;	COMDAT ??_C@_03EDAPGMLK@?$FN?0?5?$AA@
CONST	SEGMENT
??_C@_03EDAPGMLK@?$FN?0?5?$AA@ DB '], ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
CONST	SEGMENT
??_C@_02DNJFBPJB@?$FN?$FL?$AA@ DB '][', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JDIKBIFA@PartyMember?$CI?$CFd?$CJ?5?3?$AA@
CONST	SEGMENT
??_C@_0BC@JDIKBIFA@PartyMember?$CI?$CFd?$CJ?5?3?$AA@ DB 'PartyMember(%d) '
	DB	':', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?Paint@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
tv200 = -20						; size = 4
_this$ = -16						; size = 4
tv256 = -12						; size = 4
_i$153561 = -8						; size = 4
tv253 = -4						; size = 4
tv198 = 8						; size = 4
_party_number$ = 8					; size = 4
?Paint@PartyClass@@QAEXH@Z PROC				; PartyClass::Paint, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 296  : 	if (this->IsParty(party_number) == FALSE )

  00007	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	56		 push	 esi
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00016	85 c0		 test	 eax, eax
  00018	0f 84 4a 01 00
	00		 je	 $LN7@Paint

; 297  : 	{
; 298  : 		return;
; 299  : 	}
; 300  : 
; 301  : 	int usern = 0;
; 302  : 	wsprintf( this->m_szTempPaint, "PartyMember(%d) :", this->m_PartyS[party_number].Count);

  0001e	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00021	03 c9		 add	 ecx, ecx
  00023	8b 54 cf 08	 mov	 edx, DWORD PTR [edi+ecx*8+8]
  00027	53		 push	 ebx
  00028	52		 push	 edx
  00029	8d 87 88 6b 05
	00		 lea	 eax, DWORD PTR [edi+355208]
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JDIKBIFA@PartyMember?$CI?$CFd?$CJ?5?3?$AA@
  00034	50		 push	 eax
  00035	89 45 08	 mov	 DWORD PTR tv198[ebp], eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 303  : 
; 304  : 	for (int i = 0; i< MAX_USER_IN_PARTY ; i++ )

  0003e	8d 34 76	 lea	 esi, DWORD PTR [esi+esi*2]
  00041	33 db		 xor	 ebx, ebx
  00043	03 f6		 add	 esi, esi
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	03 f6		 add	 esi, esi
  0004a	8d 44 b7 0c	 lea	 eax, DWORD PTR [edi+esi*4+12]
  0004e	89 5d f8	 mov	 DWORD PTR _i$153561[ebp], ebx
  00051	89 75 ec	 mov	 DWORD PTR tv200[ebp], esi
  00054	89 45 fc	 mov	 DWORD PTR tv253[ebp], eax
$LL19@Paint:

; 305  : 	{
; 306  : 		if ( (this->m_PartyS[party_number].Number[i] != 0 ) && (this->m_PartyS[party_number].DbNumber[i] != 0 ) )

  00057	8b 4d fc	 mov	 ecx, DWORD PTR tv253[ebp]
  0005a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005c	89 45 f4	 mov	 DWORD PTR tv256[ebp], eax
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 e1 00 00
	00		 je	 $LN4@Paint
  00067	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  0006a	83 7c 97 20 00	 cmp	 DWORD PTR [edi+edx*4+32], 0
  0006f	0f 84 d3 00 00
	00		 je	 $LN4@Paint

; 307  : 		{
; 308  : 			usern = this->m_PartyS[party_number].Number[i];
; 309  : 
; 310  : 			if ( !gObjIsConnected(usern) )

  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0007b	83 c4 04	 add	 esp, 4
  0007e	85 c0		 test	 eax, eax
  00080	0f 84 c2 00 00
	00		 je	 $LN4@Paint

; 311  : 				continue;
; 312  : 
; 313  : 			strcat(this->m_szTempPaint, "[");

  00086	8b 7d 08	 mov	 edi, DWORD PTR tv198[ebp]
  00089	4f		 dec	 edi
  0008a	8d 9b 00 00 00
	00		 npad	 6
$LL11@Paint:
  00090	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00093	47		 inc	 edi
  00094	84 c0		 test	 al, al
  00096	75 f8		 jne	 SHORT $LL11@Paint

; 314  : 			strcat(this->m_szTempPaint, gObj[usern].AccountID);

  00098	8b 5d f4	 mov	 ebx, DWORD PTR tv256[ebp]
  0009b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
  000a1	69 db 64 15 00
	00		 imul	 ebx, 5476		; 00001564H
  000a7	66 89 07	 mov	 WORD PTR [edi], ax
  000aa	8d 83 64 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[ebx+100]
  000b0	8b c8		 mov	 ecx, eax
$LL12@Paint:
  000b2	8a 10		 mov	 dl, BYTE PTR [eax]
  000b4	40		 inc	 eax
  000b5	84 d2		 test	 dl, dl
  000b7	75 f9		 jne	 SHORT $LL12@Paint
  000b9	8b 55 08	 mov	 edx, DWORD PTR tv198[ebp]
  000bc	2b c1		 sub	 eax, ecx
  000be	8b f1		 mov	 esi, ecx
  000c0	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
$LL13@Paint:
  000c3	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000c6	47		 inc	 edi
  000c7	84 c9		 test	 cl, cl
  000c9	75 f8		 jne	 SHORT $LL13@Paint
  000cb	8b c8		 mov	 ecx, eax
  000cd	c1 e9 02	 shr	 ecx, 2
  000d0	f3 a5		 rep movsd
  000d2	8b c8		 mov	 ecx, eax
  000d4	83 e1 03	 and	 ecx, 3
  000d7	f3 a4		 rep movsb

; 315  : 			strcat(this->m_szTempPaint, "][");

  000d9	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  000dc	8d 64 24 00	 npad	 4
$LL14@Paint:
  000e0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000e3	40		 inc	 eax
  000e4	84 c9		 test	 cl, cl
  000e6	75 f8		 jne	 SHORT $LL14@Paint
  000e8	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@
  000ef	66 89 08	 mov	 WORD PTR [eax], cx
  000f2	8a 15 02 00 00
	00		 mov	 dl, BYTE PTR ??_C@_02DNJFBPJB@?$FN?$FL?$AA@+2
  000f8	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 316  : 			strcat(this->m_szTempPaint, gObj[usern].Name);

  000fb	8d 83 6f 00 00
	00		 lea	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[ebx+111]
  00101	8b c8		 mov	 ecx, eax
$LL15@Paint:
  00103	8a 10		 mov	 dl, BYTE PTR [eax]
  00105	40		 inc	 eax
  00106	84 d2		 test	 dl, dl
  00108	75 f9		 jne	 SHORT $LL15@Paint
  0010a	8b 55 08	 mov	 edx, DWORD PTR tv198[ebp]
  0010d	2b c1		 sub	 eax, ecx
  0010f	8b f1		 mov	 esi, ecx
  00111	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
$LL16@Paint:
  00114	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  00117	47		 inc	 edi
  00118	84 c9		 test	 cl, cl
  0011a	75 f8		 jne	 SHORT $LL16@Paint
  0011c	8b c8		 mov	 ecx, eax
  0011e	c1 e9 02	 shr	 ecx, 2
  00121	f3 a5		 rep movsd
  00123	8b c8		 mov	 ecx, eax
  00125	83 e1 03	 and	 ecx, 3
  00128	f3 a4		 rep movsb

; 317  : 			strcat(this->m_szTempPaint, "], ");

  0012a	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
  0012d	8d 49 00	 npad	 3
$LL17@Paint:
  00130	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00133	47		 inc	 edi
  00134	84 c0		 test	 al, al
  00136	75 f8		 jne	 SHORT $LL17@Paint
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03EDAPGMLK@?$FN?0?5?$AA@
  0013d	8b 5d f8	 mov	 ebx, DWORD PTR _i$153561[ebp]
  00140	8b 75 ec	 mov	 esi, DWORD PTR tv200[ebp]
  00143	89 07		 mov	 DWORD PTR [edi], eax
  00145	8b 7d f0	 mov	 edi, DWORD PTR _this$[ebp]
$LN4@Paint:

; 303  : 
; 304  : 	for (int i = 0; i< MAX_USER_IN_PARTY ; i++ )

  00148	83 45 fc 04	 add	 DWORD PTR tv253[ebp], 4
  0014c	43		 inc	 ebx
  0014d	89 5d f8	 mov	 DWORD PTR _i$153561[ebp], ebx
  00150	83 fb 05	 cmp	 ebx, 5
  00153	0f 8c fe fe ff
	ff		 jl	 $LL19@Paint

; 318  : 		}
; 319  : 	}
; 320  : 
; 321  : 	LogAdd(LOG_BLACK, this->m_szTempPaint);

  00159	8b 4d 08	 mov	 ecx, DWORD PTR tv198[ebp]
  0015c	51		 push	 ecx
  0015d	6a 00		 push	 0
  0015f	e8 00 00 00 00	 call	 ?LogAdd@@YAXW4eLogColor@@PADZZ ; LogAdd
  00164	83 c4 08	 add	 esp, 8
  00167	5b		 pop	 ebx
$LN7@Paint:
  00168	5f		 pop	 edi
  00169	5e		 pop	 esi

; 322  : }

  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 04 00	 ret	 4
?Paint@PartyClass@@QAEXH@Z ENDP				; PartyClass::Paint
_TEXT	ENDS
PUBLIC	__real@4024000000000000
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?PartyMemberLifeSend@PartyClass@@QAEXH@Z	; PartyClass::PartyMemberLifeSend
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?PartyMemberLifeSend@PartyClass@@QAEXH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -544					; size = 4
tv258 = -540						; size = 4
tv396 = -536						; size = 4
tv394 = -536						; size = 4
_pCount$ = -532						; size = 4
tv385 = -528						; size = 4
tv399 = -526						; size = 2
_lOfs$ = -524						; size = 4
tv382 = -520						; size = 4
_sendbuf$ = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_party_number$ = 8					; size = 4
?PartyMemberLifeSend@PartyClass@@QAEXH@Z PROC		; PartyClass::PartyMemberLifeSend, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 02 00
	00		 sub	 esp, 544		; 00000220H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _party_number$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 337  : 	if ( this->IsParty(party_number) == FALSE )

  0001a	56		 push	 esi

; 351  : 	lOfs += sizeof(pCount);
; 352  : 	
; 353  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  0001b	89 bd e0 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00021	e8 00 00 00 00	 call	 ?IsParty@PartyClass@@QAEHH@Z ; PartyClass::IsParty
  00026	85 c0		 test	 eax, eax
  00028	0f 84 79 01 00
	00		 je	 $LN2@PartyMembe

; 338  : 	{
; 339  : 		return;
; 340  : 	}
; 341  : 
; 342  : 	PMSG_DEFAULT_COUNT pCount;
; 343  : 	PMSG_PARTYLIFEALL pList;
; 344  : 	int usern;
; 345  : 	char sendbuf[512];
; 346  : 	int lOfs = 0;
; 347  : 	int tlife = 0;
; 348  : 
; 349  : 	PHeadSetB((LPBYTE)&pCount, 0x44, sizeof(pCount));

  0002e	53		 push	 ebx
  0002f	6a 04		 push	 4
  00031	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _pCount$[ebp]
  00037	6a 44		 push	 68			; 00000044H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003f	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$[ebp]

; 350  : 	pCount.Count = this->m_PartyS[party_number].Count;

  00045	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00048	c1 e1 04	 shl	 ecx, 4
  0004b	8a 54 0f 08	 mov	 dl, BYTE PTR [edi+ecx+8]
  0004f	03 f9		 add	 edi, ecx
  00051	89 bd e4 fd ff
	ff		 mov	 DWORD PTR tv258[ebp], edi

; 351  : 	lOfs += sizeof(pCount);
; 352  : 	
; 353  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  00057	8d 3c 76	 lea	 edi, DWORD PTR [esi+esi*2]
  0005a	03 ff		 add	 edi, edi
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	33 db		 xor	 ebx, ebx
  00061	03 ff		 add	 edi, edi
  00063	8d 4c b8 0c	 lea	 ecx, DWORD PTR [eax+edi*4+12]
  00067	88 95 ef fd ff
	ff		 mov	 BYTE PTR _pCount$[ebp+3], dl
  0006d	c7 85 f4 fd ff
	ff 04 00 00 00	 mov	 DWORD PTR _lOfs$[ebp], 4
  00077	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv382[ebp], ecx
  0007d	8d 49 00	 npad	 3
$LL19@PartyMembe:

; 354  : 	{
; 355  : 		if ( (this->m_PartyS[party_number].Number[i] >= 0 ) && (this->m_PartyS[party_number].DbNumber[i] >= 0) )

  00080	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR tv382[ebp]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	89 85 f0 fd ff
	ff		 mov	 DWORD PTR tv385[ebp], eax
  0008e	85 c0		 test	 eax, eax
  00090	0f 88 b6 00 00
	00		 js	 $LN9@PartyMembe
  00096	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _this$GSCopy$[ebp]
  0009c	8d 0c 1f	 lea	 ecx, DWORD PTR [edi+ebx]
  0009f	83 7c 8a 20 00	 cmp	 DWORD PTR [edx+ecx*4+32], 0
  000a4	8d 74 8a 20	 lea	 esi, DWORD PTR [edx+ecx*4+32]
  000a8	0f 8c 9e 00 00
	00		 jl	 $LN9@PartyMembe

; 356  : 		{
; 357  : 			usern = this->m_PartyS[party_number].Number[i];
; 358  : 
; 359  : 			if ( gObjIsConnected(usern) != PLAYER_EMPTY )

  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  000b4	83 c4 04	 add	 esp, 4
  000b7	85 c0		 test	 eax, eax
  000b9	74 76		 je	 SHORT $LN6@PartyMembe

; 360  : 			{
; 361  : 				pList.Number = (i * 16) & 0xF0 ;
; 362  : 				tlife = ( (BYTE)(  gObj[usern].Life / ((gObj[usern].MaxLife + gObj[usern].AddLife )/10.0f)     )  ) & 0x0F;

  000bb	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR tv385[ebp]

; 363  : 				pList.Number |= tlife;
; 364  : 				memcpy(&sendbuf[lOfs], &pList, 1);

  000c1	d9 bd f2 fd ff
	ff		 fnstcw	 WORD PTR tv399[ebp]
  000c7	69 c0 64 15 00
	00		 imul	 eax, 5476		; 00001564H
  000cd	8a d3		 mov	 dl, bl
  000cf	c0 e2 04	 shl	 dl, 4
  000d2	d9 80 bc 00 00
	00		 fld	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+188]
  000d8	db 80 0c 01 00
	00		 fild	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+268]
  000de	d8 80 c0 00 00
	00		 fadd	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A[eax+192]
  000e4	0f b7 85 f2 fd
	ff ff		 movzx	 eax, WORD PTR tv399[ebp]
  000eb	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  000f0	89 85 e8 fd ff
	ff		 mov	 DWORD PTR tv396[ebp], eax
  000f6	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4024000000000000
  000fc	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _lOfs$[ebp]
  00102	de f9		 fdivp	 ST(1), ST(0)
  00104	d9 ad e8 fd ff
	ff		 fldcw	 WORD PTR tv396[ebp]
  0010a	db 9d e8 fd ff
	ff		 fistp	 DWORD PTR tv394[ebp]
  00110	8a 8d e8 fd ff
	ff		 mov	 cl, BYTE PTR tv394[ebp]
  00116	80 e1 0f	 and	 cl, 15			; 0000000fH
  00119	32 ca		 xor	 cl, dl
  0011b	d9 ad f2 fd ff
	ff		 fldcw	 WORD PTR tv399[ebp]
  00121	88 8c 05 fc fd
	ff ff		 mov	 BYTE PTR _sendbuf$[ebp+eax], cl

; 365  : 				lOfs++;

  00128	40		 inc	 eax
  00129	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _lOfs$[ebp], eax

; 366  : 			}
; 367  : 			else

  0012f	eb 1b		 jmp	 SHORT $LN9@PartyMembe
$LN6@PartyMembe:

; 368  : 			{
; 369  : 				this->m_PartyS[party_number].Number[i] = -1;

  00131	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR tv382[ebp]
  00137	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 370  : 				this->m_PartyS[party_number].DbNumber[i] = -1;
; 371  : 				this->m_PartyS[party_number].Count--;

  0013d	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR tv258[ebp]
  00143	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00149	ff 48 08	 dec	 DWORD PTR [eax+8]
$LN9@PartyMembe:

; 351  : 	lOfs += sizeof(pCount);
; 352  : 	
; 353  : 	for (int i = 0; i<MAX_USER_IN_PARTY ; i++ )

  0014c	83 85 f8 fd ff
	ff 04		 add	 DWORD PTR tv382[ebp], 4
  00153	43		 inc	 ebx
  00154	83 fb 05	 cmp	 ebx, 5
  00157	0f 8c 23 ff ff
	ff		 jl	 $LL19@PartyMembe

; 372  : 			}
; 373  : 		}
; 374  : 	}
; 375  : 
; 376  : 	pCount.h.size = lOfs;

  0015d	8a 8d f4 fd ff
	ff		 mov	 cl, BYTE PTR _lOfs$[ebp]
  00163	8b b5 e4 fd ff
	ff		 mov	 esi, DWORD PTR tv258[ebp]
  00169	88 8d ed fd ff
	ff		 mov	 BYTE PTR _pCount$[ebp+1], cl

; 377  : 	memcpy(sendbuf, &pCount, sizeof(pCount));

  0016f	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _pCount$[ebp]
  00175	89 95 fc fd ff
	ff		 mov	 DWORD PTR _sendbuf$[ebp], edx
  0017b	83 c6 0c	 add	 esi, 12			; 0000000cH
  0017e	bf 05 00 00 00	 mov	 edi, 5
  00183	5b		 pop	 ebx
$LL20@PartyMembe:

; 380  : 	{
; 381  : 		usern = this->m_PartyS[party_number].Number[i];

  00184	8b 06		 mov	 eax, DWORD PTR [esi]

; 382  : 
; 383  : 		if ( usern >= 0 )

  00186	85 c0		 test	 eax, eax
  00188	78 17		 js	 SHORT $LN3@PartyMembe

; 384  : 		{
; 385  : 			DataSend(usern, (unsigned char*)sendbuf, lOfs);

  0018a	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR _lOfs$[ebp]
  00190	51		 push	 ecx
  00191	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _sendbuf$[ebp]
  00197	52		 push	 edx
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@PartyMembe:

; 378  : 
; 379  : 	for (int i=0 ; i<MAX_USER_IN_PARTY ; i++ )

  001a1	83 c6 04	 add	 esi, 4
  001a4	4f		 dec	 edi
  001a5	75 dd		 jne	 SHORT $LL20@PartyMembe
$LN2@PartyMembe:

; 386  : 		}
; 387  : 	}
; 388  : }

  001a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001aa	5f		 pop	 edi
  001ab	33 cd		 xor	 ecx, ebp
  001ad	5e		 pop	 esi
  001ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c2 04 00	 ret	 4
?PartyMemberLifeSend@PartyClass@@QAEXH@Z ENDP		; PartyClass::PartyMemberLifeSend
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_GPartyClass@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPartyClass@@UAEPAXI@Z PROC				; PartyClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1PartyClass@@UAE@XZ	; PartyClass::~PartyClass
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GPartyClass@@UAEPAXI@Z ENDP				; PartyClass::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Create@PartyClass@@QAEHHHH@Z			; PartyClass::Create
; Function compile flags: /Ogtp
;	COMDAT ?Create@PartyClass@@QAEHHHH@Z
_TEXT	SEGMENT
_usernumber$ = 8					; size = 4
_dbnumber$ = 12						; size = 4
_level$ = 16						; size = 4
?Create@PartyClass@@QAEHHHH@Z PROC			; PartyClass::Create, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 106  : 	int n = this->m_PartyCount;

  00007	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 107  : 	int loopcount = 0;
; 108  : 
; 109  : 	while ( true )
; 110  : 	{
; 111  : 		if ( this->m_PartyS[n].Count == 0 )

  0000a	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0000d	33 c0		 xor	 eax, eax
  0000f	03 c9		 add	 ecx, ecx
  00011	39 44 ce 08	 cmp	 DWORD PTR [esi+ecx*8+8], eax
  00015	74 23		 je	 SHORT $LN15@Create
$LL9@Create:

; 134  : 		}
; 135  : 
; 136  : 		n++;

  00017	47		 inc	 edi

; 137  : 
; 138  : 		if ( n> OBJMAX-1 )

  00018	81 ff e7 1c 00
	00		 cmp	 edi, 7399		; 00001ce7H
  0001e	7e 02		 jle	 SHORT $LN2@Create

; 139  : 		{
; 140  : 			n=0;

  00020	33 ff		 xor	 edi, edi
$LN2@Create:

; 141  : 		}
; 142  : 
; 143  : 		loopcount++;

  00022	40		 inc	 eax

; 144  : 
; 145  : 		if ( loopcount > OBJMAX-1 )

  00023	3d e7 1c 00 00	 cmp	 eax, 7399		; 00001ce7H
  00028	0f 8f 82 00 00
	00		 jg	 $LN16@Create

; 107  : 	int loopcount = 0;
; 108  : 
; 109  : 	while ( true )
; 110  : 	{
; 111  : 		if ( this->m_PartyS[n].Count == 0 )

  0002e	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  00031	03 d2		 add	 edx, edx
  00033	83 7c d6 08 00	 cmp	 DWORD PTR [esi+edx*8+8], 0
  00038	75 dd		 jne	 SHORT $LL9@Create
$LN15@Create:

; 112  : 		{
; 113  : 			this->m_PartyS[n].Count = 1;
; 114  : 			this->m_PartyS[n].Number[0] = usernumber;
; 115  : 			this->m_PartyS[n].DbNumber[0] = dbnumber;

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _dbnumber$[ebp]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _usernumber$[ebp]
  00040	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00043	c1 e1 04	 shl	 ecx, 4
  00046	89 44 31 20	 mov	 DWORD PTR [ecx+esi+32], eax
  0004a	89 54 31 0c	 mov	 DWORD PTR [ecx+esi+12], edx
  0004e	03 ce		 add	 ecx, esi
  00050	c7 41 08 01 00
	00 00		 mov	 DWORD PTR [ecx+8], 1

; 116  : 
; 117  : 			for (int i=1;i<MAX_USER_IN_PARTY;i++)
; 118  : 			{
; 119  : 				this->m_PartyS[n].DbNumber[i] = -1;

  00057	83 ca ff	 or	 edx, -1
  0005a	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0005d	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [eax*4+1]
  00064	89 54 86 20	 mov	 DWORD PTR [esi+eax*4+32], edx

; 120  : 				this->m_PartyS[n].Number[i] = -1;

  00068	89 54 86 0c	 mov	 DWORD PTR [esi+eax*4+12], edx
  0006c	89 54 86 24	 mov	 DWORD PTR [esi+eax*4+36], edx
  00070	89 54 86 10	 mov	 DWORD PTR [esi+eax*4+16], edx
  00074	89 54 86 28	 mov	 DWORD PTR [esi+eax*4+40], edx
  00078	89 54 86 14	 mov	 DWORD PTR [esi+eax*4+20], edx
  0007c	89 54 86 2c	 mov	 DWORD PTR [esi+eax*4+44], edx
  00080	89 54 86 18	 mov	 DWORD PTR [esi+eax*4+24], edx

; 121  : 			}
; 122  : 
; 123  : 			this->m_PartyCount++;

  00084	ff 46 04	 inc	 DWORD PTR [esi+4]

; 124  : 			this->m_PartyS[n].m_MaxLevel = 0;

  00087	33 d2		 xor	 edx, edx
  00089	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 125  : 			this->m_PartyS[n].m_MinLevel = 0;
; 126  : 			this->SetLevel(n, level);

  0008c	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  0008f	51		 push	 ecx
  00090	57		 push	 edi
  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?SetLevel@PartyClass@@QAEHHH@Z ; PartyClass::SetLevel

; 127  : 
; 128  : 			if ( this->m_PartyCount > OBJMAX-1 )

  00098	81 7e 04 e7 1c
	00 00		 cmp	 DWORD PTR [esi+4], 7399	; 00001ce7H
  0009f	7e 07		 jle	 SHORT $LN3@Create

; 129  : 			{
; 130  : 				this->m_PartyCount=0;

  000a1	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN3@Create:

; 131  : 			}
; 132  : 
; 133  : 			return n;

  000a8	8b c7		 mov	 eax, edi
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi

; 152  : }

  000ac	5d		 pop	 ebp
  000ad	c2 0c 00	 ret	 12			; 0000000cH
$LN16@Create:
  000b0	5f		 pop	 edi

; 146  : 		{
; 147  : 			break;
; 148  : 		}
; 149  : 	}
; 150  : 
; 151  : 	return -1;

  000b1	83 c8 ff	 or	 eax, -1
  000b4	5e		 pop	 esi

; 152  : }

  000b5	5d		 pop	 ebp
  000b6	c2 0c 00	 ret	 12			; 0000000cH
?Create@PartyClass@@QAEHHHH@Z ENDP			; PartyClass::Create
_TEXT	ENDS
END
